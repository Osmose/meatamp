// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };
  Module['load'] = function load(f) {
    globalEval(read(f));
  };
  Module['arguments'] = process['argv'].slice(2);
  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }
  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };
  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  this['Module'] = Module;
  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }
  if (typeof console !== 'undefined') {
    Module['print'] = function print(x) {
      console.log(x);
    };
    Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];
// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + Pointer_stringify(code) + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;
      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }
      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0
}
Module['stringToUTF16'] = stringToUTF16;
// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;
  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;
// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr', 
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0
}
Module['stringToUTF32'] = stringToUTF32;
function demangle(func) {
  try {
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}
function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}
function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited
var runtimeInitialized = false;
function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;
function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;
function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;
function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;
function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i)
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math['imul']) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
var memoryInitializer = null;
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 56288;
/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });
var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,224,61,0,0,152,0,0,0,120,0,0,0,162,0,0,0,66,0,0,0,16,0,0,0,6,0,0,0,4,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,240,61,0,0,152,0,0,0,208,0,0,0,162,0,0,0,66,0,0,0,16,0,0,0,2,0,0,0,10,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var __ZN6Ay_ApuC1Ev;
var __ZN11Blip_BufferC1Ev;
var __ZN11Blip_BufferD1Ev;
var __ZN11Blip_Synth_C1EPsi;
var __ZN13Subset_ReaderC1EP11Data_Readerl;
var __ZN16Remaining_ReaderC1EPKvlP11Data_Reader;
var __ZN15Mem_File_ReaderC1EPKvl;
var __ZN15Std_File_ReaderC1Ev;
var __ZN15Std_File_ReaderD1Ev;
var __ZN14Effects_BufferC1Eb;
var __ZN6Gb_ApuC1Ev;
var __ZN7Hes_ApuC1Ev;
var __ZN13Stereo_BufferC1Ev;
var __ZN7Nes_ApuC1Ev;
var __ZN13Nes_Namco_ApuC1Ev;
var __ZN12Nes_Vrc6_ApuC1Ev;
var __ZN12Sap_Apu_ImplC1Ev;
var __ZN7Sap_ApuC1Ev;
var __ZN7Sms_ApuC1Ev;
var __ZN7Sms_ApuD1Ev;
var __ZN8Snes_SpcC1Ev;
var __ZN7Spc_CpuC1EP8Snes_SpcPh;
var __ZN7Spc_DspC1EPh;
var __ZN10Ym2612_EmuD1Ev;
/* memory initializer */ allocate([48,32,0,0,0,0,0,0,87,114,111,110,103,32,102,105,108,101,32,116,121,112,101,32,102,111,114,32,116,104,105,115,32,101,109,117,108,97,116,111,114,0,0,0,0,0,0,0,240,6,0,0,1,0,0,0,26,0,0,0,28,0,0,0,0,17,0,0,1,0,0,0,240,6,0,0,1,0,0,0,26,0,0,0,28,0,0,0,208,23,0,0,1,0,0,0,48,3,0,0,1,0,0,0,32,0,0,0,30,0,0,0,80,1,0,0,0,0,0,0,96,3,0,0,0,0,0,0,22,0,0,0,36,0,0,0,144,1,0,0,1,0,0,0,224,17,0,0,0,0,0,0,18,0,0,0,12,0,0,0,248,9,0,0,1,0,0,0,104,10,0,0,0,0,0,0,40,0,0,0,34,0,0,0,8,26,0,0,1,0,0,0,0,4,0,0,0,1,0,0,38,0,0,0,4,0,0,0,32,2,0,0,3,0,0,0,64,7,0,0,0,1,0,0,10,0,0,0,16,0,0,0,184,5,0,0,1,0,0,0,32,4,0,0,1,0,0,0,20,0,0,0,24,0,0,0,72,2,0,0,0,0,0,0,32,12,0,0,0,0,0,0,6,0,0,0,2,0,0,0,160,9,0,0,1,0,0,0,16,12,0,0,0,0,0,0,8,0,0,0,14,0,0,0,152,9,0,0,1,0,0,0,86,71,77,0,0,0,0,0,80,67,77,0,0,0,0,0,83,80,67,0,0,0,0,0,111,117,116,32,61,61,32,115,107,105,112,95,115,101,110,116,105,110,101,108,32,124,124,32,115,97,109,112,108,101,95,98,117,102,32,45,32,111,117,116,32,61,61,32,99,111,117,110,116,0,0,0,0,0,0,0,83,65,80,0,0,0,0,0,87,97,118,101,32,49,0,0,40,117,110,115,105,103,110,101,100,41,32,111,115,99,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,99,111,117,110,116,32,60,61,32,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,77,117,115,105,99,95,69,109,117,46,99,112,112,0,0,0,0,116,111,116,97,108,95,115,97,109,112,108,101,115,32,37,32,50,32,61,61,32,48,0,0,75,83,83,0,0,0,0,0,68,65,84,65,0,0,0,0,77,105,115,115,105,110,103,32,102,105,108,101,32,100,97,116,97,0,0,0,0,0,0,0,71,89,77,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,47,117,110,115,117,112,112,111,114,116,101,100,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,104,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,104,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,70,105,114,95,82,101,115,97,109,112,108,101,114,46,104,0,0,83,80,67,0,0,0,0,0,70,77,32,54,0,0,0,0,83,117,112,101,114,32,78,105,110,116,101,110,100,111,0,0,110,101,120,116,95,100,115,112,32,61,61,32,99,108,111,99,107,115,95,112,101,114,95,115,97,109,112,108,101,0,0,0,65,116,97,114,105,32,88,76,0,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,86,114,99,54,95,65,112,117,46,104,0,0,0,110,101,119,95,99,111,117,110,116,32,60,32,114,101,115,97,109,112,108,101,114,95,115,105,122,101,0,0,0,0,0,0,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,32,60,61,32,40,108,111,110,103,41,32,98,117,102,102,101,114,95,115,105,122,101,95,0,0,33,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,77,83,88,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,83,101,103,97,32,71,101,110,101,115,105,115,0,0,0,0,66,97,100,32,100,97,116,97,32,98,108,111,99,107,32,115,105,122,101,0,0,0,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,73,110,118,97,108,105,100,32,108,111,97,100,47,105,110,105,116,47,112,108,97,121,32,97,100,100,114,101,115,115,0,0,40,98,108,105,112,95,108,111,110,103,41,32,40,116,105,109,101,32,62,62,32,66,76,73,80,95,66,85,70,70,69,82,95,65,67,67,85,82,65,67,89,41,32,60,32,98,108,105,112,95,98,117,102,45,62,98,117,102,102,101,114,95,115,105,122,101,95,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,119,114,105,116,101,95,112,111,115,32,60,61,32,98,117,102,46,101,110,100,40,41,0,0,83,65,80,0,0,0,0,0,82,101,97,100,32,101,114,114,111,114,0,0,0,0,0,0,70,77,32,53,0,0,0,0,68,83,80,32,56,0,0,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,47,117,110,115,117,112,112,111,114,116,101,100,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,0,0,0,0,87,97,118,101,32,56,0,0,68,77,67,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,102,97,99,116,111,114,32,62,32,48,32,124,124,32,33,115,97,109,112,108,101,95,114,97,116,101,95,0,0,0,0,0,86,111,105,99,101,32,56,0,87,97,118,101,32,53,0,0,72,69,83,0,0,0,0,0,65,89,0,0,0,0,0,0,80,83,71,0,0,0,0,0,70,105,108,101,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,105,109,101,114,32,109,111,100,101,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,114,101,103,105,115,116,101,114,95,99,111,117,110,116,0,0,0,0,0,0,0,115,97,109,112,108,101,95,114,97,116,101,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,104,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,69,114,114,111,114,32,115,101,101,107,105,110,103,32,105,110,32,102,105,108,101,0,0,0,78,83,70,69,0,0,0,0,70,77,32,52,0,0,0,0,83,116,114,101,97,109,32,108,97,99,107,101,100,32,101,110,100,32,101,118,101,110,116,0,68,83,80,32,55,0,0,0,99,111,117,110,116,32,37,32,50,32,61,61,32,48,0,0,87,97,118,101,32,55,0,0,78,111,105,115,101,0,0,0,83,101,103,97,32,83,77,83,47,71,101,110,101,115,105,115,0,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,61,32,48,120,70,70,0,108,101,110,103,116,104,95,32,61,61,32,109,115,101,99,0,86,111,105,99,101,32,55,0,87,97,118,101,32,52,0,0,80,67,32,69,110,103,105,110,101,0,0,0,0,0,0,0,80,67,77,0,0,0,0,0,68,83,80,32,49,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,32,105,110,32,109,51,117,32,112,108,97,121,108,105,115,116,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,32,48,120,49,48,48,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,114,101,103,105,115,116,101,114,95,99,111,117,110,116,0,0,0,40,98,108,105,112,95,108,111,110,103,41,32,40,116,105,109,101,32,62,62,32,66,76,73,80,95,66,85,70,70,69,82,95,65,67,67,85,82,65,67,89,41,32,60,32,98,108,105,112,95,98,117,102,45,62,98,117,102,102,101,114,95,115,105,122,101,95,0,0,0,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,78,111,116,32,97,110,32,83,80,67,32,102,105,108,101,0,67,111,117,108,100,110,39,116,32,114,101,97,100,32,102,114,111,109,32,102,105,108,101,0,78,83,70,0,0,0,0,0,70,77,32,51,0,0,0,0,68,83,80,32,54,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,61,32,48,120,70,70,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,87,97,118,101,32,54,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,84,114,105,97,110,103,108,101,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,78,97,109,99,111,95,65,112,117,46,104,0,0,97,100,100,114,32,62,32,48,120,50,48,0,0,0,0,0,98,117,102,102,101,114,95,115,105,122,101,95,32,33,61,32,115,105,108,101,110,116,95,98,117,102,95,115,105,122,101,0,86,111,105,99,101,32,54,0,87,97,118,101,32,51,0,0,77,117,108,116,105,32,50,0,70,77,32,54,0,0,0,0,87,97,118,101,32,49,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,0,0,0,65,89,0,0,0,0,0,0,71,66,83,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,101,110,100,105,97,110,46,104,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,101,110,118,46,112,111,115,32,60,32,48,0,0,0,0,0,78,83,70,69,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,102,105,108,101,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,75,83,83,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,100,97,116,97,32,60,61,32,48,120,70,70,0,101,110,97,98,108,101,100,40,41,0,0,0,0,0,0,0,78,105,110,116,101,110,100,111,32,78,69,83,0,0,0,0,70,77,32,50,0,0,0,0,68,83,80,32,53,0,0,0,115,97,109,112,108,101,95,98,117,102,32,60,61,32,98,117,102,95,101,110,100,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,0,0,0,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,87,97,118,101,32,53,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,98,108,97,114,103,103,95,99,111,109,109,111,110,46,104,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,115,116,97,114,116,32,43,32,115,105,122,101,32,60,61,32,48,120,49,48,48,48,48,0,108,97,115,116,95,100,109,99,95,116,105,109,101,32,62,61,32,48,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,86,111,105,99,101,32,53,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,112,114,103,95,114,101,97,100,101,114,0,0,0,0,0,0,87,97,118,101,32,50,0,0,77,117,108,116,105,32,49,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,70,77,32,53,0,0,0,0,60,32,63,32,62,0,0,0,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,90,88,32,83,112,101,99,116,114,117,109,0,0,0,0,0,71,97,109,101,32,66,111,121,0,0,0,0,0,0,0,0,42,40,118,111,108,97,116,105,108,101,32,99,104,97,114,42,41,32,38,105,32,33,61,32,48,0,0,0,0,0,0,0,110,101,120,116,95,102,114,97,109,101,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,0,0,73,110,118,97,108,105,100,32,98,97,110,107,0,0,0,0,101,110,118,46,100,101,108,97,121,32,62,32,48,0,0,0,99,111,117,110,116,32,61,61,32,40,108,111,110,103,41,32,115,97,109,112,108,101,95,98,117,102,95,115,105,122,101,0,114,98,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,72,69,83,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,70,97,109,105,99,111,109,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,86,103,109,95,69,109,117,95,73,109,112,108,46,99,112,112,0,70,77,32,49,0,0,0,0,68,83,80,32,52,0,0,0,78,69,83,77,26,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,110,101,115,95,83,112,99,46,99,112,112,0,0,0,0,0,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,87,97,118,101,32,52,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,97,112,95,65,112,117,46,104,0,0,0,0,0,0,0,0,99,108,111,99,107,115,95,101,109,117,108,97,116,101,100,0,110,32,60,61,32,115,105,122,101,95,0,0,0,0,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,114,101,103,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,0,82,79,77,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,104,0,0,0,0,115,105,122,101,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,48,0,0,68,65,84,69,0,0,0,0,86,111,105,99,101,32,49,0,48,0,0,0,0,0,0,0,86,111,105,99,101,32,52,0,87,97,118,101,32,49,0,0,102,97,108,115,101,0,0,0,78,65,77,69,0,0,0,0,33,40,99,111,117,110,116,32,38,32,49,41,0,0,0,0,87,97,118,101,32,52,0,0,111,115,99,45,62,108,97,115,116,95,116,105,109,101,32,62,61,32,101,110,100,95,116,105,109,101,0,0,0,0,0,0,70,77,32,52,0,0,0,0,60,63,62,0,0,0,0,0,65,85,84,72,79,82,0,0,78,111,105,115,101,0,0,0,66,101,101,112,101,114,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,73,110,118,97,108,105,100,32,102,97,115,116,112,108,97,121,32,118,97,108,117,101,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,70,109,101,55,95,65,112,117,46,104,0,0,0,45,114,101,109,97,105,110,32,60,61,32,101,110,118,95,112,101,114,105,111,100,0,0,0,70,65,83,84,80,76,65,89,0,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,71,97,109,101,32,71,101,97,114,0,0,0,0,0,0,0,98,108,105,112,95,98,117,102,46,115,97,109,112,108,101,115,95,97,118,97,105,108,40,41,32,61,61,32,112,97,105,114,95,99,111,117,110,116,0,0,83,84,69,82,69,79,0,0,83,101,103,97,32,77,97,115,116,101,114,32,83,121,115,116,101,109,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,68,97,116,97,95,82,101,97,100,101,114,46,99,112,112,0,0,85,110,115,117,112,112,111,114,116,101,100,32,112,108,97,121,101,114,32,116,121,112,101,0,71,89,77,0,0,0,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,99,108,111,99,107,95,114,97,116,101,32,62,32,115,97,109,112,108,101,95,114,97,116,101,0,0,0,0,0,0,0,0,75,83,83,88,0,0,0,0,116,111,95,102,109,95,116,105,109,101,40,32,118,103,109,95,116,105,109,101,32,41,32,60,61,32,109,105,110,95,112,97,105,114,115,0,0,0,0,0,97,100,100,114,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,68,105,103,105,109,117,115,105,99,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,86,71,90,0,0,0,0,0,75,83,67,67,0,0,0,0,68,83,80,32,51,0,0,0,101,110,97,98,108,101,100,0,40,99,101,110,116,101,114,32,38,38,32,108,101,102,116,32,38,38,32,114,105,103,104,116,41,32,124,124,32,40,33,99,101,110,116,101,114,32,38,38,32,33,108,101,102,116,32,38,38,32,33,114,105,103,104,116,41,0,0,0,0,0,0,0,84,89,80,69,0,0,0,0,67,111,114,114,117,112,116,32,102,105,108,101,32,40,105,110,118,97,108,105,100,32,108,111,97,100,47,105,110,105,116,47,112,108,97,121,32,97,100,100,114,101,115,115,41,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,87,97,118,101,32,51,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,78,105,110,116,101,110,100,111,32,78,69,83,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,67,108,97,115,115,105,99,95,69,109,117,46,99,112,112,0,0,85,115,101,115,32,117,110,115,117,112,112,111,114,116,101,100,32,97,117,100,105,111,32,101,120,112,97,110,115,105,111,110,32,104,97,114,100,119,97,114,101,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,111,115,99,95,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,114,97,99,107,32,99,111,117,110,116,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,101,32,118,101,114,115,105,111,110,0,0,0,0,72,69,83,77,0,0,0,0,40,98,108,105,112,95,108,111,110,103,41,32,40,116,105,109,101,32,62,62,32,66,76,73,80,95,66,85,70,70,69,82,95,65,67,67,85,82,65,67,89,41,32,60,32,98,108,105,112,95,98,117,102,45,62,98,117,102,102,101,114,95,115,105,122,101,95,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,102,105,110,97,108,95,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,0,0,101,110,100,95,116,105,109,101,32,62,61,32,108,97,115,116,95,116,105,109,101,0,0,0,83,79,78,71,83,0,0,0,83,113,117,97,114,101,32,53,0,0,0,0,0,0,0,0,87,97,118,101,32,49,0,0,86,111,105,99,101,32,51,0,40,117,110,115,105,103,110,101,100,41,32,97,100,100,114,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,72,101,115,95,67,112,117,46,104,0,0,0,0,0,0,0,0,83,113,117,97,114,101,32,51,0,0,0,0,0,0,0,0,115,105,122,101,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,73,110,118,97,108,105,100,32,109,117,115,105,99,32,97,100,100,114,101,115,115,0,0,0,87,97,118,101,32,51,0,0,40,117,110,115,105,103,110,101,100,41,32,114,101,103,32,60,61,32,112,97,103,101,95,99,111,117,110,116,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,98,97,110,107,32,60,32,48,120,49,48,48,0,110,111,105,115,101,95,108,102,115,114,0,0,0,0,0,0,115,116,97,116,101,32,61,61,32,38,115,116,97,116,101,95,0,0,0,0,0,0,0,0,70,77,32,51,0,0,0,0,63,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,77,85,83,73,67,0,0,0,87,97,118,101,0,0,0,0,87,97,118,101,32,51,0,0,115,105,122,101,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,0,40,99,101,110,116,101,114,32,38,38,32,108,101,102,116,32,38,38,32,114,105,103,104,116,41,32,124,124,32,40,33,99,101,110,116,101,114,32,38,38,32,33,108,101,102,116,32,38,38,32,33,114,105,103,104,116,41,0,0,0,0,0,0,0,71,100,51,32,0,0,0,0,73,110,118,97,108,105,100,32,112,108,97,121,32,97,100,100,114,101,115,115,0,0,0,0,83,113,117,97,114,101,32,52,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,75,115,115,95,83,99,99,95,65,112,117,46,104,0,0,0,0,77,105,115,115,105,110,103,32,116,114,97,99,107,32,100,97,116,97,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,97,100,100,114,32,60,32,114,101,103,95,99,111,117,110,116,0,0,0,0,0,86,103,109,32,0,0,0,0,80,76,65,89,69,82,0,0,70,77,32,49,0,0,0,0,83,113,117,97,114,101,32,51,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,69,102,102,101,99,116,115,95,66,117,102,102,101,114,46,99,112,112,0,0,0,0,0,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,48,0,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,72,101,97,100,101,114,32,97,100,100,101,100,32,98,121,32,89,77,65,77,80,0,0,0,90,88,65,89,69,77,85,76,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,105,110,105,116,32,97,100,100,114,101,115,115,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,68,117,97,108,95,82,101,115,97,109,112,108,101,114,46,99,112,112,0,0,0,0,0,0,0,83,97,119,32,87,97,118,101,0,0,0,0,0,0,0,0,83,99,97,110,108,105,110,101,32,105,110,116,101,114,114,117,112,116,32,117,110,115,117,112,112,111,114,116,101,100,0,0,85,110,107,110,111,119,110,32,80,101,114,115,111,110,0,0,110,32,62,61,32,48,0,0,73,78,73,84,0,0,0,0,100,97,116,97,32,33,61,32,102,105,108,101,95,100,97,116,97,46,98,101,103,105,110,40,41,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,102,105,108,101,32,100,97,116,97,0,0,0,0,0,0,0,71,66,83,0,0,0,0,0,85,110,107,110,111,119,110,32,80,117,98,108,105,115,104,101,114,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,89,109,50,54,49,50,95,69,109,117,46,99,112,112,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,69,109,117,46,99,112,112,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,85,110,107,110,111,119,110,32,115,116,114,101,97,109,32,101,118,101,110,116,0,0,0,0,120,105,100,54,0,0,0,0,83,65,80,13,10,0,0,0,87,97,118,101,32,56,0,0,86,71,77,0,0,0,0,0,85,115,101,32,102,117,108,108,32,101,109,117,108,97,116,111,114,32,102,111,114,32,112,108,97,121,98,97,99,107,0,0,69,120,116,114,97,32,102,105,108,101,32,100,97,116,97,0,85,110,107,110,111,119,110,32,71,97,109,101,0,0,0,0,68,83,80,32,50,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,112,99,95,68,115,112,46,99,112,112,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,112,111,115,32,60,61,32,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,32,102,105,108,101,95,115,105,122,101,32,45,32,50,0,0,0,0,83,78,69,83,45,83,80,67,55,48,48,32,83,111,117,110,100,32,70,105,108,101,32,68,97,116,97,0,0,0,0,0,89,77,50,52,49,51,32,70,77,32,115,111,117,110,100,32,105,115,110,39,116,32,115,117,112,112,111,114,116,101,100,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,109,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,87,97,118,101,32,55,0,0,101,109,117,95,116,105,109,101,32,62,61,32,111,117,116,95,116,105,109,101,0,0,0,0,77,117,108,116,105,112,108,101,32,68,65,84,65,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,85,110,107,110,111,119,110,32,83,111,110,103,0,0,0,0,87,97,118,101,32,50,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,77,117,115,105,99,95,69,109,117,46,104,0,0,0,0,0,0,67,111,114,114,117,112,116,32,102,105,108,101,0,0,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,104,0,40,99,104,46,99,101,110,116,101,114,32,38,38,32,99,104,46,108,101,102,116,32,38,38,32,99,104,46,114,105,103,104,116,41,32,124,124,32,40,33,99,104,46,99,101,110,116,101,114,32,38,38,32,33,99,104,46,108,101,102,116,32,38,38,32,33,99,104,46,114,105,103,104,116,41,0,0,0,0,0,112,97,116,104,32,38,38,32,111,117,116,0,0,0,0,0,78,83,70,0,0,0,0,0,78,111,105,115,101,0,0,0,83,78,69,83,45,83,80,67,55,48,48,32,83,111,117,110,100,32,70,105,108,101,32,68,97,116,97,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,86,114,99,54,95,65,112,117,46,99,112,112,0,87,97,118,101,32,54,0,0,111,117,116,95,99,111,117,110,116,32,37,32,115,116,101,114,101,111,32,61,61,32,48,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,79,115,99,115,46,99,112,112,0,0,0,0,0,66,97,110,107,32,100,97,116,97,32,109,105,115,115,105,110,103,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,105,122,101,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,78,97,109,99,111,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,0,80,97,99,107,101,100,32,71,89,77,32,102,105,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,70,109,101,55,95,65,112,117,46,99,112,112,0,33,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,115,116,97,114,116,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,108,97,115,116,95,116,105,109,101,32,62,61,32,116,105,109,101,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,83,113,117,97,114,101,32,51,0,0,0,0,0,0,0,0,87,97,118,101,32,53,0,0,86,111,105,99,101,32,50,0,33,98,117,102,95,114,101,109,97,105,110,0,0,0,0,0,69,120,99,101,115,115,105,118,101,32,100,97,116,97,32,115,105,122,101,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,77,117,108,116,105,95,66,117,102,102,101,114,46,99,112,112,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,67,108,97,115,115,105,99,95,69,109,117,46,104,0,0,0,0,73,110,118,97,108,105,100,32,97,100,100,114,101,115,115,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,66,108,105,112,95,66,117,102,102,101,114,46,99,112,112,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,103,109,101,46,99,112,112,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,75,115,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,87,97,118,101,32,52,0,0,87,97,118,101,32,50,0,0,99,117,114,114,101,110,116,95,116,114,97,99,107,40,41,32,62,61,32,48,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,72,101,115,95,67,112,117,46,99,112,112,0,0,0,0,0,0,85,110,107,110,111,119,110,32,104,101,97,100,101,114,32,100,97,116,97,0,0,0,0,0,33,98,117,102,32,38,38,32,110,101,119,95,98,117,102,0,71,89,77,88,0,0,0,0,115,116,97,114,116,32,37,32,112,97,103,101,95,115,105,122,101,32,61,61,32,48,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,72,101,115,95,65,112,117,46,99,112,112,0,0,0,0,0,0,87,97,118,101,32,49,0,0,70,77,32,50,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,71,109,101,95,70,105,108,101,46,99,112,112,0,0,0,0,0,83,113,117,97,114,101,32,49,0,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,83,112,99,95,68,115,112,46,104,0,0,0,0,0,0,0,0,69,109,117,108,97,116,105,111,110,32,101,114,114,111,114,32,40,105,108,108,101,103,97,108,32,105,110,115,116,114,117,99,116,105,111,110,41,0,0,0,83,113,117,97,114,101,32,50,0,0,0,0,0,0,0,0,87,97,118,101,32,51,0,0,87,97,118,101,32,50,0,0,70,77,32,115,111,117,110,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,71,98,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,111,115,99,95,99,111,117,110,116,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,71,98,95,65,112,117,46,99,112,112,0,0,0,0,0,0,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,65,121,95,67,112,117,46,99,112,112,0,0,0,0,0,0,0,80,83,71,0,0,0,0,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,114,101,103,105,115,116,101,114,95,99,111,117,110,116,0,0,0,73,110,118,97,108,105,100,32,102,105,108,101,32,100,97,116,97,32,98,108,111,99,107,0,87,97,118,101,32,50,0,0,107,101,114,110,101,108,95,117,110,105,116,32,62,32,48,0,115,114,99,47,103,97,109,101,95,109,117,115,105,99,95,101,109,117,47,103,109,101,47,78,101,115,95,65,112,117,46,104,0,0,0,0,0,0,0,0,115,97,109,112,108,101,95,114,97,116,101,40,41,0,0,0,85,110,107,110,111,119,110,32,100,97,116,97,32,105,110,32,104,101,97,100,101,114,0,0,68,97,116,97,32,104,101,97,100,101,114,32,109,105,115,115,105,110,103,0,0,0,0,0,102,97,108,115,101,0,0,0,69,114,114,111,114,58,32,37,115,10,0,0,0,0,0,0,123,34,116,114,97,99,107,67,111,117,110,116,34,58,32,37,100,44,32,34,108,101,110,103,116,104,34,58,32,37,100,44,32,34,115,121,115,116,101,109,34,58,32,34,37,115,34,44,32,34,103,97,109,101,34,58,32,34,37,115,34,44,32,34,115,111,110,103,34,58,32,34,37,115,34,44,32,34,97,117,116,104,111,114,34,58,32,34,37,115,34,44,32,34,99,111,112,121,114,105,103,104,116,34,58,32,34,37,115,34,44,32,34,99,111,109,109,101,110,116,34,58,32,34,37,115,34,44,32,34,100,117,109,112,101,114,34,58,32,34,37,115,34,125,0,0,0,0,0,0,0,0,103,109,101,95,111,112,101,110,95,102,105,108,101,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,99,108,111,99,107,95,114,97,116,101,95,102,97,99,116,111,114,0,0,0,0,0,0,0,99,111,117,110,116,95,99,108,111,99,107,115,0,0,0,0,111,102,102,115,101,116,95,114,101,115,97,109,112,108,101,100,0,0,0,0,0,0,0,0,111,102,102,115,101,116,95,114,101,115,97,109,112,108,101,100,0,0,0,0,0,0,0,0,111,102,102,115,101,116,95,114,101,115,97,109,112,108,101,100,0,0,0,0,0,0,0,0,115,101,116,95,116,101,109,112,111,0,0,0,0,0,0,0,115,101,116,95,103,97,105,110,0,0,0,0,0,0,0,0,112,114,101,95,108,111,97,100,0,0,0,0,0,0,0,0,102,105,108,108,95,98,117,102,0,0,0,0,0,0,0,0,112,108,97,121,0,0,0,0,115,101,116,95,115,97,109,112,108,101,95,114,97,116,101,0,109,117,116,101,95,118,111,105,99,101,115,0,0,0,0,0,114,117,110,95,100,115,112,95,0,0,0,0,0,0,0,0,114,117,110,95,117,110,116,105,108,95,0,0,0,0,0,0,114,101,97,100,0,0,0,0,112,108,97,121,0,0,0,0,108,111,97,100,95,109,101,109,95,0,0,0,0,0,0,0,119,114,105,116,101,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,119,114,105,116,101,95,103,103,115,116,101,114,101,111,0,0,119,114,105,116,101,95,100,97,116,97,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,119,114,105,116,101,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,102,105,108,108,95,98,117,102,102,101,114,0,0,0,0,0,109,97,112,95,99,111,100,101,0,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,119,114,105,116,101,95,114,101,103,105,115,116,101,114,0,0,114,117,110,95,117,110,116,105,108,95,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,109,97,112,95,109,101,109,0,114,117,110,0,0,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,115,101,116,95,109,109,114,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,98,101,103,105,110,95,102,114,97,109,101,0,0,0,0,0,109,97,112,95,99,111,100,101,0,0,0,0,0,0,0,0,114,117,110,0,0,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,119,114,105,116,101,95,114,101,103,105,115,116,101,114,0,0,114,101,97,100,95,114,101,103,105,115,116,101,114,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,114,117,110,0,0,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,119,114,105,116,101,95,100,97,116,97,95,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,119,114,105,116,101,0,0,0,114,101,97,100,95,115,97,109,112,108,101,115,0,0,0,0,112,108,97,121,95,102,114,97,109,101,95,0,0,0,0,0,114,101,97,100,95,115,97,109,112,108,101,115,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,112,108,97,121,95,102,114,97,109,101,0,0,0,0,0,0,119,114,105,116,101,95,111,115,99,0,0,0,0,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,111,115,99,95,111,117,116,112,117,116,0,0,0,0,0,0,114,117,110,95,117,110,116,105,108,0,0,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,115,101,116,95,114,97,116,101,0,0,0,0,0,0,0,0,119,114,105,116,101,49,0,0,119,114,105,116,101,48,0,0,115,107,105,112,0,0,0,0,112,108,97,121,95,0,0,0,109,117,116,101,95,118,111,105,99,101,115,95,0,0,0,0,115,101,116,95,98,117,102,102,101,114,0,0,0,0,0,0,118,111,108,117,109,101,95,117,110,105,116,0,0,0,0,0,101,110,100,95,102,114,97,109,101,0,0,0,0,0,0,0,115,101,116,95,115,97,109,112,108,101,95,114,97,116,101,0,114,101,109,111,118,101,95,115,105,108,101,110,99,101,0,0,103,101,116,95,100,97,116,97,0,0,0,0,0,0,0,0,98,108,97,114,103,103,95,118,101,114,105,102,121,95,98,121,116,101,95,111,114,100,101,114,0,0,0,0,0,0,0,0,78,69,83,77,26,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,65,0,0,0,0,0,0,0,0,32,78,0,0,0,0,0,0,88,14,0,0,216,27,0,0,112,19,0,0,104,14,0,0,152,11,0,0,96,9,0,0,48,7,0,0,168,5,0,0,1,2,4,6,0,0,0,0,8,16,32,48,64,80,96,112,1,1,0,0,0,1,0,0,2,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,192,80,0,0,0,0,0,0,0,40,30,0,0,16,29,0,0,192,27,0,0,16,26,0,0,16,13,0,0,120,10,0,0,112,8,0,0,168,6,0,0,16,5,0,0,40,3,0,0,72,1,0,0,88,31,0,0,88,7,0,0,24,24,0,0,16,17,0,0,24,13,0,0,128,10,0,0,120,8,0,0,200,6,0,0,24,5,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,4,1,0,0,128,9,0,0,56,25,0,0,184,17,0,0,104,13,0,0,224,10,0,0,224,8,0,0,224,6,0,0,88,5,0,0,0,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5].concat([2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,85,85,0,0,0,0,0,0,4,2,0,0,0,0,0,0,64,16,32,8,0,0,0,0,184,13,0,0,16,11,0,0,248,8,0,0,232,6,0,0,96,5,0,0,0,0,0,0,1,1,0,0,2,1,0,0,0,1,0,0,0,2,0,0,1,3,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,184,13,0,0,16,11,0,0,248,8,0,0,232,6,0,0,96,5,0,0,176,21,0,0,40,21,0,0,88,19,0,0,184,13,0,0,16,11,0,0,248,8,0,0,232,6,0,0,96,5,0,0,152,22,0,0,176,21,0,0,40,21,0,0,152,1,0,0,152,31,0,0,152,30,0,0,32,29,0,0,208,27,0,0,96,26,0,0,232,24,0,0,200,23,0,0,184,13,0,0,16,11,0,0,248,8,0,0,232,6,0,0,96,5,0,0,152,22,0,0,176,21,0,0,40,21,0,0,184,13,0,0,16,11,0,0,248,8,0,0,232,6,0,0,96,5,0,0,152,1,0,0,152,31,0,0,152,30,0,0,32,29,0,0,208,27,0,0,96,26,0,0,232,24,0,0,200,23,0,0,0,0,0,0,0,6,2,8,3,3,5,5,3,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,3,2,2,2,3,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,2,8,3,3,5,5,4,2,2,2,5,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,6,2,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,3,5,2,5,4,4,4,4,2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,2,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,3,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,64,64,64,128,64,64,128,160,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,72,16,0,0,216,28,0,0,192,19,0,0,112,14,0,0,192,11,0,0,104,9,0,0,56,7,0,0,176,5,0,0,195,1,0,195,9,0,0,0,211,160,245,123,211,161,241,201,211,160,219,162,201,0,0,0,4,10,7,6,4,4,7,4,4,11,7,6,4,4,7,4,13,10,7,6,4,4,7,4,12,11,7,6,4,4,7,4,12,10,16,6,4,4,7,4,12,11,16,6,4,4,7,4,12,10,13,6,11,11,10,4,12,11,13,6,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,7,7,7,7,7,7,4,7,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,11,10,10,10,17,11,7,11,11,10,10,8,17,17,7,11,11,10,10,11,17,11,7,11,11,4,10,11,17,8,7,11,11,10,10,19,17,11,7,11,11,4,10,4,17,8,7,11,11,10,10,4,17,11,7,11,11,6,10,4,17,8,7,11,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,3,0,0,1,3,0,0,104,19,0,0,40,29,0,0,0,20,0,0,152,14,0,0,200,11,0,0,112,9,0,0,1,7,3,4,6,4,6,7,3,2,2,2,7,5,7,6,4,7,7,4,6,4,6,7,2,5,2,2,7,5,7,6,7,7,3,4,4,4,6,7,4,2,2,2,5,5,7,6,4,7,7,2,4,4,6,7,2,5,2,2,5,5,7,6,7,7,3,4,8,4,6,7,3,2,2,2,4,5,7,6,4,7,7,5,2,4,6,7,2,5,3,2,2,5,7,6,7,7,2,2,4,4,6,7,4,2,2,2,7,5,7,6,4,7,7,17,4,4,6,7,2,5,4,2,7,5,7,6,4,7,2,7,4,4,4,7,2,2,2,2,5,5,5,6,4,7,7,8,4,4,4,7,2,5,2,2,5,5,5,6,2,7,2,7,4,4,4,7,2,2,2,2,5,5,5,6,4,7,7,8,4,4,4,7,2,5,2,2,5,5,5,6,2,7,2,17,4,4,6,7,2,2,2,2,5,5,7,6,4,7,7,17,2,4,6,7,2,5,3,2,2,5,7,6,2,7,2,17,4,4,6,7,2,2,2,2,5,5,7,6,4,7,7,17,2,4,6,7,2,5,4,2,2,5,7,6,0,0,6,0,7,0,8,0,10,0,12,0,14,0,17,0,20,0,23,0,28,0,33,0,39,0,47,0,56,0,66,0,79,0,93,0,111,0,132,0,157,0,187,0,222,0,8,1,58,1,118,1,188,1,17,2,117,2,235,2,121,3,33,4,168,21,0,0,248,29,0,0,104,20,0,0,192,14,0,0,232,11,0,0,120,9,0,0,80,7,0,0,200,5,0,0,1,1,0,0,2,1,0,0,0,1,0,0,0,3,0,0,120,25,0,0,136,30,0,0,160,20,0,0,216,14,0,0,0,0,0,0,0,0,240,191,120,0,0,0,0,0,0,0,10,4,6,8,0,0,0,0,132,64,67,170,45,120,146,60,96,89,89,176,52,184,46,218,0,1,0,0,1,1,0,0,2,1,0,0,0,3,0,0,240,29,0,0,160,30,0,0,168,20,0,0,224,14,0,0,243,205,0,0,237,94,251,118,24,250,0,0,0,0,0,0,243,205,0,0,237,86,251,118,205,0,0,24,247,0,0,0,4,10,7,6,4,4,7,4,4,11,7,6,4,4,7,4,13,10,7,6,4,4,7,4,12,11,7,6,4,4,7,4,12,10,16,6,4,4,7,4,12,11,16,6,4,4,7,4,12,10,13,6,11,11,10,4,12,11,13,6,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,7,7,7,7,7,7,4,7,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,7,4,11,10,10,10,17,11,7,11,11,10,10,8,17,17,7,11,11,10,10,11,17,11,7,11,11,4,10,11,17,8,7,11,11,10,10,19,17,11,7,11,11,4,10,4,17,8,7,11,11,10,10,4,17,11,7,11,11,6,10,4,17,8,7,11,0,0,0,0,192,61,0,0,104,0,0,0,202,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,61,0,0,152,0,0,0,84,0,0,0,162,0,0,0,66,0,0,0,16,0,0,0,4,0,0,0,6,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,62,0,0,114,0,0,0,144,0,0,0,170,0,0,0,54,0,0,0,42,0,0,0,106,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,62,0,0,28,0,0,0,156,0,0,0,170,0,0,0,10,0,0,0,42,0,0,0,2,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,40,0,0,0,2,0,0,0,44,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,62,0,0,136,0,0,0,76,0,0,0,170,0,0,0,10,0,0,0,42,0,0,0,2,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,62,0,0,36,0,0,0,10,0,0,0,170,0,0,0,20,0,0,0,42,0,0,0,24,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,62,0,0,8,0,0,0,90,0,0,0,170,0,0,0,18,0,0,0,42,0,0,0,88,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,62,0,0,20,0,0,0,232,0,0,0,170,0,0,0,10,0,0,0,94,0,0,0,12,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,62,0,0,14,0,0,0,140,0,0,0,6,0,0,0,8,0,0,0,42,0,0,0,2,0,0,0,186,0,0,0,50,0,0,0,88,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,4,0,0,0,52,0,0,0,44,0,0,0,42,0,0,0,12,0,0,0,8,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,62,0,0,118,0,0,0,158,0,0,0,170,0,0,0,40,0,0,0,42,0,0,0,6,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,62,0,0,122,0,0,0,176,0,0,0,170,0,0,0,72,0,0,0,42,0,0,0,56,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,62,0,0,92,0,0,0,212,0,0,0,170,0,0,0,14,0,0,0,42,0,0,0,28,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,62,0,0,78,0,0,0,46,0,0,0,170,0,0,0,10,0,0,0,40,0,0,0,90,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,62,0,0,72,0,0,0,98,0,0,0,192,0,0,0,10,0,0,0,42,0,0,0,2,0,0,0,224,0,0,0,112,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,62,0,0,200,0,0,0,230,0,0,0,170,0,0,0,30,0,0,0,42,0,0,0,64,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,62,0,0,166,0,0,0,60,0,0,0,170,0,0,0,10,0,0,0,86,0,0,0,48,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,16,0,0,0,14,0,0,0,6,0,0,0,2,0,0,0,28,0,0,0,36,0,0,0,42,0,0,0,20,0,0,0,22,0,0,0,78,0,0,0,4,0,0,0,240,254,255,255,216,62,0,0,40,0,0,0,106,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,62,0,0,124,0,0,0,188,0,0,0,170,0,0,0,10,0,0,0,10,0,0,0,96,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,40,0,0,0,34,0,0,0,44,0,0,0,50,0,0,0,6,0,0,0,12,0,0,0,34,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,62,0,0,102,0,0,0,172,0,0,0,170,0,0,0,10,0,0,0,32,0,0,0,80,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,20,0,0,0,46,0,0,0,44,0,0,0,42,0,0,0,18,0,0,0,10,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,63,0,0,130,0,0,0,26,0,0,0,82,0,0,0,22,0,0,0,42,0,0,0,62,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,4,0,0,0,68,0,0,0,44,0,0,0,42,0,0,0,12,0,0,0,8,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,63,0,0,2,0,0,0,174,0,0,0,22,0,0,0,4,0,0,0,42,0,0,0,20,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,16,0,0,0,66,0,0,0,44,0,0,0,42,0,0,0,16,0,0,0,42,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,63,0,0,64,0,0,0,34,0,0,0,68,0,0,0,32,0,0,0,42,0,0,0,52,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,14,0,0,0,50,0,0,0,44,0,0,0,42,0,0,0,8,0,0,0,18,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,63,0,0,160,0,0,0,220,0,0,0,170,0,0,0,10,0,0,0,76,0,0,0,26,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,40,0,0,0,44,0,0,0,44,0,0,0,30,0,0,0,10,0,0,0,26,0,0,0,104,0,0,0,42,0,0,0,8,0,0,0,0,255,255,255,152,63,0,0,110,0,0,0,44,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,63,0,0,18,0,0,0,70,0,0,0,16,0,0,0,36,0,0,0,42,0,0,0,30,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,18,0,0,0,62,0,0,0,44,0,0,0,42,0,0,0,14,0,0,0,4,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,63,0,0,132,0,0,0,58,0,0,0,170,0,0,0,10,0,0,0,66,0,0,0,84,0,0,0,24,0,0,0,182,0,0,0,56,0,0,0,40,0,0,0,56,0,0,0,48,0,0,0,2,0,0,0,8,0,0,0,74,0,0,0,50,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,63,0,0,228,0,0,0,196,0,0,0,170,0,0,0,10,0,0,0,22,0,0,0,70,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,12,0,0,0,2,0,0,0,44,0,0,0,42,0,0,0,2,0,0,0,24,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,64,0,0,204,0,0,0,134,0,0,0,74,0,0,0,4,0,0,0,8,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,64,0,0,108,0,0,0,218,0,0,0,98,0,0,0,72,0,0,0,16,0,0,0,64,0,0,0,18,0,0,0,10,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,64,0,0,146,0,0,0,38,0,0,0,102,0,0,0,92,0,0,0,16,0,0,0,64,0,0,0,14,0,0,0,2,0,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,64,0,0,128,0,0,0,48,0,0,0,38,0,0,0,14,0,0,0,68,0,0,0,34,0,0,0,28,0,0,0,32,0,0,0,32,0,0,0,38,0,0,0,12,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,64,0,0,206,0,0,0,180,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,64,0,0,94,0,0,0,4,0,0,0,60,0,0,0,92,0,0,0,20,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,64,0,0,226,0,0,0,168,0,0,0,38,0,0,0,4,0,0,0,82,0,0,0,20,0,0,0,16,0,0,0,150,0,0,0,12,0,0,0,46,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,0,0,234,0,0,0,62,0,0,0,170,0,0,0,10,0,0,0,42,0,0,0,2,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,2,0,0,0,2,0,0,0,44,0,0,0,42,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,240,254,255,255,128,64,0,0,138,0,0,0,86,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,214,0,0,0,12,0,0,0,38,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,64,0,0,164,0,0,0,100,0,0,0,2,0,0,0,92,0,0,0,16,0,0,0,64,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,64,0,0,126,0,0,0,184,0,0,0,2,0,0,0,92,0,0,0,2,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,64,0,0,30,0,0,0,154,0,0,0,170,0,0,0,10,0,0,0,42,0,0,0,2,0,0,0,186,0,0,0,50,0,0,0,56,0,0,0,52,0,0,0,48,0,0,0,14,0,0,0,38,0,0,0,2,0,0,0,2,0,0,0,44,0,0,0,42,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,57,78,115,102,101,95,70,105,108,101,0,0,0,0,0,0,57,77,117,115,105,99,95,69,109,117,0,0,0,0,0,0,57,71,109,101,95,73,110,102,111,95,0,0,0,0,0,0,56,86,103,109,95,70,105,108,101,0,0,0,0,0,0,0,56,83,112,99,95,70,105,108,101,0,0,0,0,0,0,0,56,83,97,112,95,70,105,108,101,0,0,0,0,0,0,0,56,78,115,102,101,95,69,109,117,0,0,0,0,0,0,0,56,78,115,102,95,70,105,108,101,0,0,0,0,0,0,0,56,75,115,115,95,70,105,108,101,0,0,0,0,0,0,0,56,72,101,115,95,70,105,108,101,0,0,0,0,0,0,0,56,71,121,109,95,70,105,108,101,0,0,0,0,0,0,0,56,71,109,101,95,70,105,108,101,0,0,0,0,0,0,0,56,71,98,115,95,70,105,108,101,0,0,0,0,0,0,0,55,86,103,109,95,69,109,117,0,0,0,0,0,0,0,0,55,83,112,99,95,69,109,117,0,0,0,0,0,0,0,0,55,83,97,112,95,69,109,117,0,0,0,0,0,0,0,0,55,83,97,112,95,67,112,117,0,0,0,0,0,0,0,0,55,78,115,102,95,69,109,117,0,0,0,0,0,0,0,0,55,78,101,115,95,67,112,117,0,0,0,0,0,0,0,0,55,75,115,115,95,69,109,117,0,0,0,0,0,0,0,0,55,75,115,115,95,67,112,117,0,0,0,0,0,0,0,0,55,72,101,115,95,69,109,117,0,0,0,0,0,0,0,0,55,72,101,115,95,67,112,117,0,0,0,0,0,0,0,0,55,71,121,109,95,69,109,117,0,0,0,0,0,0,0,0,55,71,98,115,95,69,109,117,0,0,0,0,0,0,0,0,55,65,121,95,70,105,108,101,0,0,0,0,0,0,0,0,54,71,98,95,67,112,117,0,54,65,121,95,69,109,117,0,54,65,121,95,67,112,117,0,49,54,82,101,109,97,105,110,105,110,103,95,82,101,97,100,101,114,0,0,0,0,0,0,49,53,83,116,100,95,70,105,108,101,95,82,101,97,100,101,114,0,0,0,0,0,0,0,49,53,77,101,109,95,70,105,108,101,95,82,101,97,100,101,114,0,0,0,0,0,0,0,49,52,69,102,102,101,99,116,115,95,66,117,102,102,101,114,0,0,0,0,0,0,0,0,49,52,68,117,97,108,95,82,101,115,97,109,112,108,101,114,0,0,0,0,0,0,0,0,49,51,83,117,98,115,101,116,95,82,101,97,100,101,114,0,49,51,83,116,101,114,101,111,95,66,117,102,102,101,114,0,49,50,86,103,109,95,69,109,117,95,73,109,112,108,0,0,49,50,77,117,108,116,105,95,66,117,102,102,101,114,0,0,49,49,70,105,108,101,95,82,101,97,100,101,114,0,0,0,49,49,68,97,116,97,95,82,101,97,100,101,114,0,0,0,49,49,67,108,97,115,115,105,99,95,69,109,117,0,0,0,0,0,0,0,64,58,0,0,0,0,0,0,80,58,0,0,0,0,0,0,96,58,0,0,184,61,0,0,0,0,0,0,0,0,0,0,112,58,0,0,240,61,0,0,0,0,0,0,0,0,0,0,152,58,0,0,240,61,0,0,0,0,0,0,0,0,0,0,192,58,0,0,0,62,0,0,0,0,0,0,0,0,0,0,232,58,0,0,176,61,0,0,0,0,0,0,0,0,0,0,16,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,32,59,0,0,192,62,0,0,0,0,0,0,0,0,0,0,48,59,0,0,32,62,0,0,0,0,0,0,0,0,0,0,64,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,80,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,96,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,112,59,0,0,32,63,0,0,0,0,0,0,0,0,0,0,128,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,144,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,160,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,176,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,192,59,0,0,0,0,0,0,208,59,0,0,48,62,0,0,0,0,0,0,0,0,0,0,224,59,0,0,128,64,0,0,0,0,0,0,0,0,0,0,240,59,0,0,32,62,0,0,0,0,0,0,8,47,0,0,0,60,0,0,0,0,0,0,2,0,0,0,24,63,0,0,0,16,1,0,192,64,0,0,2,0,0,0,0,0,0,0,16,60,0,0,8,47,0,0,32,60,0,0,0,0,0,0,2,0,0,0,64,63,0,0,0,16,1,0,192,64,0,0,2,0,0,0,0,0,0,0,48,60,0,0,8,47,0,0,64,60,0,0,0,0,0,0,2,0,0,0,104,63,0,0,0,16,1,0,192,64,0,0,2,0,0,0,0,0,0,0,80,60,0,0,8,47,0,0,96,60,0,0,0,0,0,0,2,0,0,0,144,63,0,0,0,16,1,0,192,64,0,0,2,0,0,0,0,0,0,0,112,60,0,0,8,47,0,0,128,60,0,0,0,0,0,0,2,0,0,0,32,62,0,0,2,0,0,0,88,64,0,0,0,0,1,0,8,47,0,0,144,60,0,0,0,0,0,0,2,0,0,0,232,63,0,0,0,16,1,0,192,64,0,0,2,0,0,0,0,0,0,0,160,60,0,0,48,62,0,0,0,0,0,0,0,0,0,0,176,60,0,0,8,47,0,0,184,60,0,0,0,0,0,0,2,0,0,0,16,64,0,0,0,16,1,0,192,64,0,0,2,0,0,0,0,0,0,0,192,60,0,0,0,0,0,0,200,60,0,0,184,64,0,0,0,0,0,0,0,0,0,0,224,60,0,0,168,64,0,0,0,0,0,0,0,0,0,0,248,60,0,0,168,64,0,0,0,0,0,0,0,0,0,0,16,61,0,0,160,64,0,0,0,0,0,0,0,0,0,0,40,61,0,0,0,0,0,0,64,61,0,0,184,64,0,0,0,0,0,0,0,0,0,0,80,61,0,0,160,64,0,0,0,0,0,0,8,47,0,0,96,61,0,0,0,0,0,0,2,0,0,0,192,64,0,0,2,0,0,0,88,64,0,0,0,16,1,0,0,0,0,0,112,61,0,0,0,0,0,0,128,61,0,0,184,64,0,0,0,0,0,0,0,0,0,0,144,61,0,0,0,0,0,0,160,61,0,0,32,62,0,0,0,0,0,0,114,1,25,5,110,1,25,5,106,1,24,5,102,1,24,5,98,1,24,5,95,1,24,5,91,1,24,5,87,1,23,5,83,1,23,5,80,1,23,5,76,1,22,5,72,1,22,5,69,1,21,5,65,1,20,5,62,1,20,5,58,1,19,5,55,1,18,5,51,1,17,5,48,1,17,5,44,1,16,5,41,1,15,5,37,1,14,5,34,1,13,5,30,1,12,5,27,1,11,5,24,1,10,5,20,1,8,5,17,1,7,5,14,1,6,5,11,1,4,5,7,1,3,5,4,1,2,5,1,1,0,5,254,0,255,4,251,0,253,4,248,0,251,4,245,0,250,4,242,0,248,4,239,0,246,4,236,0,245,4,233,0,243,4,230,0,241,4,227,0,239,4,224,0,237,4,221,0,235,4,218,0,233,4,215,0,231,4,212,0,229,4,210,0,227,4,207,0,224,4,204,0,222,4,201,0,220,4,199,0,217,4,196,0,215,4,193,0,213,4,191,0,210,4,188,0,208,4,186,0,205,4,183,0,203,4,180,0,200,4,178,0,197,4,175,0,195,4,173,0,192,4,171,0,189,4,168,0,186,4,166,0,183,4,163,0,181,4,161,0,178,4,159,0,175,4,156,0,172,4,154,0,169,4,152,0,166,4,150,0,162,4,147,0,159,4,145,0,156,4,143,0,153,4,141,0,150,4,139,0,146,4,137,0,143,4,134,0,140,4,132,0,136,4,130,0,133,4,128,0,129,4,126,0,126,4,124,0,122,4,122,0,119,4,120,0,115,4,118,0,112,4,117,0,108,4,115,0,104,4,113,0,101,4,111,0,97,4,109,0,93,4,107,0,89,4,106,0,85,4,104,0,82,4,102,0,78,4,100,0,74,4,99,0,70,4,97,0,66,4,95,0,62,4,94,0,58,4,92,0,54,4,90,0,50,4,89,0,46,4,87,0,42,4,86,0,37,4,84,0,33,4,83,0,29,4,81,0,25,4,80,0,21,4,78,0,16,4,77,0,12,4,76,0,8,4,74,0,3,4,73,0,255,3,71,0,251,3,70,0,246,3,69,0,242,3,67,0,237,3,66,0,233,3,65,0,229,3,64,0,224,3,62,0,220,3,61,0,215,3,60,0,210,3,59,0,206,3,58,0,201,3,56,0,197,3,55,0,192,3,54,0,187,3,53,0,183,3,52,0,178,3,51,0,173,3,50,0,169,3,49,0,164,3,48,0,159,3,47,0,155,3,46,0,150,3,45,0,145,3,44,0,140,3,43,0,136,3,42,0,131,3,41,0,126,3,40,0,121,3,39,0,116,3,38,0,112,3,37,0,107,3,36,0,102,3,36,0,97,3,35,0,92,3,34,0,87,3,33,0,83,3,32,0,78,3,32,0,73,3,31,0,68,3,30,0,63,3,29,0,58,3,29,0,53,3,28,0,48,3,27,0,43,3,27,0,38,3,26,0,34,3,25,0,29,3,24,0,24,3,24,0,19,3,23,0,14,3,23,0,9,3,22,0,4,3,21,0,255,2,21,0,250,2,20,0,245,2,20,0,240,2,19,0,235,2,19,0,230,2,18,0,225,2,17,0,220,2,17,0,216,2,16,0,211,2,16,0,206,2,15,0,201,2,15,0,196,2,15,0,191,2,14,0,186,2,14,0,181,2,13,0,176,2,13,0,171,2,12,0,166,2,12,0,162,2,11,0,157,2,11,0,152,2,11,0,147,2,10,0,142,2,10,0,137,2,10,0,132,2,9,0,128,2,9,0,123,2,9,0,118,2,8,0,113,2,8,0,108,2,8,0,103,2,7,0,99,2,7,0,94,2,7,0,89,2,6,0,84,2,6,0,80,2,6,0,75,2,6,0,70,2,5,0,65,2,5,0,61,2,5,0,56,2,5,0,51,2,4,0,47,2,4,0,42,2,4,0,38,2,4,0,33,2,4,0,28,2,3,0,24,2,3,0,19,2,3,0,15,2,3,0,10,2,3,0,5,2,2,0,1,2,2,0,252,1,2,0,248,1,2,0,243,1,2,0,239,1,2,0,235,1,2,0,230,1,1,0,226,1,1,0,221,1,1,0,217,1,1,0,213,1,1,0,208,1,1,0,204,1,1,0,200,1,1,0,195,1,1,0,191,1,1,0,187,1,1,0,183,1,0,0,178,1,0,0,174,1,0,0,170,1,0,0,166,1,0,0,162,1,0,0,158,1,0,0,154,1,0,0,149,1,0,0,145,1,0,0,141,1,0,0,137,1,0,0,133,1,0,0,129,1,0,0,125,1,0,0,122,1,0,0,118,1,0,0,0,0,0,0,240,191,80,0,0,0,0,0,0,0,0,1,2,3,4,6,8,12,17,24,34,48,68,96,136,192,85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,0,0,0,0,15,0,20,0,24,0,30,0,40,0,48,0,60,0,80,0,96,0,120,0,160,0,192,0,240,0,64,1,128,1,224,1,128,2,0,3,192,3,0,5,0,6,128,7,0,10,0,12,0,15,0,20,0,24,0,30,0,40,0,60,0,120,0,1,2,3,4,5,6,7,7,8,9,10,11,12,13,14,15,15,16,17,18,19,20,20,21,22,23,24,24,25,26,27,27,28,29,30,31,31,32,33,33,34,35,36,36,37,38,38,39,40,41,41,42,43,43,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,59,60,60,61,61,62,63,63,64,64,65,65,66,66,67,67,68,68,69,70,70,71,71,72,72,73,73,74,74,75,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,82,83,0,2,3,4,6,8,11,16,23,32,45,64,90,128,180,255,0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,3,64,50,39,31,24,19,15,12,9,7,5,4,3,2,1,0,21,1,25,61,42,62,38,2,4,0,8,0,16,0,32,0,64,0,96,0,128,0,160,0,202,0,254,0,124,1,252,1,250,2,248,3,242,7,228,15,172,1,124,1,84,1,64,1,30,1,254,0,226,0,214,0,190,0,160,0,142,0,128,0,106,0,84,0,72,0,54,0,142,1,98,1,60,1,42,1,20,1,236,0,210,0,198,0,176,0,148,0,132,0,118,0,98,0,78,0,66,0,50,0,40,1,0,0,16,1,0,0,248,0,0,0,224,0,0,0,200,0,0,0,176,0,0,0,152,0,0,0,128,0,0,0,104,0,0,0,80,0,0,0,56,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,0,0,0,128,63,0,255,191,255,63,0,255,191,127,255,159,255,191,255,255,0,0,191,0,119,128,255,255,255,255,255,255,255,255,255,10,254,20,2,40,4,80,6,160,8,60,10,14,12,26,14,12,16,24,18,48,20,96,22,192,24,72,26,16,28,32,30,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,12,2,0,0,3,0,0,7,12,2,0,0,3,0,0,0,0,0,15,15,11,0,0,7,0,0,0,0,0,0,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,160,64,64,112,192,0,96,11,160,75,75,123,203,11,107,0,11,64,64,112,192,0,96,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,128,128,128,128,0,0,11,0,128,128,128,128,0,0,11,0,208,208,208,208,0,0,11,0,208,208,208,208,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,6,12,2,0,0,3,0,0,7,12,2,0,0,3,0,0,0,0,0,15,15,11,0,0,7,0,0,0,0,0,0,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,16,64,64,112,192,0,96,11,160,64,64,112,192,0,96,11,160,75,75,123,203,11,107,0,11,64,64,112,192,0,96,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,11,0,128,128,128,128,0,0,11,0,128,128,128,128,0,0,11,0,208,208,208,208,0,0,11,0,208,208,208,208,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,15,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,2,8,4,5,3,4,3,6,2,6,5,4,5,4,6,8,2,8,4,5,4,5,5,6,5,5,6,5,2,2,4,6,2,8,4,5,3,4,3,6,2,6,5,4,5,4,5,4,2,8,4,5,4,5,5,6,5,5,6,5,2,2,3,8,2,8,4,5,3,4,3,6,2,6,4,4,5,4,6,6,2,8,4,5,4,5,5,6,5,5,4,5,2,2,4,3,2,8,4,5,3,4,3,6,2,6,4,4,5,4,5,5,2,8,4,5,4,5,5,6,5,5,5,5,2,2,3,6,2,8,4,5,3,4,3,6,2,6,5,4,5,2,4,5,2,8,4,5,4,5,5,6,5,5,5,5,2,2,12,5,3,8,4,5,3,4,3,6,2,6,4,4,5,2,4,4,2,8,4,5,4,5,5,6,5,5,5,5,2,2,3,4,3,8,4,5,4,5,4,7,2,5,6,4,5,2,4,9,2,8,4,5,5,6,6,7,4,5,4,5,2,2,6,3,2,8,4,5,3,4,3,6,2,4,5,3,4,3,4,3,2,8,4,5,4,5,5,6,3,4,5,4,2,2,4,3,24,0,0,0,18,0,0,0,26,0,0,0,16,0,0,0,22,0,0,0,12,0,0,0,10,0,0,0,28,0,0,0,0,1,2,3,4,6,12,24,31,4,1,0,0,0,0,0,128,191,0,0,191,0,63,0,0,191,127,255,159,0,191,0,255,0,0,191,119,243,241,0,0,0,0,0,0,0,0,0,172,221,218,72,54,2,207,22,44,4,229,44,172,221,218,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,8,8,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,9,10,11,12,13,14,16,16,16,16,2,2,2,2,2,3,3,3,4,4,4,5,5,6,6,7,8,8,9,10,11,12,13,14,16,17,19,20,22,22,22,22])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value
      return value;
    }
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
        if (!total) {
          // early out
          return callback(null);
        }
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat, node;
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.position = position;
          return position;
        }}};
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
        // start at the root
        var current = FS.root;
        var current_path = '/';
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
          FS.FSNode.prototype = {};
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.errnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          this.stack = stackTrace();
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureErrnoError();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
              if (!hasByteServing) chunkSize = datalength;
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  Module["_strlen"] = _strlen;
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop()
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }function _getchar() {
      // int getchar(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getchar.html
      return _fgetc(HEAP32[((_stdin)>>2)]);
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i64=_memset;
  function ___gxx_personality_v0() {
    }
  function __ZSt9terminatev() {
      _exit(-1234);
    }
  var _llvm_memset_p0i8_i32=_memset;
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  Module["_memcmp"] = _memcmp;
  var _floor=Math_floor;
  Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  var _cos=Math_cos;
  var _llvm_pow_f64=Math_pow;
  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStream(stream);
      stream.eof = false;
      return 0;
    }
  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStream(stream);
      return Number(stream && stream.eof);
    }
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStream(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  var _fabs=Math_abs;
  function _fmod(x, y) {
      return x % y;
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  Module["_strncpy"] = _strncpy;
  var _sin=Math_sin;
  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }
  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }
  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }
  function _abort() {
      Module['abort']();
    }
  function ___errno_location() {
      return ___errno_state;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  function ___resumeException(ptr) {
      if (HEAP32[((_llvm_eh_exception.buf)>>2)] == 0) HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = HEAP32[((_llvm_eh_exception.buf)>>2)];
      if (throwntype == -1) throwntype = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
            ['experimental-webgl', 'webgl'].some(function(webglId) {
              return ctx = canvas.getContext(webglId, contextAttributes);
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (window.scrollX + rect.left);
              y = t.pageY - (window.scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (window.scrollX + rect.left);
            y = event.pageY - (window.scrollY + rect.top);
          }
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var Math_min = Math.min;
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var __ZTVN10__cxxabiv117__class_type_infoE=env.__ZTVN10__cxxabiv117__class_type_infoE|0;
  var __ZTVN10__cxxabiv120__si_class_type_infoE=env.__ZTVN10__cxxabiv120__si_class_type_infoE|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;
  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _strncmp=env._strncmp;
  var _lseek=env._lseek;
  var _feof=env._feof;
  var ___assert_fail=env.___assert_fail;
  var _fgetc=env._fgetc;
  var ___cxa_throw=env.___cxa_throw;
  var _fread=env._fread;
  var _fclose=env._fclose;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _fprintf=env._fprintf;
  var _llvm_eh_exception=env._llvm_eh_exception;
  var _toupper=env._toupper;
  var _printf=env._printf;
  var _close=env._close;
  var _pread=env._pread;
  var _fflush=env._fflush;
  var _fopen=env._fopen;
  var __reallyNegative=env.__reallyNegative;
  var _getchar=env._getchar;
  var _snprintf=env._snprintf;
  var _open=env._open;
  var _floor=env._floor;
  var ___setErrNo=env.___setErrNo;
  var _fwrite=env._fwrite;
  var _fseek=env._fseek;
  var _send=env._send;
  var _write=env._write;
  var _ftell=env._ftell;
  var _exit=env._exit;
  var _sprintf=env._sprintf;
  var _strrchr=env._strrchr;
  var _fabs=env._fabs;
  var _sin=env._sin;
  var _sysconf=env._sysconf;
  var _read=env._read;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __formatString=env.__formatString;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _recv=env._recv;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _cos=env._cos;
  var _pwrite=env._pwrite;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _fsync=env._fsync;
  var _log10=env._log10;
  var ___errno_location=env.___errno_location;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _abort=env._abort;
  var _sbrk=env._sbrk;
  var _fmod=env._fmod;
  var _time=env._time;
  var __exit=env.__exit;
  var ___resumeException=env.___resumeException;
  var _strcmp=env._strcmp;
  var tempFloat = 0.0;
// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}
function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}
function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}
function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}
function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}
function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}
function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}
function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}
function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}
function runPostSets() {
HEAP32[((15792 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15800 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((15808 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15824 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15840 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15856 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15872 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15888 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15904 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15920 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15936 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15952 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15968 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((15984 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16000 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16016 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16032 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16048 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16064 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16072 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16088 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16104 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16152 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16192 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16232 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16272 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16344 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16360 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16400 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16408 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16424 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16440 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16456 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16472 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16480 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16496 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16544 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16552 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((16568 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((16576 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
}
function _handle_error($str){
 $str=($str)|0;
 var $1=0,$3=0,$4=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=($str|0)==0;
 if ($1) {
  STACKTOP=sp;return;
 } else {
  $3=((_printf(((8224)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$str,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $4=((_getchar())|0);
  _exit(((1)|0));
 }
}
function _meat_open_file($filename,$track){
 $filename=($filename)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=((_gme_open_file($filename,23016,44100))|0);
 _handle_error($1);
 $2=((HEAP32[((23016)>>2)])|0);
 $3=((_gme_start_track($2,$track))|0);
 _handle_error($3);
 return;
}
function _meat_start_track($track){
 $track=($track)|0;
 var $1=0,$2=0,label=0;
 $1=((HEAP32[((23016)>>2)])|0);
 $2=((_gme_start_track($1,$track))|0);
 _handle_error($2);
 return;
}
function _meat_generate_sound_data(){
 var $1=0,$2=0,label=0;
 $1=((HEAP32[((23016)>>2)])|0);
 $2=((_gme_play($1,16384,23024))|0);
 _handle_error($2);
 return ((23024)|0);
}
function _meat_song_info($track){
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=((HEAP32[((23016)>>2)])|0);
 $2=((_gme_track_info($1,19136,$track))|0);
 _handle_error($2);
 $3=((HEAP32[((8)>>2)])|0);
 $4=((HEAP32[((19136)>>2)])|0);
 $5=((HEAP32[((19140)>>2)])|0);
 $6=((_sprintf(((20968)|0),(($3)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 72)|0,HEAP32[((tempVarArgs)>>2)]=$4,HEAP32[(((tempVarArgs)+(8))>>2)]=$5,HEAP32[(((tempVarArgs)+(16))>>2)]=19152,HEAP32[(((tempVarArgs)+(24))>>2)]=19408,HEAP32[(((tempVarArgs)+(32))>>2)]=19664,HEAP32[(((tempVarArgs)+(40))>>2)]=19920,HEAP32[(((tempVarArgs)+(48))>>2)]=20176,HEAP32[(((tempVarArgs)+(56))>>2)]=20432,HEAP32[(((tempVarArgs)+(64))>>2)]=20688,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 STACKTOP=sp;return ((20968)|0);
}
function __ZN6Ay_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$out_014=0,$x_013=0,$flags_012=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$scevgep=0;
 var $79=0,$phitmp=0,$80=0,label=0;
 $1=(($this+480)|0);
 __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
 $5=7;
 while(1) {
  $6=(($this+92+((($5)*(48))&-1))|0);
  $7=((17912+$5)|0);
  $8=((HEAP8[($7)])|0);
  $9=($8&255);
  $flags_012=$9;$x_013=2;$out_014=$6;
  while(1) {
   $11=$flags_012&1;
   $12=(((-$11))|0);
   $13=$flags_012>>>1;
   $14=$13&1;
   $15=((($14)-($11))|0);
   $16=$12&15;
   $17=((17864+$16)|0);
   $18=((HEAP8[($17)])|0);
   $19=(($out_014+1)|0);
   HEAP8[($out_014)]=$18;
   $20=((($15)+($16))|0);
   $21=((17864+$20)|0);
   $22=((HEAP8[($21)])|0);
   $23=(($out_014+2)|0);
   HEAP8[($19)]=$22;
   $24=((($15)+($20))|0);
   $25=((17864+$24)|0);
   $26=((HEAP8[($25)])|0);
   $27=(($out_014+3)|0);
   HEAP8[($23)]=$26;
   $28=((($15)+($24))|0);
   $29=((17864+$28)|0);
   $30=((HEAP8[($29)])|0);
   $31=(($out_014+4)|0);
   HEAP8[($27)]=$30;
   $32=((($15)+($28))|0);
   $33=((17864+$32)|0);
   $34=((HEAP8[($33)])|0);
   $35=(($out_014+5)|0);
   HEAP8[($31)]=$34;
   $36=((($15)+($32))|0);
   $37=((17864+$36)|0);
   $38=((HEAP8[($37)])|0);
   $39=(($out_014+6)|0);
   HEAP8[($35)]=$38;
   $40=((($15)+($36))|0);
   $41=((17864+$40)|0);
   $42=((HEAP8[($41)])|0);
   $43=(($out_014+7)|0);
   HEAP8[($39)]=$42;
   $44=((($15)+($40))|0);
   $45=((17864+$44)|0);
   $46=((HEAP8[($45)])|0);
   $47=(($out_014+8)|0);
   HEAP8[($43)]=$46;
   $48=((($15)+($44))|0);
   $49=((17864+$48)|0);
   $50=((HEAP8[($49)])|0);
   $51=(($out_014+9)|0);
   HEAP8[($47)]=$50;
   $52=((($15)+($48))|0);
   $53=((17864+$52)|0);
   $54=((HEAP8[($53)])|0);
   $55=(($out_014+10)|0);
   HEAP8[($51)]=$54;
   $56=((($15)+($52))|0);
   $57=((17864+$56)|0);
   $58=((HEAP8[($57)])|0);
   $59=(($out_014+11)|0);
   HEAP8[($55)]=$58;
   $60=((($15)+($56))|0);
   $61=((17864+$60)|0);
   $62=((HEAP8[($61)])|0);
   $63=(($out_014+12)|0);
   HEAP8[($59)]=$62;
   $64=((($15)+($60))|0);
   $65=((17864+$64)|0);
   $66=((HEAP8[($65)])|0);
   $67=(($out_014+13)|0);
   HEAP8[($63)]=$66;
   $68=((($15)+($64))|0);
   $69=((17864+$68)|0);
   $70=((HEAP8[($69)])|0);
   $71=(($out_014+14)|0);
   HEAP8[($67)]=$70;
   $72=((($15)+($68))|0);
   $73=((17864+$72)|0);
   $74=((HEAP8[($73)])|0);
   $75=(($out_014+15)|0);
   HEAP8[($71)]=$74;
   $76=((($15)+($72))|0);
   $77=((17864+$76)|0);
   $78=((HEAP8[($77)])|0);
   HEAP8[($75)]=$78;
   $scevgep=(($out_014+16)|0);
   $79=$flags_012>>2;
   $phitmp=((($x_013)-(1))|0);
   $80=($phitmp|0)>-1;
   if ($80) {
    $flags_012=$79;$x_013=$phitmp;$out_014=$scevgep;
   } else {
    break;
   }
  }
  $2=((($5)-(1))|0);
  $3=($5|0)==0;
  if ($3) {
   break;
  } else {
   $5=$2;
  }
 }
 __ZN6Ay_Apu6outputEP11Blip_Buffer($this,0);
 __ZN6Ay_Apu6volumeEd($this,1.0);
 __ZN6Ay_Apu5resetEv($this);
 return;
}
function __ZN10Blip_SynthILi12ELi1EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN10Blip_SynthILi12ELi1EEC2Ev($this);
 return;
}
function __ZN6Ay_Apu6outputEP11Blip_Buffer($this,$buf){
 $this=($this)|0;
 $buf=($buf)|0;
 var label=0;
 __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 return;
}
function __ZN6Ay_Apu6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=.0,label=0;
 $1=(($this+480)|0);
 $2=($v)*((0.000915032679738562));
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$2);
 return;
}
function __ZN6Ay_Apu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$$etemp$0$0=0,$$etemp$0$1=0,$st$1$0=0,$st$2$1=0,$8=0,$9=0,$10=0,$$etemp$3$0=0,$$etemp$3$1=0,$st$4$0=0,$st$5$1=0,$11=0,$12=0;
 var $$etemp$6$0=0,$$etemp$6$1=0,$st$7$0=0,$st$8$1=0,$13=0,$14=0,label=0;
 $1=(($this+48)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+72)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+76)|0);
 HEAP32[(($3)>>2)]=1;
 $4=(($this+32)|0);
 HEAP32[(($4)>>2)]=16;
 $5=(($this+36)|0);
 $6=(($this+16)|0);
 $7=$5;
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($7)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 $st$2$1=(($7+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 HEAP32[(($6)>>2)]=16;
 $8=(($this+20)|0);
 $9=(($this)|0);
 $10=$8;
 $$etemp$3$0=0;
 $$etemp$3$1=0;
 $st$4$0=(($10)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 $st$5$1=(($10+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 HEAP32[(($9)>>2)]=16;
 $11=(($this+4)|0);
 $12=$11;
 $$etemp$6$0=0;
 $$etemp$6$1=0;
 $st$7$0=(($12)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 $st$8$1=(($12+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 $13=(($this+53)|0);
 $14=(($this+60)|0);
 _memset((((($13)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 HEAP8[($14)]=-1;
 __ZN6Ay_Apu11write_data_Eii($this,13,0);
 return;
}
function __ZN6Ay_Apu11write_data_Eii($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$4=0,$extract_t18=0,$6=0,$7=0,$9=0,$10=0,$11=0,$_0=0,$13=0,$14=0,$15=0,$16=0,$17=0,$extract_t=0,$_1_off0=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$_=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $storemerge=0,label=0;
 $1=($addr>>>0)<((16)>>>0);
 if (!($1)) {
  ___assert_fail(((5496)|0),((7312)|0),((122)|0),((9224)|0));
 }
 $4=($addr|0)==13;
 $extract_t18=(($data)&255);
 if ($4) {
  $6=$data&8;
  $7=($6|0)==0;
  if ($7) {
   $9=$data&4;
   $10=($9|0)!=0;
   $11=($10?15:9);
   $_0=$11;
  } else {
   $_0=$data;
  }
  $13=((($_0)-(7))|0);
  $14=(($this+92+((($13)*(48))&-1))|0);
  $15=(($this+84)|0);
  HEAP32[(($15)>>2)]=$14;
  $16=(($this+88)|0);
  HEAP32[(($16)>>2)]=-48;
  $17=(($this+80)|0);
  HEAP32[(($17)>>2)]=0;
  $extract_t=(($_0)&255);
  $_1_off0=$extract_t;
 } else {
  $_1_off0=$extract_t18;
 }
 $19=(($this+53+$addr)|0);
 HEAP8[($19)]=$_1_off0;
 $20=$addr>>1;
 $21=($20|0)<3;
 if (!($21)) {
  return;
 }
 $23=$20<<1;
 $24=$23|1;
 $25=(($this+53+$24)|0);
 $26=((HEAP8[($25)])|0);
 $27=($26&255);
 $28=$27<<12;
 $29=$28&61440;
 $30=(($this+53+$23)|0);
 $31=((HEAP8[($30)])|0);
 $32=($31&255);
 $33=$32<<4;
 $34=$29|$33;
 $35=($34|0)==0;
 $_=($35?16:$34);
 $36=(($this+($20<<4))|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=((($_)-($37))|0);
 $39=(($this+($20<<4)+4)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=((($38)+($40))|0);
 $42=($41|0)<0;
 $storemerge=($42?0:$41);
 HEAP32[(($39)>>2)]=$storemerge;
 HEAP32[(($36)>>2)]=$_;
 return;
}
function __ZN6Ay_Apu9run_untilEi($this,$final_end_time){
 $this=($this)|0;
 $final_end_time=($final_end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$_=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$env_period_0=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$index_0156=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$_129=0,$half_vol_0=0,$osc_mode_0=0,$58=0,$59=0,$60=0,$61=0;
 var $62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$or_cond=0,$82=0;
 var $83=0,$84=0,$_final_end_time=0,$86=0,$_osc_mode_0=0,$88=0,$_osc_mode_0130=0,$volume_0=0,$end_time_0=0,$osc_mode_1=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$97=0,$98=0,$99=0,$100=0;
 var $101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$time_0=0,$109=0,$110=0,$111=0,$final_end_time_=0,$_131=0,$112=0,$113=0,$114=0,$osc_env_pos_0=0,$volume_1=0,$time_1=0,$end_time_1=0;
 var $ntime_0=0,$noise_lfsr_0=0,$start_time_0=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$_volume_1=0,$123=0,$124=0,$125=0,$127=0,$128=0,$130=0,$131=0,$or_cond132=0,$133=0;
 var $134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$time_2=0,$ntime_1=0,$noise_lfsr_1=0,$delta1_0=0,$phase_0=0,$140=0,$time_2_end_time_1=0,$141=0,$142=0,$143=0,$delta1_1139=0,$noise_lfsr_2138=0,$ntime_2137=0,$144=0;
 var $145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$153=0,$delta1_2=0,$155=0,$156=0,$158=0,$159=0,$161=0,$162=0,$163=0,$ntime_3=0,$noise_lfsr_3=0,$delta1_3=0,$164=0;
 var $ntime_3_end_time_1=0,$165=0,$166=0,$167=0,$168=0,$169=0,$time_3143=0,$170=0,$171=0,$172=0,$_lcssa=0,$delta1_4_lcssa=0,$time_3_lcssa=0,$173=0,$phase_1151=0,$time_4150=0,$174=0,$175=0,$176=0,$time_5=0;
 var $delta1_5=0,$phase_2=0,$177=0,$180=0,$181=0,$182=0,$184=0,$time_6=0,$ntime_4=0,$noise_lfsr_4=0,$186=0,$188=0,$189=0,$190=0,$_133=0,$191=0,$192=0,$193=0,$194=0,$195=0;
 var $196=0,$197=0,$final_end_time_134=0,$199=0,$201=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0;
 var $storemerge=0,$220=0,$221=0,$222=0,$223=0,$226=0,$227=0,$230=0,$231=0,$232=0,label=0;
 $1=(($this+48)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($final_end_time|0);
 if ($3) {
  ___assert_fail(((4888)|0),((7312)|0),((166)|0),((9192)|0));
 }
 $6=(($this+59)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=$8<<5;
 $10=$9&992;
 $11=($10|0)==0;
 $_=($11?32:$10);
 $12=(($this+72)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($this+76)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($this+65)|0);
 $17=((HEAP8[($16)])|0);
 $18=($17&255);
 $19=$18<<8;
 $20=(($this+64)|0);
 $21=((HEAP8[($20)])|0);
 $22=($21&255);
 $23=$19|$22;
 $24=$23<<5;
 $25=($23|0)==0;
 $env_period_0=($25?32:$24);
 $26=(($this+80)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($27|0)==0;
 if ($28) {
  HEAP32[(($26)>>2)]=$env_period_0;
 }
 $30=(($this+60)|0);
 $31=(($this+88)|0);
 $32=((($final_end_time)-(1))|0);
 $33=(($this+480)|0);
 $34=(($this+480)|0);
 $35=(($this+84)|0);
 $36=(($this+480)|0);
 $37=(($this+84)|0);
 $38=(($this+66)|0);
 $index_0156=0;
 while(1) {
  $40=((HEAP8[($30)])|0);
  $41=($40&255);
  $42=$41>>>($index_0156>>>0);
  $43=(($this+($index_0156<<4)+12)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=($44|0)==0;
  do {
   if (!($45)) {
    __ZN11Blip_Buffer12set_modifiedEv($44);
    $47=((__ZNK11Blip_Buffer10clock_rateEv($44))|0);
    $48=((($47)+(16384))|0);
    $49=$48>>>15;
    $50=(($this+($index_0156<<4))|0);
    $51=((HEAP32[(($50)>>2)])|0);
    $52=($51|0)>($49|0);
    if ($52) {
     $osc_mode_0=$42;$half_vol_0=0;
    } else {
     $54=$42&1;
     $55=$54^1;
     $56=$54^1;
     $_129=$56|$42;
     $osc_mode_0=$_129;$half_vol_0=$55;
    }
    $58=((HEAP32[(($1)>>2)])|0);
    $59=((($index_0156)+(8))|0);
    $60=(($this+53+$59)|0);
    $61=((HEAP8[($60)])|0);
    $62=($61&255);
    $63=$62&15;
    $64=((17864+$63)|0);
    $65=((HEAP8[($64)])|0);
    $66=($65&255);
    $67=$66>>>($half_vol_0>>>0);
    $68=((HEAP32[(($31)>>2)])|0);
    $69=$62&16;
    $70=($69|0)==0;
    do {
     if ($70) {
      $88=($67|0)==0;
      $_osc_mode_0130=($88?9:$osc_mode_0);
      $osc_mode_1=$_osc_mode_0130;$end_time_0=$final_end_time;$volume_0=$67;
     } else {
      $72=((HEAP32[(($37)>>2)])|0);
      $73=(($72+$68)|0);
      $74=((HEAP8[($73)])|0);
      $75=($74&255);
      $76=$75>>>($half_vol_0>>>0);
      $77=((HEAP8[($38)])|0);
      $78=$77&1;
      $79=(($78<<24)>>24)==0;
      $80=($68|0)<-32;
      $or_cond=$79|$80;
      if ($or_cond) {
       $82=((HEAP32[(($26)>>2)])|0);
       $83=((($82)+($58))|0);
       $84=($83|0)<($final_end_time|0);
       $_final_end_time=($84?$83:$final_end_time);
       $osc_mode_1=$osc_mode_0;$end_time_0=$_final_end_time;$volume_0=$76;
       break;
      } else {
       $86=($76|0)==0;
       $_osc_mode_0=($86?9:$osc_mode_0);
       $osc_mode_1=$_osc_mode_0;$end_time_0=$final_end_time;$volume_0=$76;
       break;
      }
     }
    } while(0);
    $90=((HEAP32[(($50)>>2)])|0);
    $91=(($this+($index_0156<<4)+4)|0);
    $92=((HEAP32[(($91)>>2)])|0);
    $93=((($92)+($58))|0);
    $94=$osc_mode_1&1;
    $95=($94|0)!=0;
    if ($95) {
     $97=((($32)+($90))|0);
     $98=((($97)-($93))|0);
     $99=(((($98|0))/(($90|0)))&-1);
     $100=(Math_imul($99,$90)|0);
     $101=((($100)+($93))|0);
     $102=$99&1;
     $103=(($this+($index_0156<<4)+10)|0);
     $104=((HEAP16[(($103)>>1)])|0);
     $105=($104&65535);
     $106=$105^$102;
     $107=(($106)&65535);
     HEAP16[(($103)>>1)]=$107;
     $time_0=$101;
    } else {
     $time_0=$93;
    }
    $109=$osc_mode_1&8;
    $110=($109|0)!=0;
    $111=((($58)+($13))|0);
    $final_end_time_=($110?$final_end_time:$111);
    $_131=($110?1:$15);
    $112=(($this+($index_0156<<4)+10)|0);
    $113=$osc_mode_1>>>3;
    $114=(($this+($index_0156<<4)+8)|0);
    $start_time_0=$58;$noise_lfsr_0=$_131;$ntime_0=$final_end_time_;$end_time_1=$end_time_0;$time_1=$time_0;$volume_1=$volume_0;$osc_env_pos_0=$68;
    while(1) {
     $116=((HEAP16[(($112)>>1)])|0);
     $117=($116&65535);
     $118=$117|$osc_mode_1;
     $119=$noise_lfsr_0|$113;
     $120=$119&1;
     $121=$120&$118;
     $122=($121|0)==0;
     $_volume_1=($122?0:$volume_1);
     $123=((HEAP16[(($114)>>1)])|0);
     $124=(($123<<16)>>16);
     $125=($_volume_1|0)==($124|0);
     if (!($125)) {
      $127=((($_volume_1)-($124))|0);
      $128=(($_volume_1)&65535);
      HEAP16[(($114)>>1)]=$128;
      __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($36,$start_time_0,$127,$44);
     }
     $130=($ntime_0|0)<($end_time_1|0);
     $131=($time_1|0)<($end_time_1|0);
     $or_cond132=$130|$131;
     do {
      if ($or_cond132) {
       $133=$_volume_1<<1;
       $134=((($133)-($volume_1))|0);
       $135=($133|0)!=($volume_1|0);
       $136=($135&1);
       $137=((HEAP16[(($112)>>1)])|0);
       $138=(($137<<16)>>16);
       $139=$138|$94;
       $phase_0=$139;$delta1_0=$134;$noise_lfsr_1=$noise_lfsr_0;$ntime_1=$ntime_0;$time_2=$time_1;
       while(1) {
        $140=($end_time_1|0)>($time_2|0);
        $time_2_end_time_1=($140?$time_2:$end_time_1);
        $141=$phase_0&$136;
        $142=($141|0)==0;
        do {
         if ($142) {
          $158=((($time_2_end_time_1)-($ntime_1))|0);
          $159=($158|0)>-1;
          if (!($159)) {
           $delta1_3=$delta1_0;$noise_lfsr_3=$noise_lfsr_1;$ntime_3=$ntime_1;
           break;
          }
          $161=(((($158|0))%(($_|0)))&-1);
          $162=((($time_2_end_time_1)+($_))|0);
          $163=((($162)-($161))|0);
          $delta1_3=$delta1_0;$noise_lfsr_3=$noise_lfsr_1;$ntime_3=$163;
         } else {
          $143=($ntime_1|0)>($time_2_end_time_1|0);
          if ($143) {
           $delta1_3=$delta1_0;$noise_lfsr_3=$noise_lfsr_1;$ntime_3=$ntime_1;
           break;
          } else {
           $ntime_2137=$ntime_1;$noise_lfsr_2138=$noise_lfsr_1;$delta1_1139=$delta1_0;
          }
          while(1) {
           $144=((($noise_lfsr_2138)+(1))|0);
           $145=$noise_lfsr_2138&1;
           $146=(((-$145))|0);
           $147=$146&73728;
           $148=$noise_lfsr_2138>>>1;
           $149=$147^$148;
           $150=$144&2;
           $151=($150|0)==0;
           if ($151) {
            $delta1_2=$delta1_1139;
           } else {
            $153=(((-$delta1_1139))|0);
            __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($34,$ntime_2137,$153,$44);
            $delta1_2=$153;
           }
           $155=((($ntime_2137)+($_))|0);
           $156=($155|0)>($time_2_end_time_1|0);
           if ($156) {
            $delta1_3=$delta1_2;$noise_lfsr_3=$149;$ntime_3=$155;
            break;
           } else {
            $ntime_2137=$155;$noise_lfsr_2138=$149;$delta1_1139=$delta1_2;
           }
          }
         }
        } while(0);
        $164=($end_time_1|0)>($ntime_3|0);
        $ntime_3_end_time_1=($164?$ntime_3:$end_time_1);
        $165=$noise_lfsr_3&$136;
        $166=($165|0)==0;
        $167=($time_2|0)<($ntime_3_end_time_1|0);
        do {
         if ($166) {
          if ($167) {
           $time_4150=$time_2;$phase_1151=$phase_0;
          } else {
           $phase_2=$phase_0;$delta1_5=$delta1_3;$time_5=$time_2;
           break;
          }
          while(1) {
           $174=((($time_4150)+($90))|0);
           $175=$phase_1151^1;
           $176=($174|0)<($ntime_3_end_time_1|0);
           if ($176) {
            $time_4150=$174;$phase_1151=$175;
           } else {
            $phase_2=$175;$delta1_5=$delta1_3;$time_5=$174;
            break;
           }
          }
         } else {
          $168=(((-$delta1_3))|0);
          if ($167) {
           $time_3143=$time_2;$169=$168;
           while(1) {
            __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($33,$time_3143,$169,$44);
            $170=((($time_3143)+($90))|0);
            $171=($170|0)<($ntime_3_end_time_1|0);
            $172=(((-$169))|0);
            if ($171) {
             $time_3143=$170;$169=$172;
            } else {
             $time_3_lcssa=$170;$delta1_4_lcssa=$169;$_lcssa=$172;
             break;
            }
           }
          } else {
           $time_3_lcssa=$time_2;$delta1_4_lcssa=$delta1_3;$_lcssa=$168;
          }
          $173=$_lcssa>>>31;
          $phase_2=$173;$delta1_5=$delta1_4_lcssa;$time_5=$time_3_lcssa;
         }
        } while(0);
        $177=($time_5|0)<($end_time_1|0);
        if ($177) {
         $phase_0=$phase_2;$delta1_0=$delta1_5;$noise_lfsr_1=$noise_lfsr_3;$ntime_1=$ntime_3;$time_2=$time_5;
         continue;
        }
        if ($164) {
         $phase_0=$phase_2;$delta1_0=$delta1_5;$noise_lfsr_1=$noise_lfsr_3;$ntime_1=$ntime_3;$time_2=$time_5;
        } else {
         break;
        }
       }
       $180=((($delta1_5)+($volume_1))|0);
       $181=$180>>>1;
       $182=(($181)&65535);
       HEAP16[(($114)>>1)]=$182;
       if ($95) {
        $noise_lfsr_4=$noise_lfsr_3;$ntime_4=$ntime_3;$time_6=$time_5;
        break;
       }
       $184=(($phase_2)&65535);
       HEAP16[(($112)>>1)]=$184;
       $noise_lfsr_4=$noise_lfsr_3;$ntime_4=$ntime_3;$time_6=$time_5;
      } else {
       $noise_lfsr_4=$noise_lfsr_0;$ntime_4=$ntime_0;$time_6=$time_1;
      }
     } while(0);
     $186=($end_time_1|0)<($final_end_time|0);
     if (!($186)) {
      break;
     }
     $188=((($osc_env_pos_0)+(1))|0);
     $189=($188|0)>-1;
     $190=((($osc_env_pos_0)-(31))|0);
     $_133=($189?$190:$188);
     $191=((HEAP32[(($35)>>2)])|0);
     $192=(($191+$_133)|0);
     $193=((HEAP8[($192)])|0);
     $194=($193&255);
     $195=$194>>>($half_vol_0>>>0);
     $196=((($end_time_1)+($env_period_0))|0);
     $197=($196|0)>($final_end_time|0);
     $final_end_time_134=($197?$final_end_time:$196);
     $start_time_0=$end_time_1;$noise_lfsr_0=$noise_lfsr_4;$ntime_0=$ntime_4;$end_time_1=$final_end_time_134;$time_1=$time_6;$volume_1=$195;$osc_env_pos_0=$_133;
    }
    $199=((($time_6)-($final_end_time))|0);
    HEAP32[(($91)>>2)]=$199;
    if ($110) {
     break;
    }
    $201=((($ntime_4)-($final_end_time))|0);
    HEAP32[(($12)>>2)]=$201;
    HEAP32[(($14)>>2)]=$noise_lfsr_4;
   }
  } while(0);
  $203=((($index_0156)+(1))|0);
  $204=($203|0)<3;
  if ($204) {
   $index_0156=$203;
  } else {
   break;
  }
 }
 $206=((HEAP32[(($1)>>2)])|0);
 $207=((($final_end_time)-($206))|0);
 $208=((HEAP32[(($26)>>2)])|0);
 $209=((($207)-($208))|0);
 $210=($209|0)>-1;
 do {
  if ($210) {
   $213=((($209)+($env_period_0))|0);
   $214=(((($213|0))/(($env_period_0|0)))&-1);
   $215=(($this+88)|0);
   $216=((HEAP32[(($215)>>2)])|0);
   $217=((($216)+($214))|0);
   $218=($217|0)>-1;
   $219=$217|-32;
   $storemerge=($218?$219:$217);
   HEAP32[(($215)>>2)]=$storemerge;
   $220=(Math_imul($214,$env_period_0)|0);
   $221=((($209)-($220))|0);
   $222=(((-$221))|0);
   $223=($env_period_0|0)<($222|0);
   if ($223) {
    ___assert_fail(((3944)|0),((7312)|0),((388)|0),((9192)|0));
   }
   $226=(((-$221))|0);
   HEAP32[(($26)>>2)]=$226;
   $227=($221|0)<0;
   if ($227) {
    break;
   }
   ___assert_fail(((3200)|0),((7312)|0),((391)|0),((9192)|0));
  } else {
   $211=(((-$209))|0);
   HEAP32[(($26)>>2)]=$211;
  }
 } while(0);
 $230=(($this+88)|0);
 $231=((HEAP32[(($230)>>2)])|0);
 $232=($231|0)<0;
 if ($232) {
  HEAP32[(($1)>>2)]=$final_end_time;
  return;
 } else {
  ___assert_fail(((2536)|0),((7312)|0),((392)|0),((9192)|0));
 }
}
function __ZN11Blip_Buffer12set_modifiedEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+40)|0);
 HEAP32[(($1)>>2)]=1;
 return;
}
function __ZNK11Blip_Buffer10clock_rateEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+28)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($this,$t,$delta,$buf){
 $this=($this)|0;
 $t=($t)|0;
 $delta=($delta)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($buf)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=(($buf+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($3)+($5))|0);
 __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
 return;
}
function __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf){
 $this=($this)|0;
 $time=($time)|0;
 $delta=($delta)|0;
 $blip_buf=($blip_buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_sum=0,$14=0,$15=0,$16=0,$17=0,$_sum59=0,$18=0,$19=0,$20=0;
 var $_sum60=0,$21=0,$22=0,$23=0,$24=0,$_sum61=0,$25=0,$26=0,$27=0,$_sum6263=0,$28=0,$29=0,$30=0,$31=0,$_sum64=0,$32=0,$33=0,$34=0,$_sum65=0,$35=0;
 var $36=0,$37=0,$38=0,$_sum66=0,$39=0,$40=0,$41=0,$_sum6768=0,$42=0,$43=0,$44=0,$45=0,$_sum69=0,$46=0,$47=0,$48=0,$_sum70=0,$49=0,$50=0,$51=0;
 var $52=0,$_sum71=0,$53=0,$54=0,$55=0,$56=0,$_sum7273=0,$57=0,$58=0,$59=0,$60=0,$_sum74=0,$61=0,$62=0,$63=0,$_sum7576=0,$64=0,$65=0,$66=0,$67=0;
 var $_sum77=0,$68=0,$69=0,$70=0,$_sum7879=0,$71=0,$72=0,$73=0,$74=0,$_sum80=0,$75=0,$76=0,$77=0,$_sum8182=0,$78=0,$79=0,$80=0,$81=0,$_sum83=0,$82=0;
 var $83=0,$84=0,$_sum8485=0,$85=0,$86=0,$87=0,$88=0,$_sum86=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$_sum87=0,$95=0,$96=0,$97=0,label=0;
 $1=$time>>>16;
 $2=(($blip_buf+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($1|0)<($3|0);
 if ($4) {
  $7=(($this+8)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(Math_imul($8,$delta)|0);
  $10=(($blip_buf+8)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=$time>>>10;
  $13=$12&63;
  $_sum=(((64)-($13))|0);
  $14=(($this+40+($_sum<<1))|0);
  $15=((HEAP16[(($14)>>1)])|0);
  $16=(($15<<16)>>16);
  $17=(Math_imul($16,$9)|0);
  $_sum59=((($1)+(2))|0);
  $18=(($11+($_sum59<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((($17)+($19))|0);
  $_sum60=((($_sum)+(64))|0);
  $21=(($this+40+($_sum60<<1))|0);
  $22=((HEAP16[(($21)>>1)])|0);
  $23=(($22<<16)>>16);
  $24=(Math_imul($23,$9)|0);
  $_sum61=((($1)+(3))|0);
  $25=(($11+($_sum61<<2))|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((($24)+($26))|0);
  $_sum6263=$_sum|128;
  $28=(($this+40+($_sum6263<<1))|0);
  $29=((HEAP16[(($28)>>1)])|0);
  $30=(($29<<16)>>16);
  HEAP32[(($18)>>2)]=$20;
  HEAP32[(($25)>>2)]=$27;
  $31=(Math_imul($30,$9)|0);
  $_sum64=((($1)+(4))|0);
  $32=(($11+($_sum64<<2))|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=((($31)+($33))|0);
  $_sum65=((($_sum)+(192))|0);
  $35=(($this+40+($_sum65<<1))|0);
  $36=((HEAP16[(($35)>>1)])|0);
  $37=(($36<<16)>>16);
  $38=(Math_imul($37,$9)|0);
  $_sum66=((($1)+(5))|0);
  $39=(($11+($_sum66<<2))|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=((($38)+($40))|0);
  $_sum6768=$_sum|256;
  $42=(($this+40+($_sum6768<<1))|0);
  $43=((HEAP16[(($42)>>1)])|0);
  $44=(($43<<16)>>16);
  HEAP32[(($32)>>2)]=$34;
  HEAP32[(($39)>>2)]=$41;
  $45=(Math_imul($44,$9)|0);
  $_sum69=((($1)+(6))|0);
  $46=(($11+($_sum69<<2))|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=((($45)+($47))|0);
  $_sum70=((($_sum)+(320))|0);
  $49=(($this+40+($_sum70<<1))|0);
  $50=((HEAP16[(($49)>>1)])|0);
  $51=(($50<<16)>>16);
  $52=(Math_imul($51,$9)|0);
  $_sum71=((($1)+(7))|0);
  $53=(($11+($_sum71<<2))|0);
  $54=((HEAP32[(($53)>>2)])|0);
  $55=((($52)+($54))|0);
  $56=(($this+40+($13<<1))|0);
  $_sum7273=$13|320;
  $57=(($this+40+($_sum7273<<1))|0);
  $58=((HEAP16[(($57)>>1)])|0);
  $59=(($58<<16)>>16);
  HEAP32[(($46)>>2)]=$48;
  HEAP32[(($53)>>2)]=$55;
  $60=(Math_imul($59,$9)|0);
  $_sum74=((($1)+(8))|0);
  $61=(($11+($_sum74<<2))|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=((($60)+($62))|0);
  $_sum7576=$13|256;
  $64=(($this+40+($_sum7576<<1))|0);
  $65=((HEAP16[(($64)>>1)])|0);
  $66=(($65<<16)>>16);
  $67=(Math_imul($66,$9)|0);
  $_sum77=((($1)+(9))|0);
  $68=(($11+($_sum77<<2))|0);
  $69=((HEAP32[(($68)>>2)])|0);
  $70=((($67)+($69))|0);
  $_sum7879=$13|192;
  $71=(($this+40+($_sum7879<<1))|0);
  $72=((HEAP16[(($71)>>1)])|0);
  $73=(($72<<16)>>16);
  HEAP32[(($61)>>2)]=$63;
  HEAP32[(($68)>>2)]=$70;
  $74=(Math_imul($73,$9)|0);
  $_sum80=((($1)+(10))|0);
  $75=(($11+($_sum80<<2))|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $77=((($74)+($76))|0);
  $_sum8182=$13|128;
  $78=(($this+40+($_sum8182<<1))|0);
  $79=((HEAP16[(($78)>>1)])|0);
  $80=(($79<<16)>>16);
  $81=(Math_imul($80,$9)|0);
  $_sum83=((($1)+(11))|0);
  $82=(($11+($_sum83<<2))|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=((($81)+($83))|0);
  $_sum8485=$13|64;
  $85=(($this+40+($_sum8485<<1))|0);
  $86=((HEAP16[(($85)>>1)])|0);
  $87=(($86<<16)>>16);
  HEAP32[(($75)>>2)]=$77;
  HEAP32[(($82)>>2)]=$84;
  $88=(Math_imul($87,$9)|0);
  $_sum86=((($1)+(12))|0);
  $89=(($11+($_sum86<<2))|0);
  $90=((HEAP32[(($89)>>2)])|0);
  $91=((($88)+($90))|0);
  $92=((HEAP16[(($56)>>1)])|0);
  $93=(($92<<16)>>16);
  $94=(Math_imul($93,$9)|0);
  $_sum87=((($1)+(13))|0);
  $95=(($11+($_sum87<<2))|0);
  $96=((HEAP32[(($95)>>2)])|0);
  $97=((($94)+($96))|0);
  HEAP32[(($89)>>2)]=$91;
  HEAP32[(($95)>>2)]=$97;
  return;
 } else {
  ___assert_fail(((2024)|0),((1592)|0),((343)|0),((8536)|0));
 }
}
function __ZN10Blip_SynthILi12ELi1EEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=(($this+40)|0);
 __ZN11Blip_Synth_C2EPsi($1,$2,12);
 return;
}
function __ZN10Blip_SynthILi12ELi1EE6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN11Blip_Synth_11volume_unitEd($1,$v);
 return;
}
function __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf){
 $this=($this)|0;
 $i=($i)|0;
 $buf=($buf)|0;
 var $1=0,$4=0,label=0;
 $1=($i>>>0)<((3)>>>0);
 if ($1) {
  $4=(($this+($i<<4)+12)|0);
  HEAP32[(($4)>>2)]=$buf;
  return;
 } else {
  ___assert_fail(((1216)|0),((728)|0),((87)|0),((9256)|0));
 }
}
function __ZN6Ay_CpuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$i_011=0,$3=0,$p_010=0,$even_09=0,$4=0,$5=0,$6=0,$phitmp12=0,$phitmp13=0,$even_0_lcssa=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $phitmp=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,label=0;
 $1=(($this+524)|0);
 $2=(($this+520)|0);
 HEAP32[(($2)>>2)]=$1;
 $i_011=255;
 while(1) {
  $3=($i_011|0)==0;
  if ($3) {
   $even_0_lcssa=4;
  } else {
   $even_09=1;$p_010=$i_011;
   while(1) {
    $4=$p_010^$even_09;
    $5=$p_010>>1;
    $6=($5|0)==0;
    if ($6) {
     break;
    } else {
     $even_09=$4;$p_010=$5;
    }
   }
   $phitmp12=$4<<2;
   $phitmp13=$phitmp12&4;
   $even_0_lcssa=$phitmp13;
  }
  $8=$i_011&168;
  $9=$even_0_lcssa|$8;
  $10=(($9)&255);
  $11=(($this+$i_011)|0);
  HEAP8[($11)]=$10;
  $12=$9|1;
  $13=(($12)&255);
  $14=((($i_011)+(256))|0);
  $15=(($this+$14)|0);
  HEAP8[($15)]=$13;
  $phitmp=((($i_011)-(1))|0);
  $16=($phitmp|0)>-1;
  if ($16) {
   $i_011=$phitmp;
  } else {
   break;
  }
 }
 $18=(($this)|0);
 $19=((HEAP8[($18)])|0);
 $20=$19|64;
 HEAP8[($18)]=$20;
 $21=(($this+256)|0);
 $22=((HEAP8[($21)])|0);
 $23=$22|64;
 HEAP8[($21)]=$23;
 return;
}
function __ZN6Ay_Cpu5resetEPv($this,$m){
 $this=($this)|0;
 $m=($m)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+512)|0);
 HEAP32[(($1)>>2)]=$m;
 $2=(($this+524)|0);
 $3=(($this+520)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($this+516)|0);
 HEAP32[(($4)>>2)]=0;
 $5=$2;
 _memset((((($5)|0))|0), ((((0)|0))|0), ((((38)|0))|0));
 return;
}
function __ZN6Ay_Cpu3runEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $s=0,$tmpcast=0,$1=0,$2=0,$3=0,$ld$0$0=0,$4$0=0,$ld$1$1=0,$4$1=0,$st$2$0=0,$st$3$1=0,$5=0,$6=0,$7=0,$8=0,$9=0,$ld$4$0=0,$10$0=0,$ld$5$1=0,$10$1=0;
 var $st$6$0=0,$st$7$1=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0;
 var $29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$or_cond723=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0;
 var $68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0;
 var $88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0;
 var $108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0;
 var $128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0;
 var $148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0;
 var $168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0;
 var $188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0;
 var $208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0;
 var $228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0;
 var $pc_0=0,$249=0,$flags_0_be=0,$iy_0_be=0,$ix_0_be=0,$sp_0_be=0,$pc_1_be=0,$s_time_1_be=0,$warning_0_off0_be=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$or_cond=0,$260=0;
 var $s_time_0=0,$262=0,$264=0,$_in=0,$265=0,$266=0,$warning_0_off0778=0,$sp_0760=0,$ix_0745=0,$iy_0730=0,$flags_0724=0,$267=0,$268=0,$269=0,$270=0,$272=0,$273=0,$274=0,$275=0,$276=0;
 var $278=0,$279=0,$280=0,$281=0,$282=0,$283=0,$284=0,$286=0,$288=0,$290=0,$291=0,$292=0,$293=0,$295=0,$296=0,$297=0,$299=0,$300=0,$302=0,$303=0;
 var $304=0,$306=0,$307=0,$309=0,$310=0,$311=0,$313=0,$314=0,$316=0,$317=0,$318=0,$320=0,$321=0,$323=0,$324=0,$325=0,$327=0,$328=0,$329=0,$330=0;
 var $331=0,$332=0,$334=0,$335=0,$337=0,$338=0,$340=0,$342=0,$343=0,$345=0,$347=0,$348=0,$350=0,$352=0,$353=0,$355=0,$357=0,$358=0,$360=0,$362=0;
 var $363=0,$365=0,$367=0,$368=0,$370=0,$372=0,$373=0,$375=0,$377=0,$379=0,$380=0,$382=0,$383=0,$385=0,$387=0,$388=0,$390=0,$392=0,$393=0,$395=0;
 var $397=0,$398=0,$400=0,$402=0,$403=0,$405=0,$407=0,$408=0,$410=0,$412=0,$413=0,$415=0,$417=0,$418=0,$420=0,$s_time_2=0,$422=0,$423=0,$424=0,$425=0;
 var $427=0,$428=0,$430=0,$431=0,$433=0,$434=0,$436=0,$437=0,$439=0,$440=0,$442=0,$443=0,$445=0,$446=0,$448=0,$449=0,$451=0,$452=0,$453=0,$454=0;
 var $455=0,$457=0,$459=0,$460=0,$462=0,$464=0,$465=0,$466=0,$467=0,$469=0,$470=0,$471=0,$472=0,$473=0,$data_0=0,$pc_2=0,$s_time_3=0,$475=0,$476=0,$477=0;
 var $479=0,$480=0,$481=0,$482=0,$483=0,$484=0,$485=0,$486=0,$488=0,$489=0,$490=0,$491=0,$492=0,$493=0,$494=0,$495=0,$497=0,$flags_1=0,$499=0,$500=0;
 var $501=0,$502=0,$503=0,$505=0,$flags_2=0,$507=0,$509=0,$flags_3=0,$511=0,$512=0,$513=0,$514=0,$515=0,$data_1=0,$opcode_0=0,$flags_4=0,$pc_3=0,$s_time_4=0,$517=0,$518=0;
 var $519=0,$520=0,$521=0,$522=0,$523=0,$524=0,$525=0,$result_0=0,$526=0,$527=0,$528=0,$529=0,$530=0,$531=0,$532=0,$533=0,$534=0,$535=0,$536=0,$537=0;
 var $538=0,$539=0,$540=0,$542=0,$543=0,$544=0,$545=0,$546=0,$548=0,$550=0,$551=0,$552=0,$553=0,$data_2=0,$pc_4=0,$s_time_5=0,$555=0,$556=0,$557=0,$558=0;
 var $559=0,$560=0,$561=0,$562=0,$563=0,$564=0,$565=0,$566=0,$_masked=0,$567=0,$568=0,$569=0,$570=0,$571=0,$572=0,$573=0,$575=0,$577=0,$_sum687=0,$578=0;
 var $579=0,$580=0,$581=0,$data_3=0,$583=0,$584=0,$585=0,$586=0,$587=0,$588=0,$589=0,$590=0,$591=0,$592=0,$593=0,$594=0,$595=0,$596=0,$597=0,$599=0;
 var $600=0,$601=0,$602=0,$_flags_0=0,$603=0,$604=0,$605=0,$606=0,$607=0,$609=0,$610=0,$612=0,$adjust_0=0,$614=0,$615=0,$616=0,$adjust_1=0,$617=0,$618=0,$619=0;
 var $620=0,$621=0,$622=0,$623=0,$624=0,$625=0,$626=0,$627=0,$628=0,$629=0,$631=0,$632=0,$633=0,$634=0,$635=0,$636=0,$637=0,$639=0,$640=0,$641=0;
 var $642=0,$643=0,$644=0,$data_4=0,$iy_1=0,$ix_1=0,$pc_5=0,$s_time_6=0,$646=0,$647=0,$648=0,$649=0,$650=0,$651=0,$652=0,$653=0,$654=0,$655=0,$656=0,$657=0;
 var $659=0,$661=0,$662=0,$663=0,$664=0,$665=0,$666=0,$667=0,$669=0,$670=0,$671=0,$672=0,$673=0,$674=0,$data_5=0,$iy_2=0,$ix_2=0,$pc_6=0,$s_time_7=0,$676=0;
 var $677=0,$678=0,$679=0,$680=0,$681=0,$682=0,$683=0,$684=0,$685=0,$686=0,$687=0,$688=0,$690=0,$692=0,$693=0,$694=0,$695=0,$696=0,$698=0,$699=0;
 var $701=0,$_sum686=0,$702=0,$703=0,$704=0,$705=0,$707=0,$708=0,$710=0,$711=0,$712=0,$713=0,$714=0,$716=0,$718=0,$719=0,$720=0,$721=0,$data_6=0,$pc_7=0;
 var $s_time_8=0,$723=0,$724=0,$725=0,$726=0,$727=0,$728=0,$729=0,$730=0,$732=0,$733=0,$734=0,$735=0,$736=0,$738=0,$740=0,$741=0,$742=0,$743=0,$data_7=0;
 var $pc_8=0,$s_time_9=0,$745=0,$746=0,$747=0,$748=0,$749=0,$750=0,$751=0,$752=0,$754=0,$755=0,$756=0,$757=0,$758=0,$760=0,$762=0,$763=0,$764=0,$765=0;
 var $data_8=0,$pc_9=0,$s_time_10=0,$767=0,$768=0,$769=0,$770=0,$771=0,$772=0,$773=0,$774=0,$776=0,$777=0,$778=0,$779=0,$780=0,$781=0,$783=0,$784=0,$785=0;
 var $786=0,$787=0,$788=0,$789=0,$790=0,$792=0,$793=0,$794=0,$795=0,$797=0,$798=0,$799=0,$800=0,$802=0,$803=0,$804=0,$805=0,$806=0,$807=0,$808=0;
 var $810=0,$811=0,$812=0,$813=0,$814=0,$815=0,$817=0,$818=0,$820=0,$821=0,$822=0,$823=0,$824=0,$826=0,$827=0,$828=0,$829=0,$831=0,$832=0,$833=0;
 var $834=0,$835=0,$837=0,$838=0,$839=0,$840=0,$841=0,$842=0,$843=0,$845=0,$_sum685=0,$846=0,$847=0,$848=0,$849=0,$850=0,$851=0,$853=0,$854=0,$856=0;
 var $857=0,$858=0,$859=0,$860=0,$861=0,$862=0,$863=0,$864=0,$866=0,$867=0,$868=0,$869=0,$870=0,$871=0,$872=0,$873=0,$874=0,$875=0,$876=0,$878=0;
 var $879=0,$880=0,$881=0,$882=0,$883=0,$884=0,$885=0,$886=0,$887=0,$888=0,$890=0,$891=0,$892=0,$893=0,$894=0,$895=0,$896=0,$897=0,$898=0,$899=0;
 var $900=0,$902=0,$903=0,$904=0,$905=0,$906=0,$907=0,$908=0,$909=0,$911=0,$912=0,$913=0,$914=0,$915=0,$916=0,$917=0,$918=0,$919=0,$921=0,$922=0;
 var $923=0,$924=0,$925=0,$926=0,$928=0,$929=0,$930=0,$931=0,$932=0,$933=0,$934=0,$936=0,$937=0,$938=0,$939=0,$940=0,$942=0,$943=0,$945=0,$946=0;
 var $947=0,$948=0,$949=0,$950=0,$954=0,$956=0,$957=0,$958=0,$data_9=0,$pc_10=0,$s_time_11=0,$960=0,$961=0,$962=0,$963=0,$964=0,$965=0,$966=0,$967=0,$968=0;
 var $969=0,$970=0,$971=0,$973=0,$974=0,$975=0,$976=0,$977=0,$978=0,$979=0,$980=0,$981=0,$982=0,$983=0,$984=0,$985=0,$987=0,$988=0,$989=0,$data_10=0;
 var $pc_11=0,$s_time_12=0,$991=0,$992=0,$993=0,$994=0,$995=0,$996=0,$997=0,$998=0,$999=0,$1000=0,$1002=0,$1003=0,$1004=0,$1005=0,$1006=0,$1007=0,$1008=0,$1009=0;
 var $1010=0,$1011=0,$1012=0,$1014=0,$1015=0,$1016=0,$data_11=0,$pc_12=0,$s_time_13=0,$1018=0,$1019=0,$1020=0,$1021=0,$1022=0,$1023=0,$1024=0,$1025=0,$1027=0,$1028=0,$1029=0;
 var $1030=0,$1031=0,$1032=0,$1033=0,$1034=0,$1035=0,$1037=0,$1038=0,$1039=0,$data_12=0,$pc_13=0,$s_time_14=0,$1041=0,$1042=0,$1043=0,$1044=0,$1045=0,$1046=0,$1047=0,$1048=0;
 var $1049=0,$1051=0,$1052=0,$1053=0,$1054=0,$1055=0,$1056=0,$1057=0,$1058=0,$1059=0,$1060=0,$1062=0,$1063=0,$1064=0,$data_13=0,$pc_14=0,$s_time_15=0,$1066=0,$1067=0,$1068=0;
 var $1069=0,$1070=0,$1071=0,$1072=0,$1073=0,$1074=0,$1075=0,$1076=0,$1077=0,$1078=0,$1080=0,$1081=0,$1082=0,$1083=0,$1084=0,$1085=0,$1086=0,$1087=0,$1088=0,$1089=0;
 var $1090=0,$1091=0,$1092=0,$1093=0,$1095=0,$1096=0,$1097=0,$data_14=0,$pc_15=0,$s_time_16=0,$1099=0,$1100=0,$1101=0,$1102=0,$1103=0,$1104=0,$1105=0,$1106=0,$1107=0,$1108=0;
 var $1109=0,$1110=0,$1111=0,$1113=0,$1114=0,$1115=0,$1116=0,$1117=0,$1118=0,$1119=0,$1120=0,$1121=0,$1122=0,$1123=0,$1124=0,$1125=0,$1126=0,$1128=0,$1129=0,$1130=0;
 var $data_15=0,$pc_16=0,$s_time_17=0,$1132=0,$1133=0,$1134=0,$1135=0,$1136=0,$1137=0,$1138=0,$1139=0,$1140=0,$1141=0,$1142=0,$1143=0,$1145=0,$1146=0,$1147=0,$1148=0,$1149=0;
 var $1150=0,$1151=0,$1152=0,$1153=0,$1154=0,$1155=0,$1156=0,$1157=0,$1159=0,$1160=0,$1161=0,$data_16=0,$pc_17=0,$s_time_18=0,$1163=0,$1164=0,$1165=0,$1166=0,$1167=0,$1168=0;
 var $1169=0,$1170=0,$1171=0,$1172=0,$1174=0,$1175=0,$1176=0,$1177=0,$1178=0,$1179=0,$1180=0,$1181=0,$1182=0,$1183=0,$1184=0,$1186=0,$1187=0,$1188=0,$1189=0,$1190=0;
 var $1191=0,$1192=0,$1194=0,$1195=0,$1196=0,$1197=0,$1198=0,$1199=0,$1200=0,$1201=0,$temp45_0=0,$flags_6=0,$s_time_19=0,$1203=0,$1204=0,$1205=0,$1206=0,$1207=0,$1208=0,$1209=0;
 var $1210=0,$1211=0,$1212=0,$1213=0,$1215=0,$1216=0,$1217=0,$1218=0,$1219=0,$1220=0,$1221=0,$1222=0,$1223=0,$1224=0,$1225=0,$1226=0,$extract_t683=0,$1228=0,$extract_t684=0,$temp46_0_off0=0;
 var $1230=0,$1231=0,$1232=0,$1234=0,$1235=0,$1236=0,$1237=0,$1238=0,$1239=0,$1240=0,$1241=0,$1242=0,$1243=0,$1245=0,$1246=0,$1247=0,$1248=0,$1249=0,$1250=0,$1251=0;
 var $1252=0,$1253=0,$1254=0,$1255=0,$1258=0,$1259=0,$1260=0,$1261=0,$1262=0,$1263=0,$1265=0,$1266=0,$1267=0,$1268=0,$1269=0,$1270=0,$temp47_0=0,$1272=0,$1273=0,$1274=0;
 var $1275=0,$1276=0,$1277=0,$sum48_0=0,$1278=0,$1279=0,$1280=0,$1281=0,$1282=0,$1283=0,$1284=0,$1285=0,$1286=0,$1287=0,$1288=0,$1289=0,$1290=0,$1291=0,$1292=0,$1293=0;
 var $1294=0,$1295=0,$1296=0,$1297=0,$1298=0,$1300=0,$1302=0,$1303=0,$1304=0,$1305=0,$1306=0,$1307=0,$1308=0,$1309=0,$1310=0,$1311=0,$1312=0,$1313=0,$1316=0,$1317=0;
 var $1318=0,$1319=0,$1320=0,$1321=0,$1322=0,$1323=0,$1324=0,$1326=0,$1327=0,$1328=0,$1329=0,$1330=0,$temp50_0=0,$1332=0,$1333=0,$1334=0,$1335=0,$1337=0,$1338=0,$1339=0;
 var $1340=0,$1341=0,$1342=0,$1343=0,$_sum682=0,$1344=0,$1345=0,$1347=0,$1348=0,$1349=0,$1350=0,$1351=0,$1353=0,$1354=0,$1355=0,$1356=0,$1357=0,$1358=0,$1359=0,$1360=0;
 var $1361=0,$1362=0,$1363=0,$1364=0,$1365=0,$1366=0,$1367=0,$1368=0,$1369=0,$1370=0,$1371=0,$1372=0,$1374=0,$1375=0,$1376=0,$1377=0,$1378=0,$1379=0,$1380=0,$1381=0;
 var $1382=0,$1383=0,$1384=0,$1385=0,$1386=0,$1387=0,$1388=0,$1389=0,$1390=0,$1391=0,$1392=0,$1393=0,$1395=0,$1396=0,$1397=0,$inc_0=0,$1400=0,$1401=0,$1402=0,$1403=0;
 var $1404=0,$1405=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0,$1411=0,$1412=0,$_masked681=0,$1413=0,$1414=0,$1415=0,$1416=0,$flags_7_v=0,$flags_7=0,$1417=0,$1418=0,$1419=0,$1420=0;
 var $1421=0,$1422=0,$1423=0,$1424=0,$1425=0,$1426=0,$1427=0,$1429=0,$1430=0,$1431=0,$1432=0,$or_cond688=0,$1433=0,$_pc_1691=0,$_692=0,$inc59_0=0,$1436=0,$1437=0,$1438=0,$1439=0;
 var $1440=0,$1441=0,$1442=0,$1443=0,$1444=0,$1445=0,$1446=0,$1447=0,$1448=0,$1449=0,$1450=0,$1451=0,$1452=0,$1453=0,$1454=0,$1455=0,$1456=0,$1457=0,$1458=0,$1459=0;
 var $1461=0,$1462=0,$1463=0,$_pc_1=0,$_=0,$inc62_0=0,$1466=0,$1467=0,$1468=0,$1469=0,$1470=0,$1471=0,$1472=0,$1473=0,$1474=0,$1475=0,$1476=0,$1477=0,$1478=0,$1479=0;
 var $1480=0,$1481=0,$1482=0,$1483=0,$or_cond689=0,$1484=0,$pc_18=0,$s_time_20=0,$1485=0,$1486=0,$1487=0,$1488=0,$inc65_0=0,$1491=0,$1492=0,$1493=0,$1494=0,$1495=0,$1496=0,$1497=0;
 var $1498=0,$1499=0,$1500=0,$1501=0,$1502=0,$1503=0,$1504=0,$1505=0,$1506=0,$1507=0,$1508=0,$or_cond690=0,$1509=0,$pc_19=0,$s_time_21=0,$1510=0,$1511=0,$1513=0,$1515=0,$1517=0;
 var $1519=0,$warning_1_off0=0,$1521=0,$1522=0,$1523=0,$1524=0,$1525=0,$1526=0,$1527=0,$1528=0,$1529=0,$1530=0,$1531=0,$1532=0,$1533=0,$1535=0,$ixy_0=0,$1541=0,$1542=0,$1543=0;
 var $1544=0,$1545=0,$1546=0,$1547=0,$1548=0,$1549=0,$1551=0,$flags_8=0,$1553=0,$1554=0,$1555=0,$1556=0,$1557=0,$1558=0,$1559=0,$1561=0,$flags_9=0,$1563=0,$1565=0,$flags_10=0;
 var $1567=0,$1570=0,$_sum=0,$1571=0,$1572=0,$1573=0,$1574=0,$temp70_0=0,$1576=0,$1577=0,$1578=0,$1579=0,$1580=0,$1581=0,$1582=0,$1583=0,$1584=0,$1585=0,$1586=0,$1587=0;
 var $1588=0,$1590=0,$1591=0,$1592=0,$1593=0,$1594=0,$1595=0,$1596=0,$1598=0,$1600=0,$1602=0,$1603=0,$1604=0,$1605=0,$1606=0,$1607=0,$1608=0,$1610=0,$1612=0,$1614=0;
 var $1615=0,$1616=0,$1617=0,$1618=0,$1619=0,$1620=0,$1622=0,$1624=0,$1626=0,$1627=0,$1628=0,$1629=0,$1630=0,$1631=0,$1632=0,$1634=0,$1636=0,$1638=0,$1639=0,$1641=0;
 var $1642=0,$data_17_in_in=0,$pc_20=0,$data_17_in=0,$1644=0,$1645=0,$1646=0,$1647=0,$1648=0,$1650=0,$1651=0,$1652=0,$1653=0,$1654=0,$1656=0,$1657=0,$1658=0,$1659=0,$1661=0,$1662=0;
 var $1663=0,$1664=0,$1665=0,$1666=0,$1667=0,$1668=0,$1669=0,$1671=0,$1673=0,$1675=0,$1676=0,$1677=0,$1678=0,$data269_0=0,$pc_21=0,$1680=0,$1681=0,$1682=0,$1684=0,$1686=0;
 var $1688=0,$1689=0,$1690=0,$1691=0,$data269_1=0,$pc_22=0,$1693=0,$1694=0,$ixy_1=0,$flags_11=0,$sp_1=0,$pc_23=0,$1696=0,$iy_0_ixy_1=0,$ixy_1_ix_0=0,$1699=0,$1700=0,$1701=0,$1703=0,$1704=0;
 var $1706=0,$1707=0,$1708=0,$1709=0,$1711=0,$1712=0,$1713=0,$1714=0,$1715=0,$1716=0,$1717=0,$1718=0,$1720=0,$1721=0,$1722=0,$1723=0,$1724=0,$1725=0,$1726=0,$1727=0;
 var $1728=0,$1729=0,$1730=0,$1731=0,$1732=0,$1733=0,$1734=0,$1736=0,$1737=0,$1738=0,$1739=0,$1740=0,$1741=0,$1742=0,$1743=0,$1744=0,$extract_t=0,$1746=0,$extract_t680=0,$temp76_0_off0=0;
 var $1749=0,$1750=0,$1752=0,$1753=0,$1755=0,$1756=0,$1757=0,$1758=0,$1759=0,$1760=0,$1761=0,$1762=0,$1763=0,$1765=0,$1766=0,$1767=0,$1768=0,$1769=0,$1770=0,$1771=0;
 var $1772=0,$1773=0,$1775=0,$1776=0,$1777=0,$1779=0,$1780=0,$1781=0,$1782=0,$data_18=0,$ixy_2=0,$1784=0,$iy_0_ixy_2=0,$ixy_2_ix_0=0,$1786=0,$1787=0,$1788=0,$1790=0,$1791=0,$1792=0;
 var $1793=0,$data_19=0,$ixy_3=0,$1795=0,$iy_0_ixy_3=0,$ixy_3_ix_0=0,$1797=0,$1798=0,$1799=0,$1800=0,$1803=0,$1804=0,$1808=0,$extract_t801=0,$extract_t805=0,$extract_t809=0,$extract_t813=0,$extract_t817=0,$extract_t803=0,$extract_t807=0;
 var $extract_t811=0,$extract_t815=0,$extract_t819=0,$warning_0_off0719=0,$pc_1712_off0=0,$sp_0708_off0=0,$ix_0704_off0=0,$iy_0700_off0=0,$flags_0696_off0=0,$s_time_22=0,$1809=0,$ld$8$0=0,$1810$0=0,$ld$9$1=0,$1810$1=0,$st$10$0=0,$st$11$1=0,$ld$12$0=0,$1811$0=0,$ld$13$1=0;
 var $1811$1=0,$st$14$0=0,$st$15$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $s=((sp)|0);
 $tmpcast=$s;
 $1=STACKTOP;STACKTOP = (STACKTOP + 8)|0;
 __ZN6Ay_Cpu12set_end_timeEi($this,$end_time);
 $2=(($this+524)|0);
 $3=$2;
 $ld$0$0=(($3)|0);
 $4$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($3+4)|0);
 $4$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $st$2$0=(($s)|0);
 HEAP32[(($st$2$0)>>2)]=$4$0;
 $st$3$1=(($s+4)|0);
 HEAP32[(($st$3$1)>>2)]=$4$1;
 $5=(($this+520)|0);
 HEAP32[(($5)>>2)]=$tmpcast;
 $6=$1;
 $7=(($this+540)|0);
 $8=$7;
 $9=$7;
 $ld$4$0=(($9)|0);
 $10$0=((((((HEAPU8[($ld$4$0)])|0))|(((HEAPU8[((($ld$4$0)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$4$0)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$4$0)+(3))|0)])|0)<<24))|0));
 $ld$5$1=(($9+4)|0);
 $10$1=((((((HEAPU8[($ld$5$1)])|0))|(((HEAPU8[((($ld$5$1)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$5$1)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$5$1)+(3))|0)])|0)<<24))|0));
 $st$6$0=(($1)|0);
 HEAP32[(($st$6$0)>>2)]=$10$0;
 $st$7$1=(($1+4)|0);
 HEAP32[(($st$7$1)>>2)]=$10$1;
 $11=(($tmpcast+4)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($this+512)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($this+532)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=(($this+534)|0);
 $19=((HEAP16[(($18)>>1)])|0);
 $20=(($this+536)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=(($this+538)|0);
 $23=((HEAP16[(($22)>>1)])|0);
 $24=(($8+7)|0);
 $25=((HEAP8[($24)])|0);
 $26=(($14+$17)|0);
 $27=((HEAP8[($26)])|0);
 $28=($27&255);
 $29=((11744+$28)|0);
 $30=((HEAP8[($29)])|0);
 $31=($30&255);
 $32=((($31)+($12))|0);
 $33=($32|0)<0;
 $34=($32|0)<($31|0);
 $or_cond723=$33|$34;
 if (!($or_cond723)) {
  $s_time_22=$12;$flags_0696_off0=$25;$iy_0700_off0=$23;$ix_0704_off0=$21;$sp_0708_off0=$19;$pc_1712_off0=$16;$warning_0_off0719=0;
  HEAP32[(($11)>>2)]=$s_time_22;
  $1809=(($6+7)|0);
  HEAP8[($1809)]=$flags_0696_off0;
  HEAP16[(($20)>>1)]=$ix_0704_off0;
  HEAP16[(($22)>>1)]=$iy_0700_off0;
  HEAP16[(($18)>>1)]=$sp_0708_off0;
  HEAP16[(($15)>>1)]=$pc_1712_off0;
  $ld$8$0=(($1)|0);
  $1810$0=((HEAP32[(($ld$8$0)>>2)])|0);
  $ld$9$1=(($1+4)|0);
  $1810$1=((HEAP32[(($ld$9$1)>>2)])|0);
  $st$10$0=(($9)|0);
  tempBigInt=$1810$0;HEAP8[($st$10$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(3))|0)]=tempBigInt&0xff;
  $st$11$1=(($9+4)|0);
  tempBigInt=$1810$1;HEAP8[($st$11$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(3))|0)]=tempBigInt&0xff;
  $ld$12$0=(($s)|0);
  $1811$0=((HEAP32[(($ld$12$0)>>2)])|0);
  $ld$13$1=(($s+4)|0);
  $1811$1=((HEAP32[(($ld$13$1)>>2)])|0);
  $st$14$0=(($3)|0);
  HEAP32[(($st$14$0)>>2)]=$1811$0;
  $st$15$1=(($3+4)|0);
  HEAP32[(($st$15$1)>>2)]=$1811$1;
  HEAP32[(($5)>>2)]=$2;
  STACKTOP=sp;return (($warning_0_off0719)|0);
 }
 $35=($25&255);
 $36=($23&65535);
 $37=($21&65535);
 $38=($19&65535);
 $39=(($this+548)|0);
 $40=$39;
 $41=(($this+554)|0);
 $42=$41;
 $43=(($6+6)|0);
 $44=(($40+7)|0);
 $45=$s;
 $46=(($6+6)|0);
 $47=(($6+4)|0);
 $48=(($6+6)|0);
 $49=(($6+6)|0);
 $50=(($6+1)|0);
 $51=$1;
 $52=(($51+4)|0);
 $53=(($6+6)|0);
 $54=((($1)-(24))|0);
 $55=$54;
 $56=(($6+6)|0);
 $57=((($1)-(24))|0);
 $58=$57;
 $59=$1;
 $60=(($59+4)|0);
 $61=(($6+6)|0);
 $62=$1;
 $63=$1;
 $64=(($63+4)|0);
 $65=(($6+6)|0);
 $66=((($1)-(184))|0);
 $67=$66;
 $68=$1;
 $69=(($68+4)|0);
 $70=$1;
 $71=(($6+6)|0);
 $72=$1;
 $73=(($72+4)|0);
 $74=$1;
 $75=$1;
 $76=(($75+4)|0);
 $77=$1;
 $78=$1;
 $79=$1;
 $80=$1;
 $81=(($80+4)|0);
 $82=(($6+6)|0);
 $83=((($1)-(160))|0);
 $84=$83;
 $85=$1;
 $86=(($85+4)|0);
 $87=(($6+6)|0);
 $88=((($1)-(176))|0);
 $89=$88;
 $90=$1;
 $91=(($90+4)|0);
 $92=(($6+6)|0);
 $93=((($1)-(168))|0);
 $94=$93;
 $95=((($1)-(112))|0);
 $96=$95;
 $97=$1;
 $98=(($97+4)|0);
 $99=$1;
 $100=$1;
 $101=$1;
 $102=(($101+4)|0);
 $103=$1;
 $104=(($103+4)|0);
 $105=((($1)-(8))|0);
 $106=$105;
 $107=$1;
 $108=$1;
 $109=(($108+4)|0);
 $110=(($6+6)|0);
 $111=$1;
 $112=(($111+4)|0);
 $113=(($6+6)|0);
 $114=$1;
 $115=$1;
 $116=(($6+6)|0);
 $117=$1;
 $118=(($117+4)|0);
 $119=(($6+6)|0);
 $120=(($6+6)|0);
 $121=(($6+6)|0);
 $122=(($6+6)|0);
 $123=(($6+6)|0);
 $124=(($6+6)|0);
 $125=(($6+6)|0);
 $126=(($6+6)|0);
 $127=$1;
 $128=(($127+4)|0);
 $129=$1;
 $130=(($129+4)|0);
 $131=(($129+2)|0);
 $132=(($this+548)|0);
 $133=$1;
 $134=$1;
 $135=(($this+550)|0);
 $136=(($133+2)|0);
 $137=(($this+552)|0);
 $138=(($133+4)|0);
 $139=(($this+556)|0);
 $140=(($this+557)|0);
 $141=(($this+556)|0);
 $142=(($this+557)|0);
 $143=$1;
 $144=(($143+4)|0);
 $145=$1;
 $146=$1;
 $147=(($146+4)|0);
 $148=((($1)-(16))|0);
 $149=$148;
 $150=$1;
 $151=(($150+4)|0);
 $152=((($1)-(32))|0);
 $153=$152;
 $154=$1;
 $155=(($154+4)|0);
 $156=((($1)-(48))|0);
 $157=$156;
 $158=$1;
 $159=(($158+4)|0);
 $160=((($1)-(8))|0);
 $161=$160;
 $162=$1;
 $163=(($162+4)|0);
 $164=((($1)-(24))|0);
 $165=$164;
 $166=$1;
 $167=(($166+4)|0);
 $168=((($1)-(40))|0);
 $169=$168;
 $170=$1;
 $171=(($170+4)|0);
 $172=((($1)-(56))|0);
 $173=$172;
 $174=$1;
 $175=(($174+4)|0);
 $176=$1;
 $177=$1;
 $178=(($177+4)|0);
 $179=$1;
 $180=$1;
 $181=$1;
 $182=(($181+4)|0);
 $183=$1;
 $184=$1;
 $185=((($1)-(8))|0);
 $186=$185;
 $187=(($6+7)|0);
 $188=$s;
 $189=$1;
 $190=((($1)-(8))|0);
 $191=$190;
 $192=((($1)-(8))|0);
 $193=$192;
 $194=$1;
 $195=$1;
 $196=(($195+4)|0);
 $197=(($6+6)|0);
 $198=$1;
 $199=(($198+4)|0);
 $200=(($6+6)|0);
 $201=(($6+6)|0);
 $202=$1;
 $203=(($202+4)|0);
 $204=(($6+6)|0);
 $205=$1;
 $206=$1;
 $207=(($206+4)|0);
 $208=(($206+2)|0);
 $209=(($6+6)|0);
 $210=$1;
 $211=$1;
 $212=(($211+4)|0);
 $213=(($6+1)|0);
 $214=$s;
 $215=$1;
 $216=$1;
 $217=(($216+4)|0);
 $218=$1;
 $219=(($6+1)|0);
 $220=(($6+6)|0);
 $221=(($this+559)|0);
 $222=(($6+6)|0);
 $223=(($this+558)|0);
 $224=(($this+559)|0);
 $225=(($6+6)|0);
 $226=(($6+6)|0);
 $227=(($this+557)|0);
 $228=(($this+558)|0);
 $229=(($6+6)|0);
 $230=(($this+557)|0);
 $231=(($this+556)|0);
 $232=(($this+560)|0);
 $233=(($this+560)|0);
 $234=(($this+560)|0);
 $235=$1;
 $236=((($1)-(112))|0);
 $237=$236;
 $238=((($1)-(8))|0);
 $239=$238;
 $240=((($1)-(8))|0);
 $241=$240;
 $242=((($1)-(8))|0);
 $243=$242;
 $244=((($1)-(96))|0);
 $245=$244;
 $246=((($1)-(104))|0);
 $247=$246;
 $flags_0724=$35;$iy_0730=$36;$ix_0745=$37;$sp_0760=$38;$warning_0_off0778=0;$266=$27;$265=$28;$_in=$17;$264=$32;
 L133: while(1) {
  $267=((($_in)+(1))|0);
  $268=(($14+$267)|0);
  $269=((HEAP8[($268)])|0);
  $270=($269&255);
  L135: do {
   switch (($265|0)) {
   case 0:case 64:case 73:case 82:case 91:case 100:case 109:case 127: {
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 8: {
    $272=((HEAP8[($42)])|0);
    $273=((HEAP8[($43)])|0);
    HEAP8[($42)]=$273;
    HEAP8[($43)]=$272;
    $274=((HEAP8[($44)])|0);
    $275=($274&255);
    $276=(($flags_0724)&255);
    HEAP8[($44)]=$276;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$275;
    break;
   }
   case 211: {
    $278=((($_in)+(2))|0);
    $279=((HEAP32[(($45)>>2)])|0);
    $280=((($279)+($264))|0);
    $281=((HEAP8[($46)])|0);
    $282=($281&255);
    $283=$282<<8;
    $284=$283|$270;
    __Z10ay_cpu_outP6Ay_Cpuiji($this,$280,$284,$282);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$278;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 46: {
    $286=((($_in)+(2))|0);
    HEAP8[($47)]=$269;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$286;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 62: {
    $288=((($_in)+(2))|0);
    HEAP8[($48)]=$269;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$288;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 58: {
    $290=((__Z8get_le16PKv($268))|0);
    $291=((($_in)+(3))|0);
    $292=(($14+$290)|0);
    $293=((HEAP8[($292)])|0);
    HEAP8[($49)]=$293;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$291;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 32: {
    $295=((($_in)+(2))|0);
    $296=$flags_0724&64;
    $297=($296|0)==0;
    if (!($297)) {
     $pc_0=$295;
     label = 99;
     break L135;
    }
    $299=(($269<<24)>>24);
    $300=((($299)+($295))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$300;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 40: {
    $302=((($_in)+(2))|0);
    $303=$flags_0724&64;
    $304=($303|0)==0;
    if ($304) {
     $pc_0=$302;
     label = 99;
     break L135;
    }
    $306=(($269<<24)>>24);
    $307=((($306)+($302))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$307;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 48: {
    $309=((($_in)+(2))|0);
    $310=$flags_0724&1;
    $311=($310|0)==0;
    if (!($311)) {
     $pc_0=$309;
     label = 99;
     break L135;
    }
    $313=(($269<<24)>>24);
    $314=((($313)+($309))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$314;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 56: {
    $316=((($_in)+(2))|0);
    $317=$flags_0724&1;
    $318=($317|0)==0;
    if ($318) {
     $pc_0=$316;
     label = 99;
     break L135;
    }
    $320=(($269<<24)>>24);
    $321=((($320)+($316))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$321;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 24: {
    $323=(($269<<24)>>24);
    $324=((($_in)+(2))|0);
    $325=((($324)+($323))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$325;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 16: {
    $327=((HEAP8[($50)])|0);
    $328=($327&255);
    $329=((($328)-(1))|0);
    $330=(($329)&255);
    HEAP8[($50)]=$330;
    $331=((($_in)+(2))|0);
    $332=($329|0)==0;
    if ($332) {
     $pc_0=$331;
     label = 99;
     break L135;
    }
    $334=(($269<<24)>>24);
    $335=((($334)+($331))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$335;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 194: {
    $337=$flags_0724&64;
    $338=($337|0)==0;
    if (!($338)) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $340=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$340;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 202: {
    $342=$flags_0724&64;
    $343=($342|0)==0;
    if ($343) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $345=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$345;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 210: {
    $347=$flags_0724&1;
    $348=($347|0)==0;
    if (!($348)) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $350=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$350;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 218: {
    $352=$flags_0724&1;
    $353=($352|0)==0;
    if ($353) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $355=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$355;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 226: {
    $357=$flags_0724&4;
    $358=($357|0)==0;
    if (!($358)) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $360=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$360;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 234: {
    $362=$flags_0724&4;
    $363=($362|0)==0;
    if ($363) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $365=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$365;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 242: {
    $367=$flags_0724&128;
    $368=($367|0)==0;
    if (!($368)) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $370=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$370;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 250: {
    $372=$flags_0724&128;
    $373=($372|0)==0;
    if ($373) {
     $s_time_0=$264;
     label = 102;
     break L135;
    }
    $375=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$375;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 195: {
    $377=((__Z8get_le16PKv($268))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$377;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 233: {
    $379=((HEAP16[(($52)>>1)])|0);
    $380=($379&65535);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$380;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 192: {
    $382=$flags_0724&64;
    $383=($382|0)==0;
    if ($383) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $385=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$385;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 200: {
    $387=$flags_0724&64;
    $388=($387|0)==0;
    if (!($388)) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $390=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$390;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 208: {
    $392=$flags_0724&1;
    $393=($392|0)==0;
    if ($393) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $395=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$395;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 216: {
    $397=$flags_0724&1;
    $398=($397|0)==0;
    if (!($398)) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $400=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$400;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 224: {
    $402=$flags_0724&4;
    $403=($402|0)==0;
    if ($403) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $405=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$405;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 232: {
    $407=$flags_0724&4;
    $408=($407|0)==0;
    if (!($408)) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $410=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$410;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 240: {
    $412=$flags_0724&128;
    $413=($412|0)==0;
    if ($413) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $415=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$415;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 248: {
    $417=$flags_0724&128;
    $418=($417|0)==0;
    if (!($418)) {
     $s_time_2=$264;
     label = 154;
     break L135;
    }
    $420=((($264)-(6))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$420;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 201: {
    $s_time_2=$264;
    label = 154;
    break;
   }
   case 196: {
    $427=$flags_0724&64;
    $428=($427|0)==0;
    if ($428) {
     label = 163;
    } else {
     label = 101;
    }
    break;
   }
   case 204: {
    $430=$flags_0724&64;
    $431=($430|0)==0;
    if ($431) {
     label = 101;
    } else {
     label = 163;
    }
    break;
   }
   case 212: {
    $433=$flags_0724&1;
    $434=($433|0)==0;
    if ($434) {
     label = 163;
    } else {
     label = 101;
    }
    break;
   }
   case 220: {
    $436=$flags_0724&1;
    $437=($436|0)==0;
    if ($437) {
     label = 101;
    } else {
     label = 163;
    }
    break;
   }
   case 228: {
    $439=$flags_0724&4;
    $440=($439|0)==0;
    if ($440) {
     label = 163;
    } else {
     label = 101;
    }
    break;
   }
   case 236: {
    $442=$flags_0724&4;
    $443=($442|0)==0;
    if ($443) {
     label = 101;
    } else {
     label = 163;
    }
    break;
   }
   case 244: {
    $445=$flags_0724&128;
    $446=($445|0)==0;
    if ($446) {
     label = 163;
    } else {
     label = 101;
    }
    break;
   }
   case 252: {
    $448=$flags_0724&128;
    $449=($448|0)==0;
    if ($449) {
     label = 101;
    } else {
     label = 163;
    }
    break;
   }
   case 205: {
    label = 163;
    break;
   }
   case 255: {
    $457=($_in>>>0)>((65535)>>>0);
    if (!($457)) {
     label = 166;
     break L135;
    }
    $459=$_in&65535;
    $460=((($264)-(11))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$460;$pc_1_be=$459;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 199:case 207:case 215:case 223:case 231:case 239:case 247: {
    label = 166;
    break;
   }
   case 245: {
    $464=((HEAP8[($53)])|0);
    $465=($464&255);
    $466=$465<<8;
    $467=((($466)+($flags_0724))|0);
    $s_time_3=$264;$pc_2=$267;$data_0=$467;
    label = 169;
    break;
   }
   case 197:case 213:case 229: {
    $469=$265>>>3;
    $470=(($55+$469)|0);
    $471=$470;
    $472=((HEAP16[(($471)>>1)])|0);
    $473=($472&65535);
    $s_time_3=$264;$pc_2=$267;$data_0=$473;
    label = 169;
    break;
   }
   case 241: {
    $479=(($14+$sp_0760)|0);
    $480=((HEAP8[($479)])|0);
    $481=($480&255);
    $482=((($sp_0760)+(1))|0);
    $483=(($14+$482)|0);
    $484=((HEAP8[($483)])|0);
    HEAP8[($56)]=$484;
    $485=((($sp_0760)+(2))|0);
    $486=$485&65535;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$486;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$481;
    break;
   }
   case 193:case 209:case 225: {
    $488=(($14+$sp_0760)|0);
    $489=((__Z8get_le16PKv($488))|0);
    $490=(($489)&65535);
    $491=$265>>>3;
    $492=(($58+$491)|0);
    $493=$492;
    HEAP16[(($493)>>1)]=$490;
    $494=((($sp_0760)+(2))|0);
    $495=$494&65535;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$495;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 150:case 134: {
    $497=$flags_0724&-2;
    $flags_1=$497;
    label = 173;
    break;
   }
   case 158:case 142: {
    $flags_1=$flags_0724;
    label = 173;
    break;
   }
   case 214:case 198: {
    $505=$flags_0724&-2;
    $flags_2=$505;
    label = 175;
    break;
   }
   case 222:case 206: {
    $flags_2=$flags_0724;
    label = 175;
    break;
   }
   case 144:case 145:case 146:case 147:case 148:case 149:case 151:case 128:case 129:case 130:case 131:case 132:case 133:case 135: {
    $509=$flags_0724&-2;
    $flags_3=$509;
    label = 177;
    break;
   }
   case 152:case 153:case 154:case 155:case 156:case 157:case 159:case 136:case 137:case 138:case 139:case 140:case 141:case 143: {
    $flags_3=$flags_0724;
    label = 177;
    break;
   }
   case 190: {
    $542=((HEAP16[(($64)>>1)])|0);
    $543=($542&65535);
    $544=(($14+$543)|0);
    $545=((HEAP8[($544)])|0);
    $546=($545&255);
    $s_time_5=$264;$pc_4=$267;$data_2=$546;
    label = 182;
    break;
   }
   case 254: {
    $548=((($_in)+(2))|0);
    $s_time_5=$264;$pc_4=$548;$data_2=$270;
    label = 182;
    break;
   }
   case 184:case 185:case 186:case 187:case 188:case 189:case 191: {
    $550=$265^1;
    $551=(($67+$550)|0);
    $552=((HEAP8[($551)])|0);
    $553=($552&255);
    $s_time_5=$264;$pc_4=$267;$data_2=$553;
    label = 182;
    break;
   }
   case 9:case 25:case 41: {
    $577=$265>>>3;
    $_sum687=((($577)-(1))|0);
    $578=(($70+$_sum687)|0);
    $579=$578;
    $580=((HEAP16[(($579)>>1)])|0);
    $581=($580&65535);
    $data_3=$581;
    label = 185;
    break;
   }
   case 57: {
    $data_3=$sp_0760;
    label = 185;
    break;
   }
   case 39: {
    $599=((HEAP8[($71)])|0);
    $600=($599&255);
    $601=((($599&255))>>>0)>((153)>>>0);
    $602=($601&1);
    $_flags_0=$602|$flags_0724;
    $603=$_flags_0&1;
    $604=(((-$603))|0);
    $605=$604&96;
    $606=$flags_0724&16;
    $607=($606|0)==0;
    if ($607) {
     $609=$600&14;
     $610=($609>>>0)>((9)>>>0);
     if ($610) {
      label = 188;
     } else {
      $adjust_0=$605;
     }
    } else {
     label = 188;
    }
    if ((label|0) == 188) {
     label = 0;
     $612=$605|6;
     $adjust_0=$612;
    }
    $614=$flags_0724&2;
    $615=($614|0)==0;
    $616=(((-$adjust_0))|0);
    $adjust_1=($615?$adjust_0:$616);
    $617=((($adjust_1)+($600))|0);
    $618=$_flags_0&3;
    $619=((HEAP8[($71)])|0);
    $620=($619&255);
    $621=$620^$617;
    $622=$621&16;
    $623=(($617)&255);
    $624=$617&255;
    $625=(($this+$624)|0);
    $626=((HEAP8[($625)])|0);
    $627=($626&255);
    $628=$627|$618;
    $629=$628|$622;
    HEAP8[($71)]=$623;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$629;
    break;
   }
   case 52: {
    $631=((HEAP16[(($73)>>1)])|0);
    $632=($631&65535);
    $633=(($14+$632)|0);
    $634=((HEAP8[($633)])|0);
    $635=($634&255);
    $636=((($635)+(1))|0);
    $637=(($636)&255);
    HEAP8[($633)]=$637;
    $s_time_6=$264;$pc_5=$267;$ix_1=$ix_0745;$iy_1=$iy_0730;$data_4=$636;
    label = 192;
    break;
   }
   case 4:case 12:case 20:case 28:case 36:case 44:case 60: {
    $639=$265>>>3;
    $640=$639^1;
    $641=(($74+$640)|0);
    $642=((HEAP8[($641)])|0);
    $643=((($642)+(1))&255);
    HEAP8[($641)]=$643;
    $644=($643&255);
    $s_time_6=$264;$pc_5=$267;$ix_1=$ix_0745;$iy_1=$iy_0730;$data_4=$644;
    label = 192;
    break;
   }
   case 53: {
    $661=((HEAP16[(($76)>>1)])|0);
    $662=($661&65535);
    $663=(($14+$662)|0);
    $664=((HEAP8[($663)])|0);
    $665=($664&255);
    $666=((($665)-(1))|0);
    $667=(($666)&255);
    HEAP8[($663)]=$667;
    $s_time_7=$264;$pc_6=$267;$ix_2=$ix_0745;$iy_2=$iy_0730;$data_5=$666;
    label = 196;
    break;
   }
   case 5:case 13:case 21:case 29:case 37:case 45:case 61: {
    $669=$265>>>3;
    $670=$669^1;
    $671=(($77+$670)|0);
    $672=((HEAP8[($671)])|0);
    $673=((($672)-(1))&255);
    HEAP8[($671)]=$673;
    $674=($673&255);
    $s_time_7=$264;$pc_6=$267;$ix_2=$ix_0745;$iy_2=$iy_0730;$data_5=$674;
    label = 196;
    break;
   }
   case 3:case 19:case 35: {
    $692=$265>>>3;
    $693=(($78+$692)|0);
    $694=$693;
    $695=((HEAP16[(($694)>>1)])|0);
    $696=((($695)+(1))&65535);
    HEAP16[(($694)>>1)]=$696;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 51: {
    $698=((($sp_0760)+(1))|0);
    $699=$698&65535;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$699;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 11:case 27:case 43: {
    $701=$265>>>3;
    $_sum686=((($701)-(1))|0);
    $702=(($79+$_sum686)|0);
    $703=$702;
    $704=((HEAP16[(($703)>>1)])|0);
    $705=((($704)-(1))&65535);
    HEAP16[(($703)>>1)]=$705;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 59: {
    $707=((($sp_0760)+(65535))|0);
    $708=$707&65535;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$708;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 166: {
    $710=((HEAP16[(($81)>>1)])|0);
    $711=($710&65535);
    $712=(($14+$711)|0);
    $713=((HEAP8[($712)])|0);
    $714=($713&255);
    $s_time_8=$264;$pc_7=$267;$data_6=$714;
    label = 205;
    break;
   }
   case 230: {
    $716=((($_in)+(2))|0);
    $s_time_8=$264;$pc_7=$716;$data_6=$270;
    label = 205;
    break;
   }
   case 160:case 161:case 162:case 163:case 164:case 165:case 167: {
    $718=$265^1;
    $719=(($84+$718)|0);
    $720=((HEAP8[($719)])|0);
    $721=($720&255);
    $s_time_8=$264;$pc_7=$267;$data_6=$721;
    label = 205;
    break;
   }
   case 182: {
    $732=((HEAP16[(($86)>>1)])|0);
    $733=($732&65535);
    $734=(($14+$733)|0);
    $735=((HEAP8[($734)])|0);
    $736=($735&255);
    $s_time_9=$264;$pc_8=$267;$data_7=$736;
    label = 209;
    break;
   }
   case 246: {
    $738=((($_in)+(2))|0);
    $s_time_9=$264;$pc_8=$738;$data_7=$270;
    label = 209;
    break;
   }
   case 176:case 177:case 178:case 179:case 180:case 181:case 183: {
    $740=$265^1;
    $741=(($89+$740)|0);
    $742=((HEAP8[($741)])|0);
    $743=($742&255);
    $s_time_9=$264;$pc_8=$267;$data_7=$743;
    label = 209;
    break;
   }
   case 174: {
    $754=((HEAP16[(($91)>>1)])|0);
    $755=($754&65535);
    $756=(($14+$755)|0);
    $757=((HEAP8[($756)])|0);
    $758=($757&255);
    $s_time_10=$264;$pc_9=$267;$data_8=$758;
    label = 213;
    break;
   }
   case 238: {
    $760=((($_in)+(2))|0);
    $s_time_10=$264;$pc_9=$760;$data_8=$270;
    label = 213;
    break;
   }
   case 168:case 169:case 170:case 171:case 172:case 173:case 175: {
    $762=$265^1;
    $763=(($94+$762)|0);
    $764=((HEAP8[($763)])|0);
    $765=($764&255);
    $s_time_10=$264;$pc_9=$267;$data_8=$765;
    label = 213;
    break;
   }
   case 112:case 113:case 114:case 115:case 116:case 117:case 119: {
    $776=$265^1;
    $777=(($96+$776)|0);
    $778=((HEAP8[($777)])|0);
    $779=((HEAP16[(($98)>>1)])|0);
    $780=($779&65535);
    $781=(($14+$780)|0);
    HEAP8[($781)]=$778;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 65:case 66:case 67:case 68:case 69:case 71:case 72:case 74:case 75:case 76:case 77:case 79:case 80:case 81:case 83:case 84:case 85:case 87:case 88:case 89:case 90:case 92:case 93:case 95:case 96:case 97:case 98:case 99:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 111:case 120:case 121:case 122:case 123:case 124:case 125: {
    $783=$265&7;
    $784=$783^1;
    $785=(($99+$784)|0);
    $786=((HEAP8[($785)])|0);
    $787=$265>>>3;
    $788=$787&7;
    $789=$788^1;
    $790=(($99+$789)|0);
    HEAP8[($790)]=$786;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 6:case 14:case 22:case 30:case 38: {
    $792=$265>>>3;
    $793=$792^1;
    $794=(($100+$793)|0);
    HEAP8[($794)]=$269;
    $795=((($_in)+(2))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$795;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 54: {
    $797=((($_in)+(2))|0);
    $798=((HEAP16[(($102)>>1)])|0);
    $799=($798&65535);
    $800=(($14+$799)|0);
    HEAP8[($800)]=$269;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$797;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 70:case 78:case 86:case 94:case 102:case 110:case 126: {
    $802=((HEAP16[(($104)>>1)])|0);
    $803=($802&65535);
    $804=(($14+$803)|0);
    $805=((HEAP8[($804)])|0);
    $806=$265>>>3;
    $807=$806^1;
    $808=(($106+$807)|0);
    HEAP8[($808)]=$805;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 1:case 17:case 33: {
    $810=((__Z8get_le16PKv($268))|0);
    $811=(($810)&65535);
    $812=$265>>>3;
    $813=(($107+$812)|0);
    $814=$813;
    HEAP16[(($814)>>1)]=$811;
    $815=((($_in)+(3))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$815;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 49: {
    $817=((__Z8get_le16PKv($268))|0);
    $818=((($_in)+(3))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$818;$sp_0_be=$817;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 42: {
    $820=((__Z8get_le16PKv($268))|0);
    $821=((($_in)+(3))|0);
    $822=(($14+$820)|0);
    $823=((__Z8get_le16PKv($822))|0);
    $824=(($823)&65535);
    HEAP16[(($109)>>1)]=$824;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$821;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 50: {
    $826=((__Z8get_le16PKv($268))|0);
    $827=((($_in)+(3))|0);
    $828=((HEAP8[($110)])|0);
    $829=(($14+$826)|0);
    HEAP8[($829)]=$828;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$827;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 34: {
    $831=((__Z8get_le16PKv($268))|0);
    $832=((($_in)+(3))|0);
    $833=(($14+$831)|0);
    $834=((HEAP16[(($112)>>1)])|0);
    $835=($834&65535);
    __Z8set_le16Pvj($833,$835);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$832;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 2:case 18: {
    $837=((HEAP8[($113)])|0);
    $838=$265>>>3;
    $839=(($114+$838)|0);
    $840=$839;
    $841=((HEAP16[(($840)>>1)])|0);
    $842=($841&65535);
    $843=(($14+$842)|0);
    HEAP8[($843)]=$837;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 10:case 26: {
    $845=$265>>>3;
    $_sum685=((($845)-(1))|0);
    $846=(($115+$_sum685)|0);
    $847=$846;
    $848=((HEAP16[(($847)>>1)])|0);
    $849=($848&65535);
    $850=(($14+$849)|0);
    $851=((HEAP8[($850)])|0);
    HEAP8[($116)]=$851;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 249: {
    $853=((HEAP16[(($118)>>1)])|0);
    $854=($853&65535);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$854;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 7: {
    $856=((HEAP8[($119)])|0);
    $857=($856&255);
    $858=$857<<1;
    $859=$857>>>7;
    $860=$858|$859;
    $861=$flags_0724&196;
    $862=$860&41;
    $863=$862|$861;
    $864=(($860)&255);
    HEAP8[($119)]=$864;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$863;
    break;
   }
   case 15: {
    $866=((HEAP8[($120)])|0);
    $867=($866&255);
    $868=$flags_0724&196;
    $869=$867&1;
    $870=$869|$868;
    $871=$867<<7;
    $872=$867>>>1;
    $873=$871|$872;
    $874=$872&40;
    $875=$870|$874;
    $876=(($873)&255);
    HEAP8[($120)]=$876;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$875;
    break;
   }
   case 23: {
    $878=((HEAP8[($121)])|0);
    $879=($878&255);
    $880=$879<<1;
    $881=$flags_0724&1;
    $882=$880|$881;
    $883=$flags_0724&196;
    $884=$880&40;
    $885=$879>>>7;
    $886=$885|$883;
    $887=$886|$884;
    $888=(($882)&255);
    HEAP8[($121)]=$888;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$887;
    break;
   }
   case 31: {
    $890=$flags_0724<<7;
    $891=((HEAP8[($122)])|0);
    $892=($891&255);
    $893=$892>>>1;
    $894=$893|$890;
    $895=$flags_0724&196;
    $896=$893&40;
    $897=$892&1;
    $898=$897|$895;
    $899=$898|$896;
    $900=(($894)&255);
    HEAP8[($122)]=$900;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$899;
    break;
   }
   case 47: {
    $902=((HEAP8[($123)])|0);
    $903=($902&255);
    $904=$903^-1;
    $905=$flags_0724&197;
    $906=$904&40;
    $907=$905|$906;
    $908=$907|18;
    $909=(($904)&255);
    HEAP8[($123)]=$909;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$908;
    break;
   }
   case 63: {
    $911=$flags_0724&197;
    $912=$flags_0724<<4;
    $913=$912&16;
    $914=$913|$911;
    $915=((HEAP8[($124)])|0);
    $916=($915&255);
    $917=$916&40;
    $918=$914|$917;
    $919=$918^1;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$919;
    break;
   }
   case 55: {
    $921=$flags_0724&196;
    $922=((HEAP8[($125)])|0);
    $923=($922&255);
    $924=$923&40;
    $925=$921|$924;
    $926=$925|1;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$926;
    break;
   }
   case 219: {
    $928=((($_in)+(2))|0);
    $929=((HEAP8[($126)])|0);
    $930=($929&255);
    $931=$930<<8;
    $932=$931|$270;
    $933=((__Z9ay_cpu_inP6Ay_Cpuj($this,$932))|0);
    $934=(($933)&255);
    HEAP8[($126)]=$934;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$928;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 227: {
    $936=(($14+$sp_0760)|0);
    $937=((__Z8get_le16PKv($936))|0);
    $938=((HEAP16[(($128)>>1)])|0);
    $939=($938&65535);
    __Z8set_le16Pvj($936,$939);
    $940=(($937)&65535);
    HEAP16[(($128)>>1)]=$940;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 235: {
    $942=((HEAP16[(($130)>>1)])|0);
    $943=((HEAP16[(($131)>>1)])|0);
    HEAP16[(($130)>>1)]=$943;
    HEAP16[(($131)>>1)]=$942;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 217: {
    $945=((HEAP16[(($132)>>1)])|0);
    $946=((HEAP16[(($134)>>1)])|0);
    HEAP16[(($132)>>1)]=$946;
    HEAP16[(($134)>>1)]=$945;
    $947=((HEAP16[(($135)>>1)])|0);
    $948=((HEAP16[(($136)>>1)])|0);
    HEAP16[(($135)>>1)]=$948;
    HEAP16[(($136)>>1)]=$947;
    $949=((HEAP16[(($137)>>1)])|0);
    $950=((HEAP16[(($138)>>1)])|0);
    HEAP16[(($137)>>1)]=$950;
    HEAP16[(($138)>>1)]=$949;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 243: {
    HEAP8[($139)]=0;
    HEAP8[($140)]=0;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 251: {
    HEAP8[($141)]=1;
    HEAP8[($142)]=1;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
    break;
   }
   case 203: {
    $954=((($_in)+(2))|0);
    switch (($270|0)) {
    case 6: {
     $956=((($264)+(7))|0);
     $957=((HEAP16[(($144)>>1)])|0);
     $958=($957&65535);
     $s_time_11=$956;$pc_10=$954;$data_9=$958;
     label = 242;
     break L135;
     break;
    }
    case 0:case 1:case 2:case 3:case 4:case 5:case 7: {
     $973=$270^1;
     $974=(($145+$973)|0);
     $975=((HEAP8[($974)])|0);
     $976=($975&255);
     $977=$975<<1;
     $978=($977&255);
     $979=$976>>>7;
     $980=$978|$979;
     $981=(($this+$980)|0);
     $982=((HEAP8[($981)])|0);
     $983=($982&255);
     $984=$983|$979;
     $985=(($980)&255);
     HEAP8[($974)]=$985;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$984;
     break L135;
     break;
    }
    case 22: {
     $987=((($264)+(7))|0);
     $988=((HEAP16[(($147)>>1)])|0);
     $989=($988&65535);
     $s_time_12=$987;$pc_11=$954;$data_10=$989;
     label = 245;
     break L135;
     break;
    }
    case 16:case 17:case 18:case 19:case 20:case 21:case 23: {
     $1002=$270^1;
     $1003=(($149+$1002)|0);
     $1004=((HEAP8[($1003)])|0);
     $1005=($1004&255);
     $1006=$1005<<1;
     $1007=$flags_0724&1;
     $1008=$1006|$1007;
     $1009=(($this+$1008)|0);
     $1010=((HEAP8[($1009)])|0);
     $1011=($1010&255);
     $1012=(($1008)&255);
     HEAP8[($1003)]=$1012;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1011;
     break L135;
     break;
    }
    case 38: {
     $1014=((($264)+(7))|0);
     $1015=((HEAP16[(($151)>>1)])|0);
     $1016=($1015&65535);
     $s_time_13=$1014;$pc_12=$954;$data_11=$1016;
     label = 248;
     break L135;
     break;
    }
    case 32:case 33:case 34:case 35:case 36:case 37:case 39: {
     $1027=$270^1;
     $1028=(($153+$1027)|0);
     $1029=((HEAP8[($1028)])|0);
     $1030=($1029&255);
     $1031=$1030<<1;
     $1032=(($this+$1031)|0);
     $1033=((HEAP8[($1032)])|0);
     $1034=($1033&255);
     $1035=(($1031)&255);
     HEAP8[($1028)]=$1035;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1034;
     break L135;
     break;
    }
    case 54: {
     $1037=((($264)+(7))|0);
     $1038=((HEAP16[(($155)>>1)])|0);
     $1039=($1038&65535);
     $s_time_14=$1037;$pc_13=$954;$data_12=$1039;
     label = 251;
     break L135;
     break;
    }
    case 48:case 49:case 50:case 51:case 52:case 53:case 55: {
     $1051=$270^1;
     $1052=(($157+$1051)|0);
     $1053=((HEAP8[($1052)])|0);
     $1054=($1053&255);
     $1055=$1054<<1;
     $1056=$1055|1;
     $1057=(($this+$1056)|0);
     $1058=((HEAP8[($1057)])|0);
     $1059=($1058&255);
     $1060=(($1056)&255);
     HEAP8[($1052)]=$1060;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1059;
     break L135;
     break;
    }
    case 14: {
     $1062=((($264)+(7))|0);
     $1063=((HEAP16[(($159)>>1)])|0);
     $1064=($1063&65535);
     $s_time_15=$1062;$pc_14=$954;$data_13=$1064;
     label = 254;
     break L135;
     break;
    }
    case 8:case 9:case 10:case 11:case 12:case 13:case 15: {
     $1080=$270^1;
     $1081=(($161+$1080)|0);
     $1082=((HEAP8[($1081)])|0);
     $1083=($1082&255);
     $1084=$1083&1;
     $1085=$1082<<7;
     $1086=($1085&255);
     $1087=$1083>>>1;
     $1088=$1086|$1087;
     $1089=(($this+$1088)|0);
     $1090=((HEAP8[($1089)])|0);
     $1091=($1090&255);
     $1092=$1084|$1091;
     $1093=(($1088)&255);
     HEAP8[($1081)]=$1093;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1092;
     break L135;
     break;
    }
    case 30: {
     $1095=((($264)+(7))|0);
     $1096=((HEAP16[(($163)>>1)])|0);
     $1097=($1096&65535);
     $s_time_16=$1095;$pc_15=$954;$data_14=$1097;
     label = 257;
     break L135;
     break;
    }
    case 24:case 25:case 26:case 27:case 28:case 29:case 31: {
     $1113=$270^1;
     $1114=(($165+$1113)|0);
     $1115=((HEAP8[($1114)])|0);
     $1116=($1115&255);
     $1117=$1116&1;
     $1118=$flags_0724<<7;
     $1119=$1118&128;
     $1120=$1116>>>1;
     $1121=$1120|$1119;
     $1122=(($this+$1121)|0);
     $1123=((HEAP8[($1122)])|0);
     $1124=($1123&255);
     $1125=$1124|$1117;
     $1126=(($1121)&255);
     HEAP8[($1114)]=$1126;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1125;
     break L135;
     break;
    }
    case 46: {
     $1128=((HEAP16[(($167)>>1)])|0);
     $1129=($1128&65535);
     $1130=((($264)+(7))|0);
     $s_time_17=$1130;$pc_16=$954;$data_15=$1129;
     label = 260;
     break L135;
     break;
    }
    case 40:case 41:case 42:case 43:case 44:case 45:case 47: {
     $1145=$270^1;
     $1146=(($169+$1145)|0);
     $1147=((HEAP8[($1146)])|0);
     $1148=($1147&255);
     $1149=$1148&1;
     $1150=$1148&128;
     $1151=$1148>>>1;
     $1152=$1150|$1151;
     $1153=(($this+$1152)|0);
     $1154=((HEAP8[($1153)])|0);
     $1155=($1154&255);
     $1156=$1149|$1155;
     $1157=(($1152)&255);
     HEAP8[($1146)]=$1157;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1156;
     break L135;
     break;
    }
    case 62: {
     $1159=((($264)+(7))|0);
     $1160=((HEAP16[(($171)>>1)])|0);
     $1161=($1160&65535);
     $s_time_18=$1159;$pc_17=$954;$data_16=$1161;
     label = 263;
     break L135;
     break;
    }
    case 56:case 57:case 58:case 59:case 60:case 61:case 63: {
     $1174=$270^1;
     $1175=(($173+$1174)|0);
     $1176=((HEAP8[($1175)])|0);
     $1177=($1176&255);
     $1178=$1177&1;
     $1179=$1177>>>1;
     $1180=(($this+$1179)|0);
     $1181=((HEAP8[($1180)])|0);
     $1182=($1181&255);
     $1183=$1178|$1182;
     $1184=(($1179)&255);
     HEAP8[($1175)]=$1184;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1183;
     break L135;
     break;
    }
    case 70:case 78:case 86:case 94:case 102:case 110:case 118:case 126: {
     $1186=((($264)+(4))|0);
     $1187=((HEAP16[(($175)>>1)])|0);
     $1188=($1187&65535);
     $1189=(($14+$1188)|0);
     $1190=((HEAP8[($1189)])|0);
     $1191=($1190&255);
     $1192=$flags_0724&1;
     $s_time_19=$1186;$flags_6=$1192;$temp45_0=$1191;
     break;
    }
    case 64:case 65:case 66:case 67:case 68:case 69:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 87:case 88:case 89:case 90:case 91:case 92:case 93:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 127: {
     $1194=$270&7;
     $1195=$1194^1;
     $1196=(($176+$1195)|0);
     $1197=((HEAP8[($1196)])|0);
     $1198=($1197&255);
     $1199=$flags_0724&1;
     $1200=$1198&40;
     $1201=$1200|$1199;
     $s_time_19=$264;$flags_6=$1201;$temp45_0=$1198;
     break;
    }
    case 134:case 142:case 150:case 158:case 166:case 174:case 182:case 190:case 198:case 206:case 214:case 222:case 230:case 238:case 246:case 254: {
     $1215=((($264)+(7))|0);
     $1216=((HEAP16[(($178)>>1)])|0);
     $1217=($1216&65535);
     $1218=(($14+$1217)|0);
     $1219=((HEAP8[($1218)])|0);
     $1220=($1219&255);
     $1221=$270>>>3;
     $1222=$1221&7;
     $1223=1<<$1222;
     $1224=$1220|$1223;
     $1225=$270&64;
     $1226=($1225|0)==0;
     $extract_t683=(($1224)&255);
     if ($1226) {
      $1228=$1224^$1223;
      $extract_t684=(($1228)&255);
      $temp46_0_off0=$extract_t684;
     } else {
      $temp46_0_off0=$extract_t683;
     }
     $1230=((HEAP16[(($178)>>1)])|0);
     $1231=($1230&65535);
     $1232=(($14+$1231)|0);
     HEAP8[($1232)]=$temp46_0_off0;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1215;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 192:case 193:case 194:case 195:case 196:case 197:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 255: {
     $1234=$270>>>3;
     $1235=$1234&7;
     $1236=1<<$1235;
     $1237=$270&7;
     $1238=$1237^1;
     $1239=(($179+$1238)|0);
     $1240=((HEAP8[($1239)])|0);
     $1241=($1240&255);
     $1242=$1241|$1236;
     $1243=(($1242)&255);
     HEAP8[($1239)]=$1243;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 128:case 129:case 130:case 131:case 132:case 133:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 191: {
     $1245=$270>>>3;
     $1246=$1245&7;
     $1247=1<<$1246;
     $1248=$1247^255;
     $1249=$270&7;
     $1250=$1249^1;
     $1251=(($180+$1250)|0);
     $1252=((HEAP8[($1251)])|0);
     $1253=($1252&255);
     $1254=$1253&$1248;
     $1255=(($1254)&255);
     HEAP8[($1251)]=$1255;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    default: {
     label = 273;
     break L133;
    }
    }
    $1203=$270>>>3;
    $1204=$1203&7;
    $1205=1<<$1204;
    $1206=$temp45_0&$1205;
    $1207=$1206&128;
    $1208=((($1206)+(32767))|0);
    $1209=$1208>>>8;
    $1210=$1209&68;
    $1211=$flags_6|$1207;
    $1212=$1211|$1210;
    $1213=$1212|16;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_19;$pc_1_be=$954;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1213;
    break;
   }
   case 237: {
    $1258=((($_in)+(2))|0);
    $1259=((18400+$270)|0);
    $1260=((HEAP8[($1259)])|0);
    $1261=($1260&255);
    $1262=$1261>>>4;
    $1263=((($1262)+($264))|0);
    switch (($270|0)) {
    case 66:case 82:case 98:case 74:case 90:case 106: {
     $1265=$270>>>3;
     $1266=$1265&6;
     $1267=(($183+$1266)|0);
     $1268=$1267;
     $1269=((HEAP16[(($1268)>>1)])|0);
     $1270=($1269&65535);
     $temp47_0=$1270;
     label = 276;
     break;
    }
    case 114:case 122: {
     $temp47_0=$sp_0760;
     label = 276;
     break;
    }
    case 64:case 72:case 80:case 88:case 96:case 104:case 112:case 120: {
     $1302=((HEAP16[(($184)>>1)])|0);
     $1303=($1302&65535);
     $1304=((__Z9ay_cpu_inP6Ay_Cpuj($this,$1303))|0);
     $1305=(($1304)&255);
     $1306=$270>>>3;
     $1307=$1306^1;
     $1308=(($186+$1307)|0);
     HEAP8[($1308)]=$1305;
     $1309=$flags_0724&1;
     $1310=(($this+$1304)|0);
     $1311=((HEAP8[($1310)])|0);
     $1312=($1311&255);
     $1313=$1312|$1309;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1313;
     break L135;
     break;
    }
    case 113: {
     HEAP8[($187)]=0;
     label = 280;
     break;
    }
    case 65:case 73:case 81:case 89:case 97:case 105:case 121: {
     label = 280;
     break;
    }
    case 67:case 83: {
     $1326=$270>>>3;
     $1327=(($193+$1326)|0);
     $1328=$1327;
     $1329=((HEAP16[(($1328)>>1)])|0);
     $1330=($1329&65535);
     $temp50_0=$1330;
     label = 282;
     break;
    }
    case 115: {
     $temp50_0=$sp_0760;
     label = 282;
     break;
    }
    case 75:case 91: {
     $1337=(($14+$1258)|0);
     $1338=((__Z8get_le16PKv($1337))|0);
     $1339=((($_in)+(4))|0);
     $1340=(($14+$1338)|0);
     $1341=((__Z8get_le16PKv($1340))|0);
     $1342=(($1341)&65535);
     $1343=$270>>>3;
     $_sum682=((($1343)-(9))|0);
     $1344=(($194+$_sum682)|0);
     $1345=$1344;
     HEAP16[(($1345)>>1)]=$1342;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1339;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 123: {
     $1347=(($14+$1258)|0);
     $1348=((__Z8get_le16PKv($1347))|0);
     $1349=((($_in)+(4))|0);
     $1350=(($14+$1348)|0);
     $1351=((__Z8get_le16PKv($1350))|0);
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1349;$sp_0_be=$1351;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 103: {
     $1353=((HEAP16[(($196)>>1)])|0);
     $1354=($1353&65535);
     $1355=(($14+$1354)|0);
     $1356=((HEAP8[($1355)])|0);
     $1357=($1356&255);
     $1358=((HEAP8[($197)])|0);
     $1359=$1358<<4;
     $1360=($1356&255)>>>4;
     $1361=$1359|$1360;
     HEAP8[($1355)]=$1361;
     $1362=((HEAP8[($197)])|0);
     $1363=($1362&255);
     $1364=$1363&240;
     $1365=$1357&15;
     $1366=$1364|$1365;
     $1367=$flags_0724&1;
     $1368=(($this+$1366)|0);
     $1369=((HEAP8[($1368)])|0);
     $1370=($1369&255);
     $1371=$1370|$1367;
     $1372=(($1366)&255);
     HEAP8[($197)]=$1372;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1371;
     break L135;
     break;
    }
    case 111: {
     $1374=((HEAP16[(($199)>>1)])|0);
     $1375=($1374&65535);
     $1376=(($14+$1375)|0);
     $1377=((HEAP8[($1376)])|0);
     $1378=($1377&255);
     $1379=$1377<<4;
     $1380=((HEAP8[($200)])|0);
     $1381=$1380&15;
     $1382=$1381|$1379;
     HEAP8[($1376)]=$1382;
     $1383=((HEAP8[($200)])|0);
     $1384=($1383&255);
     $1385=$1384&240;
     $1386=$1378>>>4;
     $1387=$1385|$1386;
     $1388=$flags_0724&1;
     $1389=(($this+$1387)|0);
     $1390=((HEAP8[($1389)])|0);
     $1391=($1390&255);
     $1392=$1391|$1388;
     $1393=(($1387)&255);
     HEAP8[($200)]=$1393;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1392;
     break L135;
     break;
    }
    case 68:case 76:case 84:case 92:case 100:case 108:case 116:case 124: {
     $1395=$flags_0724&-2;
     $1396=((HEAP8[($201)])|0);
     $1397=($1396&255);
     HEAP8[($201)]=0;
     $s_time_4=$1263;$pc_3=$1258;$flags_4=$1395;$opcode_0=16;$data_1=$1397;
     label = 178;
     break L135;
     break;
    }
    case 161:case 177: {
     $inc_0=1;
     label = 289;
     break;
    }
    case 169:case 185: {
     $inc_0=-1;
     label = 289;
     break;
    }
    case 160:case 176: {
     $inc59_0=1;
     label = 292;
     break;
    }
    case 168:case 184: {
     $inc59_0=-1;
     label = 292;
     break;
    }
    case 163:case 179: {
     $inc62_0=1;
     label = 295;
     break;
    }
    case 171:case 187: {
     $inc62_0=-1;
     label = 295;
     break;
    }
    case 162:case 178: {
     $inc65_0=1;
     label = 297;
     break;
    }
    case 170:case 186: {
     $inc65_0=-1;
     label = 297;
     break;
    }
    case 71: {
     $1513=((HEAP8[($220)])|0);
     HEAP8[($221)]=$1513;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 79: {
     $1515=((HEAP8[($222)])|0);
     HEAP8[($223)]=$1515;
     $warning_0_off0_be=1;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 87: {
     $1517=((HEAP8[($224)])|0);
     HEAP8[($225)]=$1517;
     $warning_1_off0=$warning_0_off0778;
     label = 302;
     break;
    }
    case 95: {
     $1519=((HEAP8[($228)])|0);
     HEAP8[($229)]=$1519;
     $warning_1_off0=1;
     label = 302;
     break;
    }
    case 69:case 77:case 85:case 93:case 101:case 109:case 117:case 125: {
     $1535=((HEAP8[($230)])|0);
     HEAP8[($231)]=$1535;
     $s_time_2=$1263;
     label = 154;
     break L135;
     break;
    }
    case 70:case 78:case 102:case 110: {
     HEAP8[($232)]=0;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 86:case 118: {
     HEAP8[($233)]=1;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    case 94:case 126: {
     HEAP8[($234)]=2;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
     break;
    }
    default: {
     $warning_0_off0_be=1;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
    }
    }
    if ((label|0) == 276) {
     label = 0;
     $1272=$flags_0724&1;
     $1273=((($temp47_0)+($1272))|0);
     $1274=$270>>>2;
     $1275=$1274&2;
     $1276=($1275|0)==0;
     $1277=(((-$1273))|0);
     $sum48_0=($1276?$1277:$1273);
     $1278=((HEAP16[(($182)>>1)])|0);
     $1279=($1278&65535);
     $1280=((($sum48_0)+($1279))|0);
     $1281=$1279^$temp47_0;
     $1282=$1281^$1280;
     $1283=$1280>>>16;
     $1284=$1283&1;
     $1285=$1282>>>8;
     $1286=$1285&16;
     $1287=$1280>>>8;
     $1288=$1287&168;
     $1289=((($1282)+(32768))|0);
     $1290=$1289>>>14;
     $1291=$1290&4;
     $1292=$1284|$1275;
     $1293=$1292|$1288;
     $1294=$1293|$1286;
     $1295=$1294|$1291;
     $1296=$1295^2;
     $1297=(($1280)&65535);
     HEAP16[(($182)>>1)]=$1297;
     $1298=(($1297<<16)>>16)==0;
     if (!($1298)) {
      $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1296;
      break L135;
     }
     $1300=$1296|64;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1300;
     break L135;
    }
    else if ((label|0) == 280) {
     label = 0;
     $1316=((HEAP32[(($188)>>2)])|0);
     $1317=((($1316)+($1263))|0);
     $1318=((HEAP16[(($189)>>1)])|0);
     $1319=($1318&65535);
     $1320=$270>>>3;
     $1321=$1320^1;
     $1322=(($191+$1321)|0);
     $1323=((HEAP8[($1322)])|0);
     $1324=($1323&255);
     __Z10ay_cpu_outP6Ay_Cpuiji($this,$1317,$1319,$1324);
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
    }
    else if ((label|0) == 282) {
     label = 0;
     $1332=(($14+$1258)|0);
     $1333=((__Z8get_le16PKv($1332))|0);
     $1334=((($_in)+(4))|0);
     $1335=(($14+$1333)|0);
     __Z8set_le16Pvj($1335,$temp50_0);
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1334;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L135;
    }
    else if ((label|0) == 289) {
     label = 0;
     $1400=((HEAP16[(($203)>>1)])|0);
     $1401=($1400&65535);
     $1402=((($1400)+($inc_0))&65535);
     HEAP16[(($203)>>1)]=$1402;
     $1403=(($14+$1401)|0);
     $1404=((HEAP8[($1403)])|0);
     $1405=($1404&255);
     $1406=((HEAP8[($204)])|0);
     $1407=($1406&255);
     $1408=((($1407)-($1405))|0);
     $1409=$flags_0724&1;
     $1410=$1406^$1404;
     $1411=($1410&255);
     $1412=$1411&16;
     $_masked681=$1408&144;
     $1413=$1412^$_masked681;
     $1414=$1413|$1409;
     $1415=(($1408)&255);
     $1416=(($1415<<24)>>24)==0;
     $flags_7_v=($1416?66:2);
     $flags_7=$1414|$flags_7_v;
     $1417=$1413>>>4;
     $1418=$1417&1;
     $1419=((($1408)-($1418))|0);
     $1420=$1419&8;
     $1421=$flags_7|$1420;
     $1422=$1419<<4;
     $1423=$1422&32;
     $1424=$1421|$1423;
     $1425=((HEAP16[(($205)>>1)])|0);
     $1426=((($1425)-(1))&65535);
     HEAP16[(($205)>>1)]=$1426;
     $1427=(($1426<<16)>>16)==0;
     if ($1427) {
      $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1424;
      break L135;
     }
     $1429=$1424|4;
     $1430=$flags_7_v&64;
     $1431=($1430|0)!=0;
     $1432=((($269&255))>>>0)<((176)>>>0);
     $or_cond688=$1431|$1432;
     $1433=((($1263)+(5))|0);
     $_pc_1691=($or_cond688?$1258:$_in);
     $_692=($or_cond688?$1263:$1433);
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$_692;$pc_1_be=$_pc_1691;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1429;
     break L135;
    }
    else if ((label|0) == 292) {
     label = 0;
     $1436=((HEAP16[(($207)>>1)])|0);
     $1437=($1436&65535);
     $1438=((($1437)+($inc59_0))|0);
     $1439=(($1438)&65535);
     HEAP16[(($207)>>1)]=$1439;
     $1440=(($14+$1437)|0);
     $1441=((HEAP8[($1440)])|0);
     $1442=($1441&255);
     $1443=((HEAP16[(($208)>>1)])|0);
     $1444=($1443&65535);
     $1445=((($1444)+($inc59_0))|0);
     $1446=(($1445)&65535);
     HEAP16[(($208)>>1)]=$1446;
     $1447=(($14+$1444)|0);
     HEAP8[($1447)]=$1441;
     $1448=((HEAP8[($209)])|0);
     $1449=($1448&255);
     $1450=((($1449)+($1442))|0);
     $1451=$flags_0724&193;
     $1452=$1450&8;
     $1453=$1452|$1451;
     $1454=$1450<<4;
     $1455=$1454&32;
     $1456=$1453|$1455;
     $1457=((HEAP16[(($210)>>1)])|0);
     $1458=((($1457)-(1))&65535);
     HEAP16[(($210)>>1)]=$1458;
     $1459=(($1458<<16)>>16)==0;
     if ($1459) {
      $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1456;
      break L135;
     }
     $1461=$1456|4;
     $1462=((($269&255))>>>0)<((176)>>>0);
     $1463=((($1263)+(5))|0);
     $_pc_1=($1462?$1258:$_in);
     $_=($1462?$1263:$1463);
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$_;$pc_1_be=$_pc_1;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1461;
     break L135;
    }
    else if ((label|0) == 295) {
     label = 0;
     $1466=((HEAP16[(($212)>>1)])|0);
     $1467=($1466&65535);
     $1468=((($1466)+($inc62_0))&65535);
     HEAP16[(($212)>>1)]=$1468;
     $1469=(($14+$1467)|0);
     $1470=((HEAP8[($1469)])|0);
     $1471=($1470&255);
     $1472=((HEAP8[($213)])|0);
     $1473=((($1472)-(1))&255);
     HEAP8[($213)]=$1473;
     $1474=($1473&255);
     $1475=$1471>>>6;
     $1476=$1475&2;
     $1477=(($this+$1474)|0);
     $1478=((HEAP8[($1477)])|0);
     $1479=($1478&255);
     $1480=$1479&251;
     $1481=$1480|$1476;
     $1482=(($1473<<24)>>24)!=0;
     $1483=((($269&255))>>>0)>((175)>>>0);
     $or_cond689=$1482&$1483;
     $1484=((($1263)+(5))|0);
     $pc_18=($or_cond689?$_in:$1258);
     $s_time_20=($or_cond689?$1484:$1263);
     $1485=((HEAP32[(($214)>>2)])|0);
     $1486=((($s_time_20)+($1485))|0);
     $1487=((HEAP16[(($215)>>1)])|0);
     $1488=($1487&65535);
     __Z10ay_cpu_outP6Ay_Cpuiji($this,$1486,$1488,$1471);
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_20;$pc_1_be=$pc_18;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1481;
     break L135;
    }
    else if ((label|0) == 297) {
     label = 0;
     $1491=((HEAP16[(($217)>>1)])|0);
     $1492=($1491&65535);
     $1493=((($1491)+($inc65_0))&65535);
     HEAP16[(($217)>>1)]=$1493;
     $1494=((HEAP16[(($218)>>1)])|0);
     $1495=($1494&65535);
     $1496=((__Z9ay_cpu_inP6Ay_Cpuj($this,$1495))|0);
     $1497=((HEAP8[($219)])|0);
     $1498=((($1497)-(1))&255);
     HEAP8[($219)]=$1498;
     $1499=($1498&255);
     $1500=$1496>>>6;
     $1501=$1500&2;
     $1502=(($this+$1499)|0);
     $1503=((HEAP8[($1502)])|0);
     $1504=($1503&255);
     $1505=$1504&251;
     $1506=$1505|$1501;
     $1507=(($1498<<24)>>24)!=0;
     $1508=((($269&255))>>>0)>((175)>>>0);
     $or_cond690=$1507&$1508;
     $1509=((($1263)+(5))|0);
     $pc_19=($or_cond690?$_in:$1258);
     $s_time_21=($or_cond690?$1509:$1263);
     $1510=(($1496)&255);
     $1511=(($14+$1492)|0);
     HEAP8[($1511)]=$1510;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_21;$pc_1_be=$pc_19;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1506;
     break L135;
    }
    else if ((label|0) == 302) {
     label = 0;
     $1521=$flags_0724&1;
     $1522=((HEAP8[($226)])|0);
     $1523=($1522&255);
     $1524=(($this+$1523)|0);
     $1525=((HEAP8[($1524)])|0);
     $1526=($1525&255);
     $1527=$1526&251;
     $1528=$1527|$1521;
     $1529=((HEAP8[($227)])|0);
     $1530=($1529&255);
     $1531=$1530<<2;
     $1532=$1531&4;
     $1533=$1528|$1532;
     $warning_0_off0_be=$warning_1_off0;$s_time_1_be=$1263;$pc_1_be=$1258;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1533;
     break L135;
    }
    break;
   }
   case 253: {
    $ixy_0=$iy_0730;
    label = 308;
    break;
   }
   case 221: {
    $ixy_0=$ix_0745;
    label = 308;
    break;
   }
   case 118: {
    label = 369;
    break L133;
    break;
   }
   default: {
    label = 368;
    break L133;
   }
   }
  } while(0);
  L319: do {
   if ((label|0) == 99) {
    label = 0;
    $249=((($264)-(5))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$249;$pc_1_be=$pc_0;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
   }
   else if ((label|0) == 101) {
    label = 0;
    $260=((($264)-(7))|0);
    $s_time_0=$260;
    label = 102;
   }
   else if ((label|0) == 154) {
    label = 0;
    $422=(($14+$sp_0760)|0);
    $423=((__Z8get_le16PKv($422))|0);
    $424=((($sp_0760)+(2))|0);
    $425=$424&65535;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_2;$pc_1_be=$423;$sp_0_be=$425;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
   }
   else if ((label|0) == 163) {
    label = 0;
    $451=((($_in)+(3))|0);
    $452=((__Z8get_le16PKv($268))|0);
    $453=((($sp_0760)+(65534))|0);
    $454=$453&65535;
    $455=(($14+$454)|0);
    __Z8set_le16Pvj($455,$451);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$452;$sp_0_be=$454;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
   }
   else if ((label|0) == 166) {
    label = 0;
    $462=$265&56;
    $s_time_3=$264;$pc_2=$462;$data_0=$267;
    label = 169;
   }
   else if ((label|0) == 173) {
    label = 0;
    $499=((HEAP16[(($60)>>1)])|0);
    $500=($499&65535);
    $501=(($14+$500)|0);
    $502=((HEAP8[($501)])|0);
    $503=($502&255);
    $s_time_4=$264;$pc_3=$267;$flags_4=$flags_1;$opcode_0=$265;$data_1=$503;
    label = 178;
   }
   else if ((label|0) == 175) {
    label = 0;
    $507=((($_in)+(2))|0);
    $s_time_4=$264;$pc_3=$507;$flags_4=$flags_2;$opcode_0=$265;$data_1=$270;
    label = 178;
   }
   else if ((label|0) == 177) {
    label = 0;
    $511=$265&7;
    $512=$511^1;
    $513=(($62+$512)|0);
    $514=((HEAP8[($513)])|0);
    $515=($514&255);
    $s_time_4=$264;$pc_3=$267;$flags_4=$flags_3;$opcode_0=$265;$data_1=$515;
    label = 178;
   }
   else if ((label|0) == 185) {
    label = 0;
    $583=((HEAP16[(($69)>>1)])|0);
    $584=($583&65535);
    $585=((($584)+($data_3))|0);
    $586=$584^$data_3;
    $587=(($585)&65535);
    HEAP16[(($69)>>1)]=$587;
    $588=$flags_0724&196;
    $589=$585>>>16;
    $590=$589|$588;
    $591=$585>>>8;
    $592=$591&40;
    $593=$590|$592;
    $594=$586^$585;
    $595=$594>>>8;
    $596=$595&16;
    $597=$593|$596;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$264;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$597;
   }
   else if ((label|0) == 308) {
    label = 0;
    $1541=((($_in)+(2))|0);
    $1542=(($14+$1541)|0);
    $1543=((HEAP8[($1542)])|0);
    $1544=($1543&255);
    $1545=((18400+$270)|0);
    $1546=((HEAP8[($1545)])|0);
    $1547=($1546&255);
    $1548=$1547&15;
    $1549=((($1548)+($264))|0);
    switch (($270|0)) {
    case 100:case 109: {
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1541;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 229: {
     $s_time_3=$1549;$pc_2=$1541;$data_0=$ixy_0;
     label = 169;
     break L319;
     break;
    }
    case 150:case 134: {
     $1551=$flags_0724&-2;
     $flags_8=$1551;
     label = 310;
     break;
    }
    case 158:case 142: {
     $flags_8=$flags_0724;
     label = 310;
     break;
    }
    case 148:case 132: {
     $1561=$flags_0724&-2;
     $flags_9=$1561;
     label = 312;
     break;
    }
    case 156:case 140: {
     $flags_9=$flags_0724;
     label = 312;
     break;
    }
    case 149:case 133: {
     $1565=$flags_0724&-2;
     $flags_10=$1565;
     label = 314;
     break;
    }
    case 157:case 141: {
     $flags_10=$flags_0724;
     label = 314;
     break;
    }
    case 41: {
     $temp70_0=$ixy_0;
     label = 317;
     break;
    }
    case 9:case 25: {
     $1570=$270>>>3;
     $_sum=((($1570)-(1))|0);
     $1571=(($235+$_sum)|0);
     $1572=$1571;
     $1573=((HEAP16[(($1572)>>1)])|0);
     $1574=($1573&65535);
     $temp70_0=$1574;
     label = 317;
     break;
    }
    case 57: {
     $temp70_0=$sp_0760;
     label = 317;
     break;
    }
    case 166: {
     $1590=((($_in)+(3))|0);
     $1591=(($1543<<24)>>24);
     $1592=((($1591)+($ixy_0))|0);
     $1593=$1592&65535;
     $1594=(($14+$1593)|0);
     $1595=((HEAP8[($1594)])|0);
     $1596=($1595&255);
     $s_time_8=$1549;$pc_7=$1590;$data_6=$1596;
     label = 205;
     break L319;
     break;
    }
    case 164: {
     $1598=$ixy_0>>>8;
     $s_time_8=$1549;$pc_7=$1541;$data_6=$1598;
     label = 205;
     break L319;
     break;
    }
    case 165: {
     $1600=$ixy_0&255;
     $s_time_8=$1549;$pc_7=$1541;$data_6=$1600;
     label = 205;
     break L319;
     break;
    }
    case 182: {
     $1602=((($_in)+(3))|0);
     $1603=(($1543<<24)>>24);
     $1604=((($1603)+($ixy_0))|0);
     $1605=$1604&65535;
     $1606=(($14+$1605)|0);
     $1607=((HEAP8[($1606)])|0);
     $1608=($1607&255);
     $s_time_9=$1549;$pc_8=$1602;$data_7=$1608;
     label = 209;
     break L319;
     break;
    }
    case 180: {
     $1610=$ixy_0>>>8;
     $s_time_9=$1549;$pc_8=$1541;$data_7=$1610;
     label = 209;
     break L319;
     break;
    }
    case 181: {
     $1612=$ixy_0&255;
     $s_time_9=$1549;$pc_8=$1541;$data_7=$1612;
     label = 209;
     break L319;
     break;
    }
    case 174: {
     $1614=((($_in)+(3))|0);
     $1615=(($1543<<24)>>24);
     $1616=((($1615)+($ixy_0))|0);
     $1617=$1616&65535;
     $1618=(($14+$1617)|0);
     $1619=((HEAP8[($1618)])|0);
     $1620=($1619&255);
     $s_time_10=$1549;$pc_9=$1614;$data_8=$1620;
     label = 213;
     break L319;
     break;
    }
    case 172: {
     $1622=$ixy_0>>>8;
     $s_time_10=$1549;$pc_9=$1541;$data_8=$1622;
     label = 213;
     break L319;
     break;
    }
    case 173: {
     $1624=$ixy_0&255;
     $s_time_10=$1549;$pc_9=$1541;$data_8=$1624;
     label = 213;
     break L319;
     break;
    }
    case 190: {
     $1626=((($_in)+(3))|0);
     $1627=(($1543<<24)>>24);
     $1628=((($1627)+($ixy_0))|0);
     $1629=$1628&65535;
     $1630=(($14+$1629)|0);
     $1631=((HEAP8[($1630)])|0);
     $1632=($1631&255);
     $s_time_5=$1549;$pc_4=$1626;$data_2=$1632;
     label = 182;
     break L319;
     break;
    }
    case 188: {
     $1634=$ixy_0>>>8;
     $s_time_5=$1549;$pc_4=$1541;$data_2=$1634;
     label = 182;
     break L319;
     break;
    }
    case 189: {
     $1636=$ixy_0&255;
     $s_time_5=$1549;$pc_4=$1541;$data_2=$1636;
     label = 182;
     break L319;
     break;
    }
    case 112:case 113:case 114:case 115:case 116:case 117:case 119: {
     $1638=$270^1;
     $1639=(($237+$1638)|0);
     $pc_20=$1541;$data_17_in_in=$1639;
     label = 332;
     break;
    }
    case 54: {
     $1641=((($_in)+(3))|0);
     $1642=(($14+$1641)|0);
     $pc_20=$1641;$data_17_in_in=$1642;
     label = 332;
     break;
    }
    case 68:case 76:case 84:case 92:case 124: {
     $1650=$ixy_0>>>8;
     $1651=(($1650)&255);
     $1652=$270>>>3;
     $1653=$1652^1;
     $1654=(($239+$1653)|0);
     HEAP8[($1654)]=$1651;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1541;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 69:case 77:case 85:case 93:case 125: {
     $1656=(($ixy_0)&255);
     $1657=$270>>>3;
     $1658=$1657^1;
     $1659=(($241+$1658)|0);
     HEAP8[($1659)]=$1656;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1541;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 70:case 78:case 86:case 94:case 102:case 110:case 126: {
     $1661=((($_in)+(3))|0);
     $1662=(($1543<<24)>>24);
     $1663=((($1662)+($ixy_0))|0);
     $1664=$1663&65535;
     $1665=(($14+$1664)|0);
     $1666=((HEAP8[($1665)])|0);
     $1667=$270>>>3;
     $1668=$1667^1;
     $1669=(($243+$1668)|0);
     HEAP8[($1669)]=$1666;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1661;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 38: {
     $1671=((($_in)+(3))|0);
     $pc_21=$1671;$data269_0=$1544;
     label = 339;
     break;
    }
    case 101: {
     $1673=$ixy_0&255;
     $pc_21=$1541;$data269_0=$1673;
     label = 339;
     break;
    }
    case 96:case 97:case 98:case 99:case 103: {
     $1675=$270^1;
     $1676=(($245+$1675)|0);
     $1677=((HEAP8[($1676)])|0);
     $1678=($1677&255);
     $pc_21=$1541;$data269_0=$1678;
     label = 339;
     break;
    }
    case 46: {
     $1684=((($_in)+(3))|0);
     $pc_22=$1684;$data269_1=$1544;
     label = 343;
     break;
    }
    case 108: {
     $1686=$ixy_0>>>8;
     $pc_22=$1541;$data269_1=$1686;
     label = 343;
     break;
    }
    case 104:case 105:case 106:case 107:case 111: {
     $1688=$270^1;
     $1689=(($247+$1688)|0);
     $1690=((HEAP8[($1689)])|0);
     $1691=($1690&255);
     $pc_22=$1541;$data269_1=$1691;
     label = 343;
     break;
    }
    case 249: {
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1541;$sp_0_be=$ixy_0;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 34: {
     $1699=((__Z8get_le16PKv($1542))|0);
     $1700=((($_in)+(4))|0);
     $1701=(($14+$1699)|0);
     __Z8set_le16Pvj($1701,$ixy_0);
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1700;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 33: {
     $1703=((__Z8get_le16PKv($1542))|0);
     $1704=((($_in)+(4))|0);
     $pc_23=$1704;$sp_1=$sp_0760;$flags_11=$flags_0724;$ixy_1=$1703;
     break;
    }
    case 42: {
     $1706=((__Z8get_le16PKv($1542))|0);
     $1707=(($14+$1706)|0);
     $1708=((__Z8get_le16PKv($1707))|0);
     $1709=((($_in)+(4))|0);
     $pc_23=$1709;$sp_1=$sp_0760;$flags_11=$flags_0724;$ixy_1=$1708;
     break;
    }
    case 203: {
     $1711=(($1543<<24)>>24);
     $1712=((($1711)+($ixy_0))|0);
     $1713=$1712&65535;
     $1714=((($_in)+(3))|0);
     $1715=(($14+$1714)|0);
     $1716=((HEAP8[($1715)])|0);
     $1717=($1716&255);
     $1718=((($_in)+(4))|0);
     switch (($1717|0)) {
     case 6: {
      $s_time_11=$1549;$pc_10=$1718;$data_9=$1713;
      label = 242;
      break L319;
      break;
     }
     case 22: {
      $s_time_12=$1549;$pc_11=$1718;$data_10=$1713;
      label = 245;
      break L319;
      break;
     }
     case 38: {
      $s_time_13=$1549;$pc_12=$1718;$data_11=$1713;
      label = 248;
      break L319;
      break;
     }
     case 54: {
      $s_time_14=$1549;$pc_13=$1718;$data_12=$1713;
      label = 251;
      break L319;
      break;
     }
     case 14: {
      $s_time_15=$1549;$pc_14=$1718;$data_13=$1713;
      label = 254;
      break L319;
      break;
     }
     case 30: {
      $s_time_16=$1549;$pc_15=$1718;$data_14=$1713;
      label = 257;
      break L319;
      break;
     }
     case 46: {
      $s_time_17=$1549;$pc_16=$1718;$data_15=$1713;
      label = 260;
      break L319;
      break;
     }
     case 62: {
      $s_time_18=$1549;$pc_17=$1718;$data_16=$1713;
      label = 263;
      break L319;
      break;
     }
     case 70:case 78:case 86:case 94:case 102:case 110:case 118:case 126: {
      $1720=(($14+$1713)|0);
      $1721=((HEAP8[($1720)])|0);
      $1722=($1721&255);
      $1723=$1717>>>3;
      $1724=$1723&7;
      $1725=1<<$1724;
      $1726=$1722&$1725;
      $1727=$flags_0724&1;
      $1728=$1726&128;
      $1729=((($1726)+(32767))|0);
      $1730=$1729>>>8;
      $1731=$1730&68;
      $1732=$1727|$1728;
      $1733=$1732|$1731;
      $1734=$1733|16;
      $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1718;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1734;
      break L319;
      break;
     }
     case 134:case 142:case 150:case 158:case 166:case 174:case 182:case 190:case 198:case 206:case 214:case 222:case 230:case 238:case 246:case 254: {
      break;
     }
     default: {
      $warning_0_off0_be=1;$s_time_1_be=$1549;$pc_1_be=$1718;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
      break L319;
     }
     }
     $1736=(($14+$1713)|0);
     $1737=((HEAP8[($1736)])|0);
     $1738=($1737&255);
     $1739=$1717>>>3;
     $1740=$1739&7;
     $1741=1<<$1740;
     $1742=$1738|$1741;
     $1743=$1717&64;
     $1744=($1743|0)==0;
     $extract_t=(($1742)&255);
     if ($1744) {
      $1746=$1742^$1741;
      $extract_t680=(($1746)&255);
      $temp76_0_off0=$extract_t680;
     } else {
      $temp76_0_off0=$extract_t;
     }
     HEAP8[($1736)]=$temp76_0_off0;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1718;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 35: {
     $1749=((($ixy_0)+(1))|0);
     $1750=$1749&65535;
     $pc_23=$1541;$sp_1=$sp_0760;$flags_11=$flags_0724;$ixy_1=$1750;
     break;
    }
    case 43: {
     $1752=((($ixy_0)+(65535))|0);
     $1753=$1752&65535;
     $pc_23=$1541;$sp_1=$sp_0760;$flags_11=$flags_0724;$ixy_1=$1753;
     break;
    }
    case 52: {
     $1755=(($1543<<24)>>24);
     $1756=((($1755)+($ixy_0))|0);
     $1757=$1756&65535;
     $1758=((($_in)+(3))|0);
     $1759=(($14+$1757)|0);
     $1760=((HEAP8[($1759)])|0);
     $1761=($1760&255);
     $1762=((($1761)+(1))|0);
     $1763=(($1762)&255);
     HEAP8[($1759)]=$1763;
     $s_time_6=$1549;$pc_5=$1758;$ix_1=$ix_0745;$iy_1=$iy_0730;$data_4=$1762;
     label = 192;
     break L319;
     break;
    }
    case 53: {
     $1765=(($1543<<24)>>24);
     $1766=((($1765)+($ixy_0))|0);
     $1767=$1766&65535;
     $1768=((($_in)+(3))|0);
     $1769=(($14+$1767)|0);
     $1770=((HEAP8[($1769)])|0);
     $1771=($1770&255);
     $1772=((($1771)-(1))|0);
     $1773=(($1772)&255);
     HEAP8[($1769)]=$1773;
     $s_time_7=$1549;$pc_6=$1768;$ix_2=$ix_0745;$iy_2=$iy_0730;$data_5=$1772;
     label = 196;
     break L319;
     break;
    }
    case 36: {
     $1775=((($ixy_0)+(256))|0);
     $1776=$1775&65535;
     $1777=$1776>>>8;
     $ixy_2=$1776;$data_18=$1777;
     label = 360;
     break;
    }
    case 44: {
     $1779=((($ixy_0)+(1))|0);
     $1780=$1779&255;
     $1781=$ixy_0&65280;
     $1782=$1780|$1781;
     $ixy_2=$1782;$data_18=$1780;
     label = 360;
     break;
    }
    case 37: {
     $1786=((($ixy_0)+(65280))|0);
     $1787=$1786&65535;
     $1788=$1787>>>8;
     $ixy_3=$1787;$data_19=$1788;
     label = 363;
     break;
    }
    case 45: {
     $1790=((($ixy_0)+(255))|0);
     $1791=$1790&255;
     $1792=$ixy_0&65280;
     $1793=$1791|$1792;
     $ixy_3=$1793;$data_19=$1791;
     label = 363;
     break;
    }
    case 225: {
     $1797=(($14+$sp_0760)|0);
     $1798=((__Z8get_le16PKv($1797))|0);
     $1799=((($sp_0760)+(2))|0);
     $1800=$1799&65535;
     $pc_23=$1541;$sp_1=$1800;$flags_11=$flags_0724;$ixy_1=$1798;
     break;
    }
    case 233: {
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$ixy_0;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
     break;
    }
    case 227: {
     $1803=(($14+$sp_0760)|0);
     $1804=((__Z8get_le16PKv($1803))|0);
     __Z8set_le16Pvj($1803,$ixy_0);
     $pc_23=$1541;$sp_1=$sp_0760;$flags_11=$flags_0724;$ixy_1=$1804;
     break;
    }
    default: {
     $warning_0_off0_be=1;$s_time_1_be=$1549;$pc_1_be=$267;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break L319;
    }
    }
    if ((label|0) == 310) {
     label = 0;
     $1553=((($_in)+(3))|0);
     $1554=(($1543<<24)>>24);
     $1555=((($1554)+($ixy_0))|0);
     $1556=$1555&65535;
     $1557=(($14+$1556)|0);
     $1558=((HEAP8[($1557)])|0);
     $1559=($1558&255);
     $s_time_4=$1549;$pc_3=$1553;$flags_4=$flags_8;$opcode_0=$270;$data_1=$1559;
     label = 178;
     break;
    }
    else if ((label|0) == 312) {
     label = 0;
     $1563=$ixy_0>>>8;
     $s_time_4=$1549;$pc_3=$1541;$flags_4=$flags_9;$opcode_0=$270;$data_1=$1563;
     label = 178;
     break;
    }
    else if ((label|0) == 314) {
     label = 0;
     $1567=$ixy_0&255;
     $s_time_4=$1549;$pc_3=$1541;$flags_4=$flags_10;$opcode_0=$270;$data_1=$1567;
     label = 178;
     break;
    }
    else if ((label|0) == 317) {
     label = 0;
     $1576=((($temp70_0)+($ixy_0))|0);
     $1577=$temp70_0^$ixy_0;
     $1578=$1576&65535;
     $1579=$flags_0724&196;
     $1580=$1576>>>16;
     $1581=$1580|$1579;
     $1582=$1576>>>8;
     $1583=$1582&40;
     $1584=$1581|$1583;
     $1585=$1577^$1576;
     $1586=$1585>>>8;
     $1587=$1586&16;
     $1588=$1584|$1587;
     $pc_23=$1541;$sp_1=$sp_0760;$flags_11=$1588;$ixy_1=$1578;
    }
    else if ((label|0) == 332) {
     label = 0;
     $data_17_in=((HEAP8[($data_17_in_in)])|0);
     $1644=((($pc_20)+(1))|0);
     $1645=(($1543<<24)>>24);
     $1646=((($1645)+($ixy_0))|0);
     $1647=$1646&65535;
     $1648=(($14+$1647)|0);
     HEAP8[($1648)]=$data_17_in;
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$1644;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
     break;
    }
    else if ((label|0) == 339) {
     label = 0;
     $1680=$ixy_0&255;
     $1681=$data269_0<<8;
     $1682=$1681|$1680;
     $pc_23=$pc_21;$sp_1=$sp_0760;$flags_11=$flags_0724;$ixy_1=$1682;
    }
    else if ((label|0) == 343) {
     label = 0;
     $1693=$ixy_0&65280;
     $1694=$data269_1|$1693;
     $pc_23=$pc_22;$sp_1=$sp_0760;$flags_11=$flags_0724;$ixy_1=$1694;
    }
    else if ((label|0) == 360) {
     label = 0;
     $1784=(($266<<24)>>24)==-35;
     $iy_0_ixy_2=($1784?$iy_0730:$ixy_2);
     $ixy_2_ix_0=($1784?$ixy_2:$ix_0745);
     $s_time_6=$1549;$pc_5=$1541;$ix_1=$ixy_2_ix_0;$iy_1=$iy_0_ixy_2;$data_4=$data_18;
     label = 192;
     break;
    }
    else if ((label|0) == 363) {
     label = 0;
     $1795=(($266<<24)>>24)==-35;
     $iy_0_ixy_3=($1795?$iy_0730:$ixy_3);
     $ixy_3_ix_0=($1795?$ixy_3:$ix_0745);
     $s_time_7=$1549;$pc_6=$1541;$ix_2=$ixy_3_ix_0;$iy_2=$iy_0_ixy_3;$data_5=$data_19;
     label = 196;
     break;
    }
    $1696=(($266<<24)>>24)==-35;
    $iy_0_ixy_1=($1696?$iy_0730:$ixy_1);
    $ixy_1_ix_0=($1696?$ixy_1:$ix_0745);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$1549;$pc_1_be=$pc_23;$sp_0_be=$sp_1;$ix_0_be=$ixy_1_ix_0;$iy_0_be=$iy_0_ixy_1;$flags_0_be=$flags_11;
   }
  } while(0);
  do {
   if ((label|0) == 102) {
    label = 0;
    $262=((($_in)+(3))|0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_0;$pc_1_be=$262;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
   }
   else if ((label|0) == 169) {
    label = 0;
    $475=((($sp_0760)+(65534))|0);
    $476=$475&65535;
    $477=(($14+$476)|0);
    __Z8set_le16Pvj($477,$data_0);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_3;$pc_1_be=$pc_2;$sp_0_be=$476;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$flags_0724;
   }
   else if ((label|0) == 178) {
    label = 0;
    $517=$flags_4&1;
    $518=((($517)+($data_1))|0);
    $519=((HEAP8[($61)])|0);
    $520=($519&255);
    $521=$520^$data_1;
    $522=$opcode_0>>>3;
    $523=$522&2;
    $524=($523|0)==0;
    $525=(((-$518))|0);
    $result_0=($524?$518:$525);
    $526=((($520)+($result_0))|0);
    $527=$521^$526;
    $528=$527&16;
    $529=((($527)+(128))|0);
    $530=$529>>>6;
    $531=$530&4;
    $532=$526&511;
    $533=(($this+$532)|0);
    $534=((HEAP8[($533)])|0);
    $535=($534&255);
    $536=$535&251;
    $537=$536|$523;
    $538=$537|$528;
    $539=$538|$531;
    $540=(($526)&255);
    HEAP8[($61)]=$540;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_4;$pc_1_be=$pc_3;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$539;
   }
   else if ((label|0) == 182) {
    label = 0;
    $555=((HEAP8[($65)])|0);
    $556=($555&255);
    $557=((($556)-($data_2))|0);
    $558=$data_2&40;
    $559=$557>>>8;
    $560=$559&1;
    $561=$556^$data_2;
    $562=$557^$556;
    $563=$562&$561;
    $564=$563>>>5;
    $565=$564&4;
    $566=$561&16;
    $_masked=$557&144;
    $567=$566^$_masked;
    $568=$560|$558;
    $569=$568|$567;
    $570=$569|$565;
    $571=$570|2;
    $572=(($557)&255);
    $573=(($572<<24)>>24)==0;
    if (!($573)) {
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_5;$pc_1_be=$pc_4;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$571;
     break;
    }
    $575=$570|66;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_5;$pc_1_be=$pc_4;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$575;
   }
   else if ((label|0) == 192) {
    label = 0;
    $646=$flags_0724&1;
    $647=$data_4&15;
    $648=((($647)+(31))|0);
    $649=$648&16;
    $650=$649|$646;
    $651=$data_4&255;
    $652=(($this+$651)|0);
    $653=((HEAP8[($652)])|0);
    $654=($653&255);
    $655=$654&251;
    $656=$650|$655;
    $657=($data_4|0)==128;
    if (!($657)) {
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_6;$pc_1_be=$pc_5;$sp_0_be=$sp_0760;$ix_0_be=$ix_1;$iy_0_be=$iy_1;$flags_0_be=$656;
     break;
    }
    $659=$656|4;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_6;$pc_1_be=$pc_5;$sp_0_be=$sp_0760;$ix_0_be=$ix_1;$iy_0_be=$iy_1;$flags_0_be=$659;
   }
   else if ((label|0) == 196) {
    label = 0;
    $676=$flags_0724&1;
    $677=$data_5&15;
    $678=((($677)+(1))|0);
    $679=$678&16;
    $680=$679|$676;
    $681=$data_5&255;
    $682=(($this+$681)|0);
    $683=((HEAP8[($682)])|0);
    $684=($683&255);
    $685=$684&249;
    $686=$680|$685;
    $687=$686|2;
    $688=($data_5|0)==127;
    if (!($688)) {
     $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_7;$pc_1_be=$pc_6;$sp_0_be=$sp_0760;$ix_0_be=$ix_2;$iy_0_be=$iy_2;$flags_0_be=$687;
     break;
    }
    $690=$686|6;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_7;$pc_1_be=$pc_6;$sp_0_be=$sp_0760;$ix_0_be=$ix_2;$iy_0_be=$iy_2;$flags_0_be=$690;
   }
   else if ((label|0) == 205) {
    label = 0;
    $723=((HEAP8[($82)])|0);
    $724=($723&255);
    $725=$724&$data_6;
    $726=(($725)&255);
    HEAP8[($82)]=$726;
    $727=(($this+$725)|0);
    $728=((HEAP8[($727)])|0);
    $729=($728&255);
    $730=$729|16;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_8;$pc_1_be=$pc_7;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$730;
   }
   else if ((label|0) == 209) {
    label = 0;
    $745=((HEAP8[($87)])|0);
    $746=($745&255);
    $747=$746|$data_7;
    $748=(($747)&255);
    HEAP8[($87)]=$748;
    $749=$747&255;
    $750=(($this+$749)|0);
    $751=((HEAP8[($750)])|0);
    $752=($751&255);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_9;$pc_1_be=$pc_8;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$752;
   }
   else if ((label|0) == 213) {
    label = 0;
    $767=((HEAP8[($92)])|0);
    $768=($767&255);
    $769=$768^$data_8;
    $770=(($769)&255);
    HEAP8[($92)]=$770;
    $771=$769&255;
    $772=(($this+$771)|0);
    $773=((HEAP8[($772)])|0);
    $774=($773&255);
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_10;$pc_1_be=$pc_9;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$774;
   }
   else if ((label|0) == 242) {
    label = 0;
    $960=(($14+$data_9)|0);
    $961=((HEAP8[($960)])|0);
    $962=($961&255);
    $963=$961<<1;
    $964=($963&255);
    $965=$962>>>7;
    $966=$964|$965;
    $967=(($this+$966)|0);
    $968=((HEAP8[($967)])|0);
    $969=($968&255);
    $970=$969|$965;
    $971=(($966)&255);
    HEAP8[($960)]=$971;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_11;$pc_1_be=$pc_10;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$970;
   }
   else if ((label|0) == 245) {
    label = 0;
    $991=(($14+$data_10)|0);
    $992=((HEAP8[($991)])|0);
    $993=($992&255);
    $994=$993<<1;
    $995=$flags_0724&1;
    $996=$994|$995;
    $997=(($this+$996)|0);
    $998=((HEAP8[($997)])|0);
    $999=($998&255);
    $1000=(($996)&255);
    HEAP8[($991)]=$1000;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_12;$pc_1_be=$pc_11;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$999;
   }
   else if ((label|0) == 248) {
    label = 0;
    $1018=(($14+$data_11)|0);
    $1019=((HEAP8[($1018)])|0);
    $1020=($1019&255);
    $1021=$1020<<1;
    $1022=(($this+$1021)|0);
    $1023=((HEAP8[($1022)])|0);
    $1024=($1023&255);
    $1025=(($1021)&255);
    HEAP8[($1018)]=$1025;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_13;$pc_1_be=$pc_12;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1024;
   }
   else if ((label|0) == 251) {
    label = 0;
    $1041=(($14+$data_12)|0);
    $1042=((HEAP8[($1041)])|0);
    $1043=($1042&255);
    $1044=$1043<<1;
    $1045=$1044|1;
    $1046=(($this+$1045)|0);
    $1047=((HEAP8[($1046)])|0);
    $1048=($1047&255);
    $1049=(($1045)&255);
    HEAP8[($1041)]=$1049;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_14;$pc_1_be=$pc_13;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1048;
   }
   else if ((label|0) == 254) {
    label = 0;
    $1066=(($14+$data_13)|0);
    $1067=((HEAP8[($1066)])|0);
    $1068=($1067&255);
    $1069=$1068&1;
    $1070=$1067<<7;
    $1071=($1070&255);
    $1072=$1068>>>1;
    $1073=$1071|$1072;
    $1074=(($this+$1073)|0);
    $1075=((HEAP8[($1074)])|0);
    $1076=($1075&255);
    $1077=$1069|$1076;
    $1078=(($1073)&255);
    HEAP8[($1066)]=$1078;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_15;$pc_1_be=$pc_14;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1077;
   }
   else if ((label|0) == 257) {
    label = 0;
    $1099=(($14+$data_14)|0);
    $1100=((HEAP8[($1099)])|0);
    $1101=($1100&255);
    $1102=$1101&1;
    $1103=$flags_0724<<7;
    $1104=$1103&128;
    $1105=$1101>>>1;
    $1106=$1105|$1104;
    $1107=(($this+$1106)|0);
    $1108=((HEAP8[($1107)])|0);
    $1109=($1108&255);
    $1110=$1109|$1102;
    $1111=(($1106)&255);
    HEAP8[($1099)]=$1111;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_16;$pc_1_be=$pc_15;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1110;
   }
   else if ((label|0) == 260) {
    label = 0;
    $1132=(($14+$data_15)|0);
    $1133=((HEAP8[($1132)])|0);
    $1134=($1133&255);
    $1135=$1134&1;
    $1136=$1134&128;
    $1137=$1134>>>1;
    $1138=$1136|$1137;
    $1139=(($this+$1138)|0);
    $1140=((HEAP8[($1139)])|0);
    $1141=($1140&255);
    $1142=$1135|$1141;
    $1143=(($1138)&255);
    HEAP8[($1132)]=$1143;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_17;$pc_1_be=$pc_16;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1142;
   }
   else if ((label|0) == 263) {
    label = 0;
    $1163=(($14+$data_16)|0);
    $1164=((HEAP8[($1163)])|0);
    $1165=($1164&255);
    $1166=$1165&1;
    $1167=$1165>>>1;
    $1168=(($this+$1167)|0);
    $1169=((HEAP8[($1168)])|0);
    $1170=($1169&255);
    $1171=$1166|$1170;
    $1172=(($1167)&255);
    HEAP8[($1163)]=$1172;
    $warning_0_off0_be=$warning_0_off0778;$s_time_1_be=$s_time_18;$pc_1_be=$pc_17;$sp_0_be=$sp_0760;$ix_0_be=$ix_0745;$iy_0_be=$iy_0730;$flags_0_be=$1171;
   }
  } while(0);
  $250=(($14+$pc_1_be)|0);
  $251=((HEAP8[($250)])|0);
  $252=($251&255);
  $253=((11744+$252)|0);
  $254=((HEAP8[($253)])|0);
  $255=($254&255);
  $256=((($255)+($s_time_1_be))|0);
  $257=($256|0)<0;
  $258=($256|0)<($255|0);
  $or_cond=$257|$258;
  if ($or_cond) {
   $flags_0724=$flags_0_be;$iy_0730=$iy_0_be;$ix_0745=$ix_0_be;$sp_0760=$sp_0_be;$warning_0_off0778=$warning_0_off0_be;$266=$251;$265=$252;$_in=$pc_1_be;$264=$256;
  } else {
   label = 370;
   break;
  }
 }
 if ((label|0) == 273) {
  ___assert_fail(((8216)|0),((7984)|0),((1024)|0),((9184)|0));
  return ((0)|0);
 }
 else if ((label|0) == 368) {
  ___assert_fail(((8216)|0),((7984)|0),((1647)|0),((9184)|0));
  return ((0)|0);
 }
 else if ((label|0) == 369) {
  $1808=$264&3;
  $extract_t801=(($_in)&65535);
  $extract_t805=(($sp_0760)&65535);
  $extract_t809=(($ix_0745)&65535);
  $extract_t813=(($iy_0730)&65535);
  $extract_t817=(($flags_0724)&255);
  $s_time_22=$1808;$flags_0696_off0=$extract_t817;$iy_0700_off0=$extract_t813;$ix_0704_off0=$extract_t809;$sp_0708_off0=$extract_t805;$pc_1712_off0=$extract_t801;$warning_0_off0719=$warning_0_off0778;
  HEAP32[(($11)>>2)]=$s_time_22;
  $1809=(($6+7)|0);
  HEAP8[($1809)]=$flags_0696_off0;
  HEAP16[(($20)>>1)]=$ix_0704_off0;
  HEAP16[(($22)>>1)]=$iy_0700_off0;
  HEAP16[(($18)>>1)]=$sp_0708_off0;
  HEAP16[(($15)>>1)]=$pc_1712_off0;
  $ld$8$0=(($1)|0);
  $1810$0=((HEAP32[(($ld$8$0)>>2)])|0);
  $ld$9$1=(($1+4)|0);
  $1810$1=((HEAP32[(($ld$9$1)>>2)])|0);
  $st$10$0=(($9)|0);
  tempBigInt=$1810$0;HEAP8[($st$10$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(3))|0)]=tempBigInt&0xff;
  $st$11$1=(($9+4)|0);
  tempBigInt=$1810$1;HEAP8[($st$11$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(3))|0)]=tempBigInt&0xff;
  $ld$12$0=(($s)|0);
  $1811$0=((HEAP32[(($ld$12$0)>>2)])|0);
  $ld$13$1=(($s+4)|0);
  $1811$1=((HEAP32[(($ld$13$1)>>2)])|0);
  $st$14$0=(($3)|0);
  HEAP32[(($st$14$0)>>2)]=$1811$0;
  $st$15$1=(($3+4)|0);
  HEAP32[(($st$15$1)>>2)]=$1811$1;
  HEAP32[(($5)>>2)]=$2;
  STACKTOP=sp;return (($warning_0_off0719)|0);
 }
 else if ((label|0) == 370) {
  $extract_t803=(($pc_1_be)&65535);
  $extract_t807=(($sp_0_be)&65535);
  $extract_t811=(($ix_0_be)&65535);
  $extract_t815=(($iy_0_be)&65535);
  $extract_t819=(($flags_0_be)&255);
  $s_time_22=$s_time_1_be;$flags_0696_off0=$extract_t819;$iy_0700_off0=$extract_t815;$ix_0704_off0=$extract_t811;$sp_0708_off0=$extract_t807;$pc_1712_off0=$extract_t803;$warning_0_off0719=$warning_0_off0_be;
  HEAP32[(($11)>>2)]=$s_time_22;
  $1809=(($6+7)|0);
  HEAP8[($1809)]=$flags_0696_off0;
  HEAP16[(($20)>>1)]=$ix_0704_off0;
  HEAP16[(($22)>>1)]=$iy_0700_off0;
  HEAP16[(($18)>>1)]=$sp_0708_off0;
  HEAP16[(($15)>>1)]=$pc_1712_off0;
  $ld$8$0=(($1)|0);
  $1810$0=((HEAP32[(($ld$8$0)>>2)])|0);
  $ld$9$1=(($1+4)|0);
  $1810$1=((HEAP32[(($ld$9$1)>>2)])|0);
  $st$10$0=(($9)|0);
  tempBigInt=$1810$0;HEAP8[($st$10$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$10$0)+(3))|0)]=tempBigInt&0xff;
  $st$11$1=(($9+4)|0);
  tempBigInt=$1810$1;HEAP8[($st$11$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$1)+(3))|0)]=tempBigInt&0xff;
  $ld$12$0=(($s)|0);
  $1811$0=((HEAP32[(($ld$12$0)>>2)])|0);
  $ld$13$1=(($s+4)|0);
  $1811$1=((HEAP32[(($ld$13$1)>>2)])|0);
  $st$14$0=(($3)|0);
  HEAP32[(($st$14$0)>>2)]=$1811$0;
  $st$15$1=(($3+4)|0);
  HEAP32[(($st$15$1)>>2)]=$1811$1;
  HEAP32[(($5)>>2)]=$2;
  STACKTOP=sp;return (($warning_0_off0719)|0);
 }
  return 0;
}
function __ZN6Ay_Cpu12set_end_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+520)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)-($t))|0);
 HEAP32[(($3)>>2)]=$t;
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($6+4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($5)+($8))|0);
 HEAP32[(($7)>>2)]=$9;
 return;
}
function __Z8get_le16PKv($p){
 $p=($p)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($p+1)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3<<8;
 $5=((HEAP8[($p)])|0);
 $6=($5&255);
 $7=$4|$6;
 return (($7)|0);
}
function __Z8set_le16Pvj($p,$n){
 $p=($p)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=$n>>>8;
 $2=(($1)&255);
 $3=(($p+1)|0);
 HEAP8[($3)]=$2;
 $4=(($n)&255);
 HEAP8[($p)]=$4;
 return;
}
function __ZN6Ay_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11$0=0,$11$1=0,$14$0=0,$14$1=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 __ZN6Ay_CpuC2Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuC2Ev($3);
 $4=$this;
 HEAP32[(($4)>>2)]=14096;
 $5=(($this+66936)|0);
 __ZN6Ay_ApuC2Ev($5);
 $7=(($this+860)|0);
 HEAP32[(($7)>>2)]=0;
 $8=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($8,296);
 $9=$this;
 __ZN9Music_Emu15set_voice_namesEPKPKc($9,11696);
 __ZN11Classic_Emu15set_voice_typesEPKi($3,11680);
 __ZN9Music_Emu21set_silence_lookaheadEi($9,6);
 return;
}
function __ZN8Gme_File8set_typeEPK11gme_type_t_($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,label=0;
 $1=(($this+4)|0);
 HEAP32[(($1)>>2)]=$t;
 return;
}
function __ZN9Music_Emu15set_voice_namesEPKPKc($this,$names){
 $this=($this)|0;
 $names=($names)|0;
 var $1=0,label=0;
 $1=(($this+164)|0);
 HEAP32[(($1)>>2)]=$names;
 return;
}
function __ZN11Classic_Emu15set_voice_typesEPKi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,label=0;
 $1=(($this+268)|0);
 HEAP32[(($1)>>2)]=$t;
 return;
}
function __ZN9Music_Emu21set_silence_lookaheadEi($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,label=0;
 $1=(($this+220)|0);
 HEAP32[(($1)>>2)]=$n;
 return;
}
function __ZN6Ay_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN6Ay_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Gme_FiledlEPv($p){
 $p=($p)|0;
 var label=0;
 _free($p);
 return;
}
function __ZN6Ay_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN11Classic_EmuD2Ev($1);
 return;
}
function __ZNK6Ay_Emu11track_info_EP12track_info_ti($this,$out,$track){
 $this=($this)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $1=0,label=0;
 $1=(($this+836)|0);
 __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($1,$out,$track);
 return ((0)|0);
}
function __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($file,$out,$track){
 $file=($file)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$_sum15=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,label=0;
 $1=(($out+528)|0);
 $2=(($file+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=$track<<2;
 $5=(($3+$4)|0);
 $6=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$5,1))|0);
 __ZN8Gme_File11copy_field_EPcPKc($1,$6);
 $7=((HEAP32[(($2)>>2)])|0);
 $_sum15=$4|2;
 $8=(($7+$_sum15)|0);
 $9=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$8,6))|0);
 $10=($9|0)==0;
 if (!($10)) {
  $12=(($9+4)|0);
  $13=((__Z8get_be16PKv($12))|0);
  $14=((($13)*(20))&-1);
  $15=(($out+4)|0);
  HEAP32[(($15)>>2)]=$14;
 }
 $17=(($out+784)|0);
 $18=(($file)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+12)|0);
 $21=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$20,1))|0);
 __ZN8Gme_File11copy_field_EPcPKc($17,$21);
 $22=(($out+1296)|0);
 $23=((HEAP32[(($18)>>2)])|0);
 $24=(($23+14)|0);
 $25=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$24,1))|0);
 __ZN8Gme_File11copy_field_EPcPKc($22,$25);
 return;
}
function __ZL10new_ay_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(68232))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN6Ay_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL11new_ay_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(264))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Ay_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN6Ay_Emu9load_mem_EPKhl($this,$in,$size){
 $this=($this)|0;
 $in=($in)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$18=0,$19=0,$20=.0,$21=0,$22=0,$_0=0;
 var label=0;
 $1=(($this+836)|0);
 $2=((__ZL12parse_headerPKhlPN6Ay_Emu6file_tE($in,$size,$1))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=$this;
 $6=(($1)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+16)|0);
 $9=((HEAP8[($8)])|0);
 $10=($9&255);
 $11=((($10)+(1))|0);
 __ZN8Gme_File15set_track_countEi($5,$11);
 $12=((HEAP32[(($6)>>2)])|0);
 $13=(($12+8)|0);
 $14=((HEAP8[($13)])|0);
 $15=((($14&255))>>>0)>((2)>>>0);
 if ($15) {
  __ZN8Gme_File11set_warningEPKc($5,1920);
 }
 $18=$this;
 __ZN9Music_Emu15set_voice_countEi($18,4);
 $19=(($this+66936)|0);
 $20=(+(__ZNK9Music_Emu4gainEv($18)));
 __ZN6Ay_Apu6volumeEd($19,$20);
 $21=(($this)|0);
 $22=((__ZN11Classic_Emu12setup_bufferEl($21,3546900))|0);
 $_0=$22;
 return (($_0)|0);
}
function __ZL12parse_headerPKhlPN6Ay_Emu6file_tE($in,$size,$out){
 $in=($in)|0;
 $size=($size)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$_=0,$_0=0,label=0;
 $1=$in;
 $2=(($out)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($in+$size)|0);
 $4=(($out+4)|0);
 HEAP32[(($4)>>2)]=$3;
 $5=($size|0)<20;
 if ($5) {
  $_0=16;
  return (($_0)|0);
 }
 $7=((_memcmp((($in)|0),((5696)|0),((8)|0)))|0);
 $8=($7|0)==0;
 if (!($8)) {
  $_0=16;
  return (($_0)|0);
 }
 $10=(($in+18)|0);
 $11=(($in+16)|0);
 $12=((HEAP8[($11)])|0);
 $13=($12&255);
 $14=$13<<2;
 $15=((($14)+(4))|0);
 $16=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($out,$10,$15))|0);
 $17=(($out+8)|0);
 HEAP32[(($17)>>2)]=$16;
 $18=($16|0)==0;
 $_=($18?5472:0);
 $_0=$_;
 return (($_0)|0);
}
function __ZN8Gme_File15set_track_countEi($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+12)|0);
 HEAP32[(($1)>>2)]=$n;
 $2=(($this+8)|0);
 HEAP32[(($2)>>2)]=$n;
 return;
}
function __ZN8Gme_File11set_warningEPKc($this,$s){
 $this=($this)|0;
 $s=($s)|0;
 var $1=0,label=0;
 $1=(($this+16)|0);
 HEAP32[(($1)>>2)]=$s;
 return;
}
function __ZN9Music_Emu15set_voice_countEi($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,label=0;
 $1=(($this+168)|0);
 HEAP32[(($1)>>2)]=$n;
 return;
}
function __ZNK9Music_Emu4gainEv($this){
 $this=($this)|0;
 var $1=0,$2=.0,label=0;
 $1=(($this+184)|0);
 $2=(+(HEAPF64[(($1)>>3)]));
 return (+($2));
}
function __ZN6Ay_Emu9update_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+66936)|0);
 __ZN6Ay_Apu9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN6Ay_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+480)|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN6Ay_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$0,$1){
 $this=($this)|0;
 $i=($i)|0;
 $center=($center)|0;
 $0=($0)|0;
 $1=($1)|0;
 var $3=0,$5=0,$7=0,label=0;
 $3=($i|0)>2;
 if ($3) {
  $5=(($this+860)|0);
  HEAP32[(($5)>>2)]=$center;
  return;
 } else {
  $7=(($this+66936)|0);
  __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($7,$i,$center);
  return;
 }
}
function __ZN6Ay_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$3=0,$4=.0,$5=.0,$6=0,$7=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK11Classic_Emu10clock_rateEv($1))|0);
 $3=(((($2|0))/(50))&-1);
 $4=(+((($3|0))|0));
 $5=($4)/($t);
 $6=(~~($5));
 $7=(($this+852)|0);
 HEAP32[(($7)>>2)]=$6;
 return;
}
function __ZNK11Classic_Emu10clock_rateEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+260)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN6Ay_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_sum35=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0;
 var $23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$46=0,$ld$0$0=0,$47$0=0,$ld$1$1=0,$47$1=0,$st$2$0=0,$st$3$1=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$57=0,$58=0,$59=0;
 var $extract_t=0,$extract=0,$extract_t37=0,$extract_t36=0,$extract38=0,$extract_t39=0,$init_0_off0_ph=0,$init_0_off8_ph=0,$61=0,$62=0,$63=0,$addr_0=0,$blocks_0=0,$65=0,$66=0,$67=0,$68=0,$69=0,$71=0,$len_0=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$81=0,$82=0,$83=0,$len_1=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$92=0,$94=0,$95=0;
 var $96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=.0,$117=0;
 var $118=0,$119=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((__ZN11Classic_Emu12start_track_Ei($1,$track))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this+1138)|0);
 _memset((((($5)|0))|0), ((((-55)|0))|0), ((((256)|0))|0));
 $6=(($this+1394)|0);
 _memset((((($6)|0))|0), ((((-1)|0))|0), ((((16128)|0))|0));
 $7=(($this+17522)|0);
 _memset((((($7)|0))|0), ((((0)|0))|0), ((((49152)|0))|0));
 $8=(($this+882)|0);
 _memset((((($8)|0))|0), ((((-1)|0))|0), ((((256)|0))|0));
 $9=(($this+66674)|0);
 _memset((((($9)|0))|0), ((((-1)|0))|0), ((((256)|0))|0));
 $10=(($this+836)|0);
 $11=(($this+844)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=$track<<2;
 $_sum35=$13|2;
 $14=(($12+$_sum35)|0);
 $15=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($10,$14,14))|0);
 $16=($15|0)==0;
 if ($16) {
  $_0=1488;
  return (($_0)|0);
 }
 $18=(($15+10)|0);
 $19=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($10,$18,6))|0);
 $20=($19|0)==0;
 if ($20) {
  $_0=1488;
  return (($_0)|0);
 }
 $22=(($15+12)|0);
 $23=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($10,$22,8))|0);
 $24=($23|0)==0;
 if ($24) {
  $_0=1488;
  return (($_0)|0);
 }
 $26=(($this+272)|0);
 $27=$26;
 __ZN6Ay_Cpu5resetEPv($27,$5);
 $28=((__Z8get_be16PKv($19))|0);
 $29=(($28)&65535);
 $30=(($this+806)|0);
 $31=$30;
 HEAP16[(($31)>>1)]=$29;
 $32=(($15+8)|0);
 $33=((HEAP8[($32)])|0);
 $34=(($this+812)|0);
 $35=(($this+817)|0);
 HEAP8[($35)]=$33;
 $36=(($this+815)|0);
 HEAP8[($36)]=$33;
 $37=(($this+813)|0);
 HEAP8[($37)]=$33;
 $38=(($this+818)|0);
 HEAP8[($38)]=$33;
 $39=(($15+9)|0);
 $40=((HEAP8[($39)])|0);
 $41=(($this+816)|0);
 HEAP8[($41)]=$40;
 $42=(($this+814)|0);
 HEAP8[($42)]=$40;
 HEAP8[($34)]=$40;
 $43=(($this+819)|0);
 HEAP8[($43)]=$40;
 $44=(($this+820)|0);
 $45=$34;
 $46=$44;
 $ld$0$0=(($45)|0);
 $47$0=(((HEAPU16[(($ld$0$0)>>1)])|0)|(((HEAPU16[((($ld$0$0)+(2))>>1)])|0)<<16));
 $ld$1$1=(($45+4)|0);
 $47$1=(((HEAPU16[(($ld$1$1)>>1)])|0)|(((HEAPU16[((($ld$1$1)+(2))>>1)])|0)<<16));
 $st$2$0=(($46)|0);
 tempBigInt=$47$0;HEAP16[(($st$2$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$2$0)+(2))>>1)]=tempBigInt>>16;
 $st$3$1=(($46+4)|0);
 tempBigInt=$47$1;HEAP16[(($st$3$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$3$1)+(2))>>1)]=tempBigInt>>16;
 $48=$41;
 $49=((HEAP16[(($48)>>1)])|0);
 $50=(($this+810)|0);
 $51=$50;
 HEAP16[(($51)>>1)]=$49;
 $52=(($this+808)|0);
 $53=$52;
 HEAP16[(($53)>>1)]=$49;
 $54=((__Z8get_be16PKv($23))|0);
 $55=($54|0)==0;
 if ($55) {
  $_0=1488;
  return (($_0)|0);
 }
 $57=(($19+2)|0);
 $58=((__Z8get_be16PKv($57))|0);
 $59=($58|0)==0;
 $extract_t=(($58)&255);
 $extract=$58>>>8;
 $extract_t37=(($extract)&255);
 if ($59) {
  $extract_t36=(($54)&255);
  $extract38=$54>>>8;
  $extract_t39=(($extract38)&255);
  $init_0_off8_ph=$extract_t39;$init_0_off0_ph=$extract_t36;
 } else {
  $init_0_off8_ph=$extract_t37;$init_0_off0_ph=$extract_t;
 }
 $61=$this;
 $62=(($this+840)|0);
 $63=$this;
 $blocks_0=$23;$addr_0=$54;
 while(1) {
  $65=(($blocks_0+2)|0);
  $66=((__Z8get_be16PKv($65))|0);
  $67=(($blocks_0+4)|0);
  $68=((($66)+($addr_0))|0);
  $69=($68>>>0)>((65536)>>>0);
  if ($69) {
   __ZN8Gme_File11set_warningEPKc($61,1072);
   $71=(((65536)-($addr_0))|0);
   $len_0=$71;
  } else {
   $len_0=$66;
  }
  $73=((__ZL8get_dataRKN6Ay_Emu6file_tEPKhi($10,$67,0))|0);
  $74=(($blocks_0+6)|0);
  $75=((HEAP32[(($62)>>2)])|0);
  $76=$75;
  $77=$73;
  $78=((($76)-($77))|0);
  $79=($len_0>>>0)>($78>>>0);
  if ($79) {
   __ZN8Gme_File11set_warningEPKc($63,560);
   $81=((HEAP32[(($62)>>2)])|0);
   $82=$81;
   $83=((($82)-($77))|0);
   $len_1=$83;
  } else {
   $len_1=$len_0;
  }
  $85=(($this+1138+$addr_0)|0);
  (_memcpy((($85)|0), (($73)|0), $len_1)|0);
  $86=((HEAP32[(($62)>>2)])|0);
  $87=$86;
  $88=$74;
  $89=((($87)-($88))|0);
  $90=($89|0)<8;
  if ($90) {
   label = 445;
   break;
  }
  $94=((__Z8get_be16PKv($74))|0);
  $95=($94|0)==0;
  if ($95) {
   break;
  } else {
   $blocks_0=$74;$addr_0=$94;
  }
 }
 if ((label|0) == 445) {
  $92=$this;
  __ZN8Gme_File11set_warningEPKc($92,560);
 }
 (_memcpy((($5)|0), ((11712)|0), 10)|0);
 $96=(($19+4)|0);
 $97=((__Z8get_be16PKv($96))|0);
 $98=($97|0)==0;
 if (!($98)) {
  (_memcpy((($5)|0), ((11728)|0), 13)|0);
  $100=(($97)&255);
  $101=(($this+1147)|0);
  HEAP8[($101)]=$100;
  $102=$97>>>8;
  $103=(($102)&255);
  $104=(($this+1148)|0);
  HEAP8[($104)]=$103;
 }
 $106=(($this+1140)|0);
 HEAP8[($106)]=$init_0_off0_ph;
 $107=(($this+1141)|0);
 HEAP8[($107)]=$init_0_off8_ph;
 $108=(($this+1194)|0);
 HEAP8[($108)]=-5;
 (_memcpy((($9)|0), (($5)|0), 128)|0);
 $109=(($this+864)|0);
 HEAP32[(($109)>>2)]=165;
 $110=(($this+868)|0);
 HEAP32[(($110)>>2)]=0;
 $111=(($this+66936)|0);
 __ZN6Ay_Apu5resetEv($111);
 $112=(($this+852)|0);
 $113=((HEAP32[(($112)>>2)])|0);
 $114=(($this+856)|0);
 HEAP32[(($114)>>2)]=$113;
 __ZN11Classic_Emu17change_clock_rateEl($1,3546900);
 $115=$this;
 $116=(+(__ZNK9Music_Emu5tempoEv($115)));
 __ZN9Music_Emu9set_tempoEd($115,$116);
 $117=(($this+880)|0);
 HEAP8[($117)]=0;
 $118=(($this+881)|0);
 HEAP8[($118)]=0;
 $119=(($this+876)|0);
 HEAP32[(($119)>>2)]=0;
 $_0=0;
 return (($_0)|0);
}
function __ZL8get_dataRKN6Ay_Emu6file_tEPKhi($file,$ptr,$min_size){
 $file=($file)|0;
 $ptr=($ptr)|0;
 $min_size=($min_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$14=0,$sext=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0,$_0=0;
 var label=0;
 $1=(($file)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$ptr;
 $4=$2;
 $5=((($3)-($4))|0);
 $6=(($file+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$7;
 $9=((($8)-($4))|0);
 $10=((($9)-(2))|0);
 $11=($5>>>0)>($10>>>0);
 if ($11) {
  ___assert_fail(((6216)|0),((5992)|0),((52)|0),((9632)|0));
  return ((0)|0);
 }
 $14=((__Z8get_be16PKv($ptr))|0);
 $sext=$14<<16;
 $15=$sext>>16;
 $16=($15|0)==0;
 if ($16) {
  $_0=0;
  return (($_0)|0);
 }
 $18=((($15)+($5))|0);
 $19=((($9)-($min_size))|0);
 $20=($18>>>0)>($19>>>0);
 if ($20) {
  $_0=0;
  return (($_0)|0);
 }
 $22=(($ptr+$15)|0);
 $_0=$22;
 return (($_0)|0);
}
function __Z8get_be16PKv($p){
 $p=($p)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=((HEAP8[($p)])|0);
 $2=($1&255);
 $3=$2<<8;
 $4=(($p+1)|0);
 $5=((HEAP8[($4)])|0);
 $6=($5&255);
 $7=$3|$6;
 return (($7)|0);
}
function __ZNK9Music_Emu5tempoEv($this){
 $this=($this)|0;
 var $1=0,$2=.0,label=0;
 $1=(($this+176)|0);
 $2=(+(HEAPF64[(($1)>>3)]));
 return (+($2));
}
function __ZN6Ay_Emu12cpu_out_miscEiji($this,$time,$addr,$data){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$22=0,$24=0,$26=0,$27=0;
 var $28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$39=0,$40=0,$41=0,$43=0,$44=0,$45=.0,label=0;
 $1=(($this+881)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 do {
  if ($4) {
   $6=$addr&65279;
   if (((($6|0))|0)==((65277)|0)) {
    $8=(($this+880)|0);
    HEAP8[($8)]=1;
    $9=$data&15;
    $10=(($this+872)|0);
    HEAP32[(($10)>>2)]=$9;
    return;
   } else if (((($6|0))|0)==((48893)|0)) {
    $12=(($this+880)|0);
    HEAP8[($12)]=1;
    $13=(($this+66936)|0);
    $14=(($this+872)|0);
    $15=((HEAP32[(($14)>>2)])|0);
    __ZN6Ay_Apu5writeEiii($13,$time,$15,$data);
    return;
   } else {
    break;
   }
  }
 } while(0);
 $17=(($this+880)|0);
 $18=((HEAP8[($17)])|0);
 $19=$18&1;
 $20=(($19<<24)>>24)==0;
 if (!($20)) {
  return;
 }
 $22=$addr>>>8;
 do {
  if (((($22|0))|0)==((246)|0)) {
   $24=$data&192;
   if (((($24|0))|0)==((192)|0)) {
    $26=(($this+876)|0);
    $27=((HEAP32[(($26)>>2)])|0);
    $28=$27&15;
    $29=(($this+872)|0);
    HEAP32[(($29)>>2)]=$28;
    break;
   } else if (((($24|0))|0)==((128)|0)) {
    $31=(($this+66936)|0);
    $32=(($this+872)|0);
    $33=((HEAP32[(($32)>>2)])|0);
    $34=(($this+876)|0);
    $35=((HEAP32[(($34)>>2)])|0);
    __ZN6Ay_Apu5writeEiii($31,$time,$33,$35);
    break;
   } else {
    return;
   }
  } else if (((($22|0))|0)==((244)|0)) {
   $37=(($this+876)|0);
   HEAP32[(($37)>>2)]=$data;
  } else {
   return;
  }
 } while(0);
 $39=((HEAP8[($1)])|0);
 $40=$39&1;
 $41=(($40<<24)>>24)==0;
 if (!($41)) {
  return;
 }
 HEAP8[($1)]=1;
 $43=(($this)|0);
 __ZN11Classic_Emu17change_clock_rateEl($43,2000000);
 $44=$this;
 $45=(+(__ZNK9Music_Emu5tempoEv($44)));
 __ZN9Music_Emu9set_tempoEd($44,$45);
 return;
}
function __ZN6Ay_Apu5writeEiii($this,$time,$addr,$data){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var label=0;
 __ZN6Ay_Apu9run_untilEi($this,$time);
 __ZN6Ay_Apu11write_data_Eii($this,$addr,$data);
 return;
}
function __Z10ay_cpu_outP6Ay_Cpuiji($cpu,$time,$addr,$data){
 $cpu=($cpu)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,label=0;
 $1=((($cpu)-(272))|0);
 $2=$1;
 $3=$addr&255;
 $4=($3|0)==254;
 do {
  if ($4) {
   $6=(($cpu+609)|0);
   $7=((HEAP8[($6)])|0);
   $8=$7&1;
   $9=(($8<<24)>>24)==0;
   if (!($9)) {
    break;
   }
   $11=(($cpu+592)|0);
   $12=$11;
   $13=((HEAP32[(($12)>>2)])|0);
   $14=$data&16;
   $15=(($cpu+596)|0);
   $16=$15;
   $17=((HEAP32[(($16)>>2)])|0);
   $18=($17|0)==($14|0);
   if ($18) {
    return;
   }
   HEAP32[(($16)>>2)]=$14;
   $20=(((-$13))|0);
   HEAP32[(($12)>>2)]=$20;
   $21=(($cpu+608)|0);
   HEAP8[($21)]=1;
   $22=(($cpu+588)|0);
   $23=$22;
   $24=((HEAP32[(($23)>>2)])|0);
   $25=($24|0)==0;
   if ($25) {
    return;
   }
   $27=(($cpu+67144)|0);
   $28=$27;
   __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($28,$time,$13,$24);
   return;
  }
 } while(0);
 __ZN6Ay_Emu12cpu_out_miscEiji($2,$time,$addr,$data);
 return;
}
function __Z9ay_cpu_inP6Ay_Cpuj($0,$addr){
 $0=($0)|0;
 $addr=($addr)|0;
 var label=0;
 return ((255)|0);
}
function __ZN6Ay_Emu10run_clocksERii($this,$duration,$0){
 $this=($this)|0;
 $duration=($duration)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$45=0;
 var $47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0;
 var $69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$_lcssa=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0;
 var $88=0,label=0;
 $2=(($this+272)|0);
 $3=$2;
 __ZN6Ay_Cpu8set_timeEi($3,0);
 $4=(($this+880)|0);
 $5=((HEAP8[($4)])|0);
 $6=(($this+881)|0);
 $7=((HEAP8[($6)])|0);
 $8=$7|$5;
 $9=$8&1;
 $10=(($9<<24)>>24)==0;
 if ($10) {
  $12=((HEAP32[(($duration)>>2)])|0);
  $13=(((($12|0))/(2))&-1);
  HEAP32[(($duration)>>2)]=$13;
 }
 $14=((__ZNK6Ay_Cpu4timeEv($3))|0);
 $15=((HEAP32[(($duration)>>2)])|0);
 $16=($14|0)<($15|0);
 if (!($16)) {
  $_lcssa=$14;
  HEAP32[(($duration)>>2)]=$_lcssa;
  $82=(($this+856)|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=((($83)-($_lcssa))|0);
  HEAP32[(($82)>>2)]=$84;
  $85=((HEAP32[(($duration)>>2)])|0);
  $86=(((-$85))|0);
  __ZN6Ay_Cpu11adjust_timeEi($3,$86);
  $87=(($this+66936)|0);
  $88=((HEAP32[(($duration)>>2)])|0);
  __ZN6Ay_Apu9end_frameEi($87,$88);
  return ((0)|0);
 }
 $17=(($this+856)|0);
 $18=(($this+852)|0);
 $19=(($this+828)|0);
 $20=(($this+804)|0);
 $21=$20;
 $22=(($this+829)|0);
 $23=(($this+806)|0);
 $24=$23;
 $25=(($this+832)|0);
 $26=(($this+831)|0);
 $28=$15;
 while(1) {
  $29=((HEAP32[(($17)>>2)])|0);
  $30=((__Z3minIiET_S0_S0_($28,$29))|0);
  $31=((__ZN6Ay_Cpu3runEi($3,$30))|0);
  $32=((__ZNK6Ay_Cpu4timeEv($3))|0);
  $33=((HEAP32[(($17)>>2)])|0);
  $34=($32|0)<($33|0);
  do {
   if (!($34)) {
    $36=((HEAP32[(($18)>>2)])|0);
    $37=((($36)+($33))|0);
    HEAP32[(($17)>>2)]=$37;
    $38=((HEAP8[($19)])|0);
    $39=(($38<<24)>>24)==0;
    if ($39) {
     break;
    }
    $41=((HEAP16[(($21)>>1)])|0);
    $42=($41&65535);
    $43=(($this+1138+$42)|0);
    $44=((HEAP8[($43)])|0);
    $45=(($44<<24)>>24)==118;
    if ($45) {
     $47=((($41)+(1))&65535);
     HEAP16[(($21)>>1)]=$47;
    }
    HEAP8[($22)]=0;
    HEAP8[($19)]=0;
    $49=((HEAP16[(($21)>>1)])|0);
    $50=($49&65535)>>>8;
    $51=(($50)&255);
    $52=((HEAP16[(($24)>>1)])|0);
    $53=((($52)-(1))&65535);
    HEAP16[(($24)>>1)]=$53;
    $54=($53&65535);
    $55=(($this+1138+$54)|0);
    HEAP8[($55)]=$51;
    $56=((HEAP16[(($21)>>1)])|0);
    $57=(($56)&255);
    $58=((HEAP16[(($24)>>1)])|0);
    $59=((($58)-(1))&65535);
    HEAP16[(($24)>>1)]=$59;
    $60=($59&65535);
    $61=(($this+1138+$60)|0);
    HEAP8[($61)]=$57;
    HEAP16[(($21)>>1)]=56;
    __ZN6Ay_Cpu11adjust_timeEi($3,12);
    $62=((HEAP8[($25)])|0);
    $63=(($62<<24)>>24)==2;
    if (!($63)) {
     break;
    }
    __ZN6Ay_Cpu11adjust_timeEi($3,6);
    $65=((HEAP8[($26)])|0);
    $66=($65&255);
    $67=$66<<8;
    $68=$67|255;
    $69=((($68)+(1))|0);
    $70=$69&65535;
    $71=(($this+1138+$70)|0);
    $72=((HEAP8[($71)])|0);
    $73=($72&255);
    $74=$73<<8;
    $75=(($this+1138+$68)|0);
    $76=((HEAP8[($75)])|0);
    $77=($76&255);
    $78=$74|$77;
    HEAP16[(($21)>>1)]=$78;
   }
  } while(0);
  $79=((__ZNK6Ay_Cpu4timeEv($3))|0);
  $80=((HEAP32[(($duration)>>2)])|0);
  $81=($79|0)<($80|0);
  if ($81) {
   $28=$80;
  } else {
   $_lcssa=$79;
   break;
  }
 }
 HEAP32[(($duration)>>2)]=$_lcssa;
 $82=(($this+856)|0);
 $83=((HEAP32[(($82)>>2)])|0);
 $84=((($83)-($_lcssa))|0);
 HEAP32[(($82)>>2)]=$84;
 $85=((HEAP32[(($duration)>>2)])|0);
 $86=(((-$85))|0);
 __ZN6Ay_Cpu11adjust_timeEi($3,$86);
 $87=(($this+66936)|0);
 $88=((HEAP32[(($duration)>>2)])|0);
 __ZN6Ay_Apu9end_frameEi($87,$88);
 return ((0)|0);
}
function __ZN6Ay_Cpu8set_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+520)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($t)-($4))|0);
 $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}
function __ZNK6Ay_Cpu4timeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+520)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)+($4))|0);
 return (($7)|0);
}
function __Z3minIiET_S0_S0_($x,$y){
 $x=($x)|0;
 $y=($y)|0;
 var $1=0,$x_y=0,label=0;
 $1=($x|0)<($y|0);
 $x_y=($1?$x:$y);
 return (($x_y)|0);
}
function __ZN6Ay_Cpu11adjust_timeEi($this,$delta){
 $this=($this)|0;
 $delta=($delta)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+520)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)+($delta))|0);
 HEAP32[(($3)>>2)]=$5;
 return;
}
function __ZN6Ay_Apu9end_frameEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$10=0,label=0;
 $1=(($this+48)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($time|0);
 if ($3) {
  __ZN6Ay_Apu9run_untilEi($this,$time);
 }
 $6=((HEAP32[(($1)>>2)])|0);
 $7=($6|0)<($time|0);
 if ($7) {
  ___assert_fail(((7024)|0),((6536)|0),((103)|0),((9208)|0));
 } else {
  $10=((($6)-($time))|0);
  HEAP32[(($1)>>2)]=$10;
  return;
 }
}
function __ZN8Gme_File15clear_playlist_Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN11Classic_Emu10set_bufferEP12Multi_Buffer($this,$new_buf){
 $this=($this)|0;
 $new_buf=($new_buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$or_cond=0,label=0;
 $1=(($this+252)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)!=0;
 $4=($new_buf|0)==0;
 $or_cond=$3|$4;
 if ($or_cond) {
  ___assert_fail(((7576)|0),((7216)|0),((45)|0),((9552)|0));
 } else {
  HEAP32[(($1)>>2)]=$new_buf;
  return;
 }
}
function __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN8Gme_FilenwEj($s){
 $s=($s)|0;
 var $1=0,label=0;
 $1=((_malloc($s))|0);
 return (($1)|0);
}
function __ZN7Ay_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN7Ay_FileC2Ev($this);
 return;
}
function __ZN7Ay_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=14008;
 $3=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($3,296);
 return;
}
function __ZN9Gme_Info_C2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 __ZN9Music_EmuC2Ev($1);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=12264;
 return;
}
function __ZN9Gme_Info_D2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Music_EmuD2Ev($1);
 return;
}
function __ZN7Ay_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN7Ay_FileD2Ev($this);
 return;
}
function __ZN7Ay_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Ay_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Ay_File9load_mem_EPKhl($this,$begin,$size){
 $this=($this)|0;
 $begin=($begin)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$_0=0,label=0;
 $1=(($this+252)|0);
 $2=((__ZL12parse_headerPKhlPN6Ay_Emu6file_tE($begin,$size,$1))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=$this;
 $6=(($1)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+16)|0);
 $9=((HEAP8[($8)])|0);
 $10=($9&255);
 $11=((($10)+(1))|0);
 __ZN8Gme_File15set_track_countEi($5,$11);
 $_0=0;
 return (($_0)|0);
}
function __ZNK7Ay_File11track_info_EP12track_info_ti($this,$out,$track){
 $this=($this)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $1=0,label=0;
 $1=(($this+252)|0);
 __ZL14copy_ay_fieldsRKN6Ay_Emu6file_tEP12track_info_ti($1,$out,$track);
 return ((0)|0);
}
function __ZN9Music_Emu10set_bufferEP12Multi_Buffer($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return;
}
function __ZN7Ay_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_D2Ev($1);
 return;
}
function __ZN11Blip_BufferC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=2147483647;
 $2=(($this+4)|0);
 $3=(($this+32)|0);
 $4=$2;
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((28)|0))|0));
 HEAP32[(($3)>>2)]=16;
 $5=(($this+36)|0);
 HEAP32[(($5)>>2)]=0;
 return;
}
function __ZN11Blip_BufferD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==1;
 if ($3) {
  return;
 }
 $5=(($this+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$6;
 _free($7);
 return;
}
function __ZN11Blip_Buffer5clearEi($this,$entire_buffer){
 $this=($this)|0;
 $entire_buffer=($entire_buffer)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$10=0,$11=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;
 $1=(($this+4)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+16)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+40)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if ($6) {
  return;
 }
 $8=($entire_buffer|0)==0;
 if ($8) {
  $13=((__ZNK11Blip_Buffer13samples_availEv($this))|0);
  $15=$13;
 } else {
  $10=(($this+12)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $15=$11;
 }
 $16=((HEAP32[(($4)>>2)])|0);
 $17=$16;
 $18=$15<<2;
 $19=((($18)+(72))|0);
 _memset((((($17)|0))|0), ((((0)|0))|0), (((($19)|0))|0));
 return;
}
function __ZNK11Blip_Buffer13samples_availEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2>>>16;
 return (($3)|0);
}
function __ZN11Blip_Buffer15set_sample_rateEli($this,$new_rate,$msec){
 $this=($this)|0;
 $new_rate=($new_rate)|0;
 $msec=($msec)|0;
 var $1=0,$2=0,$3=0,$6=0,$8=0,$9=0,$10=0,$11=0,$13=0,$new_size_0=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0;
 var $29=0,$32=0,$33=0,$34=0,$35=0,$36=0,$_not=0,$37=0,$or_cond=0,$40=0,$41=0,$42=0,$45=0,$46=0,$_0=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==1;
 if ($3) {
  ___assert_fail(((3680)|0),((7272)|0),((83)|0),((9600)|0));
  return ((0)|0);
 }
 $6=($msec|0)!=0;
 do {
  if ($6) {
   $8=((($msec)+(1))|0);
   $9=(Math_imul($8,$new_rate)|0);
   $10=((($9)+(999))|0);
   $11=($10|0)<65453000;
   if ($11) {
    $13=(((($10|0))/(1000))&-1);
    $new_size_0=$13;
    break;
   } else {
    ___assert_fail(((3680)|0),((7272)|0),((95)|0),((9600)|0));
    return ((0)|0);
   }
  } else {
   $new_size_0=65453;
  }
 } while(0);
 $16=((HEAP32[(($1)>>2)])|0);
 $17=($16|0)==($new_size_0|0);
 do {
  if (!($17)) {
   $19=(($this+8)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=$20;
   $22=$new_size_0<<2;
   $23=((($22)+(72))|0);
   $24=((_realloc($21,$23))|0);
   $25=($24|0)==0;
   if ($25) {
    $_0=2952;
    return (($_0)|0);
   } else {
    $27=$24;
    HEAP32[(($19)>>2)]=$27;
    break;
   }
  }
 } while(0);
 HEAP32[(($1)>>2)]=$new_size_0;
 $29=($new_size_0|0)==1;
 if ($29) {
  ___assert_fail(((2368)|0),((7272)|0),((107)|0),((9600)|0));
  return ((0)|0);
 }
 $32=(($this+24)|0);
 HEAP32[(($32)>>2)]=$new_rate;
 $33=((($new_size_0)*(1000))&-1);
 $34=(((($33|0))/(($new_rate|0)))&-1);
 $35=((($34)-(1))|0);
 $36=(($this+36)|0);
 HEAP32[(($36)>>2)]=$35;
 $_not=$6^1;
 $37=($35|0)==($msec|0);
 $or_cond=$37|$_not;
 if (!($or_cond)) {
  ___assert_fail(((1824)|0),((7272)|0),((113)|0),((9600)|0));
  return ((0)|0);
 }
 $40=(($this+28)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=($41|0)==0;
 if (!($42)) {
  __ZN11Blip_Buffer10clock_rateEl($this,$41);
 }
 $45=(($this+32)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 __ZN11Blip_Buffer9bass_freqEi($this,$46);
 __ZN11Blip_Buffer5clearEi($this,1);
 $_0=0;
 return (($_0)|0);
}
function __ZN11Blip_Buffer10clock_rateEl($this,$cps){
 $this=($this)|0;
 $cps=($cps)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+28)|0);
 HEAP32[(($1)>>2)]=$cps;
 $2=((__ZNK11Blip_Buffer17clock_rate_factorEl($this,$cps))|0);
 $3=(($this)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZN11Blip_Buffer9bass_freqEi($this,$freq){
 $this=($this)|0;
 $freq=($freq)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$shift_1=0,$11=0,$13=0,$15=0,$17=0,$19=0,$21=0,$23=0,$25=0,$27=0,$29=0,$31=0;
 var $33=0,$_=0,label=0;
 $1=(($this+32)|0);
 HEAP32[(($1)>>2)]=$freq;
 $2=($freq|0)>0;
 do {
  if ($2) {
   $4=(($this+24)|0);
   $5=((HEAP32[(($4)>>2)])|0);
   $6=$freq<<16;
   $7=(((($6|0))/(($5|0)))&-1);
   $8=($7>>>0)<((2)>>>0);
   if ($8) {
    $shift_1=13;
    break;
   }
   $10=($7>>>0)<((4)>>>0);
   if ($10) {
    $shift_1=12;
    break;
   }
   $13=($7>>>0)<((8)>>>0);
   if ($13) {
    $shift_1=11;
    break;
   }
   $15=($7>>>0)<((16)>>>0);
   if ($15) {
    $shift_1=10;
    break;
   }
   $17=($7>>>0)<((32)>>>0);
   if ($17) {
    $shift_1=9;
    break;
   }
   $19=($7>>>0)<((64)>>>0);
   if ($19) {
    $shift_1=8;
    break;
   }
   $21=($7>>>0)<((128)>>>0);
   if ($21) {
    $shift_1=7;
    break;
   }
   $23=($7>>>0)<((256)>>>0);
   if ($23) {
    $shift_1=6;
    break;
   }
   $25=($7>>>0)<((512)>>>0);
   if ($25) {
    $shift_1=5;
    break;
   }
   $27=($7>>>0)<((1024)>>>0);
   if ($27) {
    $shift_1=4;
    break;
   }
   $29=($7>>>0)<((2048)>>>0);
   if ($29) {
    $shift_1=3;
    break;
   }
   $31=($7>>>0)<((4096)>>>0);
   if ($31) {
    $shift_1=2;
    break;
   }
   $33=($7>>>0)<((8192)>>>0);
   $_=($33&1);
   $shift_1=$_;
  } else {
   $shift_1=31;
  }
 } while(0);
 $11=(($this+20)|0);
 HEAP32[(($11)>>2)]=$shift_1;
 return;
}
function __ZNK11Blip_Buffer17clock_rate_factorEl($this,$rate){
 $this=($this)|0;
 $rate=($rate)|0;
 var $1=0,$2=0,$3=.0,$4=.0,$5=.0,$6=.0,$7=.0,$8=.0,$9=0,$10=0,$11=0,$or_cond=0,label=0;
 $1=(($this+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(+((($2|0))|0));
 $4=(+((($rate|0))|0));
 $5=($3)/($4);
 $6=($5)*((65536.0));
 $7=($6)+((0.5));
 $8=(+(Math_floor($7)));
 $9=(~~($8));
 $10=($9|0)>0;
 $11=($2|0)==0;
 $or_cond=$10|$11;
 if ($or_cond) {
  return (($9)|0);
 } else {
  ___assert_fail(((1416)|0),((7272)|0),((127)|0),((8472)|0));
  return ((0)|0);
 }
  return 0;
}
function __ZN11Blip_Buffer9end_frameEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=(($this+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($5)+($3))|0);
 HEAP32[(($4)>>2)]=$6;
 $7=((__ZNK11Blip_Buffer13samples_availEv($this))|0);
 $8=(($this+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($7|0)>($9|0);
 if ($10) {
  ___assert_fail(((968)|0),((7272)|0),((147)|0),((9584)|0));
 } else {
  return;
 }
}
function __ZN11Blip_Buffer14remove_silenceEl($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=((__ZNK11Blip_Buffer13samples_availEv($this))|0);
 $2=($1|0)<($count|0);
 if ($2) {
  ___assert_fail(((448)|0),((7272)|0),((152)|0),((9616)|0));
 } else {
  $5=$count<<16;
  $6=(($this+4)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=((($7)-($5))|0);
  HEAP32[(($6)>>2)]=$8;
  return;
 }
}
function __ZNK11Blip_Buffer14resampled_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=(($this+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($3)+($5))|0);
 return (($6)|0);
}
function __ZNK11Blip_Buffer12count_clocksEl($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$_count=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  ___assert_fail(((3680)|0),((7272)|0),((167)|0),((8496)|0));
  return ((0)|0);
 } else {
  $6=(($this+12)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=($7|0)<($count|0);
  $_count=($8?$7:$count);
  $9=$_count<<16;
  $10=(($this+4)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=((($2)-(1))|0);
  $13=((($12)-($11))|0);
  $14=((($13)+($9))|0);
  $15=(((($14>>>0))/(($2>>>0)))&-1);
  return (($15)|0);
 }
  return 0;
}
function __ZN11Blip_Buffer14remove_samplesEl($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;
 $1=($count|0)==0;
 if ($1) {
  return;
 }
 __ZN11Blip_Buffer14remove_silenceEl($this,$count);
 $3=((__ZNK11Blip_Buffer13samples_availEv($this))|0);
 $4=((($3)+(18))|0);
 $5=(($this+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$6;
 $8=(($6+($count<<2))|0);
 $9=$8;
 $10=$4<<2;
 _memmove((($7)|0),(($9)|0),(($10)|0));
 $11=((HEAP32[(($5)>>2)])|0);
 $12=(($11+($4<<2))|0);
 $13=$12;
 $14=$count<<2;
 _memset((((($13)|0))|0), ((((0)|0))|0), (((($14)|0))|0));
 return;
}
function __ZN11Blip_Synth_C2EPsi($this,$p,$w){
 $this=($this)|0;
 $p=($p)|0;
 $w=($w)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$p;
 $2=(($this+28)|0);
 HEAP32[(($2)>>2)]=$w;
 $3=(($this+16)|0);
 HEAPF64[(($3)>>3)]=0.0;
 $4=(($this+32)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this)|0);
 HEAP32[(($5)>>2)]=0;
 $6=(($this+4)|0);
 HEAP32[(($6)>>2)]=0;
 $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=0;
 return;
}
function __ZNK9blip_eq_t8generateEPfi($this,$out,$count){
 $this=($this)|0;
 $out=($out)|0;
 $count=($count)|0;
 var $1=.0,$2=.0,$3=.0,$4=0,$5=0,$6=.0,$7=.0,$8=0,$9=0,$10=0,$12=.0,$13=.0,$oversample_0=.0,$15=0,$16=0,$17=.0,$18=.0,$19=.0,$20=.0,$21=0;
 var $22=.0,$23=0,$24=.0,$25=.0,$26=0,$_in=0,$27=0,$28=.0,$29=.0,$30=.0,$31=.0,$32=.0,$33=.0,$34=0,$35=.0,$36=.0,$37=0,label=0;
 $1=(+((($count|0))|0));
 $2=((144.0))/($1);
 $3=($2)+((0.85));
 $4=(($this+12)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(+((($5|0))|0));
 $7=($6)*((0.5));
 $8=(($this+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if ($10) {
  $oversample_0=$3;
 } else {
  $12=(+((($9|0))|0));
  $13=($7)/($12);
  $oversample_0=$13;
 }
 $15=(($this+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(+((($16|0))|0));
 $18=($oversample_0)*($17);
 $19=($18)/($7);
 $20=($oversample_0)*((64.0));
 $21=(($this)|0);
 $22=(+(HEAPF64[(($21)>>3)]));
 __ZL8gen_sincPfiddd($out,$count,$20,$22,$19);
 $23=((($count)-(1))|0);
 $24=(+((($23|0))|0));
 $25=((3.141592653589793))/($24);
 $26=($count|0)==0;
 if ($26) {
  return;
 } else {
  $_in=$count;
 }
 while(1) {
  $27=((($_in)-(1))|0);
  $28=(+((($27|0))|0));
  $29=($25)*($28);
  $30=(+(Math_cos($29)));
  $31=$30;
  $32=($31)*((0.46000000834465027));
  $33=((0.5400000214576721))-($32);
  $34=(($out+($27<<2))|0);
  $35=(+(HEAPF32[(($34)>>2)]));
  $36=($35)*($33);
  HEAPF32[(($34)>>2)]=$36;
  $37=($27|0)==0;
  if ($37) {
   break;
  } else {
   $_in=$27;
  }
 }
 return;
}
function __ZL8gen_sincPfiddd($out,$count,$oversample,$treble,$cutoff){
 $out=($out)|0;
 $count=($count)|0;
 $oversample=+($oversample);
 $treble=+($treble);
 $cutoff=+($cutoff);
 var $1=0,$_032=.0,$2=0,$_0=.0,$3=0,$_0_op=.0,$4=.0,$5=.0,$6=.0,$7=.0,$8=.0,$9=.0,$10=.0,$11=.0,$12=0,$13=.0,$i_033=0,$15=0,$16=0,$17=0;
 var $18=.0,$19=.0,$20=.0,$21=.0,$22=.0,$23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=.0,$32=.0,$33=.0,$34=.0,$35=.0,$36=.0,$37=.0;
 var $38=.0,$39=.0,$40=.0,$41=.0,$42=.0,$43=.0,$44=.0,$45=.0,$46=.0,$47=.0,$48=.0,$49=.0,$50=0,$51=0,$52=0,label=0;
 $1=$cutoff<(0.999);
 $_032=($1?$cutoff:(0.999));
 $2=$treble<(-300.0);
 $_0=($2?(-300.0):$treble);
 $3=$_0>(5.0);
 $_0_op=($_0)*((0.00001220703125));
 $4=($3?(0.00006103515625):$_0_op);
 $5=((1.0))-($_032);
 $6=($4)/($5);
 $7=(+(Math_pow(10.0,(+($6)))));
 $8=($_032)*((4096.0));
 $9=((4096.0))-($8);
 $10=(+(Math_pow((+($7)),(+($9)))));
 $11=((0.0003834951969714103))/($oversample);
 $12=($count|0)>0;
 if (!($12)) {
  return;
 }
 $13=($8)+((-1.0));
 $i_033=0;
 while(1) {
  $15=((($i_033)-($count))|0);
  $16=$15<<1;
  $17=$16|1;
  $18=(+((($17|0))|0));
  $19=($11)*($18);
  $20=($19)*((4095.0));
  $21=(+(Math_cos($20)));
  $22=($7)*($21);
  $23=($19)*((4096.0));
  $24=(+(Math_cos($23)));
  $25=($22)-($24);
  $26=($8)*($19);
  $27=(+(Math_cos($26)));
  $28=($13)*($19);
  $29=(+(Math_cos($28)));
  $30=(+(Math_cos($19)));
  $31=($10)*($25);
  $32=($7)*($29);
  $33=($31)-($32);
  $34=($27)+($33);
  $35=($7)-($30);
  $36=($35)-($30);
  $37=($7)*($36);
  $38=($37)+((1.0));
  $39=((2.0))-($30);
  $40=($39)-($30);
  $41=((1.0))-($30);
  $42=($41)-($27);
  $43=($29)+($42);
  $44=($43)*($38);
  $45=($34)*($40);
  $46=($45)+($44);
  $47=($40)*($38);
  $48=($46)/($47);
  $49=$48;
  $50=(($out+($i_033<<2))|0);
  HEAPF32[(($50)>>2)]=$49;
  $51=((($i_033)+(1))|0);
  $52=($51|0)<($count|0);
  if ($52) {
   $i_033=$51;
  } else {
   break;
  }
 }
 return;
}
function __ZN11Blip_Synth_14adjust_impulseEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$p_017=0,$9=0,$10=0,$11=0,$i_016=0,$error_015=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$error_0_lcssa=0,$25=0,$extract_t13=0,$27=0,$extract_t=0,$error_1_off0=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,label=0;
 $1=((__ZNK11Blip_Synth_13impulses_sizeEv($this))|0);
 $2=(($this+32)|0);
 $3=($1|0)>1;
 $4=((($1)-(64))|0);
 $5=(($this+24)|0);
 $6=(($this+24)|0);
 $p_017=64;$8=63;
 while(1) {
  $9=(((63)-($p_017))|0);
  $10=((HEAP32[(($2)>>2)])|0);
  if ($3) {
   $11=((HEAP32[(($6)>>2)])|0);
   $error_015=$10;$i_016=1;
   while(1) {
    $13=((($i_016)+($8))|0);
    $14=(($11+($13<<1))|0);
    $15=((HEAP16[(($14)>>1)])|0);
    $16=(($15<<16)>>16);
    $17=((($error_015)-($16))|0);
    $18=((($i_016)+($9))|0);
    $19=(($11+($18<<1))|0);
    $20=((HEAP16[(($19)>>1)])|0);
    $21=(($20<<16)>>16);
    $22=((($17)-($21))|0);
    $23=((($i_016)+(64))|0);
    $24=($23|0)<($1|0);
    if ($24) {
     $error_015=$22;$i_016=$23;
    } else {
     $error_0_lcssa=$22;
     break;
    }
   }
  } else {
   $error_0_lcssa=$10;
  }
  $25=($8|0)==($9|0);
  $extract_t13=(($error_0_lcssa)&65535);
  if ($25) {
   $27=(((($error_0_lcssa|0))/(2))&-1);
   $extract_t=(($27)&65535);
   $error_1_off0=$extract_t;
  } else {
   $error_1_off0=$extract_t13;
  }
  $29=((($4)+($8))|0);
  $30=((HEAP32[(($5)>>2)])|0);
  $31=(($30+($29<<1))|0);
  $32=((HEAP16[(($31)>>1)])|0);
  $33=((($32)+($error_1_off0))&65535);
  HEAP16[(($31)>>1)]=$33;
  $34=((($8)-(1))|0);
  $35=($8|0)>31;
  if ($35) {
   $p_017=$8;$8=$34;
  } else {
   break;
  }
 }
 return;
}
function __ZNK11Blip_Synth_13impulses_sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+28)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2<<5;
 $4=$3|1;
 return (($4)|0);
}
function __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $fimpulse=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=.0,$13=0,$14=0,$15=0,$16=0,$fimpulse31=0,$17=0,$i_226=0,$total_025=.0;
 var $18=0,$19=0,$20=.0,$21=.0,$22=.0,$23=0,$24=0,$total_0_lcssa=.0,$25=.0,$26=0,$27=0,$28=0,$29=0,$i_324=0,$next_023=.0,$sum_022=.0,$31=.0,$32=.0,$33=.0,$34=.0;
 var $35=0,$36=0,$37=0,$38=0,$39=.0,$40=.0,$41=.0,$42=0,$43=0,$44=.0,$45=.0,$46=.0,$47=0,$48=0,$49=0,$50=.0,$51=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+2432)|0;
 $fimpulse=((sp)|0);
 $1=(($this+28)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2<<5;
 $4=((($3)-(32))|0);
 $5=(($fimpulse+256)|0);
 __ZNK9blip_eq_t8generateEPfi($eq,$5,$4);
 $6=((($3)+(32))|0);
 $7=$3|31;
 $9=63;
 while(1) {
  $10=((($7)-($9))|0);
  $11=(($fimpulse+($10<<2))|0);
  $12=(+(HEAPF32[(($11)>>2)]));
  $13=((($6)+($9))|0);
  $14=(($fimpulse+($13<<2))|0);
  HEAPF32[(($14)>>2)]=$12;
  $15=((($9)-(1))|0);
  $16=($9|0)==0;
  if ($16) {
   break;
  } else {
   $9=$15;
  }
 }
 $fimpulse31=$fimpulse;
 _memset((((($fimpulse31)|0))|0), ((((0)|0))|0), ((((256)|0))|0));
 $17=($4|0)>0;
 if ($17) {
  $total_025=0.0;$i_226=0;
  while(1) {
   $18=((($i_226)+(64))|0);
   $19=(($fimpulse+($18<<2))|0);
   $20=(+(HEAPF32[(($19)>>2)]));
   $21=$20;
   $22=($total_025)+($21);
   $23=((($i_226)+(1))|0);
   $24=($23|0)<($4|0);
   if ($24) {
    $total_025=$22;$i_226=$23;
   } else {
    $total_0_lcssa=$22;
    break;
   }
  }
 } else {
  $total_0_lcssa=0.0;
 }
 $25=((16384.0))/($total_0_lcssa);
 $26=(($this+32)|0);
 HEAP32[(($26)>>2)]=32768;
 $27=((__ZNK11Blip_Synth_13impulses_sizeEv($this))|0);
 $28=($27|0)>0;
 if ($28) {
  $29=(($this+24)|0);
  $sum_022=0.0;$next_023=0.0;$i_324=0;
  while(1) {
   $31=($next_023)-($sum_022);
   $32=($25)*($31);
   $33=($32)+((0.5));
   $34=(+(Math_floor($33)));
   $35=(~~($34));
   $36=((HEAP32[(($29)>>2)])|0);
   $37=(($36+($i_324<<1))|0);
   HEAP16[(($37)>>1)]=$35;
   $38=(($fimpulse+($i_324<<2))|0);
   $39=(+(HEAPF32[(($38)>>2)]));
   $40=$39;
   $41=($sum_022)+($40);
   $42=((($i_324)+(64))|0);
   $43=(($fimpulse+($42<<2))|0);
   $44=(+(HEAPF32[(($43)>>2)]));
   $45=$44;
   $46=($next_023)+($45);
   $47=((($i_324)+(1))|0);
   $48=($47|0)<($27|0);
   if ($48) {
    $sum_022=$41;$next_023=$46;$i_324=$47;
   } else {
    break;
   }
  }
 }
 __ZN11Blip_Synth_14adjust_impulseEv($this);
 $49=(($this+16)|0);
 $50=(+(HEAPF64[(($49)>>3)]));
 $51=$50!=(0.0);
 if (!($51)) {
  STACKTOP=sp;return;
 }
 HEAPF64[(($49)>>3)]=0.0;
 __ZN11Blip_Synth_11volume_unitEd($this,$50);
 STACKTOP=sp;return;
}
function __ZN11Blip_Synth_11volume_unitEd($this,$new_unit){
 $this=($this)|0;
 $new_unit=+($new_unit);
 var $1=0,$2=0,$3=.0,$4=0,$6=0,$7=0,$8=0,$11=.0,$12=0,$13=.0,$14=.0,$15=0,$16=0,$or_cond=0,$factor_014=.0,$shift_013=0,$17=0,$18=.0,$19=0,$20=0;
 var $22=0,$23=0,$24=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$_in=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $factor_1=.0,$44=.0,$45=.0,$46=0,$47=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $1=((sp)|0);
 $2=(($this+16)|0);
 $3=(+(HEAPF64[(($2)>>3)]));
 $4=$3!=$new_unit;
 if (!($4)) {
  STACKTOP=sp;return;
 }
 $6=(($this+32)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 if ($8) {
  __ZN9blip_eq_tC1Ed($1,-8.0);
  __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($this,$1);
 }
 HEAPF64[(($2)>>3)]=$new_unit;
 $11=($new_unit)*((1073741824.0));
 $12=((HEAP32[(($6)>>2)])|0);
 $13=(+((($12|0))|0));
 $14=($11)/($13);
 $15=$14>(0.0);
 $16=$14<(2.0);
 $or_cond=$15&$16;
 do {
  if ($or_cond) {
   $shift_013=0;$factor_014=$14;
   while(1) {
    $17=((($shift_013)+(1))|0);
    $18=($factor_014)*((2.0));
    $19=$18<(2.0);
    if ($19) {
     $shift_013=$17;$factor_014=$18;
    } else {
     break;
    }
   }
   $20=($17|0)==0;
   if ($20) {
    $factor_1=$18;
    break;
   }
   $22=((HEAP32[(($6)>>2)])|0);
   $23=$22>>($17|0);
   HEAP32[(($6)>>2)]=$23;
   $24=($23|0)>0;
   if (!($24)) {
    ___assert_fail(((8096)|0),((7272)|0),((367)|0),((9568)|0));
   }
   $27=1<<$shift_013;
   $28=((($27)+(32768))|0);
   $29=32768>>>($17>>>0);
   $30=((__ZNK11Blip_Synth_13impulses_sizeEv($this))|0);
   $31=($30|0)==0;
   if (!($31)) {
    $32=(($this+24)|0);
    $_in=$30;
    while(1) {
     $34=((($_in)-(1))|0);
     $35=((HEAP32[(($32)>>2)])|0);
     $36=(($35+($34<<1))|0);
     $37=((HEAP16[(($36)>>1)])|0);
     $38=(($37<<16)>>16);
     $39=((($28)+($38))|0);
     $40=$39>>($17|0);
     $41=((($40)-($29))|0);
     $42=(($41)&65535);
     HEAP16[(($36)>>1)]=$42;
     $43=($34|0)==0;
     if ($43) {
      break;
     } else {
      $_in=$34;
     }
    }
   }
   __ZN11Blip_Synth_14adjust_impulseEv($this);
   $factor_1=$18;
  } else {
   $factor_1=$14;
  }
 } while(0);
 $44=($factor_1)+((0.5));
 $45=(+(Math_floor($44)));
 $46=(~~($45));
 $47=(($this+8)|0);
 HEAP32[(($47)>>2)]=$46;
 STACKTOP=sp;return;
}
function __ZN9blip_eq_tC1Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var label=0;
 __ZN9blip_eq_tC2Ed($this,$t);
 return;
}
function __ZN9blip_eq_tC2Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this)|0);
 HEAPF64[(($1)>>3)]=$t;
 $2=(($this+8)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+12)|0);
 HEAP32[(($3)>>2)]=44100;
 $4=(($this+16)|0);
 HEAP32[(($4)>>2)]=0;
 return;
}
function __ZN11Classic_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=$this;
 __ZN9Music_EmuC2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=14824;
 $3=(($this+252)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+256)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this+268)|0);
 HEAP32[(($5)>>2)]=0;
 return;
}
function __ZN11Classic_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN11Classic_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN11Classic_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$14=0,$13$0=0,$13$1=0,$17$0=0,$17$1=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=14824;
 $2=(($this+256)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($3|0)==0;
 if ($4) {
  $11=$this;
  __ZN9Music_EmuD2Ev($11);
  return;
 }
 $6=$3;
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+4)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 FUNCTION_TABLE_vi[($9)&255]($3);
 $11=$this;
 __ZN9Music_EmuD2Ev($11);
 return;
}
function __ZN11Classic_Emu14set_equalizer_ERK15gme_equalizer_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=.0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $1=((sp)|0);
 $2=$this;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+72)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($eq)|0);
 $7=(+(HEAPF64[(($6)>>3)]));
 __ZN9blip_eq_tC1Ed($1,$7);
 FUNCTION_TABLE_vii[($5)&63]($this,$1);
 $8=(($this+252)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if ($10) {
  STACKTOP=sp;return;
 }
 $12=$this;
 $13=$9;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+24)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((__ZNK9Music_Emu9equalizerEv($12))|0);
 $18=(($17+8)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 FUNCTION_TABLE_vii[($16)&63]($9,$19);
 STACKTOP=sp;return;
}
function __ZNK9Music_Emu9equalizerEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+144)|0);
 return (($1)|0);
}
function __ZN11Classic_Emu16set_sample_rate_El($this,$rate){
 $this=($this)|0;
 $rate=($rate)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$14=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$_0=0,$26$0=0,$26$1=0;
 var label=0;
 $1=(($this+252)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $5=(($this+256)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=($6|0)==0;
  do {
   if ($7) {
    $9=((__ZN12Multi_BuffernwEj(172))|0);
    $10=($9|0)==0;
    if ($10) {
     HEAP32[(($5)>>2)]=0;
     $_0=2600;
     return (($_0)|0);
    } else {
     $12=$9;
     __ZN13Stereo_BufferC2Ev($12);
     $14=$9;
     HEAP32[(($5)>>2)]=$14;
     break;
    }
   }
  } while(0);
  $16=((HEAP32[(($5)>>2)])|0);
  HEAP32[(($1)>>2)]=$16;
 }
 $18=((HEAP32[(($1)>>2)])|0);
 $19=$18;
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+16)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((FUNCTION_TABLE_iiii[($22)&127]($18,$rate,50))|0);
 $_0=$23;
 return (($_0)|0);
}
function __ZN12Multi_BuffernwEj($s){
 $s=($s)|0;
 var $1=0,label=0;
 $1=((_malloc($s))|0);
 return (($1)|0);
}
function __ZN12Multi_BufferdlEPv($p){
 $p=($p)|0;
 var label=0;
 _free($p);
 return;
}
function __ZN11Classic_Emu12mute_voices_Ei($this,$mask){
 $this=($this)|0;
 $mask=($mask)|0;
 var $ch=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$_in=0,$16=0,$17=0,$18=0,$19=0;
 var $21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$36=0,$37=0,$38=0,$40=0,$41=0,$43=0,$44=0,$_pr=0;
 var $46=0,$47=0,$48=0,$50=0,$51=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $ch=((sp)|0);
 $1=$this;
 $2=((__ZNK9Music_Emu11voice_countEv($1))|0);
 $3=($2|0)==0;
 if ($3) {
  STACKTOP=sp;return;
 }
 $4=(($this+252)|0);
 $5=(($this+268)|0);
 $6=(($ch)|0);
 $7=(($ch+4)|0);
 $8=(($ch+8)|0);
 $9=$this;
 $10=(($ch+4)|0);
 $11=(($ch+8)|0);
 $12=(($ch+4)|0);
 $13=(($ch+8)|0);
 $14=$this;
 $_in=$2;
 L802: while(1) {
  $16=((($_in)-(1))|0);
  $17=1<<$16;
  $18=$17&$mask;
  $19=($18|0)==0;
  if ($19) {
   $25=((HEAP32[(($4)>>2)])|0);
   $26=$25;
   $27=((HEAP32[(($26)>>2)])|0);
   $28=(($27+12)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=((HEAP32[(($5)>>2)])|0);
   $31=($30|0)==0;
   if ($31) {
    $36=0;
   } else {
    $33=(($30+($16<<2))|0);
    $34=((HEAP32[(($33)>>2)])|0);
    $36=$34;
   }
   FUNCTION_TABLE_viiii[($29)&31]($ch,$25,$16,$36);
   $37=((HEAP32[(($6)>>2)])|0);
   $38=($37|0)==0;
   do {
    if ($38) {
     label = 709;
    } else {
     $40=((HEAP32[(($12)>>2)])|0);
     $41=($40|0)==0;
     if (!($41)) {
      $43=((HEAP32[(($13)>>2)])|0);
      $44=($43|0)==0;
      if (!($44)) {
       break;
      }
     }
     $_pr=((HEAP32[(($6)>>2)])|0);
     $46=($_pr|0)==0;
     if ($46) {
      label = 709;
     } else {
      label = 715;
      break L802;
     }
    }
   } while(0);
   if ((label|0) == 709) {
    label = 0;
    $47=((HEAP32[(($7)>>2)])|0);
    $48=($47|0)==0;
    if (!($48)) {
     label = 716;
     break;
    }
    $50=((HEAP32[(($8)>>2)])|0);
    $51=($50|0)==0;
    if (!($51)) {
     label = 717;
     break;
    }
   }
   $54=((HEAP32[(($9)>>2)])|0);
   $55=(($54+68)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=((HEAP32[(($6)>>2)])|0);
   $58=((HEAP32[(($10)>>2)])|0);
   $59=((HEAP32[(($11)>>2)])|0);
   FUNCTION_TABLE_viiiii[($56)&31]($this,$16,$57,$58,$59);
  } else {
   $21=((HEAP32[(($14)>>2)])|0);
   $22=(($21+68)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   FUNCTION_TABLE_viiiii[($23)&31]($this,$16,0,0,0);
  }
  $60=($16|0)==0;
  if ($60) {
   label = 719;
   break;
  } else {
   $_in=$16;
  }
 }
 if ((label|0) == 715) {
  ___assert_fail(((6568)|0),((4592)|0),((70)|0),((9536)|0));
 }
 else if ((label|0) == 716) {
  ___assert_fail(((6568)|0),((4592)|0),((70)|0),((9536)|0));
 }
 else if ((label|0) == 717) {
  ___assert_fail(((6568)|0),((4592)|0),((70)|0),((9536)|0));
 }
 else if ((label|0) == 719) {
  STACKTOP=sp;return;
 }
}
function __ZNK9Music_Emu11voice_countEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+168)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN11Classic_Emu17change_clock_rateEl($this,$rate){
 $this=($this)|0;
 $rate=($rate)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+260)|0);
 HEAP32[(($1)>>2)]=$rate;
 $2=(($this+252)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+20)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 FUNCTION_TABLE_vii[($7)&63]($3,$rate);
 return;
}
function __ZN11Classic_Emu12setup_bufferEl($this,$rate){
 $this=($this)|0;
 $rate=($rate)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$_0=0,label=0;
 __ZN11Classic_Emu17change_clock_rateEl($this,$rate);
 $1=(($this+252)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$this;
 $8=((__ZNK9Music_Emu11voice_countEv($7))|0);
 $9=((FUNCTION_TABLE_iii[($6)&127]($2,$8))|0);
 $10=($9|0)==0;
 if (!($10)) {
  $_0=$9;
  return (($_0)|0);
 }
 $12=((__ZNK9Music_Emu9equalizerEv($7))|0);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($7,$12);
 $13=((HEAP32[(($1)>>2)])|0);
 $14=((__ZN12Multi_Buffer22channels_changed_countEv($13))|0);
 $15=(($this+264)|0);
 HEAP32[(($15)>>2)]=$14;
 $_0=0;
 return (($_0)|0);
}
function __ZN12Multi_Buffer22channels_changed_countEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN11Classic_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+252)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+28)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 FUNCTION_TABLE_vi[($6)&255]($2);
 return ((0)|0);
}
function __ZN11Classic_Emu5play_ElPs($this,$count,$out){
 $this=($this)|0;
 $count=($count)|0;
 $out=($out)|0;
 var $clocks_emulated=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$remain_011=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0;
 var $21=0,$22=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0;
 var $_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $clocks_emulated=((sp)|0);
 $1=($count|0)==0;
 if ($1) {
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $2=(($this+252)|0);
 $3=(($this+264)|0);
 $4=(($this+260)|0);
 $5=$this;
 $6=$this;
 $remain_011=$count;
 while(1) {
  $8=((HEAP32[(($2)>>2)])|0);
  $9=$8;
  $10=((HEAP32[(($9)>>2)])|0);
  $11=(($10+36)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=((($count)-($remain_011))|0);
  $14=(($out+($13<<1))|0);
  $15=((FUNCTION_TABLE_iiii[($12)&127]($8,$14,$remain_011))|0);
  $16=((($remain_011)-($15))|0);
  $17=($remain_011|0)==($15|0);
  if (!($17)) {
   $19=((HEAP32[(($3)>>2)])|0);
   $20=((HEAP32[(($2)>>2)])|0);
   $21=((__ZN12Multi_Buffer22channels_changed_countEv($20))|0);
   $22=($19|0)==($21|0);
   if (!($22)) {
    HEAP32[(($3)>>2)]=$21;
    __ZN9Music_Emu13remute_voicesEv($6);
   }
   $25=((HEAP32[(($2)>>2)])|0);
   $26=((__ZNK12Multi_Buffer6lengthEv($25))|0);
   $27=((HEAP32[(($4)>>2)])|0);
   $28=(Math_imul($27,$26)|0);
   $29=(((($28|0))/(1000))&-1);
   HEAP32[(($clocks_emulated)>>2)]=$29;
   $30=((HEAP32[(($5)>>2)])|0);
   $31=(($30+76)|0);
   $32=((HEAP32[(($31)>>2)])|0);
   $33=((FUNCTION_TABLE_iiii[($32)&127]($this,$clocks_emulated,$26))|0);
   $34=($33|0)==0;
   if (!($34)) {
    $_0=$33;
    label = 741;
    break;
   }
   $36=((HEAP32[(($clocks_emulated)>>2)])|0);
   $37=($36|0)==0;
   if ($37) {
    label = 736;
    break;
   }
   $40=((HEAP32[(($2)>>2)])|0);
   $41=$40;
   $42=((HEAP32[(($41)>>2)])|0);
   $43=(($42+32)|0);
   $44=((HEAP32[(($43)>>2)])|0);
   FUNCTION_TABLE_vii[($44)&63]($40,$36);
  }
  $45=($remain_011|0)==($15|0);
  if ($45) {
   $_0=0;
   label = 742;
   break;
  } else {
   $remain_011=$16;
  }
 }
 if ((label|0) == 736) {
  ___assert_fail(((3480)|0),((4592)|0),((114)|0),((9528)|0));
  return ((0)|0);
 }
 else if ((label|0) == 741) {
  STACKTOP=sp;return (($_0)|0);
 }
 else if ((label|0) == 742) {
  STACKTOP=sp;return (($_0)|0);
 }
  return 0;
}
function __ZN9Music_Emu13remute_voicesEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+172)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 __ZN9Music_Emu11mute_voicesEi($this,$2);
 return;
}
function __ZNK12Multi_Buffer6lengthEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($this,$in,$header_size,$header_out,$fill,$pad_size){
 $this=($this)|0;
 $in=($in)|0;
 $header_size=($header_size)|0;
 $header_out=($header_out)|0;
 $fill=($fill)|0;
 $pad_size=($pad_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$err_020=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$_0=0,label=0;
 $1=((($pad_size)-($header_size))|0);
 $2=(($this+12)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this)|0);
 __ZN13blargg_vectorIhE5clearEv($5);
 $6=$in;
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=((FUNCTION_TABLE_ii[($9)&31]($in))|0);
 $11=(($this+8)|0);
 HEAP32[(($11)>>2)]=$10;
 $12=($10|0)>($header_size|0);
 if (!($12)) {
  $_0=16;
  return (($_0)|0);
 }
 $14=((($1)+($pad_size))|0);
 $15=((($14)+($10))|0);
 $16=((__ZN13blargg_vectorIhE6resizeEj($5,$15))|0);
 $17=($16|0)==0;
 do {
  if ($17) {
   $19=$in;
   $20=((HEAP32[(($19)>>2)])|0);
   $21=(($20+12)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   $23=((__ZNK13blargg_vectorIhE5beginEv($5))|0);
   $24=(($23+$1)|0);
   $25=((HEAP32[(($11)>>2)])|0);
   $26=((FUNCTION_TABLE_iiii[($22)&127]($in,$24,$25))|0);
   $27=($26|0)==0;
   if (!($27)) {
    $err_020=$26;
    break;
   }
   $29=((HEAP32[(($11)>>2)])|0);
   $30=((($29)-($header_size))|0);
   HEAP32[(($11)>>2)]=$30;
   $31=((__ZNK13blargg_vectorIhEixEj($5,$1))|0);
   (_memcpy((($header_out)|0), (($31)|0), $header_size)|0);
   $32=((__ZNK13blargg_vectorIhE5beginEv($5))|0);
   $33=(($fill)&255);
   _memset((((($32)|0))|0), (((($33)|0))|0), (((($pad_size)|0))|0));
   $34=((__ZNK13blargg_vectorIhE3endEv($5))|0);
   $35=(((-$pad_size))|0);
   $36=(($34+$35)|0);
   _memset((((($36)|0))|0), (((($33)|0))|0), (((($pad_size)|0))|0));
   $_0=0;
   return (($_0)|0);
  } else {
   $err_020=$16;
  }
 } while(0);
 __ZN13blargg_vectorIhE5clearEv($5);
 $_0=$err_020;
 return (($_0)|0);
}
function __ZN13blargg_vectorIhE5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 HEAP32[(($1)>>2)]=0;
 $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=0;
 _free($2);
 return;
}
function __ZN13blargg_vectorIhE6resizeEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$or_cond=0,$7=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_realloc($2,$n))|0);
 $4=($3|0)!=0;
 $5=($n|0)==0;
 $or_cond=$4|$5;
 if (!($or_cond)) {
  $_0=2600;
  return (($_0)|0);
 }
 HEAP32[(($1)>>2)]=$3;
 $7=(($this+4)|0);
 HEAP32[(($7)>>2)]=$n;
 $_0=0;
 return (($_0)|0);
}
function __ZNK13blargg_vectorIhE5beginEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZNK13blargg_vectorIhEixEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)<($n>>>0);
 if ($3) {
  ___assert_fail(((2768)|0),((2232)|0),((51)|0),((8424)|0));
  return ((0)|0);
 } else {
  $6=(($this)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+$n)|0);
  return (($8)|0);
 }
  return 0;
}
function __ZNK13blargg_vectorIhE3endEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+$4)|0);
 return (($5)|0);
}
function __ZN9Rom_Data_9set_addr_Eli($this,$addr,$unit){
 $this=($this)|0;
 $addr=($addr)|0;
 $unit=($unit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$shift_0=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$rounded_0=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;
 $1=((($addr)-(8))|0);
 $2=((($1)-($unit))|0);
 $3=(($this+12)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($this+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($addr)-(1))|0);
 $7=((($6)+($unit))|0);
 $8=((($7)+($5))|0);
 $9=(((($8|0))%(($unit|0)))&-1);
 $10=((($8)-($9))|0);
 $11=($10|0)<1;
 if ($11) {
  $rounded_0=0;
 } else {
  $13=((($10)-(1))|0);
  $shift_0=0;
  while(1) {
   $15=$13>>>($shift_0>>>0);
   $16=($15|0)==0;
   $17=((($shift_0)+(1))|0);
   if ($16) {
    break;
   } else {
    $shift_0=$17;
   }
  }
  $19=1<<$shift_0;
  $20=((($19)-(1))|0);
  $21=(($this+16)|0);
  HEAP32[(($21)>>2)]=$20;
  $rounded_0=$10;
 }
 $23=(($this+20)|0);
 HEAP32[(($23)>>2)]=$rounded_0;
 $24=(($this)|0);
 $25=((HEAP32[(($3)>>2)])|0);
 $26=((($rounded_0)+(8))|0);
 $27=((($26)-($25))|0);
 $28=((__ZN13blargg_vectorIhE6resizeEj($24,$27))|0);
 return;
}
function __ZN11Data_Reader4readEPvl($this,$p,$s){
 $this=($this)|0;
 $p=($p)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$or_cond=0,$_=0,label=0;
 $1=$this;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((FUNCTION_TABLE_iiii[($4)&127]($this,$p,$s))|0);
 $6=($5|0)==($s|0);
 if ($6) {
  return ((0)|0);
 } else {
  $8=($5|0)>-1;
  $9=($5|0)<($s|0);
  $or_cond=$8&$9;
  $_=($or_cond?17648:1280);
  return (($_)|0);
 }
  return 0;
}
function __ZN11Data_Reader4skipEl($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $buf=0,$1=0,$2=0,$_09=0,$4=0,$6=0,$_09_=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+512)|0;
 $buf=((sp)|0);
 $1=$this;
 $2=(($buf)|0);
 $_09=$count;
 while(1) {
  $4=($_09|0)==0;
  if ($4) {
   $_0=0;
   label = 777;
   break;
  }
  $6=($_09|0)<512;
  $_09_=($6?$_09:512);
  $7=((($_09)-($_09_))|0);
  $8=((HEAP32[(($1)>>2)])|0);
  $9=(($8+12)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((FUNCTION_TABLE_iiii[($10)&127]($this,$2,$_09_))|0);
  $12=($11|0)==0;
  if ($12) {
   $_09=$7;
  } else {
   $_0=$11;
   label = 778;
   break;
  }
 }
 if ((label|0) == 777) {
  STACKTOP=sp;return (($_0)|0);
 }
 else if ((label|0) == 778) {
  STACKTOP=sp;return (($_0)|0);
 }
  return 0;
}
function __ZNK11File_Reader6remainEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=$this;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((FUNCTION_TABLE_ii[($4)&31]($this))|0);
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($6+28)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((FUNCTION_TABLE_ii[($8)&31]($this))|0);
 $10=((($5)-($9))|0);
 return (($10)|0);
}
function __ZN11File_Reader4skipEl($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$_0=0,label=0;
 $1=($n|0)>-1;
 if (!($1)) {
  ___assert_fail(((5848)|0),((4096)|0),((57)|0),((9520)|0));
  return ((0)|0);
 }
 $4=($n|0)==0;
 if ($4) {
  $_0=0;
  return (($_0)|0);
 }
 $6=$this;
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+32)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$this;
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+28)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((FUNCTION_TABLE_ii[($13)&31]($this))|0);
 $15=((($14)+($n))|0);
 $16=((FUNCTION_TABLE_iii[($9)&127]($this,$15))|0);
 $_0=$16;
 return (($_0)|0);
}
function __ZN13Subset_ReaderC2EP11Data_Readerl($this,$dr,$size){
 $this=($this)|0;
 $dr=($dr)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$size_=0,label=0;
 $1=(($this)|0);
 __ZN11Data_ReaderC2Ev($1);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=14440;
 $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$dr;
 $4=$dr;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((FUNCTION_TABLE_ii[($7)&31]($dr))|0);
 $9=(($this+8)|0);
 $10=($8|0)>($size|0);
 $size_=($10?$size:$8);
 HEAP32[(($9)>>2)]=$size_;
 return;
}
function __ZN11Data_ReaderC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=14784;
 return;
}
function __ZNK13Subset_Reader6remainEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN13Subset_Reader10read_availEPvl($this,$p,$s){
 $this=($this)|0;
 $p=($p)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$_s=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($s|0);
 $_s=($3?$2:$s);
 $4=((($2)-($_s))|0);
 HEAP32[(($1)>>2)]=$4;
 $5=(($this+4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$6;
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((FUNCTION_TABLE_iiii[($10)&127]($6,$p,$_s))|0);
 return (($11)|0);
}
function __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($this,$h,$size,$r){
 $this=($this)|0;
 $h=($h)|0;
 $size=($size)|0;
 $r=($r)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this)|0);
 __ZN11Data_ReaderC2Ev($1);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=14192;
 $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$h;
 $4=(($h+$size)|0);
 $5=(($this+8)|0);
 HEAP32[(($5)>>2)]=$4;
 $6=(($this+12)|0);
 HEAP32[(($6)>>2)]=$r;
 return;
}
function __ZNK16Remaining_Reader6remainEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$2;
 $6=$4;
 $7=((($5)-($6))|0);
 $8=(($this+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$9;
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+16)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((FUNCTION_TABLE_ii[($13)&31]($9))|0);
 $15=((($7)+($14))|0);
 return (($15)|0);
}
function __ZN16Remaining_Reader10read_firstEPvl($this,$out,$count){
 $this=($this)|0;
 $out=($out)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$count_=0,$11=0,$first_1=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$2;
 $6=$4;
 $7=((($5)-($6))|0);
 $8=($2|0)==($4|0);
 if ($8) {
  $first_1=$7;
  return (($first_1)|0);
 }
 $10=($7|0)>($count|0);
 $count_=($10?$count:$7);
 $11=(($4+$count_)|0);
 HEAP32[(($3)>>2)]=$11;
 (_memcpy((($out)|0), (($4)|0), $count_)|0);
 $first_1=$count_;
 return (($first_1)|0);
}
function __ZN16Remaining_Reader10read_availEPvl($this,$out,$count){
 $this=($this)|0;
 $out=($out)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$second_0=0,$15=0,$_0=0,label=0;
 $1=((__ZN16Remaining_Reader10read_firstEPvl($this,$out,$count))|0);
 $2=((($count)-($1))|0);
 $3=($1|0)==($count|0);
 do {
  if ($3) {
   $second_0=$2;
  } else {
   $5=(($this+12)|0);
   $6=((HEAP32[(($5)>>2)])|0);
   $7=$6;
   $8=((HEAP32[(($7)>>2)])|0);
   $9=(($8+8)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=(($out+$1)|0);
   $12=((FUNCTION_TABLE_iiii[($10)&127]($6,$11,$2))|0);
   $13=($12|0)<1;
   if ($13) {
    $_0=$12;
   } else {
    $second_0=$12;
    break;
   }
   return (($_0)|0);
  }
 } while(0);
 $15=((($second_0)+($1))|0);
 $_0=$15;
 return (($_0)|0);
}
function __ZN16Remaining_Reader4readEPvl($this,$out,$count){
 $this=($this)|0;
 $out=($out)|0;
 $count=($count)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;
 $1=((__ZN16Remaining_Reader10read_firstEPvl($this,$out,$count))|0);
 $2=($1|0)==($count|0);
 if ($2) {
  $_0=0;
  return (($_0)|0);
 }
 $4=((($count)-($1))|0);
 $5=(($this+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$6;
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($out+$1)|0);
 $12=((FUNCTION_TABLE_iiii[($10)&127]($6,$11,$4))|0);
 $_0=$12;
 return (($_0)|0);
}
function __ZN15Mem_File_ReaderC2EPKvl($this,$p,$s){
 $this=($this)|0;
 $p=($p)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this)|0);
 __ZN11File_ReaderC2Ev($1);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=14288;
 $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$p;
 $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=$s;
 $5=(($this+12)|0);
 HEAP32[(($5)>>2)]=0;
 return;
}
function __ZN11File_ReaderC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 __ZN11Data_ReaderC2Ev($1);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=14728;
 return;
}
function __ZNK15Mem_File_Reader4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN15Mem_File_Reader10read_availEPvl($this,$p,$s){
 $this=($this)|0;
 $p=($p)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$_s=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;
 $1=(($this)|0);
 $2=$this;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+16)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((FUNCTION_TABLE_ii[($5)&31]($1))|0);
 $7=($6|0)<($s|0);
 $_s=($7?$6:$s);
 $8=(($this+4)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($this+12)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($9+$11)|0);
 (_memcpy((($p)|0), (($12)|0), $_s)|0);
 $13=((HEAP32[(($10)>>2)])|0);
 $14=((($13)+($_s))|0);
 HEAP32[(($10)>>2)]=$14;
 return (($_s)|0);
}
function __ZNK15Mem_File_Reader4tellEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN15Mem_File_Reader4seekEl($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$5=0,$_0=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($n|0);
 if ($3) {
  $_0=17648;
  return (($_0)|0);
 }
 $5=(($this+12)|0);
 HEAP32[(($5)>>2)]=$n;
 $_0=0;
 return (($_0)|0);
}
function __ZN15Std_File_ReaderC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 __ZN11File_ReaderC2Ev($1);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=14232;
 $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN15Std_File_ReaderD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN15Std_File_ReaderD2Ev($this);
 $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN15Std_File_ReaderD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=14232;
 __ZN15Std_File_Reader5closeEv($this);
 return;
}
function __ZN15Std_File_Reader5closeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 }
 $5=$2;
 $6=((_fclose((($5)|0)))|0);
 HEAP32[(($1)>>2)]=0;
 return;
}
function __ZN15Std_File_Reader4openEPKc($this,$path){
 $this=($this)|0;
 $path=($path)|0;
 var $1=0,$2=0,$3=0,$4=0,$_=0,label=0;
 $1=((_fopen((($path)|0),((3248)|0)))|0);
 $2=$1;
 $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=($1|0)==0;
 $_=($4?2576:0);
 return (($_)|0);
}
function __ZNK15Std_File_Reader4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;
 $1=$this;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+28)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((FUNCTION_TABLE_ii[($4)&31]($this))|0);
 $6=(($this+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$7;
 $9=((_fseek((($8)|0),((0)|0),((2)|0)))|0);
 $10=((HEAP32[(($1)>>2)])|0);
 $11=(($10+28)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((FUNCTION_TABLE_ii[($12)&31]($this))|0);
 $14=((HEAP32[(($6)>>2)])|0);
 $15=$14;
 $16=((_fseek((($15)|0),(($5)|0),((0)|0)))|0);
 return (($13)|0);
}
function __ZN15Std_File_Reader10read_availEPvl($this,$p,$s){
 $this=($this)|0;
 $p=($p)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=((_fread((($p)|0),((1)|0),(($s)|0),(($3)|0)))|0);
 return (($4)|0);
}
function __ZN15Std_File_Reader4readEPvl($this,$p,$s){
 $this=($this)|0;
 $p=($p)|0;
 $s=($s)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$_=0,$_0=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=((_fread((($p)|0),((1)|0),(($s)|0),(($3)|0)))|0);
 $5=($4|0)==($s|0);
 if ($5) {
  $_0=0;
  return (($_0)|0);
 }
 $7=((HEAP32[(($1)>>2)])|0);
 $8=$7;
 $9=((_feof((($8)|0)))|0);
 $10=($9|0)==0;
 $_=($10?2128:17648);
 $_0=$_;
 return (($_0)|0);
}
function __ZNK15Std_File_Reader4tellEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=((_ftell((($3)|0)))|0);
 return (($4)|0);
}
function __ZN15Std_File_Reader4seekEl($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_=0,$_0=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=((_fseek((($3)|0),(($n)|0),((0)|0)))|0);
 $5=($4|0)==0;
 if ($5) {
  $_0=0;
  return (($_0)|0);
 }
 $7=$this;
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+24)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((FUNCTION_TABLE_ii[($10)&31]($this))|0);
 $12=($11|0)<($n|0);
 $_=($12?17648:1672);
 $_0=$_;
 return (($_0)|0);
}
function __ZN11Data_ReaderD1Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN11Data_ReaderD0Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZdlPv($1);
 return;
}
function __ZN11File_ReaderD1Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN11File_ReaderD0Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZdlPv($1);
 return;
}
function __ZN13Subset_ReaderD1Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN13Subset_ReaderD0Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZdlPv($1);
 return;
}
function __ZN16Remaining_ReaderD1Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN16Remaining_ReaderD0Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZdlPv($1);
 return;
}
function __ZN15Mem_File_ReaderD1Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN15Mem_File_ReaderD0Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZdlPv($1);
 return;
}
function __ZN14Dual_ResamplerC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$6$0=0,$6$1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=14408;
 $2=(($this+4)|0);
 __ZN13blargg_vectorIsEC1Ev($2);
 $3=(($this+32)|0);
 __ZN13Fir_ResamplerILi12EEC1Ev($3);
 return;
}
function __ZN13blargg_vectorIsEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIsEC2Ev($this);
 return;
}
function __ZN13Fir_ResamplerILi12EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13Fir_ResamplerILi12EEC2Ev($this);
 return;
}
function __ZN13blargg_vectorIsED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIsED2Ev($this);
 return;
}
function __ZN14Dual_ResamplerD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN14Dual_ResamplerD2Ev($this);
 $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN14Dual_ResamplerD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$4=0,$7=0,$6$0=0,$6$1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=14408;
 $2=(($this+32)|0);
 __ZN13Fir_ResamplerILi12EED1Ev($2);
 $4=(($this+4)|0);
 __ZN13blargg_vectorIsED1Ev($4);
 return;
}
function __ZN13Fir_ResamplerILi12EED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13Fir_ResamplerILi12EED2Ev($this);
 return;
}
function __ZN14Dual_Resampler5resetEi($this,$pairs){
 $this=($this)|0;
 $pairs=($pairs)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$_0=0,label=0;
 $1=(($this+4)|0);
 $2=$pairs>>2;
 $3=((($2)+($pairs))|0);
 $4=$3<<1;
 $5=((__ZN13blargg_vectorIsE6resizeEj($1,$4))|0);
 $6=($5|0)==0;
 if (!($6)) {
  $_0=$5;
  return (($_0)|0);
 }
 __ZN14Dual_Resampler6resizeEi($this,$pairs);
 $8=(($this+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$9>>2;
 $11=((($10)+($9))|0);
 $12=(($this+24)|0);
 HEAP32[(($12)>>2)]=$11;
 $13=(($this+32)|0);
 $14=$13;
 $15=((__ZN14Fir_Resampler_11buffer_sizeEi($14,$11))|0);
 $_0=$15;
 return (($_0)|0);
}
function __ZN13blargg_vectorIsE6resizeEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$or_cond=0,$9=0,$10=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=$n<<1;
 $5=((_realloc($3,$4))|0);
 $6=($5|0)!=0;
 $7=($n|0)==0;
 $or_cond=$6|$7;
 if (!($or_cond)) {
  $_0=2560;
  return (($_0)|0);
 }
 $9=$5;
 HEAP32[(($1)>>2)]=$9;
 $10=(($this+4)|0);
 HEAP32[(($10)>>2)]=$n;
 $_0=0;
 return (($_0)|0);
}
function __ZN14Dual_Resampler6resizeEi($this,$pairs){
 $this=($this)|0;
 $pairs=($pairs)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=.0,$11=0,$12=0,$13=.0,$14=.0,$15=0,$16=0,$17=0,$18=0,label=0;
 $1=$pairs<<1;
 $2=(($this+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($3|0)==($1|0);
 if ($4) {
  return;
 }
 $6=(($this+4)|0);
 $7=((__ZNK13blargg_vectorIsE4sizeEv($6))|0);
 $8=($1>>>0)>($7>>>0);
 if ($8) {
  return;
 }
 HEAP32[(($2)>>2)]=$1;
 $10=(+((($pairs|0))|0));
 $11=(($this+32)|0);
 $12=$11;
 $13=(+(__ZNK14Fir_Resampler_5ratioEv($12)));
 $14=($10)*($13);
 $15=(~~($14));
 $16=$15<<1;
 $17=((($16)+(2))|0);
 $18=(($this+16)|0);
 HEAP32[(($18)>>2)]=$17;
 __ZN14Dual_Resampler5clearEv($this);
 return;
}
function __ZNK13blargg_vectorIsE4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZNK14Fir_Resampler_5ratioEv($this){
 $this=($this)|0;
 var $1=0,$2=.0,label=0;
 $1=(($this+40)|0);
 $2=(+(HEAPF64[(($1)>>3)]));
 return (+($2));
}
function __ZN14Dual_Resampler5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+20)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($this+32)|0);
 $5=$4;
 __ZN14Fir_Resampler_5clearEv($5);
 return;
}
function __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$out){
 $this=($this)|0;
 $blip_buf=($blip_buf)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$22=0;
 var $23=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2>>1;
 $4=((__ZNK11Blip_Buffer12count_clocksEl($blip_buf,$3))|0);
 $5=(($this+16)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+32)|0);
 $8=$7;
 $9=((__ZNK14Fir_Resampler_7writtenEv($8))|0);
 $10=((($6)-($9))|0);
 $11=$this;
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+8)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((__ZN14Fir_Resampler_6bufferEv($8))|0);
 $16=((FUNCTION_TABLE_iiiii[($14)&15]($this,$4,$10,$15))|0);
 $17=(($this+24)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($16|0)<($18|0);
 if (!($19)) {
  ___assert_fail(((936)|0),((5736)|0),((59)|0),((9296)|0));
 }
 __ZN11Blip_Buffer9end_frameEi($blip_buf,$4);
 $22=((__ZNK11Blip_Buffer13samples_availEv($blip_buf))|0);
 $23=($22|0)==($3|0);
 if (!($23)) {
  ___assert_fail(((4024)|0),((5736)|0),((62)|0),((9296)|0));
 }
 __ZN14Fir_Resampler_5writeEl($8,$16);
 $26=(($this+4)|0);
 $27=((__ZNK13blargg_vectorIsE5beginEv($26))|0);
 $28=((HEAP32[(($1)>>2)])|0);
 $29=((__ZN13Fir_ResamplerILi12EE4readEPsi($7,$27,$28))|0);
 $30=((HEAP32[(($1)>>2)])|0);
 $31=($29|0)==($30|0);
 if ($31) {
  __ZN14Dual_Resampler11mix_samplesER11Blip_BufferPs($this,$blip_buf,$out);
  __ZN11Blip_Buffer14remove_samplesEl($blip_buf,$3);
  return;
 } else {
  ___assert_fail(((3216)|0),((5736)|0),((67)|0),((9296)|0));
 }
}
function __ZNK14Fir_Resampler_7writtenEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this)|0);
 $4=(($this+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((__ZNK13blargg_vectorIsEixEj($3,$5))|0);
 $7=$2;
 $8=$6;
 $9=((($7)-($8))|0);
 $10=$9>>1;
 return (($10)|0);
}
function __ZN14Fir_Resampler_6bufferEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN14Fir_Resampler_5writeEl($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+($count<<1))|0);
 HEAP32[(($1)>>2)]=$3;
 $4=(($this)|0);
 $5=((__ZNK13blargg_vectorIsE3endEv($4))|0);
 $6=($3>>>0)>($5>>>0);
 if ($6) {
  ___assert_fail(((1248)|0),((760)|0),((96)|0),((9272)|0));
 } else {
  return;
 }
}
function __ZN13Fir_ResamplerILi12EE4readEPsi($this,$out_begin,$count){
 $this=($this)|0;
 $out_begin=($out_begin)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$skip_0=0,$imp_0=0,$remain_0=0,$in_0=0,$out_0=0,$_0=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0;
 var $57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0;
 var $77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0;
 var $97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0;
 var $117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0;
 var $137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0;
 var $157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0;
 var $177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$scevgep=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$_sum=0,$190=0,$191=0,$193=0,$194=0,$skip_1=0;
 var $imp_2=0,$remain_1=0,$196=0,$197=0,$198=0,$199=0,$200=0,$remain_2=0,$in_1=0,$out_1=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0;
 var $211=0,$212=0,$213=0,$214=0,$215=0,label=0;
 $1=$this;
 $2=((__ZNK13blargg_vectorIsE5beginEv($1))|0);
 $3=(($this+8)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($this+28)|0);
 $7=$6;
 $8=(($this+16)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($this+12)|0);
 $12=$11;
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((($13)-($10))|0);
 $15=(($this+32)|0);
 $16=$15;
 $17=((HEAP32[(($16)>>2)])|0);
 $18=$5;
 $19=$2;
 $20=((($18)-($19))|0);
 $21=($20|0)>46;
 if (!($21)) {
  $out_1=$out_begin;$in_1=$2;$remain_2=$14;
  $201=((HEAP32[(($12)>>2)])|0);
  $202=((($201)-($remain_2))|0);
  HEAP32[(($9)>>2)]=$202;
  $203=((HEAP32[(($4)>>2)])|0);
  $204=$203;
  $205=$in_1;
  $206=((($204)-($205))|0);
  $207=$206>>1;
  $208=((__ZNK13blargg_vectorIsEixEj($1,$207))|0);
  HEAP32[(($4)>>2)]=$208;
  $209=((__ZNK13blargg_vectorIsE5beginEv($1))|0);
  $210=$209;
  $211=$in_1;
  _memmove((($210)|0),(($211)|0),(($206)|0));
  $212=$out_1;
  $213=$out_begin;
  $214=((($212)-($213))|0);
  $215=$214>>1;
  return (($215)|0);
 }
 $23=((HEAP32[(($7)>>2)])|0);
 $24=$count>>1;
 $25=(($this+52+((($10)*(24))&-1))|0);
 $26=$23>>>($10>>>0);
 $27=((($5)-(48))|0);
 $28=(($this+52)|0);
 $_0=$24;$out_0=$out_begin;$in_0=$2;$remain_0=$14;$imp_0=$25;$skip_0=$26;
 while(1) {
  $30=((($_0)-(1))|0);
  $31=($30|0)<0;
  if ($31) {
   $out_1=$out_0;$in_1=$in_0;$remain_2=$remain_0;
   label = 906;
   break;
  }
  $32=((HEAP16[(($imp_0)>>1)])|0);
  $33=(($32<<16)>>16);
  $34=((HEAP16[(($in_0)>>1)])|0);
  $35=(($34<<16)>>16);
  $36=(Math_imul($35,$33)|0);
  $37=(($in_0+2)|0);
  $38=((HEAP16[(($37)>>1)])|0);
  $39=(($38<<16)>>16);
  $40=(Math_imul($39,$33)|0);
  $41=(($imp_0+2)|0);
  $42=((HEAP16[(($41)>>1)])|0);
  $43=(($42<<16)>>16);
  $44=(($imp_0+4)|0);
  $45=(($in_0+4)|0);
  $46=((HEAP16[(($45)>>1)])|0);
  $47=(($46<<16)>>16);
  $48=(Math_imul($47,$43)|0);
  $49=((($36)+($48))|0);
  $50=(($in_0+6)|0);
  $51=((HEAP16[(($50)>>1)])|0);
  $52=(($51<<16)>>16);
  $53=(Math_imul($52,$43)|0);
  $54=((($40)+($53))|0);
  $55=(($in_0+8)|0);
  $56=((HEAP16[(($44)>>1)])|0);
  $57=(($56<<16)>>16);
  $58=((HEAP16[(($55)>>1)])|0);
  $59=(($58<<16)>>16);
  $60=(Math_imul($59,$57)|0);
  $61=((($60)+($49))|0);
  $62=(($in_0+10)|0);
  $63=((HEAP16[(($62)>>1)])|0);
  $64=(($63<<16)>>16);
  $65=(Math_imul($64,$57)|0);
  $66=((($65)+($54))|0);
  $67=(($imp_0+6)|0);
  $68=((HEAP16[(($67)>>1)])|0);
  $69=(($68<<16)>>16);
  $70=(($imp_0+8)|0);
  $71=(($in_0+12)|0);
  $72=((HEAP16[(($71)>>1)])|0);
  $73=(($72<<16)>>16);
  $74=(Math_imul($73,$69)|0);
  $75=((($61)+($74))|0);
  $76=(($in_0+14)|0);
  $77=((HEAP16[(($76)>>1)])|0);
  $78=(($77<<16)>>16);
  $79=(Math_imul($78,$69)|0);
  $80=((($66)+($79))|0);
  $81=(($in_0+16)|0);
  $82=((HEAP16[(($70)>>1)])|0);
  $83=(($82<<16)>>16);
  $84=((HEAP16[(($81)>>1)])|0);
  $85=(($84<<16)>>16);
  $86=(Math_imul($85,$83)|0);
  $87=((($86)+($75))|0);
  $88=(($in_0+18)|0);
  $89=((HEAP16[(($88)>>1)])|0);
  $90=(($89<<16)>>16);
  $91=(Math_imul($90,$83)|0);
  $92=((($91)+($80))|0);
  $93=(($imp_0+10)|0);
  $94=((HEAP16[(($93)>>1)])|0);
  $95=(($94<<16)>>16);
  $96=(($imp_0+12)|0);
  $97=(($in_0+20)|0);
  $98=((HEAP16[(($97)>>1)])|0);
  $99=(($98<<16)>>16);
  $100=(Math_imul($99,$95)|0);
  $101=((($87)+($100))|0);
  $102=(($in_0+22)|0);
  $103=((HEAP16[(($102)>>1)])|0);
  $104=(($103<<16)>>16);
  $105=(Math_imul($104,$95)|0);
  $106=((($92)+($105))|0);
  $107=(($in_0+24)|0);
  $108=((HEAP16[(($96)>>1)])|0);
  $109=(($108<<16)>>16);
  $110=((HEAP16[(($107)>>1)])|0);
  $111=(($110<<16)>>16);
  $112=(Math_imul($111,$109)|0);
  $113=((($112)+($101))|0);
  $114=(($in_0+26)|0);
  $115=((HEAP16[(($114)>>1)])|0);
  $116=(($115<<16)>>16);
  $117=(Math_imul($116,$109)|0);
  $118=((($117)+($106))|0);
  $119=(($imp_0+14)|0);
  $120=((HEAP16[(($119)>>1)])|0);
  $121=(($120<<16)>>16);
  $122=(($imp_0+16)|0);
  $123=(($in_0+28)|0);
  $124=((HEAP16[(($123)>>1)])|0);
  $125=(($124<<16)>>16);
  $126=(Math_imul($125,$121)|0);
  $127=((($113)+($126))|0);
  $128=(($in_0+30)|0);
  $129=((HEAP16[(($128)>>1)])|0);
  $130=(($129<<16)>>16);
  $131=(Math_imul($130,$121)|0);
  $132=((($118)+($131))|0);
  $133=(($in_0+32)|0);
  $134=((HEAP16[(($122)>>1)])|0);
  $135=(($134<<16)>>16);
  $136=((HEAP16[(($133)>>1)])|0);
  $137=(($136<<16)>>16);
  $138=(Math_imul($137,$135)|0);
  $139=((($138)+($127))|0);
  $140=(($in_0+34)|0);
  $141=((HEAP16[(($140)>>1)])|0);
  $142=(($141<<16)>>16);
  $143=(Math_imul($142,$135)|0);
  $144=((($143)+($132))|0);
  $145=(($imp_0+18)|0);
  $146=((HEAP16[(($145)>>1)])|0);
  $147=(($146<<16)>>16);
  $148=(($imp_0+20)|0);
  $149=(($in_0+36)|0);
  $150=((HEAP16[(($149)>>1)])|0);
  $151=(($150<<16)>>16);
  $152=(Math_imul($151,$147)|0);
  $153=((($139)+($152))|0);
  $154=(($in_0+38)|0);
  $155=((HEAP16[(($154)>>1)])|0);
  $156=(($155<<16)>>16);
  $157=(Math_imul($156,$147)|0);
  $158=((($144)+($157))|0);
  $159=(($in_0+40)|0);
  $160=((HEAP16[(($148)>>1)])|0);
  $161=(($160<<16)>>16);
  $162=((HEAP16[(($159)>>1)])|0);
  $163=(($162<<16)>>16);
  $164=(Math_imul($163,$161)|0);
  $165=((($164)+($153))|0);
  $166=(($in_0+42)|0);
  $167=((HEAP16[(($166)>>1)])|0);
  $168=(($167<<16)>>16);
  $169=(Math_imul($168,$161)|0);
  $170=((($169)+($158))|0);
  $171=(($imp_0+22)|0);
  $172=((HEAP16[(($171)>>1)])|0);
  $173=(($172<<16)>>16);
  $174=(($in_0+44)|0);
  $175=((HEAP16[(($174)>>1)])|0);
  $176=(($175<<16)>>16);
  $177=(Math_imul($176,$173)|0);
  $178=((($165)+($177))|0);
  $179=(($in_0+46)|0);
  $180=((HEAP16[(($179)>>1)])|0);
  $181=(($180<<16)>>16);
  $182=(Math_imul($181,$173)|0);
  $183=((($170)+($182))|0);
  $scevgep=(($imp_0+24)|0);
  $184=((($remain_0)-(1))|0);
  $185=$178>>>15;
  $186=$183>>>15;
  $187=$skip_0<<1;
  $188=$187&2;
  $189=$skip_0>>>1;
  $_sum=((($188)+($17))|0);
  $190=(($in_0+($_sum<<1))|0);
  $191=($184|0)==0;
  if ($191) {
   $193=((HEAP32[(($7)>>2)])|0);
   $194=((HEAP32[(($12)>>2)])|0);
   $remain_1=$194;$imp_2=$28;$skip_1=$193;
  } else {
   $remain_1=$184;$imp_2=$scevgep;$skip_1=$189;
  }
  $196=(($185)&65535);
  HEAP16[(($out_0)>>1)]=$196;
  $197=(($186)&65535);
  $198=(($out_0+2)|0);
  HEAP16[(($198)>>1)]=$197;
  $199=(($out_0+4)|0);
  $200=($190>>>0)>($27>>>0);
  if ($200) {
   $out_1=$199;$in_1=$190;$remain_2=$remain_1;
   label = 907;
   break;
  } else {
   $_0=$30;$out_0=$199;$in_0=$190;$remain_0=$remain_1;$imp_0=$imp_2;$skip_0=$skip_1;
  }
 }
 if ((label|0) == 906) {
  $201=((HEAP32[(($12)>>2)])|0);
  $202=((($201)-($remain_2))|0);
  HEAP32[(($9)>>2)]=$202;
  $203=((HEAP32[(($4)>>2)])|0);
  $204=$203;
  $205=$in_1;
  $206=((($204)-($205))|0);
  $207=$206>>1;
  $208=((__ZNK13blargg_vectorIsEixEj($1,$207))|0);
  HEAP32[(($4)>>2)]=$208;
  $209=((__ZNK13blargg_vectorIsE5beginEv($1))|0);
  $210=$209;
  $211=$in_1;
  _memmove((($210)|0),(($211)|0),(($206)|0));
  $212=$out_1;
  $213=$out_begin;
  $214=((($212)-($213))|0);
  $215=$214>>1;
  return (($215)|0);
 }
 else if ((label|0) == 907) {
  $201=((HEAP32[(($12)>>2)])|0);
  $202=((($201)-($remain_2))|0);
  HEAP32[(($9)>>2)]=$202;
  $203=((HEAP32[(($4)>>2)])|0);
  $204=$203;
  $205=$in_1;
  $206=((($204)-($205))|0);
  $207=$206>>1;
  $208=((__ZNK13blargg_vectorIsEixEj($1,$207))|0);
  HEAP32[(($4)>>2)]=$208;
  $209=((__ZNK13blargg_vectorIsE5beginEv($1))|0);
  $210=$209;
  $211=$in_1;
  _memmove((($210)|0),(($211)|0),(($206)|0));
  $212=$out_1;
  $213=$out_begin;
  $214=((($212)-($213))|0);
  $215=$214>>1;
  return (($215)|0);
 }
  return 0;
}
function __ZNK13blargg_vectorIsE5beginEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN14Dual_Resampler11mix_samplesER11Blip_BufferPs($this,$blip_buf,$out){
 $this=($this)|0;
 $blip_buf=($blip_buf)|0;
 $out=($out)|0;
 var $sn=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$_in=0,$_020=0,$in_019=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$sext=0,$15=0,$16=0;
 var $extract_t15=0,$18=0,$19=0,$extract_t=0,$l_0_off0=0,$21=0,$22=0,$23=0,$24=0,$25=0,$sext16=0,$26=0,$27=0,$extract_t18=0,$29=0,$30=0,$extract_t17=0,$r_0_off0=0,$32=0,$33=0;
 var $34=0,$35=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $sn=((sp)|0);
 $1=((__ZN11Blip_Reader5beginER11Blip_Buffer($sn,$blip_buf))|0);
 $2=(($this+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=$3>>1;
 $5=($4|0)==0;
 if ($5) {
  __ZN11Blip_Reader3endER11Blip_Buffer($sn,$blip_buf);
  STACKTOP=sp;return;
 }
 $6=(($this+4)|0);
 $7=((__ZNK13blargg_vectorIsE5beginEv($6))|0);
 $in_019=$7;$_020=$out;$_in=$4;
 while(1) {
  $9=((($_in)-(1))|0);
  $10=((__ZNK11Blip_Reader4readEv($sn))|0);
  $11=((HEAP16[(($in_019)>>1)])|0);
  $12=(($11<<16)>>16);
  $13=$12<<1;
  $14=((($13)+($10))|0);
  $sext=$14<<16;
  $15=$sext>>16;
  $16=($15|0)==($14|0);
  $extract_t15=(($14)&65535);
  if ($16) {
   $l_0_off0=$extract_t15;
  } else {
   $18=$14>>24;
   $19=(((32767)-($18))|0);
   $extract_t=(($19)&65535);
   $l_0_off0=$extract_t;
  }
  __ZN11Blip_Reader4nextEi($sn,$1);
  $21=(($in_019+2)|0);
  $22=((HEAP16[(($21)>>1)])|0);
  $23=(($22<<16)>>16);
  $24=$23<<1;
  $25=((($24)+($10))|0);
  $sext16=$25<<16;
  $26=$sext16>>16;
  $27=($26|0)==($25|0);
  $extract_t18=(($25)&65535);
  if ($27) {
   $r_0_off0=$extract_t18;
  } else {
   $29=$25>>24;
   $30=(((32767)-($29))|0);
   $extract_t17=(($30)&65535);
   $r_0_off0=$extract_t17;
  }
  $32=(($in_019+4)|0);
  HEAP16[(($_020)>>1)]=$l_0_off0;
  $33=(($_020+2)|0);
  HEAP16[(($33)>>1)]=$r_0_off0;
  $34=(($_020+4)|0);
  $35=($9|0)==0;
  if ($35) {
   break;
  } else {
   $in_019=$32;$_020=$34;$_in=$9;
  }
 }
 __ZN11Blip_Reader3endER11Blip_Buffer($sn,$blip_buf);
 STACKTOP=sp;return;
}
function __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($this,$count,$out,$blip_buf){
 $this=($this)|0;
 $count=($count)|0;
 $out=($out)|0;
 $blip_buf=($blip_buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$count_=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$_023_ph=0,$_0_ph=0,$18=0;
 var $19=0,$_025=0,$_02324=0,$20=0,$21=0,$22=0,$23=0,$_0_lcssa=0,$_023_lcssa=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+20)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($2)-($4))|0);
 $6=($2|0)==($4|0);
 if ($6) {
  $_0_ph=$count;$_023_ph=$out;
 } else {
  $8=($5|0)>($count|0);
  $count_=($8?$count:$5);
  $9=((($count)-($count_))|0);
  $10=$out;
  $11=(($this+4)|0);
  $12=((__ZNK13blargg_vectorIsEixEj($11,$4))|0);
  $13=$12;
  $14=$count_<<1;
  (_memcpy((($10)|0), (($13)|0), $14)|0);
  $15=(($out+($count_<<1))|0);
  $16=((HEAP32[(($3)>>2)])|0);
  $17=((($16)+($count_))|0);
  HEAP32[(($3)>>2)]=$17;
  $_0_ph=$9;$_023_ph=$15;
 }
 $18=((HEAP32[(($1)>>2)])|0);
 $19=($_0_ph|0)<($18|0);
 if ($19) {
  $_023_lcssa=$_023_ph;$_0_lcssa=$_0_ph;
 } else {
  $_02324=$_023_ph;$_025=$_0_ph;
  while(1) {
   __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$_02324);
   $20=((HEAP32[(($1)>>2)])|0);
   $21=(($_02324+($20<<1))|0);
   $22=((($_025)-($20))|0);
   $23=($22|0)<($20|0);
   if ($23) {
    $_023_lcssa=$21;$_0_lcssa=$22;
    break;
   } else {
    $_02324=$21;$_025=$22;
   }
  }
 }
 $24=($_0_lcssa|0)==0;
 if ($24) {
  return;
 }
 $26=(($this+4)|0);
 $27=((__ZNK13blargg_vectorIsE5beginEv($26))|0);
 __ZN14Dual_Resampler11play_frame_ER11Blip_BufferPs($this,$blip_buf,$27);
 HEAP32[(($3)>>2)]=$_0_lcssa;
 $28=$_023_lcssa;
 $29=((__ZNK13blargg_vectorIsE5beginEv($26))|0);
 $30=$29;
 $31=$_0_lcssa<<1;
 (_memcpy((($28)|0), (($30)|0), $31)|0);
 return;
}
function __ZNK13blargg_vectorIsEixEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)<($n>>>0);
 if ($3) {
  ___assert_fail(((2096)|0),((1632)|0),((51)|0),((8408)|0));
  return ((0)|0);
 } else {
  $6=(($this)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+($n<<1))|0);
  return (($8)|0);
 }
  return 0;
}
function __ZN11Blip_Reader5beginER11Blip_Buffer($this,$blip_buf){
 $this=($this)|0;
 $blip_buf=($blip_buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=(($blip_buf+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($blip_buf+16)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($this+4)|0);
 HEAP32[(($6)>>2)]=$5;
 $7=(($blip_buf+20)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 return (($8)|0);
}
function __ZNK11Blip_Reader4readEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2>>14;
 return (($3)|0);
}
function __ZN11Blip_Reader4nextEi($this,$bass_shift){
 $this=($this)|0;
 $bass_shift=($bass_shift)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 HEAP32[(($1)>>2)]=$3;
 $4=((HEAP32[(($2)>>2)])|0);
 $5=(($this+4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$6>>($bass_shift|0);
 $8=((($6)+($4))|0);
 $9=((($8)-($7))|0);
 HEAP32[(($5)>>2)]=$9;
 return;
}
function __ZN11Blip_Reader3endER11Blip_Buffer($this,$b){
 $this=($this)|0;
 $b=($b)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($b+16)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZN13blargg_vectorIsED2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 _free($3);
 return;
}
function __ZN13Fir_ResamplerILi12EEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=$this;
 $2=(($this+52)|0);
 __ZN14Fir_Resampler_C2EiPs($1,12,$2);
 return;
}
function __ZN13blargg_vectorIsEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZNK13blargg_vectorIsE3endEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+($4<<1))|0);
 return (($5)|0);
}
function __ZN13Fir_ResamplerILi12EED2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN14Fir_Resampler_D2Ev($1);
 return;
}
function __ZN14Effects_Buffer8config_tC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this)|0);
 HEAPF64[(($1)>>3)]=-0.15000000596046448;
 $2=(($this+8)|0);
 HEAPF64[(($2)>>3)]=0.15000000596046448;
 $3=(($this+32)|0);
 HEAPF64[(($3)>>3)]=88.0;
 $4=(($this+48)|0);
 HEAPF64[(($4)>>3)]=0.11999999731779099;
 $5=(($this+16)|0);
 HEAPF64[(($5)>>3)]=61.0;
 $6=(($this+24)|0);
 HEAPF64[(($6)>>3)]=0.10000000149011612;
 $7=(($this+40)|0);
 HEAPF64[(($7)>>3)]=18.0;
 $8=(($this+56)|0);
 HEAP8[($8)]=0;
 return;
}
function __ZN14Effects_Buffer9set_depthEd($this,$d){
 $this=($this)|0;
 $d=+($d);
 var $c=0,$1=.0,$2=.0,$3=.0,$4=0,$5=.0,$6=.0,$7=0,$8=0,$9=0,$10=0,$f_0=.0,$11=.0,$12=.0,$13=0,$14=.0,$15=.0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;
 $c=((sp)|0);
 $1=$d;
 __ZN14Effects_Buffer8config_tC2Ev($c);
 $2=($1)*((-0.6000000238418579));
 $3=$2;
 $4=(($c)|0);
 HEAPF64[(($4)>>3)]=$3;
 $5=($1)*((0.6000000238418579));
 $6=$5;
 $7=(($c+8)|0);
 HEAPF64[(($7)>>3)]=$6;
 $8=(($c+32)|0);
 HEAPF64[(($8)>>3)]=88.0;
 $9=(($c+16)|0);
 HEAPF64[(($9)>>3)]=61.0;
 $10=$1>(0.5);
 $f_0=($10?(0.5):$1);
 $11=($f_0)*((0.5));
 $12=$11;
 $13=(($c+48)|0);
 HEAPF64[(($13)>>3)]=$12;
 $14=($f_0)*((0.30000001192092896));
 $15=$14;
 $16=(($c+24)|0);
 HEAPF64[(($16)>>3)]=$15;
 $17=(($c+40)|0);
 HEAPF64[(($17)>>3)]=18.0;
 $18=$d>(0.0);
 $19=(($c+56)|0);
 $20=($18&1);
 HEAP8[($19)]=$20;
 $21=$this;
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+44)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 FUNCTION_TABLE_vii[($24)&63]($this,$c);
 STACKTOP=sp;return;
}
function __ZN14Effects_BufferC2Eb($this,$center_only){
 $this=($this)|0;
 $center_only=($center_only)|0;
 var $1=0,$2=0,$3=0,$5=0,$_lcssa=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$18=0,$19=0,$_15=0,$_1=0,$20$0=0,$20$1=0,$21$0=0,$21$1=0,$25=0;
 var $27=0,$29=0,$31=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$8$0=0,$8$1=0,$17$0=0,$17$1=0,$23$0=0,$23$1=0;
 var label=0;
 $1=(($this)|0);
 __ZN12Multi_BufferC2Ei($1,2);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=14344;
 $3=(($this+20)|0);
 __ZN11Blip_BufferC2Ev($3);
 $5=(($this+64)|0);
 __ZN11Blip_BufferC2Ev($5);
 $25=(($this+108)|0);
 __ZN11Blip_BufferC2Ev($25);
 $27=(($this+152)|0);
 __ZN11Blip_BufferC2Ev($27);
 $29=(($this+196)|0);
 __ZN11Blip_BufferC2Ev($29);
 $31=(($this+240)|0);
 __ZN11Blip_BufferC2Ev($31);
 $33=(($this+284)|0);
 __ZN11Blip_BufferC2Ev($33);
 $35=(($this+368)|0);
 __ZN14Effects_Buffer8config_tC2Ev($35);
 $36=(($this+448)|0);
 __ZN13blargg_vectorIsEC1Ev($36);
 $37=(($this+456)|0);
 __ZN13blargg_vectorIsEC1Ev($37);
 $38=($center_only?3:7);
 $39=(($this+440)|0);
 HEAP32[(($39)>>2)]=$38;
 $40=(($this+468)|0);
 HEAP32[(($40)>>2)]=0;
 $41=(($this+464)|0);
 HEAP32[(($41)>>2)]=0;
 $42=(($this+432)|0);
 HEAP32[(($42)>>2)]=0;
 $43=(($this+436)|0);
 HEAP32[(($43)>>2)]=0;
 $44=(($this+444)|0);
 HEAP8[($44)]=0;
 __ZN14Effects_Buffer9set_depthEd($this,0.0);
 return;
}
function __ZN14Effects_BufferD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN14Effects_BufferD2Ev($this);
 $2=$this;
 __ZN12Multi_BufferdlEPv($2);
 return;
}
function __ZN14Effects_BufferD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$_lcssa=0,$10=0,$11=0,$12=0,$14=0,$18=0,$20=0,$22=0,$24=0,$26=0,$9$0=0,$9$1=0,$16$0=0,$16$1=0;
 var label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=14344;
 $2=(($this+456)|0);
 __ZN13blargg_vectorIsED1Ev($2);
 $3=(($this+448)|0);
 __ZN13blargg_vectorIsED1Ev($3);
 $4=(($this+20)|0);
 $5=(($this+284)|0);
 __ZN11Blip_BufferD2Ev($5);
 $7=(($this+240)|0);
 __ZN11Blip_BufferD2Ev($7);
 $18=(($this+196)|0);
 __ZN11Blip_BufferD2Ev($18);
 $20=(($this+152)|0);
 __ZN11Blip_BufferD2Ev($20);
 $22=(($this+108)|0);
 __ZN11Blip_BufferD2Ev($22);
 $24=(($this+64)|0);
 __ZN11Blip_BufferD2Ev($24);
 $26=(($this+20)|0);
 __ZN11Blip_BufferD2Ev($26);
 return;
}
function __ZN14Effects_Buffer15set_sample_rateEli($this,$rate,$msec){
 $this=($this)|0;
 $rate=($rate)|0;
 $msec=($msec)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$i_0=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$_0=0,label=0;
 $1=(($this+456)|0);
 $2=((__ZNK13blargg_vectorIsE4sizeEv($1))|0);
 $3=($2|0)==0;
 do {
  if ($3) {
   $5=((__ZN13blargg_vectorIsE6resizeEj($1,4096))|0);
   $6=($5|0)==0;
   if ($6) {
    break;
   } else {
    $_0=$5;
   }
   return (($_0)|0);
  }
 } while(0);
 $8=(($this+448)|0);
 $9=((__ZNK13blargg_vectorIsE4sizeEv($8))|0);
 $10=($9|0)==0;
 do {
  if ($10) {
   $12=((__ZN13blargg_vectorIsE6resizeEj($8,16384))|0);
   $13=($12|0)==0;
   if ($13) {
    break;
   } else {
    $_0=$12;
   }
   return (($_0)|0);
  }
 } while(0);
 $14=(($this+440)|0);
 $i_0=0;
 while(1) {
  $16=((HEAP32[(($14)>>2)])|0);
  $17=($i_0|0)<($16|0);
  if (!($17)) {
   break;
  }
  $19=(($this+20+((($i_0)*(44))&-1))|0);
  $20=((__ZN11Blip_Buffer15set_sample_rateEli($19,$rate,$msec))|0);
  $21=($20|0)==0;
  $22=((($i_0)+(1))|0);
  if ($21) {
   $i_0=$22;
  } else {
   $_0=$20;
   label = 985;
   break;
  }
 }
 if ((label|0) == 985) {
  return (($_0)|0);
 }
 $24=$this;
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+44)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($this+368)|0);
 FUNCTION_TABLE_vii[($27)&63]($this,$28);
 $29=$this;
 $30=((HEAP32[(($29)>>2)])|0);
 $31=(($30+28)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 FUNCTION_TABLE_vi[($32)&255]($this);
 $33=(($this)|0);
 $34=(($this+20)|0);
 $35=((__ZNK11Blip_Buffer11sample_rateEv($34))|0);
 $36=((__ZNK11Blip_Buffer6lengthEv($34))|0);
 $37=((__ZN12Multi_Buffer15set_sample_rateEli($33,$35,$36))|0);
 $_0=0;
 return (($_0)|0);
}
function __ZN12Multi_Buffer15set_sample_rateEli($this,$rate,$msec){
 $this=($this)|0;
 $rate=($rate)|0;
 $msec=($msec)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=$rate;
 $2=(($this+12)|0);
 HEAP32[(($2)>>2)]=$msec;
 return ((0)|0);
}
function __ZNK11Blip_Buffer11sample_rateEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZNK11Blip_Buffer6lengthEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+36)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN14Effects_Buffer10clock_rateEl($this,$rate){
 $this=($this)|0;
 $rate=($rate)|0;
 var $1=0,$2=0,$3=0,$i_04=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+440)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>0;
 if ($3) {
  $i_04=0;
 } else {
  return;
 }
 while(1) {
  $4=(($this+20+((($i_04)*(44))&-1))|0);
  __ZN11Blip_Buffer10clock_rateEl($4,$rate);
  $5=((($i_04)+(1))|0);
  $6=((HEAP32[(($1)>>2)])|0);
  $7=($5|0)<($6|0);
  if ($7) {
   $i_04=$5;
  } else {
   break;
  }
 }
 return;
}
function __ZN14Effects_Buffer9bass_freqEi($this,$freq){
 $this=($this)|0;
 $freq=($freq)|0;
 var $1=0,$2=0,$3=0,$i_04=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+440)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>0;
 if ($3) {
  $i_04=0;
 } else {
  return;
 }
 while(1) {
  $4=(($this+20+((($i_04)*(44))&-1))|0);
  __ZN11Blip_Buffer9bass_freqEi($4,$freq);
  $5=((($i_04)+(1))|0);
  $6=((HEAP32[(($1)>>2)])|0);
  $7=($5|0)<($6|0);
  if ($7) {
   $i_04=$5;
  } else {
   break;
  }
 }
 return;
}
function __ZN14Effects_Buffer5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$i_03=0,$19=0,$20=0,$21=0,$22=0;
 var label=0;
 $1=(($this+432)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+436)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+456)|0);
 $4=((__ZNK13blargg_vectorIsE4sizeEv($3))|0);
 $5=($4|0)==0;
 if (!($5)) {
  $7=((__ZNK13blargg_vectorIsEixEj($3,0))|0);
  $8=$7;
  _memset((((($8)|0))|0), ((((0)|0))|0), ((((8192)|0))|0));
 }
 $10=(($this+448)|0);
 $11=((__ZNK13blargg_vectorIsE4sizeEv($10))|0);
 $12=($11|0)==0;
 if (!($12)) {
  $14=((__ZNK13blargg_vectorIsEixEj($10,0))|0);
  $15=$14;
  _memset((((($15)|0))|0), ((((0)|0))|0), ((((32768)|0))|0));
 }
 $16=(($this+440)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=($17|0)>0;
 if ($18) {
  $i_03=0;
 } else {
  return;
 }
 while(1) {
  $19=(($this+20+((($i_03)*(44))&-1))|0);
  __ZN11Blip_Buffer5clearEi($19,1);
  $20=((($i_03)+(1))|0);
  $21=((HEAP32[(($16)>>2)])|0);
  $22=($20|0)<($21|0);
  if ($22) {
   $i_03=$20;
  } else {
   break;
  }
 }
 return;
}
function __ZN14Effects_Buffer6configERKNS_8config_tE($this,$cfg){
 $this=($this)|0;
 $cfg=($cfg)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$29=0,$30=.0,$31=.0,$32=.0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=.0,$40=.0,$41=.0,$42=0,$43=0,$44=0,$45=0;
 var $46=0,$47=0,$48=.0,$49=.0,$50=.0,$51=0,$52=0,$53=0,$54=.0,$55=.0,$56=.0,$57=0,$58=0,$59=0,$60=.0,$61=.0,$62=0,$63=.0,$64=.0,$65=0;
 var $66=0,$67=.0,$68=.0,$69=.0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=.0,$83=.0,$84=0,$85=.0;
 var $86=.0,$87=0,$88=0,$89=0,$90=0,$91=0,$_neg18=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0;
 var $105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$124=0,$125=0;
 var $126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,label=0;
 $1=(($this)|0);
 __ZN12Multi_Buffer16channels_changedEv($1);
 $2=(($this+368)|0);
 $3=(($this+424)|0);
 $4=((HEAP8[($3)])|0);
 $5=$4&1;
 $6=(($5<<24)>>24)==0;
 do {
  if ($6) {
   $8=(($cfg+56)|0);
   $9=((HEAP8[($8)])|0);
   $10=$9&1;
   $11=(($10<<24)>>24)==0;
   if ($11) {
    break;
   }
   $13=(($this+456)|0);
   $14=((__ZNK13blargg_vectorIsE4sizeEv($13))|0);
   $15=($14|0)==0;
   if ($15) {
    break;
   }
   $17=((__ZNK13blargg_vectorIsEixEj($13,0))|0);
   $18=$17;
   _memset((((($18)|0))|0), ((((0)|0))|0), ((((8192)|0))|0));
   $19=(($this+448)|0);
   $20=((__ZNK13blargg_vectorIsEixEj($19,0))|0);
   $21=$20;
   _memset((((($21)|0))|0), ((((0)|0))|0), ((((32768)|0))|0));
  }
 } while(0);
 $23=$2;
 $24=$cfg;
 HEAP32[(($23)>>2)]=((HEAP32[(($24)>>2)])|0);HEAP32[((($23)+(4))>>2)]=((HEAP32[((($24)+(4))>>2)])|0);HEAP32[((($23)+(8))>>2)]=((HEAP32[((($24)+(8))>>2)])|0);HEAP32[((($23)+(12))>>2)]=((HEAP32[((($24)+(12))>>2)])|0);HEAP32[((($23)+(16))>>2)]=((HEAP32[((($24)+(16))>>2)])|0);HEAP32[((($23)+(20))>>2)]=((HEAP32[((($24)+(20))>>2)])|0);HEAP32[((($23)+(24))>>2)]=((HEAP32[((($24)+(24))>>2)])|0);HEAP32[((($23)+(28))>>2)]=((HEAP32[((($24)+(28))>>2)])|0);HEAP32[((($23)+(32))>>2)]=((HEAP32[((($24)+(32))>>2)])|0);HEAP32[((($23)+(36))>>2)]=((HEAP32[((($24)+(36))>>2)])|0);HEAP32[((($23)+(40))>>2)]=((HEAP32[((($24)+(40))>>2)])|0);HEAP32[((($23)+(44))>>2)]=((HEAP32[((($24)+(44))>>2)])|0);HEAP32[((($23)+(48))>>2)]=((HEAP32[((($24)+(48))>>2)])|0);HEAP32[((($23)+(52))>>2)]=((HEAP32[((($24)+(52))>>2)])|0);;HEAP8[((($23)+(56))|0)]=((HEAP8[((($24)+(56))|0)])|0);
 $25=((HEAP8[($3)])|0);
 $26=$25&1;
 $27=(($26<<24)>>24)==0;
 if ($27) {
  $111=(($this+20)|0);
  $112=(($this+64)|0);
  $113=(($this+108)|0);
  $114=(($this+328)|0);
  HEAP32[(($114)>>2)]=$111;
  $115=(($this+332)|0);
  HEAP32[(($115)>>2)]=$112;
  $116=(($this+336)|0);
  HEAP32[(($116)>>2)]=$113;
  $117=(($this+340)|0);
  HEAP32[(($117)>>2)]=$111;
  $118=(($this+344)|0);
  HEAP32[(($118)>>2)]=$112;
  $119=(($this+348)|0);
  HEAP32[(($119)>>2)]=$113;
  $120=(($this+352)|0);
  HEAP32[(($120)>>2)]=$111;
  $121=(($this+356)|0);
  HEAP32[(($121)>>2)]=$112;
  $122=(($this+360)|0);
  HEAP32[(($122)>>2)]=$113;
 } else {
  $29=(($2)|0);
  $30=(+(HEAPF64[(($29)>>3)]));
  $31=($30)*((32768.0));
  $32=($31)+((0.5));
  $33=(~~($32));
  $34=(((32768)-($33))|0);
  $35=(($this+472)|0);
  HEAP32[(($35)>>2)]=$34;
  $36=(((65536)-($34))|0);
  $37=(($this+476)|0);
  HEAP32[(($37)>>2)]=$36;
  $38=(($this+376)|0);
  $39=(+(HEAPF64[(($38)>>3)]));
  $40=($39)*((32768.0));
  $41=($40)+((0.5));
  $42=(~~($41));
  $43=(((32768)-($42))|0);
  $44=(($this+480)|0);
  HEAP32[(($44)>>2)]=$43;
  $45=(((65536)-($43))|0);
  $46=(($this+484)|0);
  HEAP32[(($46)>>2)]=$45;
  $47=(($this+416)|0);
  $48=(+(HEAPF64[(($47)>>3)]));
  $49=($48)*((32768.0));
  $50=($49)+((0.5));
  $51=(~~($50));
  $52=(($this+508)|0);
  HEAP32[(($52)>>2)]=$51;
  $53=(($this+392)|0);
  $54=(+(HEAPF64[(($53)>>3)]));
  $55=($54)*((32768.0));
  $56=($55)+((0.5));
  $57=(~~($56));
  $58=(($this+496)|0);
  HEAP32[(($58)>>2)]=$57;
  $59=(($this+408)|0);
  $60=(+(HEAPF64[(($59)>>3)]));
  $61=($60)*((0.0005));
  $62=((__ZNK12Multi_Buffer11sample_rateEv($1))|0);
  $63=(+((($62|0))|0));
  $64=($61)*($63);
  $65=(~~($64));
  $66=(($this+400)|0);
  $67=(+(HEAPF64[(($66)>>3)]));
  $68=($67)*((0.001));
  $69=($63)*($68);
  $70=(~~($69));
  $71=((($70)-($65))|0);
  $72=$71<<1;
  $73=(((16384)-($72))|0);
  $74=((__Z9pin_rangeiii($73,16382,0))|0);
  $75=(($this+500)|0);
  HEAP32[(($75)>>2)]=$74;
  $76=((($70)+($65))|0);
  $77=$76<<1;
  $78=(((16385)-($77))|0);
  $79=((__Z9pin_rangeiii($78,16383,1))|0);
  $80=(($this+504)|0);
  HEAP32[(($80)>>2)]=$79;
  $81=(($this+384)|0);
  $82=(+(HEAPF64[(($81)>>3)]));
  $83=($82)*((0.001));
  $84=((__ZNK12Multi_Buffer11sample_rateEv($1))|0);
  $85=(+((($84|0))|0));
  $86=($83)*($85);
  $87=(~~($86));
  $88=((($65)+(4095))|0);
  $89=((($88)-($87))|0);
  $90=((__Z9pin_rangeiii($89,4095,0))|0);
  $91=(($this+488)|0);
  HEAP32[(($91)>>2)]=$90;
  $_neg18=(((4095)-($65))|0);
  $92=((($_neg18)-($87))|0);
  $93=((__Z9pin_rangeiii($92,4095,0))|0);
  $94=(($this+492)|0);
  HEAP32[(($94)>>2)]=$93;
  $95=(($this+20)|0);
  $96=(($this+328)|0);
  HEAP32[(($96)>>2)]=$95;
  $97=(($this+152)|0);
  $98=(($this+332)|0);
  HEAP32[(($98)>>2)]=$97;
  $99=(($this+196)|0);
  $100=(($this+336)|0);
  HEAP32[(($100)>>2)]=$99;
  $101=(($this+64)|0);
  $102=(($this+340)|0);
  HEAP32[(($102)>>2)]=$101;
  $103=(($this+344)|0);
  HEAP32[(($103)>>2)]=$97;
  $104=(($this+348)|0);
  HEAP32[(($104)>>2)]=$99;
  $105=(($this+108)|0);
  $106=(($this+352)|0);
  HEAP32[(($106)>>2)]=$105;
  $107=(($this+240)|0);
  $108=(($this+356)|0);
  HEAP32[(($108)>>2)]=$107;
  $109=(($this+284)|0);
  $110=(($this+360)|0);
  HEAP32[(($110)>>2)]=$109;
 }
 $124=(($this+440)|0);
 $125=((HEAP32[(($124)>>2)])|0);
 $126=($125|0)<7;
 if (!($126)) {
  return;
 }
 $127=(($this+328)|0);
 $128=((HEAP32[(($127)>>2)])|0);
 $129=(($this+332)|0);
 HEAP32[(($129)>>2)]=$128;
 $130=((HEAP32[(($127)>>2)])|0);
 $131=(($this+336)|0);
 HEAP32[(($131)>>2)]=$130;
 $132=(($this+340)|0);
 $133=((HEAP32[(($132)>>2)])|0);
 $134=(($this+344)|0);
 HEAP32[(($134)>>2)]=$133;
 $135=((HEAP32[(($132)>>2)])|0);
 $136=(($this+348)|0);
 HEAP32[(($136)>>2)]=$135;
 $137=(($this+352)|0);
 $138=((HEAP32[(($137)>>2)])|0);
 $139=(($this+356)|0);
 HEAP32[(($139)>>2)]=$138;
 $140=((HEAP32[(($137)>>2)])|0);
 $141=(($this+360)|0);
 HEAP32[(($141)>>2)]=$140;
 return;
}
function __ZN12Multi_Buffer16channels_changedEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(1))|0);
 HEAP32[(($1)>>2)]=$3;
 return;
}
function __ZNK12Multi_Buffer11sample_rateEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __Z9pin_rangeiii($n,$max,$min){
 $n=($n)|0;
 $max=($max)|0;
 $min=($min)|0;
 var $1=0,$3=0,$max_n=0,$_0=0,label=0;
 $1=($n|0)<($min|0);
 if ($1) {
  $_0=$min;
 } else {
  $3=($n|0)>($max|0);
  $max_n=($3?$max:$n);
  $_0=$max_n;
 }
 return (($_0)|0);
}
function __ZN14Effects_Buffer7channelEii($agg_result,$this,$i,$type){
 $agg_result=($agg_result)|0;
 $this=($this)|0;
 $i=($i)|0;
 $type=($type)|0;
 var $1=0,$3=0,$4=0,$_=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$_7=0,$out_0=0,$14=0,$15=0,$16=0,label=0;
 $1=($type|0)==0;
 do {
  if ($1) {
   $3=(((($i|0))%(5))&-1);
   $4=($3|0)>2;
   $_=($4?2:$3);
   $out_0=$_;
  } else {
   $6=$type&512;
   $7=($6|0)==0;
   if (!($7)) {
    $out_0=2;
    break;
   }
   $9=$type&255;
   $10=(((($9>>>0))%(3))&-1);
   $11=($10|0)==0;
   $12=$type&1;
   $_7=($11?2:$12);
   $out_0=$_7;
  }
 } while(0);
 $14=(($this+328+((($out_0)*(12))&-1))|0);
 $15=$agg_result;
 $16=$14;
 HEAP32[(($15)>>2)]=((HEAP32[(($16)>>2)])|0);HEAP32[((($15)+(4))>>2)]=((HEAP32[((($16)+(4))>>2)])|0);HEAP32[((($15)+(8))>>2)]=((HEAP32[((($16)+(8))>>2)])|0);
 return;
}
function __ZN14Effects_Buffer9end_frameEi($this,$clock_count){
 $this=($this)|0;
 $clock_count=($clock_count)|0;
 var $1=0,$2=0,$3=0,$bufs_used_08=0,$i_07=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_lcssa=0,$bufs_used_0_lcssa=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0;
 var $17=0,$18=0,$or_cond=0,$20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0;
 var label=0;
 $1=(($this+440)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>0;
 if ($3) {
  $i_07=0;$bufs_used_08=0;
  while(1) {
   $4=(($this+20+((($i_07)*(44))&-1))|0);
   $5=((__ZN11Blip_Buffer14clear_modifiedEv($4))|0);
   $6=$5<<$i_07;
   $7=$6|$bufs_used_08;
   __ZN11Blip_Buffer9end_frameEi($4,$clock_count);
   $8=((($i_07)+(1))|0);
   $9=((HEAP32[(($1)>>2)])|0);
   $10=($8|0)<($9|0);
   if ($10) {
    $i_07=$8;$bufs_used_08=$7;
   } else {
    $bufs_used_0_lcssa=$7;$_lcssa=$9;
    break;
   }
  }
 } else {
  $bufs_used_0_lcssa=0;$_lcssa=$2;
 }
 $11=(($this+424)|0);
 $12=((HEAP8[($11)])|0);
 $13=$12&1;
 $14=(($13<<24)>>24)!=0;
 $15=($14?120:6);
 $16=$15&$bufs_used_0_lcssa;
 $17=($16|0)!=0;
 $18=($_lcssa|0)==7;
 $or_cond=$17&$18;
 if ($or_cond) {
  $20=(($this+20)|0);
  $21=((__ZNK11Blip_Buffer13samples_availEv($20))|0);
  $22=((($21)+(8))|0);
  $23=(($this+432)|0);
  HEAP32[(($23)>>2)]=$22;
 }
 $25=(($this+444)|0);
 $26=((HEAP8[($25)])|0);
 $27=$26&1;
 $28=(($27<<24)>>24)==0;
 do {
  if ($28) {
   $30=((HEAP8[($11)])|0);
   $31=$30&1;
   $32=(($31<<24)>>24)==0;
   if (!($32)) {
    break;
   }
   $39=((HEAP8[($11)])|0);
   $40=$39&1;
   HEAP8[($25)]=$40;
   return;
  }
 } while(0);
 $34=(($this+20)|0);
 $35=((__ZNK11Blip_Buffer13samples_availEv($34))|0);
 $36=((($35)+(8))|0);
 $37=(($this+436)|0);
 HEAP32[(($37)>>2)]=$36;
 $39=((HEAP8[($11)])|0);
 $40=$39&1;
 HEAP8[($25)]=$40;
 return;
}
function __ZN11Blip_Buffer14clear_modifiedEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 HEAP32[(($1)>>2)]=0;
 return (($2)|0);
}
function __ZNK14Effects_Buffer13samples_availEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+20)|0);
 $2=((__ZNK11Blip_Buffer13samples_availEv($1))|0);
 $3=$2<<1;
 return (($3)|0);
}
function __ZN14Effects_Buffer12read_samplesEPsl($this,$out,$total_samples){
 $this=($this)|0;
 $out=($out)|0;
 $total_samples=($total_samples)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,$_=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$remain_126=0,$_025=0,$17=0,$18=0,$19=0,$21=0;
 var $_remain_1=0,$22=0,$23=0,$27=0,$28=0,$active_bufs_0=0,$count_1=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$_23=0,$38=0,$39=0,$40=0,$storemerge=0,$41=0,$42=0;
 var $i_024=0,$43=0,$44=0,$48=0,$49=0,$50=0,$51=0,label=0;
 $1=$total_samples&1;
 $2=($1|0)==0;
 if (!($2)) {
  ___assert_fail(((520)|0),((5568)|0),((251)|0),((9280)|0));
  return ((0)|0);
 }
 $5=(($this+20)|0);
 $6=((__ZNK11Blip_Buffer13samples_availEv($5))|0);
 $7=$total_samples>>1;
 $8=($6|0)>($7|0);
 $_=($8?$7:$6);
 $9=($_|0)==0;
 if ($9) {
  $51=$_<<1;
  return (($51)|0);
 }
 $10=(($this+440)|0);
 $11=(($this+436)|0);
 $12=(($this+432)|0);
 $13=(($this+432)|0);
 $14=(($this+432)|0);
 $_025=$out;$remain_126=$_;
 while(1) {
  $17=((HEAP32[(($10)>>2)])|0);
  $18=((HEAP32[(($11)>>2)])|0);
  $19=($18|0)==0;
  do {
   if ($19) {
    $27=((HEAP32[(($12)>>2)])|0);
    $28=($27|0)==0;
    if ($28) {
     __ZN14Effects_Buffer8mix_monoEPsi($this,$_025,$remain_126);
     $count_1=$remain_126;$active_bufs_0=1;
     break;
    } else {
     __ZN14Effects_Buffer10mix_stereoEPsi($this,$_025,$remain_126);
     $count_1=$remain_126;$active_bufs_0=3;
     break;
    }
   } else {
    $21=($remain_126|0)>($18|0);
    $_remain_1=($21?$18:$remain_126);
    $22=((HEAP32[(($14)>>2)])|0);
    $23=($22|0)==0;
    if ($23) {
     __ZN14Effects_Buffer17mix_mono_enhancedEPsi($this,$_025,$_remain_1);
     $count_1=$_remain_1;$active_bufs_0=3;
     break;
    } else {
     __ZN14Effects_Buffer12mix_enhancedEPsi($this,$_025,$_remain_1);
     $count_1=$_remain_1;$active_bufs_0=$17;
     break;
    }
   }
  } while(0);
  $32=$count_1<<1;
  $33=(($_025+($32<<1))|0);
  $34=((($remain_126)-($count_1))|0);
  $35=((HEAP32[(($13)>>2)])|0);
  $36=((($35)-($count_1))|0);
  $37=($36|0)<0;
  $_23=($37?0:$36);
  HEAP32[(($13)>>2)]=$_23;
  $38=((HEAP32[(($11)>>2)])|0);
  $39=((($38)-($count_1))|0);
  $40=($39|0)<0;
  $storemerge=($40?0:$39);
  HEAP32[(($11)>>2)]=$storemerge;
  $41=((HEAP32[(($10)>>2)])|0);
  $42=($41|0)>0;
  if ($42) {
   $i_024=0;
   while(1) {
    $43=($i_024|0)<($active_bufs_0|0);
    $44=(($this+20+((($i_024)*(44))&-1))|0);
    if ($43) {
     __ZN11Blip_Buffer14remove_samplesEl($44,$count_1);
    } else {
     __ZN11Blip_Buffer14remove_silenceEl($44,$count_1);
    }
    $48=((($i_024)+(1))|0);
    $49=((HEAP32[(($10)>>2)])|0);
    $50=($48|0)<($49|0);
    if ($50) {
     $i_024=$48;
    } else {
     break;
    }
   }
  }
  $15=($remain_126|0)==($count_1|0);
  if ($15) {
   break;
  } else {
   $_025=$33;$remain_126=$34;
  }
 }
 $51=$_<<1;
 return (($51)|0);
}
function __ZN14Effects_Buffer12mix_enhancedEPsi($this,$out_,$count){
 $this=($this)|0;
 $out_=($out_)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$_in=0,$out_077=0,$center_reader_buf_076=0,$center_reader_accum_075=0,$l1_reader_buf_074=0,$l1_reader_accum_073=0,$r1_reader_buf_072=0,$reverb_pos_071=0,$echo_pos_070=0,$r1_reader_accum_069=0,$l2_reader_buf_068=0;
 var $sq2_reader_accum_067=0,$sq2_reader_buf_066=0,$sq1_reader_accum_065=0,$sq1_reader_buf_064=0,$r2_reader_accum_063=0,$r2_reader_buf_062=0,$l2_reader_accum_061=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0;
 var $84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0;
 var $104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0;
 var $124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0;
 var $144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$sext=0;
 var $163=0,$164=0,$extract_t60=0,$166=0,$167=0,$extract_t=0,$left_0_off0=0,$169=0,$170=0,$171=0,$172=0,$173=0,$175=0,$176=0,$177=0,$storemerge=0,$178=0,$center_reader_accum_0_lcssa=0,$l1_reader_accum_0_lcssa=0,$reverb_pos_0_lcssa=0;
 var $echo_pos_0_lcssa=0,$r1_reader_accum_0_lcssa=0,$sq2_reader_accum_0_lcssa=0,$sq1_reader_accum_0_lcssa=0,$r2_reader_accum_0_lcssa=0,$l2_reader_accum_0_lcssa=0,label=0;
 $1=(($this+128)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+124)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+168)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+212)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($this+256)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($this+300)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($this+36)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($this+80)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($this+448)|0);
 $18=((__ZNK13blargg_vectorIsE5beginEv($17))|0);
 $19=(($this+456)|0);
 $20=((__ZNK13blargg_vectorIsE5beginEv($19))|0);
 $21=(($this+468)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($this+464)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($count|0)==0;
 if ($25) {
  $l2_reader_accum_0_lcssa=$10;$r2_reader_accum_0_lcssa=$12;$sq1_reader_accum_0_lcssa=$14;$sq2_reader_accum_0_lcssa=$16;$r1_reader_accum_0_lcssa=$8;$echo_pos_0_lcssa=$22;$reverb_pos_0_lcssa=$24;$l1_reader_accum_0_lcssa=$6;$center_reader_accum_0_lcssa=$4;
  HEAP32[(($23)>>2)]=$reverb_pos_0_lcssa;
  HEAP32[(($21)>>2)]=$echo_pos_0_lcssa;
  HEAP32[(($5)>>2)]=$l1_reader_accum_0_lcssa;
  HEAP32[(($7)>>2)]=$r1_reader_accum_0_lcssa;
  HEAP32[(($9)>>2)]=$l2_reader_accum_0_lcssa;
  HEAP32[(($11)>>2)]=$r2_reader_accum_0_lcssa;
  HEAP32[(($13)>>2)]=$sq1_reader_accum_0_lcssa;
  HEAP32[(($15)>>2)]=$sq2_reader_accum_0_lcssa;
  HEAP32[(($3)>>2)]=$center_reader_accum_0_lcssa;
  return;
 }
 $26=(($this+72)|0);
 $27=(($this+28)|0);
 $28=(($this+292)|0);
 $29=(($this+248)|0);
 $30=(($this+204)|0);
 $31=(($this+160)|0);
 $32=(($this+116)|0);
 $33=((HEAP32[(($26)>>2)])|0);
 $34=((HEAP32[(($27)>>2)])|0);
 $35=((HEAP32[(($28)>>2)])|0);
 $36=((HEAP32[(($29)>>2)])|0);
 $37=((HEAP32[(($30)>>2)])|0);
 $38=((HEAP32[(($31)>>2)])|0);
 $39=((HEAP32[(($32)>>2)])|0);
 $40=(($this+472)|0);
 $41=(($this+480)|0);
 $42=(($this+500)|0);
 $43=(($this+476)|0);
 $44=(($this+484)|0);
 $45=(($this+504)|0);
 $46=(($this+508)|0);
 $47=(($this+496)|0);
 $48=(($this+488)|0);
 $49=(($this+492)|0);
 $l2_reader_accum_061=$10;$r2_reader_buf_062=$35;$r2_reader_accum_063=$12;$sq1_reader_buf_064=$34;$sq1_reader_accum_065=$14;$sq2_reader_buf_066=$33;$sq2_reader_accum_067=$16;$l2_reader_buf_068=$36;$r1_reader_accum_069=$8;$echo_pos_070=$22;$reverb_pos_071=$24;$r1_reader_buf_072=$37;$l1_reader_accum_073=$6;$l1_reader_buf_074=$38;$center_reader_accum_075=$4;$center_reader_buf_076=$39;$out_077=$out_;$_in=$count;
 while(1) {
  $51=((($_in)-(1))|0);
  $52=$sq1_reader_accum_065>>14;
  $53=$sq2_reader_accum_067>>14;
  $54=(($sq1_reader_buf_064+4)|0);
  $55=((HEAP32[(($sq1_reader_buf_064)>>2)])|0);
  $56=$sq1_reader_accum_065>>($2|0);
  $57=((($55)-($56))|0);
  $58=((($57)+($sq1_reader_accum_065))|0);
  $59=(($sq2_reader_buf_066+4)|0);
  $60=((HEAP32[(($sq2_reader_buf_066)>>2)])|0);
  $61=$sq2_reader_accum_067>>($2|0);
  $62=((($60)-($61))|0);
  $63=((($62)+($sq2_reader_accum_067))|0);
  $64=((HEAP32[(($40)>>2)])|0);
  $65=(Math_imul($64,$52)|0);
  $66=$65>>15;
  $67=((HEAP32[(($41)>>2)])|0);
  $68=(Math_imul($67,$53)|0);
  $69=$68>>15;
  $70=$l1_reader_accum_073>>14;
  $71=((HEAP32[(($42)>>2)])|0);
  $72=((($71)+($reverb_pos_071))|0);
  $73=$72&16383;
  $74=(($18+($73<<1))|0);
  $75=((HEAP16[(($74)>>1)])|0);
  $76=(($75<<16)>>16);
  $77=((($66)+($70))|0);
  $78=((($77)+($69))|0);
  $79=((($78)+($76))|0);
  $80=((HEAP32[(($43)>>2)])|0);
  $81=(Math_imul($80,$52)|0);
  $82=$81>>15;
  $83=((HEAP32[(($44)>>2)])|0);
  $84=(Math_imul($83,$53)|0);
  $85=$84>>15;
  $86=$r1_reader_accum_069>>14;
  $87=((HEAP32[(($45)>>2)])|0);
  $88=((($87)+($reverb_pos_071))|0);
  $89=$88&16383;
  $90=(($18+($89<<1))|0);
  $91=((HEAP16[(($90)>>1)])|0);
  $92=(($91<<16)>>16);
  $93=((($82)+($86))|0);
  $94=((($93)+($85))|0);
  $95=((($94)+($92))|0);
  $96=(($l1_reader_buf_074+4)|0);
  $97=((HEAP32[(($l1_reader_buf_074)>>2)])|0);
  $98=$l1_reader_accum_073>>($2|0);
  $99=((($97)-($98))|0);
  $100=((($99)+($l1_reader_accum_073))|0);
  $101=(($r1_reader_buf_072+4)|0);
  $102=((HEAP32[(($r1_reader_buf_072)>>2)])|0);
  $103=$r1_reader_accum_069>>($2|0);
  $104=((($102)-($103))|0);
  $105=((($104)+($r1_reader_accum_069))|0);
  $106=((HEAP32[(($46)>>2)])|0);
  $107=(Math_imul($106,$79)|0);
  $108=$107>>>15;
  $109=(($108)&65535);
  $110=(($18+($reverb_pos_071<<1))|0);
  HEAP16[(($110)>>1)]=$109;
  $111=(Math_imul($106,$95)|0);
  $112=$111>>>15;
  $113=(($112)&65535);
  $114=((($reverb_pos_071)+(1))|0);
  $115=(($18+($114<<1))|0);
  HEAP16[(($115)>>1)]=$113;
  $116=((($reverb_pos_071)+(2))|0);
  $117=$116&16383;
  $118=$center_reader_accum_075>>14;
  $119=(($center_reader_buf_076+4)|0);
  $120=((HEAP32[(($center_reader_buf_076)>>2)])|0);
  $121=$center_reader_accum_075>>($2|0);
  $122=((($120)-($121))|0);
  $123=((($122)+($center_reader_accum_075))|0);
  $124=$l2_reader_accum_061>>14;
  $125=((HEAP32[(($47)>>2)])|0);
  $126=((HEAP32[(($48)>>2)])|0);
  $127=((($126)+($echo_pos_070))|0);
  $128=$127&4095;
  $129=(($20+($128<<1))|0);
  $130=((HEAP16[(($129)>>1)])|0);
  $131=(($130<<16)>>16);
  $132=(Math_imul($131,$125)|0);
  $133=$132>>15;
  $134=((($118)+($124))|0);
  $135=((($134)+($79))|0);
  $136=((($135)+($133))|0);
  $137=$r2_reader_accum_063>>14;
  $138=((HEAP32[(($49)>>2)])|0);
  $139=((($138)+($echo_pos_070))|0);
  $140=$139&4095;
  $141=(($20+($140<<1))|0);
  $142=((HEAP16[(($141)>>1)])|0);
  $143=(($142<<16)>>16);
  $144=(Math_imul($143,$125)|0);
  $145=$144>>15;
  $146=((($118)+($137))|0);
  $147=((($146)+($95))|0);
  $148=((($147)+($145))|0);
  $149=(($l2_reader_buf_068+4)|0);
  $150=((HEAP32[(($l2_reader_buf_068)>>2)])|0);
  $151=$l2_reader_accum_061>>($2|0);
  $152=((($150)-($151))|0);
  $153=((($152)+($l2_reader_accum_061))|0);
  $154=(($r2_reader_buf_062+4)|0);
  $155=((HEAP32[(($r2_reader_buf_062)>>2)])|0);
  $156=$r2_reader_accum_063>>($2|0);
  $157=((($155)-($156))|0);
  $158=((($157)+($r2_reader_accum_063))|0);
  $159=(($118)&65535);
  $160=(($20+($echo_pos_070<<1))|0);
  HEAP16[(($160)>>1)]=$159;
  $161=((($echo_pos_070)+(1))|0);
  $162=$161&4095;
  $sext=$136<<16;
  $163=$sext>>16;
  $164=($163|0)==($136|0);
  $extract_t60=(($136)&65535);
  if ($164) {
   $left_0_off0=$extract_t60;
  } else {
   $166=$136>>24;
   $167=(((32767)-($166))|0);
   $extract_t=(($167)&65535);
   $left_0_off0=$extract_t;
  }
  HEAP16[(($out_077)>>1)]=$left_0_off0;
  $169=(($148)&65535);
  $170=(($out_077+2)|0);
  $171=(($out_077+4)|0);
  $172=(($169<<16)>>16);
  $173=($172|0)==($148|0);
  if ($173) {
   $storemerge=$169;
  } else {
   $175=$148>>24;
   $176=(((32767)-($175))|0);
   $177=(($176)&65535);
   $storemerge=$177;
  }
  HEAP16[(($170)>>1)]=$storemerge;
  $178=($51|0)==0;
  if ($178) {
   $l2_reader_accum_0_lcssa=$153;$r2_reader_accum_0_lcssa=$158;$sq1_reader_accum_0_lcssa=$58;$sq2_reader_accum_0_lcssa=$63;$r1_reader_accum_0_lcssa=$105;$echo_pos_0_lcssa=$162;$reverb_pos_0_lcssa=$117;$l1_reader_accum_0_lcssa=$100;$center_reader_accum_0_lcssa=$123;
   break;
  } else {
   $l2_reader_accum_061=$153;$r2_reader_buf_062=$154;$r2_reader_accum_063=$158;$sq1_reader_buf_064=$54;$sq1_reader_accum_065=$58;$sq2_reader_buf_066=$59;$sq2_reader_accum_067=$63;$l2_reader_buf_068=$149;$r1_reader_accum_069=$105;$echo_pos_070=$162;$reverb_pos_071=$117;$r1_reader_buf_072=$101;$l1_reader_accum_073=$100;$l1_reader_buf_074=$96;$center_reader_accum_075=$123;$center_reader_buf_076=$119;$out_077=$171;$_in=$51;
  }
 }
 HEAP32[(($23)>>2)]=$reverb_pos_0_lcssa;
 HEAP32[(($21)>>2)]=$echo_pos_0_lcssa;
 HEAP32[(($5)>>2)]=$l1_reader_accum_0_lcssa;
 HEAP32[(($7)>>2)]=$r1_reader_accum_0_lcssa;
 HEAP32[(($9)>>2)]=$l2_reader_accum_0_lcssa;
 HEAP32[(($11)>>2)]=$r2_reader_accum_0_lcssa;
 HEAP32[(($13)>>2)]=$sq1_reader_accum_0_lcssa;
 HEAP32[(($15)>>2)]=$sq2_reader_accum_0_lcssa;
 HEAP32[(($3)>>2)]=$center_reader_accum_0_lcssa;
 return;
}
function __ZN14Effects_Buffer17mix_mono_enhancedEPsi($this,$out_,$count){
 $this=($this)|0;
 $out_=($out_)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$_in=0,$out_053=0,$center_reader_buf_052=0,$center_reader_accum_051=0,$sq1_reader_buf_050=0,$sq1_reader_accum_049=0,$sq2_reader_buf_048=0;
 var $reverb_pos_047=0,$echo_pos_046=0,$sq2_reader_accum_045=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0;
 var $52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0;
 var $72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0;
 var $92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0;
 var $112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$sext=0,$119=0,$120=0,$extract_t44=0,$122=0,$123=0,$extract_t=0,$left_0_off0=0,$125=0,$126=0,$127=0,$128=0,$129=0;
 var $131=0,$132=0,$133=0,$storemerge=0,$134=0,$center_reader_accum_0_lcssa=0,$sq1_reader_accum_0_lcssa=0,$reverb_pos_0_lcssa=0,$echo_pos_0_lcssa=0,$sq2_reader_accum_0_lcssa=0,label=0;
 $1=(($this+128)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+124)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+36)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+80)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($this+448)|0);
 $10=((__ZNK13blargg_vectorIsE5beginEv($9))|0);
 $11=(($this+456)|0);
 $12=((__ZNK13blargg_vectorIsE5beginEv($11))|0);
 $13=(($this+468)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($this+464)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($count|0)==0;
 if ($17) {
  $sq2_reader_accum_0_lcssa=$8;$echo_pos_0_lcssa=$14;$reverb_pos_0_lcssa=$16;$sq1_reader_accum_0_lcssa=$6;$center_reader_accum_0_lcssa=$4;
  HEAP32[(($15)>>2)]=$reverb_pos_0_lcssa;
  HEAP32[(($13)>>2)]=$echo_pos_0_lcssa;
  HEAP32[(($5)>>2)]=$sq1_reader_accum_0_lcssa;
  HEAP32[(($7)>>2)]=$sq2_reader_accum_0_lcssa;
  HEAP32[(($3)>>2)]=$center_reader_accum_0_lcssa;
  return;
 }
 $18=(($this+72)|0);
 $19=(($this+28)|0);
 $20=(($this+116)|0);
 $21=((HEAP32[(($18)>>2)])|0);
 $22=((HEAP32[(($19)>>2)])|0);
 $23=((HEAP32[(($20)>>2)])|0);
 $24=(($this+472)|0);
 $25=(($this+480)|0);
 $26=(($this+500)|0);
 $27=(($this+476)|0);
 $28=(($this+484)|0);
 $29=(($this+504)|0);
 $30=(($this+508)|0);
 $31=(($this+496)|0);
 $32=(($this+488)|0);
 $33=(($this+492)|0);
 $sq2_reader_accum_045=$8;$echo_pos_046=$14;$reverb_pos_047=$16;$sq2_reader_buf_048=$21;$sq1_reader_accum_049=$6;$sq1_reader_buf_050=$22;$center_reader_accum_051=$4;$center_reader_buf_052=$23;$out_053=$out_;$_in=$count;
 while(1) {
  $35=((($_in)-(1))|0);
  $36=$sq1_reader_accum_049>>14;
  $37=$sq2_reader_accum_045>>14;
  $38=(($sq1_reader_buf_050+4)|0);
  $39=((HEAP32[(($sq1_reader_buf_050)>>2)])|0);
  $40=$sq1_reader_accum_049>>($2|0);
  $41=((($39)-($40))|0);
  $42=((($41)+($sq1_reader_accum_049))|0);
  $43=(($sq2_reader_buf_048+4)|0);
  $44=((HEAP32[(($sq2_reader_buf_048)>>2)])|0);
  $45=$sq2_reader_accum_045>>($2|0);
  $46=((($44)-($45))|0);
  $47=((($46)+($sq2_reader_accum_045))|0);
  $48=((HEAP32[(($24)>>2)])|0);
  $49=(Math_imul($48,$36)|0);
  $50=$49>>15;
  $51=((HEAP32[(($25)>>2)])|0);
  $52=(Math_imul($51,$37)|0);
  $53=$52>>15;
  $54=((($53)+($50))|0);
  $55=((HEAP32[(($26)>>2)])|0);
  $56=((($55)+($reverb_pos_047))|0);
  $57=$56&16383;
  $58=(($10+($57<<1))|0);
  $59=((HEAP16[(($58)>>1)])|0);
  $60=(($59<<16)>>16);
  $61=((($54)+($60))|0);
  $62=((HEAP32[(($27)>>2)])|0);
  $63=(Math_imul($62,$36)|0);
  $64=$63>>15;
  $65=((HEAP32[(($28)>>2)])|0);
  $66=(Math_imul($65,$37)|0);
  $67=$66>>15;
  $68=((($67)+($64))|0);
  $69=((HEAP32[(($29)>>2)])|0);
  $70=((($69)+($reverb_pos_047))|0);
  $71=$70&16383;
  $72=(($10+($71<<1))|0);
  $73=((HEAP16[(($72)>>1)])|0);
  $74=(($73<<16)>>16);
  $75=((($68)+($74))|0);
  $76=((HEAP32[(($30)>>2)])|0);
  $77=(Math_imul($76,$61)|0);
  $78=$77>>>15;
  $79=(($78)&65535);
  $80=(($10+($reverb_pos_047<<1))|0);
  HEAP16[(($80)>>1)]=$79;
  $81=(Math_imul($75,$76)|0);
  $82=$81>>>15;
  $83=(($82)&65535);
  $84=((($reverb_pos_047)+(1))|0);
  $85=(($10+($84<<1))|0);
  HEAP16[(($85)>>1)]=$83;
  $86=((($reverb_pos_047)+(2))|0);
  $87=$86&16383;
  $88=$center_reader_accum_051>>14;
  $89=(($center_reader_buf_052+4)|0);
  $90=((HEAP32[(($center_reader_buf_052)>>2)])|0);
  $91=$center_reader_accum_051>>($2|0);
  $92=((($90)-($91))|0);
  $93=((($92)+($center_reader_accum_051))|0);
  $94=((($61)+($88))|0);
  $95=((HEAP32[(($31)>>2)])|0);
  $96=((HEAP32[(($32)>>2)])|0);
  $97=((($96)+($echo_pos_046))|0);
  $98=$97&4095;
  $99=(($12+($98<<1))|0);
  $100=((HEAP16[(($99)>>1)])|0);
  $101=(($100<<16)>>16);
  $102=(Math_imul($101,$95)|0);
  $103=$102>>15;
  $104=((($94)+($103))|0);
  $105=((($75)+($88))|0);
  $106=((HEAP32[(($33)>>2)])|0);
  $107=((($106)+($echo_pos_046))|0);
  $108=$107&4095;
  $109=(($12+($108<<1))|0);
  $110=((HEAP16[(($109)>>1)])|0);
  $111=(($110<<16)>>16);
  $112=(Math_imul($111,$95)|0);
  $113=$112>>15;
  $114=((($105)+($113))|0);
  $115=(($88)&65535);
  $116=(($12+($echo_pos_046<<1))|0);
  HEAP16[(($116)>>1)]=$115;
  $117=((($echo_pos_046)+(1))|0);
  $118=$117&4095;
  $sext=$104<<16;
  $119=$sext>>16;
  $120=($119|0)==($104|0);
  $extract_t44=(($104)&65535);
  if ($120) {
   $left_0_off0=$extract_t44;
  } else {
   $122=$104>>24;
   $123=(((32767)-($122))|0);
   $extract_t=(($123)&65535);
   $left_0_off0=$extract_t;
  }
  HEAP16[(($out_053)>>1)]=$left_0_off0;
  $125=(($114)&65535);
  $126=(($out_053+2)|0);
  $127=(($out_053+4)|0);
  $128=(($125<<16)>>16);
  $129=($128|0)==($114|0);
  if ($129) {
   $storemerge=$125;
  } else {
   $131=$114>>24;
   $132=(((32767)-($131))|0);
   $133=(($132)&65535);
   $storemerge=$133;
  }
  HEAP16[(($126)>>1)]=$storemerge;
  $134=($35|0)==0;
  if ($134) {
   $sq2_reader_accum_0_lcssa=$47;$echo_pos_0_lcssa=$118;$reverb_pos_0_lcssa=$87;$sq1_reader_accum_0_lcssa=$42;$center_reader_accum_0_lcssa=$93;
   break;
  } else {
   $sq2_reader_accum_045=$47;$echo_pos_046=$118;$reverb_pos_047=$87;$sq2_reader_buf_048=$43;$sq1_reader_accum_049=$42;$sq1_reader_buf_050=$38;$center_reader_accum_051=$93;$center_reader_buf_052=$89;$out_053=$127;$_in=$35;
  }
 }
 HEAP32[(($15)>>2)]=$reverb_pos_0_lcssa;
 HEAP32[(($13)>>2)]=$echo_pos_0_lcssa;
 HEAP32[(($5)>>2)]=$sq1_reader_accum_0_lcssa;
 HEAP32[(($7)>>2)]=$sq2_reader_accum_0_lcssa;
 HEAP32[(($3)>>2)]=$center_reader_accum_0_lcssa;
 return;
}
function __ZN14Effects_Buffer10mix_stereoEPsi($this,$out_,$count){
 $this=($this)|0;
 $out_=($out_)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$_in=0,$out_031=0,$r_reader_accum_030=0,$r_reader_buf_029=0,$l_reader_accum_028=0;
 var $l_reader_buf_027=0,$c_reader_accum_026=0,$c_reader_buf_025=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0;
 var $34=0,$35=0,$36=0,$37=0,$sext=0,$38=0,$39=0,$extract_t24=0,$41=0,$42=0,$extract_t=0,$left_0_off0=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0;
 var $storemerge=0,$53=0,$r_reader_accum_0_lcssa=0,$l_reader_accum_0_lcssa=0,$c_reader_accum_0_lcssa=0,label=0;
 $1=(($this+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+80)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+124)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($count|0)==0;
 if ($9) {
  $c_reader_accum_0_lcssa=$4;$l_reader_accum_0_lcssa=$6;$r_reader_accum_0_lcssa=$8;
  HEAP32[(($7)>>2)]=$r_reader_accum_0_lcssa;
  HEAP32[(($5)>>2)]=$l_reader_accum_0_lcssa;
  HEAP32[(($3)>>2)]=$c_reader_accum_0_lcssa;
  return;
 }
 $10=(($this+116)|0);
 $11=(($this+72)|0);
 $12=(($this+28)|0);
 $13=((HEAP32[(($10)>>2)])|0);
 $14=((HEAP32[(($11)>>2)])|0);
 $15=((HEAP32[(($12)>>2)])|0);
 $c_reader_buf_025=$15;$c_reader_accum_026=$4;$l_reader_buf_027=$14;$l_reader_accum_028=$6;$r_reader_buf_029=$13;$r_reader_accum_030=$8;$out_031=$out_;$_in=$count;
 while(1) {
  $17=((($_in)-(1))|0);
  $18=$c_reader_accum_026>>14;
  $19=(($c_reader_buf_025+4)|0);
  $20=((HEAP32[(($c_reader_buf_025)>>2)])|0);
  $21=$c_reader_accum_026>>($2|0);
  $22=((($20)-($21))|0);
  $23=((($22)+($c_reader_accum_026))|0);
  $24=$l_reader_accum_028>>14;
  $25=((($24)+($18))|0);
  $26=$r_reader_accum_030>>14;
  $27=((($26)+($18))|0);
  $28=(($l_reader_buf_027+4)|0);
  $29=((HEAP32[(($l_reader_buf_027)>>2)])|0);
  $30=$l_reader_accum_028>>($2|0);
  $31=((($29)-($30))|0);
  $32=((($31)+($l_reader_accum_028))|0);
  $33=(($r_reader_buf_029+4)|0);
  $34=((HEAP32[(($r_reader_buf_029)>>2)])|0);
  $35=$r_reader_accum_030>>($2|0);
  $36=((($34)-($35))|0);
  $37=((($36)+($r_reader_accum_030))|0);
  $sext=$25<<16;
  $38=$sext>>16;
  $39=($38|0)==($25|0);
  $extract_t24=(($25)&65535);
  if ($39) {
   $left_0_off0=$extract_t24;
  } else {
   $41=$25>>24;
   $42=(((32767)-($41))|0);
   $extract_t=(($42)&65535);
   $left_0_off0=$extract_t;
  }
  HEAP16[(($out_031)>>1)]=$left_0_off0;
  $44=(($27)&65535);
  $45=(($out_031+2)|0);
  $46=(($out_031+4)|0);
  $47=(($44<<16)>>16);
  $48=($47|0)==($27|0);
  if ($48) {
   $storemerge=$44;
  } else {
   $50=$27>>24;
   $51=(((32767)-($50))|0);
   $52=(($51)&65535);
   $storemerge=$52;
  }
  HEAP16[(($45)>>1)]=$storemerge;
  $53=($17|0)==0;
  if ($53) {
   $c_reader_accum_0_lcssa=$23;$l_reader_accum_0_lcssa=$32;$r_reader_accum_0_lcssa=$37;
   break;
  } else {
   $c_reader_buf_025=$19;$c_reader_accum_026=$23;$l_reader_buf_027=$28;$l_reader_accum_028=$32;$r_reader_buf_029=$33;$r_reader_accum_030=$37;$out_031=$46;$_in=$17;
  }
 }
 HEAP32[(($7)>>2)]=$r_reader_accum_0_lcssa;
 HEAP32[(($5)>>2)]=$l_reader_accum_0_lcssa;
 HEAP32[(($3)>>2)]=$c_reader_accum_0_lcssa;
 return;
}
function __ZN14Effects_Buffer8mix_monoEPsi($this,$out_,$count){
 $this=($this)|0;
 $out_=($out_)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$n_042=0,$c_reader_accum_041=0,$c_reader_buf_040=0,$out_039=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$sext=0,$24=0,$25=0,$27=0,$28=0,$cs0_0=0,$30=0,$31=0,$32=0,$33=0,$sext38=0,$34=0,$35=0,$37=0;
 var $38=0,$cs1_0=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$scevgep=0,$scevgep47=0,$c_reader_accum_0_lcssa=0,$c_reader_buf_0_lcssa=0,$out_0_lcssa=0,$49=0,$50=0,$52=0,$53=0,$54=0;
 var $55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$c_reader_accum_1=0,label=0;
 $1=(($this+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+28)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+36)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$count>>1;
 $8=($7|0)==0;
 if ($8) {
  $out_0_lcssa=$out_;$c_reader_buf_0_lcssa=$4;$c_reader_accum_0_lcssa=$6;
 } else {
  $9=$7<<2;
  $10=$7<<1;
  $out_039=$out_;$c_reader_buf_040=$4;$c_reader_accum_041=$6;$n_042=$7;
  while(1) {
   $12=$c_reader_accum_041>>14;
   $13=(($c_reader_buf_040+4)|0);
   $14=((HEAP32[(($c_reader_buf_040)>>2)])|0);
   $15=$c_reader_accum_041>>($2|0);
   $16=((($14)-($15))|0);
   $17=((($16)+($c_reader_accum_041))|0);
   $18=$17>>14;
   $19=(($c_reader_buf_040+8)|0);
   $20=((HEAP32[(($13)>>2)])|0);
   $21=$17>>($2|0);
   $22=((($17)+($20))|0);
   $23=((($22)-($21))|0);
   $sext=$12<<16;
   $24=$sext>>16;
   $25=($24|0)==($12|0);
   if ($25) {
    $cs0_0=$12;
   } else {
    $27=$c_reader_accum_041>>31;
    $28=(((32767)-($27))|0);
    $cs0_0=$28;
   }
   $30=$cs0_0&65535;
   $31=$cs0_0<<16;
   $32=$30|$31;
   $33=$out_039;
   HEAP32[(($33)>>2)]=$32;
   $sext38=$18<<16;
   $34=$sext38>>16;
   $35=($34|0)==($18|0);
   if ($35) {
    $cs1_0=$18;
   } else {
    $37=$17>>31;
    $38=(((32767)-($37))|0);
    $cs1_0=$38;
   }
   $40=$cs1_0&65535;
   $41=$cs1_0<<16;
   $42=$40|$41;
   $43=(($out_039+4)|0);
   $44=$43;
   HEAP32[(($44)>>2)]=$42;
   $45=(($out_039+8)|0);
   $46=((($n_042)-(1))|0);
   $47=($46|0)==0;
   if ($47) {
    break;
   } else {
    $out_039=$45;$c_reader_buf_040=$19;$c_reader_accum_041=$23;$n_042=$46;
   }
  }
  $scevgep=(($out_+($9<<1))|0);
  $scevgep47=(($4+($10<<2))|0);
  $out_0_lcssa=$scevgep;$c_reader_buf_0_lcssa=$scevgep47;$c_reader_accum_0_lcssa=$23;
 }
 $49=$count&1;
 $50=($49|0)==0;
 if ($50) {
  $c_reader_accum_1=$c_reader_accum_0_lcssa;
  HEAP32[(($5)>>2)]=$c_reader_accum_1;
  return;
 }
 $52=$c_reader_accum_0_lcssa>>14;
 $53=((HEAP32[(($c_reader_buf_0_lcssa)>>2)])|0);
 $54=$c_reader_accum_0_lcssa>>($2|0);
 $55=((($53)-($54))|0);
 $56=((($55)+($c_reader_accum_0_lcssa))|0);
 $57=(($52)&65535);
 HEAP16[(($out_0_lcssa)>>1)]=$57;
 $58=(($out_0_lcssa+2)|0);
 HEAP16[(($58)>>1)]=$57;
 $59=(($57<<16)>>16);
 $60=($59|0)==($52|0);
 if ($60) {
  $c_reader_accum_1=$56;
  HEAP32[(($5)>>2)]=$c_reader_accum_1;
  return;
 }
 $62=$c_reader_accum_0_lcssa>>31;
 $63=(((32767)-($62))|0);
 $64=(($63)&65535);
 HEAP16[(($out_0_lcssa)>>1)]=$64;
 HEAP16[(($58)>>1)]=$64;
 $c_reader_accum_1=$56;
 HEAP32[(($5)>>2)]=$c_reader_accum_1;
 return;
}
function __ZN14Fir_Resampler_C2EiPs($this,$width,$impulses_){
 $this=($this)|0;
 $width=($width)|0;
 $impulses_=($impulses_)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIsEC1Ev($1);
 $2=(($this+20)|0);
 HEAP32[(($2)>>2)]=$width;
 $3=(($this+24)|0);
 $4=$width<<1;
 $5=((($4)-(2))|0);
 HEAP32[(($3)>>2)]=$5;
 $6=(($this+48)|0);
 HEAP32[(($6)>>2)]=$impulses_;
 $7=(($this+8)|0);
 HEAP32[(($7)>>2)]=0;
 $8=(($this+12)|0);
 HEAP32[(($8)>>2)]=1;
 $9=(($this+16)|0);
 HEAP32[(($9)>>2)]=0;
 $10=(($this+28)|0);
 HEAP32[(($10)>>2)]=0;
 $11=(($this+32)|0);
 HEAP32[(($11)>>2)]=2;
 $12=(($this+40)|0);
 HEAPF64[(($12)>>3)]=1.0;
 return;
}
function __ZN14Fir_Resampler_D2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIsED1Ev($1);
 return;
}
function __ZN14Fir_Resampler_5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;
 $1=(($this+16)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this)|0);
 $3=((__ZNK13blargg_vectorIsE4sizeEv($2))|0);
 $4=($3|0)==0;
 if ($4) {
  return;
 }
 $6=(($this+24)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((__ZNK13blargg_vectorIsEixEj($2,$7))|0);
 $9=(($this+8)|0);
 HEAP32[(($9)>>2)]=$8;
 $10=((__ZNK13blargg_vectorIsE5beginEv($2))|0);
 $11=$10;
 $12=((HEAP32[(($6)>>2)])|0);
 $13=$12<<1;
 _memset((((($11)|0))|0), ((((0)|0))|0), (((($13)|0))|0));
 return;
}
function __ZN14Fir_Resampler_11buffer_sizeEi($this,$new_size){
 $this=($this)|0;
 $new_size=($new_size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=(($this+24)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($3)+($new_size))|0);
 $5=((__ZN13blargg_vectorIsE6resizeEj($1,$4))|0);
 $6=($5|0)==0;
 if (!($6)) {
  $_0=$5;
  return (($_0)|0);
 }
 __ZN14Fir_Resampler_5clearEv($this);
 $_0=0;
 return (($_0)|0);
}
function __ZN14Fir_Resampler_10time_ratioEddd($this,$new_factor,$rolloff,$gain){
 $this=($this)|0;
 $new_factor=+($new_factor);
 $rolloff=+($rolloff);
 $gain=+($gain);
 var $1=0,$2=0,$3=.0,$fstep_026=.0,$least_error_025=.0,$pos_024=.0,$r_023=0,$5=.0,$6=.0,$7=.0,$8=.0,$9=.0,$10=0,$12=.0,$13=.0,$least_error_1=.0,$fstep_1=.0,$15=0,$16=0,$18=0;
 var $19=.0,$20=0,$21=0,$22=0,$23=.0,$24=.0,$25=0,$27=.0,$29=.0,$30=0,$31=0,$32=0,$33=0,$34=.0,$35=.0,$36=0,$i_022=0,$pos1_021=.0,$38=0,$39=.0;
 var $40=.0,$41=.0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=.0,$48=0,$49=0,$50=0,$51=0,$53=.0,$54=0,$55=0,$56=0,$57=0,$58=0,$pos1_1=.0,$60=0;
 var $61=0,$62=0,$63=.0,label=0;
 $1=(($this+40)|0);
 HEAPF64[(($1)>>3)]=$new_factor;
 $2=(($this+12)|0);
 HEAP32[(($2)>>2)]=-1;
 $3=(+(HEAPF64[(($1)>>3)]));
 $r_023=1;$pos_024=0.0;$least_error_025=2.0;$fstep_026=0.0;
 while(1) {
  $5=($pos_024)+($3);
  $6=($5)+((0.5));
  $7=(+(Math_floor($6)));
  $8=($5)-($7);
  $9=(+(Math_abs((+($8)))));
  $10=$9<$least_error_025;
  if ($10) {
   HEAP32[(($2)>>2)]=$r_023;
   $12=(+((($r_023|0))|0));
   $13=($7)/($12);
   $fstep_1=$13;$least_error_1=$9;
  } else {
   $fstep_1=$fstep_026;$least_error_1=$least_error_025;
  }
  $15=((($r_023)+(1))|0);
  $16=($15|0)<33;
  if ($16) {
   $r_023=$15;$pos_024=$5;$least_error_025=$least_error_1;$fstep_026=$fstep_1;
  } else {
   break;
  }
 }
 $18=(($this+28)|0);
 HEAP32[(($18)>>2)]=0;
 $19=(+(Math_floor($fstep_1)));
 $20=(~~($19));
 $21=$20<<1;
 $22=(($this+32)|0);
 HEAP32[(($22)>>2)]=$21;
 HEAPF64[(($1)>>3)]=$fstep_1;
 $23=(+(_fmod((+($fstep_1)),1.0)));
 $24=(+(HEAPF64[(($1)>>3)]));
 $25=$24<(1.0);
 if ($25) {
  $29=1.0;
 } else {
  $27=((1.0))/($24);
  $29=$27;
 }
 $30=(($this+36)|0);
 HEAP32[(($30)>>2)]=0;
 $31=((HEAP32[(($2)>>2)])|0);
 $32=($31|0)>0;
 if (!($32)) {
  __ZN14Fir_Resampler_5clearEv($this);
  $63=(+(HEAPF64[(($1)>>3)]));
  return (+($63));
 }
 $33=(($this+20)|0);
 $34=($gain)*((32767.0));
 $35=($34)*($29);
 $36=(($this+48)|0);
 $pos1_021=0.0;$i_022=0;
 while(1) {
  $38=((HEAP32[(($33)>>2)])|0);
  $39=(+((($38|0))|0));
  $40=($29)*($39);
  $41=($40)+((1.0));
  $42=(~~($41));
  $43=$42&-2;
  $44=((HEAP32[(($36)>>2)])|0);
  $45=(Math_imul($38,$i_022)|0);
  $46=(($44+($45<<1))|0);
  __ZL8gen_sincdidddiPs($rolloff,$43,$pos1_021,$29,$35,$38,$46);
  $47=($23)+($pos1_021);
  $48=((HEAP32[(($22)>>2)])|0);
  $49=((HEAP32[(($30)>>2)])|0);
  $50=((($49)+($48))|0);
  HEAP32[(($30)>>2)]=$50;
  $51=$47<(0.9999999);
  if ($51) {
   $pos1_1=$47;
  } else {
   $53=($47)+((-1.0));
   $54=1<<$i_022;
   $55=((HEAP32[(($18)>>2)])|0);
   $56=$55|$54;
   HEAP32[(($18)>>2)]=$56;
   $57=((HEAP32[(($30)>>2)])|0);
   $58=((($57)+(1))|0);
   HEAP32[(($30)>>2)]=$58;
   $pos1_1=$53;
  }
  $60=((($i_022)+(1))|0);
  $61=((HEAP32[(($2)>>2)])|0);
  $62=($60|0)<($61|0);
  if ($62) {
   $pos1_021=$pos1_1;$i_022=$60;
  } else {
   break;
  }
 }
 __ZN14Fir_Resampler_5clearEv($this);
 $63=(+(HEAPF64[(($1)>>3)]));
 return (+($63));
}
function __ZL8gen_sincdidddiPs($rolloff,$width,$offset,$spacing,$scale,$count,$out){
 $rolloff=+($rolloff);
 $width=($width)|0;
 $offset=+($offset);
 $spacing=+($spacing);
 $scale=+($scale);
 $count=($count)|0;
 $out=($out)|0;
 var $1=.0,$2=.0,$3=.0,$4=.0,$5=.0,$6=0,$7=0,$8=0,$9=.0,$10=.0,$11=.0,$12=.0,$13=.0,$14=.0,$_in=0,$_02527=0,$angle_026=.0,$16=0,$17=0,$18=.0;
 var $19=.0,$20=0,$22=.0,$23=.0,$24=.0,$25=.0,$26=.0,$27=.0,$28=.0,$29=.0,$30=.0,$31=.0,$32=.0,$33=.0,$34=.0,$35=.0,$36=.0,$37=.0,$38=.0,$39=.0;
 var $40=.0,$41=0,$storemerge=0,$43=.0,$44=0,label=0;
 $1=($spacing)*((0.01227184630308513));
 $2=(+((($width|0))|0));
 $3=((512.0))/($2);
 $4=(+(Math_pow((+($rolloff)),256.0)));
 $5=($scale)*((0.001953125));
 $6=($count|0)==0;
 if ($6) {
  return;
 }
 $7=(((($count|0))/(2))&-1);
 $8=((($7)-(1))|0);
 $9=(+((($8|0))|0));
 $10=((-.0))-($1);
 $11=($9)+($offset);
 $12=($11)*($10);
 $13=($4)*($rolloff);
 $14=($rolloff)*($rolloff);
 $angle_026=$12;$_02527=$out;$_in=$count;
 while(1) {
  $16=((($_in)-(1))|0);
  $17=(($_02527+2)|0);
  $18=($3)*($angle_026);
  $19=(+(Math_abs((+($18)))));
  $20=$19<(3.141592653589793);
  if ($20) {
   $22=(+(Math_cos($angle_026)));
   $23=($22)*($rolloff);
   $24=((1.0))-($23);
   $25=($angle_026)*((256.0));
   $26=(+(Math_cos($25)));
   $27=($4)*($26);
   $28=($24)-($27);
   $29=($angle_026)*((255.0));
   $30=(+(Math_cos($29)));
   $31=($13)*($30);
   $32=($28)+($31);
   $33=($24)-($23);
   $34=($14)+($33);
   $35=($5)*($32);
   $36=($35)/($34);
   $37=($36)-($5);
   $38=(+(Math_cos($18)));
   $39=($38)*($37);
   $40=($37)+($39);
   $41=(~~($40));
   $storemerge=$41;
  } else {
   $storemerge=0;
  }
  HEAP16[(($_02527)>>1)]=$storemerge;
  $43=($1)+($angle_026);
  $44=($16|0)==0;
  if ($44) {
   break;
  } else {
   $angle_026=$43;$_02527=$17;$_in=$16;
  }
 }
 return;
}
function __ZN14Fir_Resampler_10skip_inputEl($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_count=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this)|0);
 $4=((__ZNK13blargg_vectorIsE5beginEv($3))|0);
 $5=$2;
 $6=$4;
 $7=((($5)-($6))|0);
 $8=$7>>1;
 $9=(($this+20)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10<<1;
 $12=((($8)-($11))|0);
 $13=($12|0)<($count|0);
 $_count=($13?$12:$count);
 $14=((($8)-($_count))|0);
 $15=((__ZNK13blargg_vectorIsEixEj($3,$14))|0);
 HEAP32[(($1)>>2)]=$15;
 $16=((__ZNK13blargg_vectorIsE5beginEv($3))|0);
 $17=$16;
 $18=((__ZNK13blargg_vectorIsEixEj($3,$_count))|0);
 $19=$18;
 $20=$14<<1;
 _memmove((($17)|0),(($19)|0),(($20)|0));
 return (($_count)|0);
}
function __ZN6Gb_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,label=0;
 $1=(($this+376)|0);
 __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
 $2=(($this+1192)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($2);
 $3=(($this+96)|0);
 HEAP32[(($3)>>2)]=$1;
 $4=(($this+164)|0);
 HEAP32[(($4)>>2)]=$1;
 $5=(($this+228)|0);
 HEAP32[(($5)>>2)]=$2;
 $6=(($this+320)|0);
 HEAP32[(($6)>>2)]=$2;
 $7=(($this+44)|0);
 $8=(($this)|0);
 HEAP32[(($8)>>2)]=$7;
 $9=(($this+112)|0);
 $10=(($this+4)|0);
 HEAP32[(($10)>>2)]=$9;
 $11=(($this+180)|0);
 $12=(($this+8)|0);
 HEAP32[(($12)>>2)]=$11;
 $13=(($this+268)|0);
 $14=(($this+12)|0);
 HEAP32[(($14)>>2)]=$13;
 $15=(($this)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($this+328)|0);
 $18=(($16+24)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($this+4)|0);
 $20=$16;
 _memset((((($20)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $21=((HEAP32[(($19)>>2)])|0);
 $22=(($this+333)|0);
 $23=(($21+24)|0);
 HEAP32[(($23)>>2)]=$22;
 $24=(($this+8)|0);
 $25=$21;
 _memset((((($25)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $26=((HEAP32[(($24)>>2)])|0);
 $27=(($this+338)|0);
 $28=(($26+24)|0);
 HEAP32[(($28)>>2)]=$27;
 $29=(($this+12)|0);
 $30=$26;
 _memset((((($30)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $31=((HEAP32[(($29)>>2)])|0);
 $32=(($this+343)|0);
 $33=(($31+24)|0);
 HEAP32[(($33)>>2)]=$32;
 $34=$31;
 _memset((((($34)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 __ZN6Gb_Apu9set_tempoEd($this,1.0);
 __ZN6Gb_Apu6volumeEd($this,1.0);
 __ZN6Gb_Apu5resetEv($this);
 return;
}
function __ZN10Blip_SynthILi8ELi1EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN10Blip_SynthILi8ELi1EEC2Ev($this);
 return;
}
function __ZN6Gb_Apu9set_tempoEd($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$4=.0,$5=0,$storemerge=0,label=0;
 $1=(($this+24)|0);
 $2=$t!=(1.0);
 if ($2) {
  $4=((16384.0))/($t);
  $5=(~~($4));
  $storemerge=$5;
 } else {
  $storemerge=16384;
 }
 HEAP32[(($1)>>2)]=$storemerge;
 return;
}
function __ZN6Gb_Apu6volumeEd($this,$vol){
 $this=($this)|0;
 $vol=+($vol);
 var $1=.0,$2=0,label=0;
 $1=($vol)*((0.000625));
 $2=(($this+32)|0);
 HEAPF64[(($2)>>3)]=$1;
 __ZN6Gb_Apu13update_volumeEv($this);
 return;
}
function __ZN6Gb_Apu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this+16)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+20)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+40)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+44)|0);
 __ZN9Gb_Square5resetEv($4);
 $5=(($this+112)|0);
 __ZN9Gb_Square5resetEv($5);
 $6=(($this+180)|0);
 __ZN6Gb_Osc5resetEv($6);
 $7=(($this+268)|0);
 __ZN6Gb_Env5resetEv($7);
 $8=(($this+324)|0);
 HEAP32[(($8)>>2)]=1;
 $9=(($this+232)|0);
 HEAP32[(($9)>>2)]=0;
 $10=(($this+348)|0);
 HEAP8[($10)]=119;
 __ZN6Gb_Apu13update_volumeEv($this);
 $11=(($this+350)|0);
 HEAP8[($11)]=1;
 __ZN6Gb_Apu14write_registerEiji($this,0,65318,0);
 $12=(($this+236)|0);
 (_memcpy((($12)|0), ((11664)|0), 32)|0);
 return;
}
function __ZN6Gb_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+376)|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+1192)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
 return;
}
function __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN6Gb_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right){
 $this=($this)|0;
 $index=($index)|0;
 $center=($center)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$_not=0,$4=0,$or_cond=0,$5=0,$or_cond17=0,$or_cond17_not=0,$or_cond19=0,$or_cond20=0,$or_cond21=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var label=0;
 $1=($index>>>0)<((4)>>>0);
 if (!($1)) {
  ___assert_fail(((7912)|0),((7944)|0),((59)|0),((9168)|0));
 }
 $_not=($center|0)==0;
 $4=($left|0)==0;
 $or_cond=$_not|$4;
 $5=($right|0)==0;
 $or_cond17=$or_cond|$5;
 $or_cond17_not=$or_cond17^1;
 $or_cond19=$_not&$4;
 $or_cond20=$or_cond19&$5;
 $or_cond21=$or_cond20|$or_cond17_not;
 if ($or_cond21) {
  $8=(($this+($index<<2))|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9+4)|0);
  HEAP32[(($10)>>2)]=$right;
  $11=(($9+8)|0);
  HEAP32[(($11)>>2)]=$left;
  $12=(($9+12)|0);
  HEAP32[(($12)>>2)]=$center;
  $13=(($9+20)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=(($9+($14<<2))|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=(($9+16)|0);
  HEAP32[(($17)>>2)]=$16;
  return;
 } else {
  ___assert_fail(((5320)|0),((7944)|0),((60)|0),((9168)|0));
 }
}
function __ZN6Gb_Apu13update_volumeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=.0,$10=0,$11=.0,$12=.0,$13=0,$14=0,label=0;
 $1=(($this+348)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3&7;
 $5=$3>>>4;
 $6=$5&7;
 $7=((__Z3maxIiET_S0_S0_($4,$6))|0);
 $8=((($7)+(1))|0);
 $9=(+((($8|0))|0));
 $10=(($this+32)|0);
 $11=(+(HEAPF64[(($10)>>3)]));
 $12=($11)*($9);
 $13=(($this+376)|0);
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($13,$12);
 $14=(($this+1192)|0);
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($14,$12);
 return;
}
function __Z3maxIiET_S0_S0_($x,$y){
 $x=($x)|0;
 $y=($y)|0;
 var $1=0,$y_x=0,label=0;
 $1=($x|0)<($y|0);
 $y_x=($1?$y:$x);
 return (($y_x)|0);
}
function __ZN10Blip_SynthILi8ELi1EE6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN11Blip_Synth_11volume_unitEd($1,$v);
 return;
}
function __ZN6Gb_Env5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+48)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this)|0);
 __ZN6Gb_Osc5resetEv($2);
 return;
}
function __ZN6Gb_Apu14write_registerEiji($this,$time,$addr,$data){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$14=0,$15=0,$16=0,$or_cond=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0,$26=0;
 var $27=0,$29=0,$30=0,$31=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$43=0,$44=0,$46=0,$48=0,$addr_off=0,$49=0,$51=0,$52=0,$_lobit=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$75=0,$76=0,$77=0,$78=0,$or_cond57=0,$80=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0;
 var $95=0,$96=0,$97=0,$i4_061=0,$98=0,$99=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$108=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0;
 var $117=0,$119=0,$120=0,$121=0,$122=0,$or_cond57_1=0,$124=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0;
 var $139=0,$140=0,$141=0,$143=0,$144=0,$145=0,$146=0,$or_cond57_2=0,$148=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0;
 var $161=0,$162=0,$163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$170=0,$or_cond57_3=0,$172=0,$or_cond58=0,$or_cond58_not=0,$174=0,$175=0,$or_cond60=0,$177=0,$178=0,$179=0,$181=0;
 var $182=0,$183=0,$185=0,$187=0,$188=0,$189=0,$190=0,$191=0,$193=0,$194=0,$195=0,$197=0,$198=0,$199=0,$201=0,$203=0,$204=0,$205=0,$206=0,$207=0;
 var $209=0,$210=0,$211=0,$213=0,$214=0,$215=0,$217=0,$219=0,$220=0,$221=0,label=0;
 $1=($data>>>0)<((256)>>>0);
 if (!($1)) {
  ___assert_fail(((1968)|0),((7944)|0),((202)|0),((9136)|0));
 }
 $4=((($addr)-(65296))|0);
 $5=($4>>>0)>((47)>>>0);
 if ($5) {
  return;
 }
 __ZN6Gb_Apu9run_untilEi($this,$time);
 $7=(($this+328+$4)|0);
 $8=((HEAP8[($7)])|0);
 $9=(($data)&255);
 HEAP8[($7)]=$9;
 $10=($addr>>>0)<((65316)>>>0);
 if ($10) {
  $12=(((($4|0))/(5))&-1);
  __ZN6Gb_Apu9write_oscEiii($this,$12,$4,$data);
  return;
 }
 $14=($8&255);
 $15=($addr|0)!=65316;
 $16=($14|0)==($data|0);
 $or_cond=$15|$16;
 if (!($or_cond)) {
  $18=(($this+1192)|0);
  $19=(($this)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=(($20+32)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  HEAP32[(($21)>>2)]=0;
  $23=($22|0)==0;
  do {
   if (!($23)) {
    $25=(($20+44)|0);
    $26=((HEAP32[(($25)>>2)])|0);
    $27=($26|0)==0;
    if ($27) {
     break;
    }
    $29=(($20+16)|0);
    $30=((HEAP32[(($29)>>2)])|0);
    $31=($30|0)==0;
    if ($31) {
     break;
    }
    $33=(((-$22))|0);
    __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($18,$time,$33,$30);
   }
  } while(0);
  $35=(($this+4)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=(($36+32)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  HEAP32[(($37)>>2)]=0;
  $39=($38|0)==0;
  do {
   if (!($39)) {
    $177=(($36+44)|0);
    $178=((HEAP32[(($177)>>2)])|0);
    $179=($178|0)==0;
    if ($179) {
     break;
    }
    $181=(($36+16)|0);
    $182=((HEAP32[(($181)>>2)])|0);
    $183=($182|0)==0;
    if ($183) {
     break;
    }
    $185=(((-$38))|0);
    __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($18,$time,$185,$182);
   }
  } while(0);
  $187=(($this+8)|0);
  $188=((HEAP32[(($187)>>2)])|0);
  $189=(($188+32)|0);
  $190=((HEAP32[(($189)>>2)])|0);
  HEAP32[(($189)>>2)]=0;
  $191=($190|0)==0;
  do {
   if (!($191)) {
    $193=(($188+44)|0);
    $194=((HEAP32[(($193)>>2)])|0);
    $195=($194|0)==0;
    if ($195) {
     break;
    }
    $197=(($188+16)|0);
    $198=((HEAP32[(($197)>>2)])|0);
    $199=($198|0)==0;
    if ($199) {
     break;
    }
    $201=(((-$190))|0);
    __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($18,$time,$201,$198);
   }
  } while(0);
  $203=(($this+12)|0);
  $204=((HEAP32[(($203)>>2)])|0);
  $205=(($204+32)|0);
  $206=((HEAP32[(($205)>>2)])|0);
  HEAP32[(($205)>>2)]=0;
  $207=($206|0)==0;
  do {
   if (!($207)) {
    $209=(($204+44)|0);
    $210=((HEAP32[(($209)>>2)])|0);
    $211=($210|0)==0;
    if ($211) {
     break;
    }
    $213=(($204+16)|0);
    $214=((HEAP32[(($213)>>2)])|0);
    $215=($214|0)==0;
    if ($215) {
     break;
    }
    $217=(((-$206))|0);
    __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($18,$time,$217,$214);
   }
  } while(0);
  $219=(($this+192)|0);
  $220=((HEAP32[(($219)>>2)])|0);
  $221=($220|0)==0;
  if (!($221)) {
   $41=(($this+1192)|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($41,$time,30,$220);
  }
  __ZN6Gb_Apu13update_volumeEv($this);
  $43=((HEAP32[(($219)>>2)])|0);
  $44=($43|0)==0;
  if ($44) {
   return;
  }
  $46=(($this+1192)|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($46,$time,-30,$43);
  return;
 }
 $48=($addr|0)!=65318;
 $addr_off=((($addr)-(65317))|0);
 $49=($addr_off>>>0)<((2)>>>0);
 if (!($49)) {
  $108=($addr>>>0)>((65327)>>>0);
  if (!($108)) {
   return;
  }
  $110=$addr<<1;
  $111=$110&30;
  $112=$data>>>4;
  $113=(($112)&255);
  $114=(($this+236+$111)|0);
  HEAP8[($114)]=$113;
  $115=$9&15;
  $116=$111|1;
  $117=(($this+236+$116)|0);
  HEAP8[($117)]=$115;
  return;
 }
 $51=(($this+350)|0);
 $52=((HEAP8[($51)])|0);
 $_lobit=(($52<<24)>>24)>>7;
 $53=(($_lobit<<24)>>24);
 $54=(($this+349)|0);
 $55=((HEAP8[($54)])|0);
 $56=($55&255);
 $57=$56&$53;
 $58=(($this+1192)|0);
 $59=(($this)|0);
 $60=((HEAP32[(($59)>>2)])|0);
 $61=(($60+44)|0);
 $62=((HEAP32[(($61)>>2)])|0);
 $63=$62&$53;
 HEAP32[(($61)>>2)]=$63;
 $64=(($60+16)|0);
 $65=((HEAP32[(($64)>>2)])|0);
 $66=$57>>>3;
 $67=$66&2;
 $68=$57&1;
 $69=$67|$68;
 $70=(($60+20)|0);
 HEAP32[(($70)>>2)]=$69;
 $71=(($60+($69<<2))|0);
 $72=((HEAP32[(($71)>>2)])|0);
 HEAP32[(($64)>>2)]=$72;
 $73=($72|0)==($65|0);
 do {
  if (!($73)) {
   $75=(($60+32)|0);
   $76=((HEAP32[(($75)>>2)])|0);
   HEAP32[(($75)>>2)]=0;
   $77=($76|0)==0;
   $78=($65|0)==0;
   $or_cond57=$77|$78;
   if ($or_cond57) {
    break;
   }
   $80=(((-$76))|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($58,$time,$80,$65);
  }
 } while(0);
 $82=(($this+4)|0);
 $83=((HEAP32[(($82)>>2)])|0);
 $84=(($83+44)|0);
 $85=((HEAP32[(($84)>>2)])|0);
 $86=$85&$53;
 HEAP32[(($84)>>2)]=$86;
 $87=$57>>>1;
 $88=(($83+16)|0);
 $89=((HEAP32[(($88)>>2)])|0);
 $90=$57>>>4;
 $91=$90&2;
 $92=$87&1;
 $93=$91|$92;
 $94=(($83+20)|0);
 HEAP32[(($94)>>2)]=$93;
 $95=(($83+($93<<2))|0);
 $96=((HEAP32[(($95)>>2)])|0);
 HEAP32[(($88)>>2)]=$96;
 $97=($96|0)==($89|0);
 do {
  if (!($97)) {
   $119=(($83+32)|0);
   $120=((HEAP32[(($119)>>2)])|0);
   HEAP32[(($119)>>2)]=0;
   $121=($120|0)==0;
   $122=($89|0)==0;
   $or_cond57_1=$121|$122;
   if ($or_cond57_1) {
    break;
   }
   $124=(((-$120))|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($58,$time,$124,$89);
  }
 } while(0);
 $126=(($this+8)|0);
 $127=((HEAP32[(($126)>>2)])|0);
 $128=(($127+44)|0);
 $129=((HEAP32[(($128)>>2)])|0);
 $130=$129&$53;
 HEAP32[(($128)>>2)]=$130;
 $131=$57>>>2;
 $132=(($127+16)|0);
 $133=((HEAP32[(($132)>>2)])|0);
 $134=$57>>>5;
 $135=$134&2;
 $136=$131&1;
 $137=$135|$136;
 $138=(($127+20)|0);
 HEAP32[(($138)>>2)]=$137;
 $139=(($127+($137<<2))|0);
 $140=((HEAP32[(($139)>>2)])|0);
 HEAP32[(($132)>>2)]=$140;
 $141=($140|0)==($133|0);
 do {
  if (!($141)) {
   $143=(($127+32)|0);
   $144=((HEAP32[(($143)>>2)])|0);
   HEAP32[(($143)>>2)]=0;
   $145=($144|0)==0;
   $146=($133|0)==0;
   $or_cond57_2=$145|$146;
   if ($or_cond57_2) {
    break;
   }
   $148=(((-$144))|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($58,$time,$148,$133);
  }
 } while(0);
 $150=(($this+12)|0);
 $151=((HEAP32[(($150)>>2)])|0);
 $152=(($151+44)|0);
 $153=((HEAP32[(($152)>>2)])|0);
 $154=$153&$53;
 HEAP32[(($152)>>2)]=$154;
 $155=$57>>>3;
 $156=(($151+16)|0);
 $157=((HEAP32[(($156)>>2)])|0);
 $158=$57>>>6;
 $159=$158&2;
 $160=$155&1;
 $161=$159|$160;
 $162=(($151+20)|0);
 HEAP32[(($162)>>2)]=$161;
 $163=(($151+($161<<2))|0);
 $164=((HEAP32[(($163)>>2)])|0);
 HEAP32[(($156)>>2)]=$164;
 $165=($164|0)==($157|0);
 do {
  if (!($165)) {
   $167=(($151+32)|0);
   $168=((HEAP32[(($167)>>2)])|0);
   HEAP32[(($167)>>2)]=0;
   $169=($168|0)==0;
   $170=($157|0)==0;
   $or_cond57_3=$169|$170;
   if ($or_cond57_3) {
    break;
   }
   $172=(((-$168))|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($58,$time,$172,$157);
  }
 } while(0);
 $or_cond58=$48|$16;
 $or_cond58_not=$or_cond58^1;
 $174=$data&128;
 $175=($174|0)==0;
 $or_cond60=$175&$or_cond58_not;
 if ($or_cond60) {
  $i4_061=0;
 } else {
  return;
 }
 while(1) {
  $98=($i4_061|0)==22;
  if ($98) {
   $99=((($i4_061)+(1))|0);
   $i4_061=$99;
   continue;
  } else {
   $101=((($i4_061)+(65296))|0);
   $102=((18080+$i4_061)|0);
   $103=((HEAP8[($102)])|0);
   $104=($103&255);
   __ZN6Gb_Apu14write_registerEiji($this,$time,$101,$104);
   $105=((($i4_061)+(1))|0);
   $106=($105>>>0)<((32)>>>0);
   if ($106) {
    $i4_061=$105;
    continue;
   } else {
    break;
   }
  }
 }
 return;
}
function __ZN6Gb_Apu9run_untilEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$end_time_=0,$i_024=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$48=0,$49=0,$50=0,$playing_0=0,$54=0,$56=0,$58=0,$59=0,$60=0,$62=0,$63=0,$65=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$76=0,$77=0,$78=0,label=0;
 $1=(($this+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($end_time|0);
 if ($3) {
  ___assert_fail(((3856)|0),((7944)|0),((131)|0),((9104)|0));
 }
 $6=($2|0)==($end_time|0);
 if ($6) {
  return;
 }
 $7=(($this+16)|0);
 $8=(($this+44)|0);
 $9=(($this+112)|0);
 $10=(($this+180)|0);
 $11=(($this+268)|0);
 $12=(($this+24)|0);
 $13=(($this+44)|0);
 $14=(($13)|0);
 $15=(($this+112)|0);
 $16=(($15)|0);
 $17=(($this+180)|0);
 $18=(($this+268)|0);
 $19=(($18)|0);
 $20=(($this+40)|0);
 $21=(($13)|0);
 $22=(($15)|0);
 $23=(($18)|0);
 while(1) {
  $24=((HEAP32[(($7)>>2)])|0);
  $25=($24|0)>($end_time|0);
  $end_time_=($25?$end_time:$24);
  $i_024=0;
  L1403: while(1) {
   $27=(($this+($i_024<<2))|0);
   $28=((HEAP32[(($27)>>2)])|0);
   $29=(($28+16)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $31=($30|0)==0;
   do {
    if (!($31)) {
     __ZN11Blip_Buffer12set_modifiedEv($30);
     $33=(($28+44)|0);
     $34=((HEAP32[(($33)>>2)])|0);
     $35=($34|0)==0;
     do {
      if ($35) {
       $playing_0=0;
      } else {
       $37=(($28+36)|0);
       $38=((HEAP32[(($37)>>2)])|0);
       $39=($38|0)==0;
       if ($39) {
        $playing_0=0;
        break;
       }
       $41=(($28+24)|0);
       $42=((HEAP32[(($41)>>2)])|0);
       $43=(($42+4)|0);
       $44=((HEAP8[($43)])|0);
       $45=$44&64;
       $46=(($45<<24)>>24)==0;
       if (!($46)) {
        $48=(($28+40)|0);
        $49=((HEAP32[(($48)>>2)])|0);
        $50=($49|0)==0;
        if ($50) {
         $playing_0=0;
         break;
        }
       }
       $playing_0=-1;
      }
     } while(0);
     if (((($i_024|0))|0)==((0)|0)) {
      $54=((HEAP32[(($1)>>2)])|0);
      __ZN9Gb_Square3runEiii($8,$54,$end_time_,$playing_0);
     } else if (((($i_024|0))|0)==((1)|0)) {
      $56=((HEAP32[(($1)>>2)])|0);
      __ZN9Gb_Square3runEiii($9,$56,$end_time_,$playing_0);
     } else if (((($i_024|0))|0)==((2)|0)) {
      $58=((HEAP32[(($1)>>2)])|0);
      __ZN7Gb_Wave3runEiii($10,$58,$end_time_,$playing_0);
     } else if (((($i_024|0))|0)==((3)|0)) {
      label = 1229;
      break L1403;
     } else {
      break;
     }
     $60=((($i_024)+(1))|0);
     $i_024=$60;
     continue L1403;
    }
   } while(0);
   $62=((($i_024)+(1))|0);
   $63=($62|0)<4;
   if ($63) {
    $i_024=$62;
   } else {
    break;
   }
  }
  if ((label|0) == 1229) {
   label = 0;
   $59=((HEAP32[(($1)>>2)])|0);
   __ZN8Gb_Noise3runEiii($11,$59,$end_time_,$playing_0);
  }
  HEAP32[(($1)>>2)]=$end_time_;
  $65=($end_time_|0)==($end_time|0);
  if ($65) {
   break;
  }
  $67=((HEAP32[(($12)>>2)])|0);
  $68=((HEAP32[(($7)>>2)])|0);
  $69=((($68)+($67))|0);
  HEAP32[(($7)>>2)]=$69;
  __ZN6Gb_Osc12clock_lengthEv($14);
  __ZN6Gb_Osc12clock_lengthEv($16);
  __ZN6Gb_Osc12clock_lengthEv($17);
  __ZN6Gb_Osc12clock_lengthEv($19);
  $70=((HEAP32[(($20)>>2)])|0);
  $71=((($70)+(1))|0);
  $72=$71&3;
  HEAP32[(($20)>>2)]=$72;
  $73=($72|0)==0;
  if ($73) {
   __ZN6Gb_Env14clock_envelopeEv($21);
   __ZN6Gb_Env14clock_envelopeEv($22);
   __ZN6Gb_Env14clock_envelopeEv($23);
  }
  $76=((HEAP32[(($20)>>2)])|0);
  $77=$76&1;
  $78=($77|0)==0;
  if ($78) {
   continue;
  }
  __ZN9Gb_Square11clock_sweepEv($13);
 }
 return;
}
function __ZN6Gb_Apu9end_frameEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$16=0,label=0;
 $1=(($this+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($end_time|0);
 if ($3) {
  __ZN6Gb_Apu9run_untilEi($this,$end_time);
 }
 $6=(($this+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)<($end_time|0);
 if ($8) {
  ___assert_fail(((3152)|0),((7944)|0),((193)|0),((9120)|0));
 }
 $11=((($7)-($end_time))|0);
 HEAP32[(($6)>>2)]=$11;
 $12=((HEAP32[(($1)>>2)])|0);
 $13=($12|0)<($end_time|0);
 if ($13) {
  ___assert_fail(((2512)|0),((7944)|0),((196)|0),((9120)|0));
 } else {
  $16=((($12)-($end_time))|0);
  HEAP32[(($1)>>2)]=$16;
  return;
 }
}
function __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($this,$t,$delta,$buf){
 $this=($this)|0;
 $t=($t)|0;
 $delta=($delta)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($buf)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=(($buf+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($3)+($5))|0);
 __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
 return;
}
function __ZN6Gb_Apu13read_registerEij($this,$time,$addr){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$29=0,$data_1=0,$31=0,$32=0,$33=0,$34=0,$35=0,$data_2=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$48=0;
 var $data_1_1=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$67=0,$data_1_2=0,$69=0,$70=0,$71=0;
 var $72=0,$73=0,$75=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$86=0,label=0;
 __ZN6Gb_Apu9run_untilEi($this,$time);
 $1=((($addr)-(65296))|0);
 $2=($1>>>0)<((48)>>>0);
 if (!($2)) {
  ___assert_fail(((1536)|0),((7944)|0),((291)|0),((9152)|0));
  return ((0)|0);
 }
 $5=(($this+328+$1)|0);
 $6=((HEAP8[($5)])|0);
 $7=($6&255);
 $8=($addr|0)==65318;
 if (!($8)) {
  $data_2=$7;
  return (($data_2)|0);
 }
 $10=$7&128;
 $11=$10|112;
 $12=(($this)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13+44)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=($15|0)==0;
 do {
  if ($16) {
   $data_1=$11;
  } else {
   $18=(($13+40)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=($19|0)==0;
   if ($20) {
    $22=(($13+24)|0);
    $23=((HEAP32[(($22)>>2)])|0);
    $24=(($23+4)|0);
    $25=((HEAP8[($24)])|0);
    $26=$25&64;
    $27=(($26<<24)>>24)==0;
    if (!($27)) {
     $data_1=$11;
     break;
    }
   }
   $29=$10|113;
   $data_1=$29;
  }
 } while(0);
 $31=(($this+4)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($32+44)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=($34|0)==0;
 do {
  if ($35) {
   $data_1_1=$data_1;
  } else {
   $37=(($32+40)|0);
   $38=((HEAP32[(($37)>>2)])|0);
   $39=($38|0)==0;
   if ($39) {
    $41=(($32+24)|0);
    $42=((HEAP32[(($41)>>2)])|0);
    $43=(($42+4)|0);
    $44=((HEAP8[($43)])|0);
    $45=$44&64;
    $46=(($45<<24)>>24)==0;
    if (!($46)) {
     $data_1_1=$data_1;
     break;
    }
   }
   $48=$data_1|2;
   $data_1_1=$48;
  }
 } while(0);
 $50=(($this+8)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=(($51+44)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=($53|0)==0;
 do {
  if ($54) {
   $data_1_2=$data_1_1;
  } else {
   $56=(($51+40)|0);
   $57=((HEAP32[(($56)>>2)])|0);
   $58=($57|0)==0;
   if ($58) {
    $60=(($51+24)|0);
    $61=((HEAP32[(($60)>>2)])|0);
    $62=(($61+4)|0);
    $63=((HEAP8[($62)])|0);
    $64=$63&64;
    $65=(($64<<24)>>24)==0;
    if (!($65)) {
     $data_1_2=$data_1_1;
     break;
    }
   }
   $67=$data_1_1|4;
   $data_1_2=$67;
  }
 } while(0);
 $69=(($this+12)|0);
 $70=((HEAP32[(($69)>>2)])|0);
 $71=(($70+44)|0);
 $72=((HEAP32[(($71)>>2)])|0);
 $73=($72|0)==0;
 if ($73) {
  $data_2=$data_1_2;
  return (($data_2)|0);
 }
 $75=(($70+40)|0);
 $76=((HEAP32[(($75)>>2)])|0);
 $77=($76|0)==0;
 do {
  if ($77) {
   $79=(($70+24)|0);
   $80=((HEAP32[(($79)>>2)])|0);
   $81=(($80+4)|0);
   $82=((HEAP8[($81)])|0);
   $83=$82&64;
   $84=(($83<<24)>>24)==0;
   if ($84) {
    break;
   } else {
    $data_2=$data_1_2;
   }
   return (($data_2)|0);
  }
 } while(0);
 $86=$data_1_2|8;
 $data_2=$86;
 return (($data_2)|0);
}
function __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf){
 $this=($this)|0;
 $time=($time)|0;
 $delta=($delta)|0;
 $blip_buf=($blip_buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_sum=0,$14=0,$15=0,$16=0,$17=0,$_sum41=0,$18=0,$19=0,$20=0;
 var $_sum42=0,$21=0,$22=0,$23=0,$24=0,$_sum43=0,$25=0,$26=0,$27=0,$_sum4445=0,$28=0,$29=0,$30=0,$31=0,$_sum46=0,$32=0,$33=0,$34=0,$_sum47=0,$35=0;
 var $36=0,$37=0,$38=0,$_sum48=0,$39=0,$40=0,$41=0,$42=0,$_sum4950=0,$43=0,$44=0,$45=0,$46=0,$_sum51=0,$47=0,$48=0,$49=0,$_sum5253=0,$50=0,$51=0;
 var $52=0,$53=0,$_sum54=0,$54=0,$55=0,$56=0,$_sum5556=0,$57=0,$58=0,$59=0,$60=0,$_sum57=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$_sum58=0,$67=0;
 var $68=0,$69=0,label=0;
 $1=$time>>>16;
 $2=(($blip_buf+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($1|0)<($3|0);
 if ($4) {
  $7=(($this+8)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(Math_imul($8,$delta)|0);
  $10=(($blip_buf+8)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=$time>>>10;
  $13=$12&63;
  $_sum=(((64)-($13))|0);
  $14=(($this+40+($_sum<<1))|0);
  $15=((HEAP16[(($14)>>1)])|0);
  $16=(($15<<16)>>16);
  $17=(Math_imul($16,$9)|0);
  $_sum41=((($1)+(4))|0);
  $18=(($11+($_sum41<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((($17)+($19))|0);
  $_sum42=((($_sum)+(64))|0);
  $21=(($this+40+($_sum42<<1))|0);
  $22=((HEAP16[(($21)>>1)])|0);
  $23=(($22<<16)>>16);
  $24=(Math_imul($23,$9)|0);
  $_sum43=((($1)+(5))|0);
  $25=(($11+($_sum43<<2))|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((($24)+($26))|0);
  $_sum4445=$_sum|128;
  $28=(($this+40+($_sum4445<<1))|0);
  $29=((HEAP16[(($28)>>1)])|0);
  $30=(($29<<16)>>16);
  HEAP32[(($18)>>2)]=$20;
  HEAP32[(($25)>>2)]=$27;
  $31=(Math_imul($30,$9)|0);
  $_sum46=((($1)+(6))|0);
  $32=(($11+($_sum46<<2))|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=((($31)+($33))|0);
  $_sum47=((($_sum)+(192))|0);
  $35=(($this+40+($_sum47<<1))|0);
  $36=((HEAP16[(($35)>>1)])|0);
  $37=(($36<<16)>>16);
  $38=(Math_imul($37,$9)|0);
  $_sum48=((($1)+(7))|0);
  $39=(($11+($_sum48<<2))|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=((($38)+($40))|0);
  $42=(($this+40+($13<<1))|0);
  $_sum4950=$13|192;
  $43=(($this+40+($_sum4950<<1))|0);
  $44=((HEAP16[(($43)>>1)])|0);
  $45=(($44<<16)>>16);
  HEAP32[(($32)>>2)]=$34;
  HEAP32[(($39)>>2)]=$41;
  $46=(Math_imul($45,$9)|0);
  $_sum51=((($1)+(8))|0);
  $47=(($11+($_sum51<<2))|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=((($46)+($48))|0);
  $_sum5253=$13|128;
  $50=(($this+40+($_sum5253<<1))|0);
  $51=((HEAP16[(($50)>>1)])|0);
  $52=(($51<<16)>>16);
  $53=(Math_imul($52,$9)|0);
  $_sum54=((($1)+(9))|0);
  $54=(($11+($_sum54<<2))|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=((($53)+($55))|0);
  $_sum5556=$13|64;
  $57=(($this+40+($_sum5556<<1))|0);
  $58=((HEAP16[(($57)>>1)])|0);
  $59=(($58<<16)>>16);
  HEAP32[(($47)>>2)]=$49;
  HEAP32[(($54)>>2)]=$56;
  $60=(Math_imul($59,$9)|0);
  $_sum57=((($1)+(10))|0);
  $61=(($11+($_sum57<<2))|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=((($60)+($62))|0);
  $64=((HEAP16[(($42)>>1)])|0);
  $65=(($64<<16)>>16);
  $66=(Math_imul($65,$9)|0);
  $_sum58=((($1)+(11))|0);
  $67=(($11+($_sum58<<2))|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $69=((($66)+($68))|0);
  HEAP32[(($61)>>2)]=$63;
  HEAP32[(($67)>>2)]=$69;
  return;
 } else {
  ___assert_fail(((1144)|0),((688)|0),((343)|0),((8512)|0));
 }
}
function __ZN10Blip_SynthILi8ELi1EEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=(($this+40)|0);
 __ZN11Blip_Synth_C2EPsi($1,$2,8);
 return;
}
function __ZN7Gbs_Emu8cpu_readEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=((($addr)-(65296))|0);
 $2=($1>>>0)<((48)>>>0);
 if ($2) {
  $4=(($this+25072)|0);
  $5=((__ZNK7Gbs_Emu5clockEv($this))|0);
  $6=((__ZN6Gb_Apu13read_registerEij($4,$5,$addr))|0);
  return (($6)|0);
 } else {
  $8=(($this+272)|0);
  $9=$8;
  $10=((__ZN6Gb_Cpu8get_codeEj($9,$addr))|0);
  $11=((HEAP8[($10)])|0);
  $12=($11&255);
  return (($12)|0);
 }
  return 0;
}
function __ZN6Gb_Cpu8get_codeEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=$addr>>>13;
 $2=(($this+20)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+($1<<2))|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$addr&8191;
 $7=(($5+$6)|0);
 return (($7)|0);
}
function __ZNK7Gbs_Emu5clockEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+360)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+272)|0);
 $4=$3;
 $5=((__ZNK6Gb_Cpu6remainEv($4))|0);
 $6=((($2)-($5))|0);
 return (($6)|0);
}
function __ZN7Gbs_Emu9cpu_writeEji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,$19=0,$23=0,$24=0,label=0;
 $1=((($addr)-(40960))|0);
 $2=($1>>>0)<((24576)>>>0);
 if (!($2)) {
  $23=$addr^8192;
  $24=($23>>>0)<((8192)>>>0);
  if (!($24)) {
   return;
  }
  __ZN7Gbs_Emu8set_bankEi($this,$data);
  return;
 }
 $4=(($data)&255);
 $5=(($this+484+$1)|0);
 HEAP8[($5)]=$4;
 $6=$addr^57344;
 $7=($6>>>0)<((8064)>>>0);
 if (!($7)) {
  return;
 }
 $9=((($addr)-(65296))|0);
 $10=($9>>>0)<((48)>>>0);
 if ($10) {
  $12=(($this+25072)|0);
  $13=((__ZNK7Gbs_Emu5clockEv($this))|0);
  __ZN6Gb_Apu14write_registerEiji($12,$13,$addr,$data);
  return;
 }
 $15=$addr^65286;
 $16=($15>>>0)<((2)>>>0);
 if ($16) {
  __ZN7Gbs_Emu12update_timerEv($this);
  return;
 }
 $19=($addr|0)==65280;
 if ($19) {
  HEAP8[($5)]=0;
  return;
 } else {
  HEAP8[($5)]=-1;
  return;
 }
}
function __ZN6Gb_Cpu5resetEPv($this,$unmapped){
 $this=($this)|0;
 $unmapped=($unmapped)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+24)|0);
 $2=(($this+20)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($this+60)|0);
 HEAP32[(($3)>>2)]=0;
 __ZN6Gb_Cpu13set_code_pageEiPh($this,0,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,1,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,2,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,3,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,4,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,5,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,6,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,7,$unmapped);
 __ZN6Gb_Cpu13set_code_pageEiPh($this,8,$unmapped);
 $4=(($this)|0);
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN6Gb_Cpu13set_code_pageEiPh($this,$i,$p){
 $this=($this)|0;
 $i=($i)|0;
 $p=($p)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+($i<<2))|0);
 HEAP32[(($3)>>2)]=$p;
 return;
}
function __Z24blargg_verify_byte_orderv(){
 var $i=0,$i_0_cast1=0,$i_0_load2=0,$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $i=((sp)|0);
 HEAP32[(($i)>>2)]=1;
 $i_0_cast1=$i;
 $i_0_load2=((HEAP8[($i_0_cast1)])|0);
 $1=(($i_0_load2<<24)>>24)==0;
 if ($1) {
  ___assert_fail(((3120)|0),((2472)|0),((62)|0),((9648)|0));
 } else {
  STACKTOP=sp;return;
 }
}
function __ZN6Gb_Cpu8map_codeEjjPv($this,$start,$size,$data){
 $this=($this)|0;
 $start=($start)|0;
 $size=($size)|0;
 $data=($data)|0;
 var $1=0,$2=0,$5=0,$6=0,$9=0,$10=0,$11=0,$_in=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;
 $1=$start&8191;
 $2=($1|0)==0;
 if (!($2)) {
  ___assert_fail(((7600)|0),((7872)|0),((74)|0),((9080)|0));
 }
 $5=$size&8191;
 $6=($5|0)==0;
 if (!($6)) {
  ___assert_fail(((5296)|0),((7872)|0),((75)|0),((9080)|0));
 }
 $9=$start>>>13;
 $10=$size>>>13;
 $11=($10|0)==0;
 if ($11) {
  return;
 } else {
  $_in=$10;
 }
 while(1) {
  $12=((($_in)-(1))|0);
  $13=((($12)+($9))|0);
  $14=$12<<13;
  $15=(($data+$14)|0);
  __ZN6Gb_Cpu13set_code_pageEiPh($this,$13,$15);
  $16=($12|0)==0;
  if ($16) {
   break;
  } else {
   $_in=$12;
  }
 }
 return;
}
function __ZN6Gb_Cpu3runEi($this,$cycle_count){
 $this=($this)|0;
 $cycle_count=($cycle_count)|0;
 var $s=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$ld$0$0=0,$11$0=0,$ld$1$1=0,$11$1=0,$st$2$0=0,$st$3$1=0,$12=0,$13=0,$14=0;
 var $15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$_sum298=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0;
 var $34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0;
 var $54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0;
 var $74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0;
 var $94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0;
 var $114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0;
 var $134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0;
 var $154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0;
 var $174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0;
 var $194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0;
 var $214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0;
 var $234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$_in306=0,$_in307=0,$244=0,$sp_0300=0,$flags_0299=0,$245=0,$246=0,$247=0,$248=0,$250=0,$251=0;
 var $252=0,$254=0,$255=0,$256=0,$flags_0_be=0,$sp_0_be=0,$pc_0_be=0,$257=0,$258=0,$259=0,$260=0,$261=0,$_sum=0,$262=0,$263=0,$264=0,$265=0,$266=0,$268=0,$269=0;
 var $270=0,$272=0,$273=0,$274=0,$276=0,$277=0,$278=0,$280=0,$281=0,$283=0,$284=0,$285=0,$287=0,$288=0,$290=0,$291=0,$292=0,$294=0,$295=0,$297=0;
 var $298=0,$299=0,$301=0,$302=0,$temp_0=0,$pc_1=0,$304=0,$305=0,$306=0,$307=0,$308=0,$309=0,$310=0,$311=0,$313=0,$314=0,$315=0,$316=0,$317=0,$318=0;
 var $319=0,$320=0,$322=0,$323=0,$324=0,$326=0,$327=0,$328=0,$329=0,$330=0,$332=0,$data_0=0,$pc_2=0,$334=0,$335=0,$336=0,$data_1=0,$op_0=0,$pc_3=0,$338=0;
 var $339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$349=0,$351=0,$352=0,$353=0,$354=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0;
 var $361=0,$362=0,$363=0,$364=0,$366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$375=0,$376=0,$377=0,$pc_4=0,$379=0,$pc_5=0,$381=0,$382=0;
 var $data_2=0,$pc_6=0,$384=0,$385=0,$386=0,$387=0,$388=0,$389=0,$391=0,$392=0,$394=0,$395=0,$396=0,$397=0,$398=0,$399=0,$400=0,$402=0,$404=0,$405=0;
 var $406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0,$414=0,$416=0,$417=0,$418=0,$419=0,$420=0,$421=0,$422=0,$424=0,$425=0,$426=0,$427=0;
 var $428=0,$temp2_0=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$437=0,$439=0,$440=0,$441=0,$442=0,$443=0,$444=0,$445=0,$446=0,$447=0,$448=0;
 var $_=0,$449=0,$450=0,$451=0,$453=0,$454=0,$455=0,$456=0,$457=0,$458=0,$459=0,$460=0,$461=0,$462=0,$464=0,$465=0,$466=0,$467=0,$468=0,$469=0;
 var $470=0,$471=0,$472=0,$473=0,$474=0,$476=0,$477=0,$478=0,$480=0,$481=0,$482=0,$483=0,$484=0,$temp6_0=0,$486=0,$487=0,$488=0,$490=0,$491=0,$492=0;
 var $494=0,$495=0,$496=0,$497=0,$498=0,$500=0,$data_3=0,$502=0,$503=0,$504=0,$506=0,$data_4=0,$508=0,$509=0,$510=0,$511=0,$512=0,$515=0,$516=0,$data_5=0;
 var $op_1=0,$pc_7=0,$518=0,$519=0,$520=0,$521=0,$522=0,$523=0,$524=0,$525=0,$527=0,$528=0,$529=0,$531=0,$532=0,$data_6=0,$op_2=0,$pc_8=0,$534=0,$535=0;
 var $536=0,$537=0,$538=0,$539=0,$541=0,$542=0,$op_3=0,$544=0,$545=0,$546=0,$548=0,$549=0,$550=0,$data_7=0,$op_4=0,$flags_1=0,$pc_9=0,$552=0,$553=0,$554=0;
 var $555=0,$flags_2=0,$556=0,$558=0,$559=0,$560=0,$562=0,$563=0,$564=0,$565=0,$566=0,$op_5=0,$flags_3=0,$pc_10=0,$568=0,$569=0,$570=0,$572=0,$573=0,$574=0;
 var $575=0,$576=0,$577=0,$578=0,$579=0,$581=0,$582=0,$583=0,$584=0,$585=0,$587=0,$588=0,$590=0,$591=0,$593=0,$594=0,$595=0,$596=0,$597=0,$599=0;
 var $600=0,$602=0,$603=0,$604=0,$606=0,$607=0,$608=0,$610=0,$611=0,$613=0,$614=0,$616=0,$617=0,$618=0,$620=0,$621=0,$temp7_0=0,$pc_11=0,$623=0,$624=0;
 var $626=0,$628=0,$630=0,$632=0,$634=0,$636=0,$638=0,$639=0,$640=0,$642=0,$644=0,$645=0,$646=0,$647=0,$649=0,$650=0,$652=0,$653=0,$654=0,$655=0;
 var $657=0,$658=0,$660=0,$661=0,$662=0,$663=0,$664=0,$666=0,$667=0,$668=0,$669=0,$670=0,$671=0,$672=0,$673=0,$data_8=0,$675=0,$676=0,$677=0,$678=0;
 var $679=0,$680=0,$681=0,$682=0,$684=0,$685=0,$686=0,$687=0,$688=0,$690=0,$691=0,$692=0,$693=0,$694=0,$695=0,$696=0,$697=0,$data_9=0,$699=0,$700=0;
 var $701=0,$702=0,$703=0,$704=0,$705=0,$706=0,$708=0,$710=0,$711=0,$712=0,$714=0,$715=0,$716=0,$717=0,$719=0,$720=0,$721=0,$722=0,$temp8_0=0,$724=0;
 var $725=0,$726=0,$727=0,$temp8_1=0,$prev_0=0,$flags_4=0,$pc_12=0,$729=0,$temp8_2=0,$prev_1=0,$flags_5=0,$sp_1=0,$pc_13=0,$731=0,$732=0,$733=0,$734=0,$735=0,$736=0,$737=0;
 var $738=0,$739=0,$741=0,$742=0,$743=0,$745=0,$746=0,$747=0,$748=0,$749=0,$751=0,$data_10=0,$pc_14=0,$753=0,$754=0,$755=0,$756=0,$757=0,$758=0,$759=0;
 var $760=0,$761=0,$762=0,$763=0,$764=0,$765=0,$767=0,$769=0,$770=0,$771=0,$773=0,$774=0,$775=0,$776=0,$777=0,$779=0,$data_11=0,$pc_15=0,$781=0,$782=0;
 var $783=0,$784=0,$786=0,$787=0,$788=0,$790=0,$791=0,$792=0,$793=0,$794=0,$796=0,$data_12=0,$pc_16=0,$798=0,$799=0,$800=0,$801=0,$803=0,$804=0,$805=0;
 var $807=0,$808=0,$809=0,$810=0,$811=0,$813=0,$data_13=0,$pc_17=0,$815=0,$816=0,$817=0,$818=0,$820=0,$821=0,$822=0,$823=0,$824=0,$826=0,$827=0,$828=0;
 var $data_14=0,$pc_18=0,$830=0,$data_15=0,$pc_19=0,$832=0,$833=0,$834=0,$835=0,$pc_20=0,$837=0,$838=0,$839=0,$840=0,$841=0,$842=0,$844=0,$845=0,$846=0,$847=0;
 var $848=0,$850=0,$851=0,$852=0,$data_16=0,$pc_21=0,$854=0,$data_17=0,$pc_22=0,$856=0,$857=0,$858=0,$859=0,$pc_23=0,$861=0,$862=0,$863=0,$864=0,$865=0,$867=0;
 var $868=0,$869=0,$870=0,$871=0,$873=0,$874=0,$875=0,$data_18=0,$pc_24=0,$877=0,$data_19=0,$pc_25=0,$879=0,$880=0,$881=0,$882=0,$883=0,$884=0,$885=0,$888=0;
 var $889=0,$890=0,$891=0,$892=0,$893=0,$894=0,$895=0,$896=0,$897=0,$898=0,$899=0,$901=0,$902=0,$903=0,$905=0,$906=0,$908=0,$909=0,$911=0,$912=0;
 var $914=0,$915=0,$916=0,$917=0,$919=0,$921=0,$922=0,$923=0,$925=0,$926=0,$927=0,$929=0,$930=0,$931=0,$933=0,$934=0,$935=0,$937=0,$938=0,$940=0;
 var $941=0,$943=0,$944=0,$946=0,$947=0,$948=0,$949=0,$951=0,$952=0,$953=0,$955=0,$956=0,$957=0,$959=0,$960=0,$961=0,$963=0,$964=0,$965=0,$967=0;
 var $968=0,$970=0,$972=0,$973=0,$974=0,$976=0,$977=0,$978=0,$980=0,$982=0,$983=0,$984=0,$986=0,$987=0,$988=0,$990=0,$991=0,$992=0,$994=0,$995=0;
 var $997=0,$998=0,$1000=0,$1001=0,$extract_t308=0,$extract_t310=0,$extract_t313=0,$extract_t315=0,$extract_t311=0,$extract_t=0,$pc_0294=0,$sp_0290_off0=0,$flags_0286_off0=0,$ld$4$0=0,$1003$0=0,$ld$5$1=0,$1003$1=0,$st$6$0=0,$st$7$1=0,$1004=0;
 var $1005=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 $s=((sp)|0);
 $1=(((sp)+(40))|0);
 $2=((($cycle_count)+(4))|0);
 $3=$2>>>2;
 $4=(($this+24)|0);
 $5=(($this+60)|0);
 HEAP32[(($5)>>2)]=$3;
 $6=(($this+20)|0);
 HEAP32[(($6)>>2)]=$s;
 $7=$s;
 $8=$4;
 (_memcpy((($7)|0), (($8)|0), 40)|0);
 $9=$1;
 $10=$this;
 $ld$0$0=(($10)|0);
 $11$0=((((((HEAPU8[($ld$0$0)])|0))|(((HEAPU8[((($ld$0$0)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$0$0)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$0$0)+(3))|0)])|0)<<24))|0));
 $ld$1$1=(($10+4)|0);
 $11$1=((((((HEAPU8[($ld$1$1)])|0))|(((HEAPU8[((($ld$1$1)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$1$1)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$1$1)+(3))|0)])|0)<<24))|0));
 $st$2$0=(($1)|0);
 HEAP32[(($st$2$0)>>2)]=$11$0;
 $st$3$1=(($1+4)|0);
 HEAP32[(($st$3$1)>>2)]=$11$1;
 $12=(($this+8)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($this+12)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 $16=(($this+7)|0);
 $17=((HEAP8[($16)])|0);
 $18=$13>>>13;
 $19=(($s+($18<<2))|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=$13&8191;
 $22=(($20+$21)|0);
 $23=((HEAP8[($22)])|0);
 $24=(($s+36)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((($25)-(1))|0);
 HEAP32[(($24)>>2)]=$26;
 $27=($26|0)==0;
 if ($27) {
  $flags_0286_off0=$17;$sp_0290_off0=$15;$pc_0294=$13;
  $ld$4$0=(($1)|0);
  $1003$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($1+4)|0);
  $1003$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($10)|0);
  tempBigInt=$1003$0;HEAP8[($st$6$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(3))|0)]=tempBigInt&0xff;
  $st$7$1=(($10+4)|0);
  tempBigInt=$1003$1;HEAP8[($st$7$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(3))|0)]=tempBigInt&0xff;
  HEAP32[(($12)>>2)]=$pc_0294;
  HEAP16[(($14)>>1)]=$sp_0290_off0;
  HEAP8[($16)]=$flags_0286_off0;
  HEAP32[(($6)>>2)]=$4;
  (_memcpy((($8)|0), (($7)|0), 40)|0);
  $1004=((HEAP32[(($24)>>2)])|0);
  $1005=($1004|0)>0;
  STACKTOP=sp;return (($1005)|0);
 }
 $_sum298=((($21)+(1))|0);
 $28=($17&255);
 $29=($15&65535);
 $30=(($20+$_sum298)|0);
 $31=$1;
 $32=(($31+4)|0);
 $33=(($9+6)|0);
 $34=(($this)|0);
 $35=(($34+88)|0);
 $36=$35;
 $37=(($this)|0);
 $38=$1;
 $39=$1;
 $40=$1;
 $41=(($40+4)|0);
 $42=$1;
 $43=(($42+2)|0);
 $44=$1;
 $45=(($44+4)|0);
 $46=$1;
 $47=(($46+4)|0);
 $48=(($this)|0);
 $49=((($48)-(272))|0);
 $50=$49;
 $51=(($9+6)|0);
 $52=$1;
 $53=$1;
 $54=(($53+4)|0);
 $55=$1;
 $56=(($this)|0);
 $57=(($56+88)|0);
 $58=$57;
 $59=(($this)|0);
 $60=(($this)|0);
 $61=((($60)-(272))|0);
 $62=$61;
 $63=(($this)|0);
 $64=((($63)-(272))|0);
 $65=$64;
 $66=(($this)|0);
 $67=((($66)-(272))|0);
 $68=$67;
 $69=(($this)|0);
 $70=((($69)-(272))|0);
 $71=$70;
 $72=$1;
 $73=(($72+4)|0);
 $74=(($this)|0);
 $75=(($74+88)|0);
 $76=$75;
 $77=(($this)|0);
 $78=$1;
 $79=$1;
 $80=(($79+4)|0);
 $81=(($this)|0);
 $82=((($81)-(272))|0);
 $83=$82;
 $84=(($this)|0);
 $85=((($84)-(272))|0);
 $86=$85;
 $87=$1;
 $88=$1;
 $89=$1;
 $90=(($89+4)|0);
 $91=(($this)|0);
 $92=((($91)-(272))|0);
 $93=$92;
 $94=$1;
 $95=$1;
 $96=(($95+4)|0);
 $97=(($this)|0);
 $98=((($97)-(272))|0);
 $99=$98;
 $100=$1;
 $101=$1;
 $102=(($101+4)|0);
 $103=(($this)|0);
 $104=((($103)-(272))|0);
 $105=$104;
 $106=$1;
 $107=$1;
 $108=$1;
 $109=(($108+4)|0);
 $110=(($this)|0);
 $111=((($110)-(272))|0);
 $112=$111;
 $113=(($9+6)|0);
 $114=(($9+6)|0);
 $115=$1;
 $116=$1;
 $117=(($this)|0);
 $118=((($117)-(272))|0);
 $119=$118;
 $120=(($this)|0);
 $121=((($120)-(272))|0);
 $122=$121;
 $123=$1;
 $124=(($123+4)|0);
 $125=$1;
 $126=(($9+6)|0);
 $127=(($this)|0);
 $128=((($127)-(272))|0);
 $129=$128;
 $130=$1;
 $131=$1;
 $132=(($131+4)|0);
 $133=$1;
 $134=$1;
 $135=(($134+2)|0);
 $136=$1;
 $137=(($136+4)|0);
 $138=(($9+1)|0);
 $139=$1;
 $140=(($9+3)|0);
 $141=(($9+2)|0);
 $142=(($9+5)|0);
 $143=(($9+4)|0);
 $144=$1;
 $145=(($144+4)|0);
 $146=(($this)|0);
 $147=((($146)-(272))|0);
 $148=$147;
 $149=(($9+6)|0);
 $150=$1;
 $151=$1;
 $152=$1;
 $153=(($152+4)|0);
 $154=(($this)|0);
 $155=((($154)-(272))|0);
 $156=$155;
 $157=(($this)|0);
 $158=((($157)-(272))|0);
 $159=$158;
 $160=$1;
 $161=$1;
 $162=(($161+4)|0);
 $163=(($this)|0);
 $164=((($163)-(272))|0);
 $165=$164;
 $166=(($this)|0);
 $167=((($166)-(272))|0);
 $168=$167;
 $169=$1;
 $170=$1;
 $171=(($170+4)|0);
 $172=$1;
 $173=(($172+4)|0);
 $174=$1;
 $175=$1;
 $176=(($175+4)|0);
 $177=(($this)|0);
 $178=((($177)-(272))|0);
 $179=$178;
 $180=(($9+6)|0);
 $181=$1;
 $182=$1;
 $183=(($182+4)|0);
 $184=(($this)|0);
 $185=((($184)-(272))|0);
 $186=$185;
 $187=$1;
 $188=$1;
 $189=(($188+4)|0);
 $190=(($this)|0);
 $191=((($190)-(272))|0);
 $192=$191;
 $193=(($9+6)|0);
 $194=$1;
 $195=$1;
 $196=(($195+4)|0);
 $197=(($this)|0);
 $198=((($197)-(272))|0);
 $199=$198;
 $200=$1;
 $201=$1;
 $202=(($9+6)|0);
 $203=(($9+6)|0);
 $204=$1;
 $205=(($204+4)|0);
 $206=(($this)|0);
 $207=((($206)-(272))|0);
 $208=$207;
 $209=$1;
 $210=(($9+6)|0);
 $211=(($9+6)|0);
 $212=$1;
 $213=(($212+4)|0);
 $214=(($this)|0);
 $215=((($214)-(272))|0);
 $216=$215;
 $217=$1;
 $218=(($9+6)|0);
 $219=$1;
 $220=(($219+4)|0);
 $221=(($this)|0);
 $222=((($221)-(272))|0);
 $223=$222;
 $224=(($9+6)|0);
 $225=$1;
 $226=(($9+7)|0);
 $227=(($this)|0);
 $228=((($227)-(272))|0);
 $229=$228;
 $230=(($this)|0);
 $231=((($230)-(272))|0);
 $232=$231;
 $233=$1;
 $234=$1;
 $235=(($234+2)|0);
 $236=$1;
 $237=(($236+4)|0);
 $238=(($9+6)|0);
 $239=(($this+16)|0);
 $240=$1;
 $241=(($240+4)|0);
 $242=(($9+6)|0);
 $flags_0299=$28;$sp_0300=$29;$244=$30;$_in307=$23;$_in306=$13;
 L1530: while(1) {
  $245=($_in307&255);
  $246=((($_in306)+(1))|0);
  $247=((HEAP8[($244)])|0);
  $248=($247&255);
  L1532: do {
   switch (($245|0)) {
   case 128:case 129:case 130:case 131:case 132:case 133:case 135: {
    $745=$245&7;
    $746=$745^1;
    $747=(($181+$746)|0);
    $748=((HEAP8[($747)])|0);
    $749=($748&255);
    $pc_14=$246;$data_10=$749;
    label = 1417;
    break;
   }
   case 198: {
    $751=((($_in306)+(2))|0);
    $pc_14=$751;$data_10=$248;
    label = 1417;
    break;
   }
   case 142: {
    $769=((HEAP16[(($183)>>1)])|0);
    $770=($769&65535);
    $771=((__ZN7Gbs_Emu8cpu_readEj($186,$770))|0);
    $pc_15=$246;$data_11=$771;
    label = 1422;
    break;
   }
   case 26: {
    $294=((HEAP16[(($43)>>1)])|0);
    $295=($294&65535);
    $pc_1=$246;$temp_0=$295;
    label = 1330;
    break;
   }
   case 240: {
    $280=$248|65280;
    $281=((($_in306)+(2))|0);
    $pc_1=$281;$temp_0=$280;
    label = 1330;
    break;
   }
   case 190: {
    $322=((HEAP16[(($47)>>1)])|0);
    $323=($322&65535);
    $324=((__ZN7Gbs_Emu8cpu_readEj($50,$323))|0);
    $pc_2=$246;$data_0=$324;
    label = 1335;
    break;
   }
   case 15:case 31: {
    $531=((HEAP8[($114)])|0);
    $532=($531&255);
    $pc_8=$246;$op_2=$532;$data_6=$245;
    label = 1368;
    break;
   }
   case 42: {
    $297=((HEAP16[(($45)>>1)])|0);
    $298=($297&65535);
    $299=((($297)+(1))&65535);
    HEAP16[(($45)>>1)]=$299;
    $pc_1=$246;$temp_0=$298;
    label = 1330;
    break;
   }
   case 208: {
    $940=$flags_0299&16;
    $941=($940|0)==0;
    if ($941) {
     label = 1345;
    } else {
     $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    }
    break;
   }
   case 216: {
    $943=$flags_0299&16;
    $944=($943|0)==0;
    if ($944) {
     $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    } else {
     label = 1345;
    }
    break;
   }
   case 24: {
    $946=((($_in306)+(2))|0);
    $947=(($247<<24)>>24);
    $948=((($946)+($947))|0);
    $949=$948&65535;
    $pc_0_be=$949;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 48: {
    $951=((($_in306)+(2))|0);
    $952=$flags_0299&16;
    $953=($952|0)==0;
    if (!($953)) {
     $pc_0_be=$951;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
     break L1532;
    }
    $955=(($247<<24)>>24);
    $956=((($955)+($951))|0);
    $957=$956&65535;
    $pc_0_be=$957;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 56: {
    $959=((($_in306)+(2))|0);
    $960=$flags_0299&16;
    $961=($960|0)==0;
    if ($961) {
     $pc_0_be=$959;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
     break L1532;
    }
    $963=(($247<<24)>>24);
    $964=((($963)+($959))|0);
    $965=$964&65535;
    $pc_0_be=$965;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 233: {
    $967=((HEAP16[(($241)>>1)])|0);
    $968=($967&65535);
    $pc_0_be=$968;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 195: {
    $970=((__Z8get_le16PKv($244))|0);
    $pc_0_be=$970;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 194: {
    $972=((($_in306)+(3))|0);
    $973=$flags_0299&128;
    $974=($973|0)==0;
    if ($974) {
     label = 1469;
    } else {
     $pc_0_be=$972;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    }
    break;
   }
   case 202: {
    $976=((($_in306)+(3))|0);
    $977=$flags_0299&128;
    $978=($977|0)==0;
    if ($978) {
     $pc_0_be=$976;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    } else {
     label = 1469;
    }
    break;
   }
   case 112:case 113:case 114:case 115:case 116:case 117:case 119: {
    $562=$245&7;
    $563=$562^1;
    $564=(($115+$563)|0);
    $565=((HEAP8[($564)])|0);
    $566=($565&255);
    $pc_10=$246;$flags_3=$flags_0299;$op_5=$566;
    label = 1375;
    break;
   }
   case 248: {
    $710=(($247<<24)>>24);
    $711=((($_in306)+(2))|0);
    $712=((($710)+($sp_0300))|0);
    $pc_12=$711;$flags_4=0;$prev_0=$sp_0300;$temp8_1=$712;
    label = 1412;
    break;
   }
   case 232: {
    $714=(($247<<24)>>24);
    $715=((($_in306)+(2))|0);
    $716=((($714)+($sp_0300))|0);
    $717=$716&65535;
    $pc_13=$715;$sp_1=$717;$flags_5=0;$prev_1=$sp_0300;$temp8_2=$716;
    label = 1413;
    break;
   }
   case 9:case 25:case 41: {
    $719=$245>>>4;
    $720=(($174+($719<<1))|0);
    $721=((HEAP16[(($720)>>1)])|0);
    $722=($721&65535);
    $temp8_0=$722;
    label = 1411;
    break;
   }
   case 65:case 66:case 67:case 68:case 69:case 71:case 72:case 74:case 75:case 76:case 77:case 79:case 80:case 81:case 83:case 84:case 85:case 87:case 88:case 89:case 90:case 92:case 93:case 95:case 96:case 97:case 98:case 99:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 111:case 120:case 121:case 122:case 123:case 124:case 125: {
    $572=$245&7;
    $573=$572^1;
    $574=(($116+$573)|0);
    $575=((HEAP8[($574)])|0);
    $576=$245>>>3;
    $577=$576&7;
    $578=$577^1;
    $579=(($116+$578)|0);
    HEAP8[($579)]=$575;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 184:case 185:case 186:case 187:case 188:case 189: {
    $326=$245&7;
    $327=$326^1;
    $328=(($52+$327)|0);
    $329=((HEAP8[($328)])|0);
    $330=($329&255);
    $pc_2=$246;$data_0=$330;
    label = 1335;
    break;
   }
   case 254: {
    $332=((($_in306)+(2))|0);
    $pc_2=$332;$data_0=$248;
    label = 1335;
    break;
   }
   case 136:case 137:case 138:case 139:case 140:case 141:case 143: {
    $773=$245&7;
    $774=$773^1;
    $775=(($187+$774)|0);
    $776=((HEAP8[($775)])|0);
    $777=($776&255);
    $pc_15=$246;$data_11=$777;
    label = 1422;
    break;
   }
   case 206: {
    $779=((($_in306)+(2))|0);
    $pc_15=$779;$data_11=$248;
    label = 1422;
    break;
   }
   case 150: {
    $786=((HEAP16[(($189)>>1)])|0);
    $787=($786&65535);
    $788=((__ZN7Gbs_Emu8cpu_readEj($192,$787))|0);
    $pc_16=$246;$data_12=$788;
    label = 1426;
    break;
   }
   case 144:case 145:case 146:case 147:case 148:case 149:case 151: {
    $790=$245&7;
    $791=$790^1;
    $792=(($194+$791)|0);
    $793=((HEAP8[($792)])|0);
    $794=($793&255);
    $pc_16=$246;$data_12=$794;
    label = 1426;
    break;
   }
   case 214: {
    $796=((($_in306)+(2))|0);
    $pc_16=$796;$data_12=$248;
    label = 1426;
    break;
   }
   case 158: {
    $803=((HEAP16[(($196)>>1)])|0);
    $804=($803&65535);
    $805=((__ZN7Gbs_Emu8cpu_readEj($199,$804))|0);
    $pc_17=$246;$data_13=$805;
    label = 1430;
    break;
   }
   case 11:case 27:case 43: {
    $652=$245>>>4;
    $653=(($151+($652<<1))|0);
    $654=((HEAP16[(($653)>>1)])|0);
    $655=((($654)-(1))&65535);
    HEAP16[(($653)>>1)]=$655;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 59: {
    $657=((($sp_0300)+(65535))|0);
    $658=$657&65535;
    $pc_0_be=$246;$sp_0_be=$658;$flags_0_be=$flags_0299;
    break;
   }
   case 52: {
    $660=((HEAP16[(($153)>>1)])|0);
    $661=($660&65535);
    $662=((__ZN7Gbs_Emu8cpu_readEj($156,$661))|0);
    $663=((($662)+(1))|0);
    $664=$663&255;
    __ZN7Gbs_Emu9cpu_writeEji($159,$661,$664);
    $data_8=$663;
    label = 1403;
    break;
   }
   case 4:case 12:case 20:case 28:case 36:case 44:case 60: {
    $666=$245>>>3;
    $667=$666&7;
    $668=$667^1;
    $669=(($160+$668)|0);
    $670=((HEAP8[($669)])|0);
    $671=($670&255);
    $672=((($671)+(1))|0);
    $673=(($672)&255);
    HEAP8[($669)]=$673;
    $data_8=$672;
    label = 1403;
    break;
   }
   case 70:case 78:case 86:case 94:case 102:case 110:case 126: {
    $351=((HEAP16[(($54)>>1)])|0);
    $352=($351&65535);
    $353=$352&8191;
    $354=$352>>>13;
    $355=(($s+($354<<2))|0);
    $356=((HEAP32[(($355)>>2)])|0);
    $357=(($356+$353)|0);
    $358=((HEAP8[($357)])|0);
    $359=$245>>>3;
    $360=$359&7;
    $361=$360^1;
    $362=(($55+$361)|0);
    HEAP8[($362)]=$358;
    $363=((($352)-(65296))|0);
    $364=($363>>>0)<((49)>>>0);
    if (!($364)) {
     $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
     break L1532;
    }
    $366=(($59+24800)|0);
    $367=$366;
    $368=((HEAP32[(($58)>>2)])|0);
    $369=((HEAP32[(($24)>>2)])|0);
    $370=$369<<2;
    $371=((($368)-($370))|0);
    $372=((__ZN6Gb_Apu13read_registerEij($367,$371,$352))|0);
    $373=(($372)&255);
    HEAP8[($362)]=$373;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 196: {
    $375=((($_in306)+(3))|0);
    $376=$flags_0299&128;
    $377=($376|0)==0;
    if ($377) {
     $pc_4=$375;
     label = 1341;
    } else {
     $pc_0_be=$375;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    }
    break;
   }
   case 40: {
    $272=((($_in306)+(2))|0);
    $273=$flags_0299&128;
    $274=($273|0)==0;
    if ($274) {
     $pc_0_be=$272;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
     break L1532;
    }
    $276=(($247<<24)>>24);
    $277=((($276)+($272))|0);
    $278=$277&65535;
    $pc_0_be=$278;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 54: {
    $638=((HEAP16[(($145)>>1)])|0);
    $639=($638&65535);
    __ZN7Gbs_Emu9cpu_writeEji($148,$639,$248);
    $640=((($_in306)+(2))|0);
    $pc_0_be=$640;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 62: {
    HEAP8[($149)]=$247;
    $642=((($_in306)+(2))|0);
    $pc_0_be=$642;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 3:case 19:case 35: {
    $644=$245>>>4;
    $645=(($150+($644<<1))|0);
    $646=((HEAP16[(($645)>>1)])|0);
    $647=((($646)+(1))&65535);
    HEAP16[(($645)>>1)]=$647;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 51: {
    $649=((($sp_0300)+(1))|0);
    $650=$649&65535;
    $pc_0_be=$246;$sp_0_be=$650;$flags_0_be=$flags_0299;
    break;
   }
   case 174: {
    $873=((HEAP16[(($220)>>1)])|0);
    $874=($873&65535);
    $875=((__ZN7Gbs_Emu8cpu_readEj($223,$874))|0);
    $pc_24=$_in306;$data_18=$875;
    label = 1443;
    break;
   }
   case 238: {
    $pc_24=$246;$data_18=$248;
    label = 1443;
    break;
   }
   case 175: {
    HEAP8[($224)]=0;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=128;
    break;
   }
   case 241:case 193:case 209:case 225: {
    $888=((__ZN7Gbs_Emu8cpu_readEj($229,$sp_0300))|0);
    $889=((($sp_0300)+(1))|0);
    $890=((__ZN7Gbs_Emu8cpu_readEj($232,$889))|0);
    $891=$890<<8;
    $892=((($891)+($888))|0);
    $893=(($892)&65535);
    $894=$245>>>4;
    $895=$894&3;
    $896=(($225+($895<<1))|0);
    HEAP16[(($896)>>1)]=$893;
    $897=((($sp_0300)+(2))|0);
    $898=$897&65535;
    $899=(($_in307<<24)>>24)==-15;
    if (!($899)) {
     $pc_0_be=$246;$sp_0_be=$898;$flags_0_be=$flags_0299;
     break L1532;
    }
    $901=((HEAP8[($226)])|0);
    $902=($901&255);
    $903=$902&240;
    $pc_0_be=$246;$sp_0_be=$898;$flags_0_be=$903;
    break;
   }
   case 53: {
    $684=((HEAP16[(($162)>>1)])|0);
    $685=($684&65535);
    $686=((__ZN7Gbs_Emu8cpu_readEj($165,$685))|0);
    $687=((($686)-(1))|0);
    $688=$687&255;
    __ZN7Gbs_Emu9cpu_writeEji($168,$685,$688);
    $data_9=$687;
    label = 1406;
    break;
   }
   case 5:case 13:case 21:case 29:case 37:case 45:case 61: {
    $690=$245>>>3;
    $691=$690&7;
    $692=$691^1;
    $693=(($169+$692)|0);
    $694=((HEAP8[($693)])|0);
    $695=($694&255);
    $696=((($695)-(1))|0);
    $697=(($696)&255);
    HEAP8[($693)]=$697;
    $data_9=$696;
    label = 1406;
    break;
   }
   case 32: {
    $250=((($_in306)+(2))|0);
    $251=$flags_0299&128;
    $252=($251|0)==0;
    if (!($252)) {
     $pc_0_be=$250;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
     break L1532;
    }
    $254=(($247<<24)>>24);
    $255=((($254)+($250))|0);
    $256=$255&65535;
    $pc_0_be=$256;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 210: {
    $982=((($_in306)+(3))|0);
    $983=$flags_0299&16;
    $984=($983|0)==0;
    if ($984) {
     label = 1469;
    } else {
     $pc_0_be=$982;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    }
    break;
   }
   case 218: {
    $986=((($_in306)+(3))|0);
    $987=$flags_0299&16;
    $988=($987|0)==0;
    if ($988) {
     $pc_0_be=$986;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    } else {
     label = 1469;
    }
    break;
   }
   case 47: {
    $990=((HEAP8[($242)])|0);
    $991=$990^-1;
    HEAP8[($242)]=$991;
    $992=$flags_0299|96;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$992;
    break;
   }
   case 63: {
    $994=$flags_0299&-97;
    $995=$994^16;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$995;
    break;
   }
   case 55: {
    $997=$flags_0299&-113;
    $998=$997|16;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$998;
    break;
   }
   case 221:case 211:case 219:case 227:case 228:case 235:case 236:case 244:case 253:case 252:case 16:case 39:case 191:case 237:case 118: {
    label = 1475;
    break L1530;
    break;
   }
   case 152:case 153:case 154:case 155:case 156:case 157:case 159: {
    $807=$245&7;
    $808=$807^1;
    $809=(($200+$808)|0);
    $810=((HEAP8[($809)])|0);
    $811=($810&255);
    $pc_17=$246;$data_13=$811;
    label = 1430;
    break;
   }
   case 222: {
    $813=((($_in306)+(2))|0);
    $pc_17=$813;$data_13=$248;
    label = 1430;
    break;
   }
   case 160:case 161:case 162:case 163:case 164:case 165: {
    $820=$245&7;
    $821=$820^1;
    $822=(($201+$821)|0);
    $823=((HEAP8[($822)])|0);
    $824=($823&255);
    $pc_19=$246;$data_15=$824;
    label = 1434;
    break;
   }
   case 166: {
    $826=((HEAP16[(($205)>>1)])|0);
    $827=($826&65535);
    $828=((__ZN7Gbs_Emu8cpu_readEj($208,$827))|0);
    $pc_18=$_in306;$data_14=$828;
    label = 1433;
    break;
   }
   case 33: {
    $268=((__Z8get_le16PKv($244))|0);
    $269=(($268)&65535);
    HEAP16[(($32)>>1)]=$269;
    $270=((($_in306)+(3))|0);
    $pc_0_be=$270;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 230: {
    $pc_18=$246;$data_14=$248;
    label = 1433;
    break;
   }
   case 167: {
    $pc_20=$246;
    label = 1435;
    break;
   }
   case 176:case 177:case 178:case 179:case 180:case 181: {
    $844=$245&7;
    $845=$844^1;
    $846=(($209+$845)|0);
    $847=((HEAP8[($846)])|0);
    $848=($847&255);
    $pc_22=$246;$data_17=$848;
    label = 1439;
    break;
   }
   case 182: {
    $850=((HEAP16[(($213)>>1)])|0);
    $851=($850&65535);
    $852=((__ZN7Gbs_Emu8cpu_readEj($216,$851))|0);
    $pc_21=$_in306;$data_16=$852;
    label = 1438;
    break;
   }
   case 246: {
    $pc_21=$246;$data_16=$248;
    label = 1438;
    break;
   }
   case 183: {
    $pc_23=$246;
    label = 1440;
    break;
   }
   case 168:case 169:case 170:case 171:case 172:case 173: {
    $867=$245&7;
    $868=$867^1;
    $869=(($217+$868)|0);
    $870=((HEAP8[($869)])|0);
    $871=($870&255);
    $pc_25=$246;$data_19=$871;
    label = 1444;
    break;
   }
   case 7:case 23: {
    $515=((HEAP8[($113)])|0);
    $516=($515&255);
    $pc_7=$246;$op_1=$516;$data_5=$245;
    label = 1365;
    break;
   }
   case 250: {
    $301=((__Z8get_le16PKv($244))|0);
    $302=((($_in306)+(3))|0);
    $pc_1=$302;$temp_0=$301;
    label = 1330;
    break;
   }
   case 224: {
    $599=$248|65280;
    $600=((($_in306)+(2))|0);
    $pc_11=$600;$temp7_0=$599;
    label = 1388;
    break;
   }
   case 226: {
    $602=((HEAP8[($130)])|0);
    $603=($602&255);
    $604=$603|65280;
    $pc_11=$246;$temp7_0=$604;
    label = 1388;
    break;
   }
   case 50: {
    $606=((HEAP16[(($132)>>1)])|0);
    $607=($606&65535);
    $608=((($606)-(1))&65535);
    HEAP16[(($132)>>1)]=$608;
    $pc_11=$246;$temp7_0=$607;
    label = 1388;
    break;
   }
   case 2: {
    $610=((HEAP16[(($133)>>1)])|0);
    $611=($610&65535);
    $pc_11=$246;$temp7_0=$611;
    label = 1388;
    break;
   }
   case 58: {
    $290=((HEAP16[(($41)>>1)])|0);
    $291=($290&65535);
    $292=((($290)-(1))&65535);
    HEAP16[(($41)>>1)]=$292;
    $pc_1=$246;$temp_0=$291;
    label = 1330;
    break;
   }
   case 18: {
    $613=((HEAP16[(($135)>>1)])|0);
    $614=($613&65535);
    $pc_11=$246;$temp7_0=$614;
    label = 1388;
    break;
   }
   case 34: {
    $616=((HEAP16[(($137)>>1)])|0);
    $617=($616&65535);
    $618=((($616)+(1))&65535);
    HEAP16[(($137)>>1)]=$618;
    $pc_11=$246;$temp7_0=$617;
    label = 1388;
    break;
   }
   case 234: {
    $620=((__Z8get_le16PKv($244))|0);
    $621=((($_in306)+(3))|0);
    $pc_11=$621;$temp7_0=$620;
    label = 1388;
    break;
   }
   case 6: {
    HEAP8[($138)]=$247;
    $626=((($_in306)+(2))|0);
    $pc_0_be=$626;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 205: {
    $pc_5=$246;
    label = 1342;
    break;
   }
   case 57: {
    $temp8_0=$sp_0300;
    label = 1411;
    break;
   }
   case 134: {
    $741=((HEAP16[(($176)>>1)])|0);
    $742=($741&65535);
    $743=((__ZN7Gbs_Emu8cpu_readEj($179,$742))|0);
    $pc_14=$246;$data_10=$743;
    label = 1417;
    break;
   }
   case 200: {
    $391=$flags_0299&128;
    $392=($391|0)==0;
    if ($392) {
     $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    } else {
     label = 1345;
    }
    break;
   }
   case 201:case 217: {
    label = 1345;
    break;
   }
   case 242: {
    $283=((HEAP8[($38)])|0);
    $284=($283&255);
    $285=$284|65280;
    $pc_1=$246;$temp_0=$285;
    label = 1330;
    break;
   }
   case 203: {
    $402=((($_in306)+(2))|0);
    L1614: do {
     switch (($248|0)) {
     case 64:case 65:case 66:case 67:case 68:case 69:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 87:case 88:case 89:case 90:case 91:case 92:case 93:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 127: {
      $424=$248&7;
      $425=$424^1;
      $426=(($78+$425)|0);
      $427=((HEAP8[($426)])|0);
      $428=($427&255);
      $temp2_0=$428;
      label = 1350;
      break;
     }
     case 192:case 193:case 194:case 195:case 196:case 197:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 255: {
      $453=$248>>>3;
      $454=$453&7;
      $455=1<<$454;
      $456=$248&7;
      $457=$456^1;
      $458=(($87+$457)|0);
      $459=((HEAP8[($458)])|0);
      $460=($459&255);
      $461=$460|$455;
      $462=(($461)&255);
      HEAP8[($458)]=$462;
      $pc_0_be=$402;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
      break L1532;
      break;
     }
     case 54: {
      $476=((HEAP16[(($90)>>1)])|0);
      $477=($476&65535);
      $478=((__ZN7Gbs_Emu8cpu_readEj($93,$477))|0);
      $temp6_0=$478;
      label = 1356;
      break;
     }
     case 48:case 49:case 50:case 51:case 52:case 53:case 55: {
      $480=$248&7;
      $481=$480^1;
      $482=(($94+$481)|0);
      $483=((HEAP8[($482)])|0);
      $484=($483&255);
      $temp6_0=$484;
      label = 1356;
      break;
     }
     case 62: {
      $500=((($248)+(16))|0);
      $data_3=$500;
      label = 1360;
      break;
     }
     case 30:case 14:case 46: {
      $data_3=$248;
      label = 1360;
      break;
     }
     case 56:case 57:case 58:case 59:case 60:case 61:case 63: {
      $506=((($248)+(16))|0);
      $data_4=$506;
      label = 1362;
      break;
     }
     case 24:case 25:case 26:case 27:case 28:case 29:case 31:case 8:case 9:case 10:case 11:case 12:case 13:case 15:case 40:case 41:case 42:case 43:case 44:case 45:case 47: {
      $data_4=$248;
      label = 1362;
      break;
     }
     case 6:case 22:case 38: {
      $490=((HEAP16[(($96)>>1)])|0);
      $491=($490&65535);
      $492=((__ZN7Gbs_Emu8cpu_readEj($99,$491))|0);
      $pc_7=$402;$op_1=$492;$data_5=$248;
      label = 1365;
      break L1532;
      break;
     }
     case 32:case 33:case 34:case 35:case 36:case 37:case 39:case 0:case 1:case 2:case 3:case 4:case 5:case 7:case 16:case 17:case 18:case 19:case 20:case 21:case 23: {
      $494=$248&7;
      $495=$494^1;
      $496=(($100+$495)|0);
      $497=((HEAP8[($496)])|0);
      $498=($497&255);
      $pc_7=$402;$op_1=$498;$data_5=$248;
      label = 1365;
      break L1532;
      break;
     }
     case 70:case 78:case 86:case 94:case 102:case 110:case 118:case 126: {
      $404=((HEAP16[(($73)>>1)])|0);
      $405=($404&65535);
      $406=$405&8191;
      $407=$405>>>13;
      $408=(($s+($407<<2))|0);
      $409=((HEAP32[(($408)>>2)])|0);
      $410=(($409+$406)|0);
      $411=((HEAP8[($410)])|0);
      $412=($411&255);
      $413=((($405)-(65296))|0);
      $414=($413>>>0)<((49)>>>0);
      if (!($414)) {
       $temp2_0=$412;
       label = 1350;
       break L1614;
      }
      $416=(($77+24800)|0);
      $417=$416;
      $418=((HEAP32[(($76)>>2)])|0);
      $419=((HEAP32[(($24)>>2)])|0);
      $420=$419<<2;
      $421=((($418)-($420))|0);
      $422=((__ZN6Gb_Apu13read_registerEij($417,$421,$405))|0);
      $temp2_0=$422;
      label = 1350;
      break;
     }
     case 128:case 129:case 130:case 131:case 132:case 133:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 191: {
      $464=$248>>>3;
      $465=$464&7;
      $466=1<<$465;
      $467=$466^255;
      $468=$248&7;
      $469=$468^1;
      $470=(($88+$469)|0);
      $471=((HEAP8[($470)])|0);
      $472=($471&255);
      $473=$472&$467;
      $474=(($473)&255);
      HEAP8[($470)]=$474;
      $pc_0_be=$402;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
      break L1532;
      break;
     }
     case 134:case 142:case 150:case 158:case 166:case 174:case 182:case 190:case 198:case 206:case 214:case 222:case 230:case 238:case 246:case 254: {
      $439=((HEAP16[(($80)>>1)])|0);
      $440=($439&65535);
      $441=((__ZN7Gbs_Emu8cpu_readEj($86,$440))|0);
      $442=$248>>>3;
      $443=$442&7;
      $444=1<<$443;
      $445=$444^-1;
      $446=$441&$445;
      $447=$248&64;
      $448=($447|0)==0;
      $_=($448?0:$444);
      $449=((HEAP16[(($80)>>1)])|0);
      $450=($449&65535);
      $451=$446|$_;
      __ZN7Gbs_Emu9cpu_writeEji($83,$450,$451);
      $pc_0_be=$402;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
      break L1532;
      break;
     }
     default: {
      label = 1363;
      break L1530;
     }
     }
    } while(0);
    if ((label|0) == 1360) {
     label = 0;
     $502=((HEAP16[(($102)>>1)])|0);
     $503=($502&65535);
     $504=((__ZN7Gbs_Emu8cpu_readEj($105,$503))|0);
     $pc_8=$402;$op_2=$504;$data_6=$data_3;
     label = 1368;
     break L1532;
    }
    else if ((label|0) == 1362) {
     label = 0;
     $508=$data_4&7;
     $509=$508^1;
     $510=(($106+$509)|0);
     $511=((HEAP8[($510)])|0);
     $512=($511&255);
     $pc_8=$402;$op_2=$512;$data_6=$data_4;
     label = 1368;
     break L1532;
    }
    else if ((label|0) == 1356) {
     label = 0;
     $486=$temp6_0>>4;
     $487=$temp6_0<<4;
     $488=$486|$487;
     $pc_9=$402;$flags_1=0;$op_4=$488;$data_7=$248;
     label = 1372;
     break L1532;
    }
    else if ((label|0) == 1350) {
     label = 0;
     $430=$248>>>3;
     $431=$430&7;
     $432=$431^7;
     $433=$flags_0299&-225;
     $434=$433|160;
     $435=$temp2_0<<$432;
     $436=$435&128;
     $437=$436^$434;
     $pc_0_be=$402;$sp_0_be=$sp_0300;$flags_0_be=$437;
     break L1532;
    }
    break;
   }
   case 10: {
    $287=((HEAP16[(($39)>>1)])|0);
    $288=($287&65535);
    $pc_1=$246;$temp_0=$288;
    label = 1330;
    break;
   }
   case 0:case 64:case 73:case 82:case 91:case 100:case 109:case 127:case 243:case 251: {
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 8: {
    $581=((__Z8get_le16PKv($244))|0);
    $582=((($_in306)+(3))|0);
    $583=$sp_0300&255;
    __ZN7Gbs_Emu9cpu_writeEji($119,$581,$583);
    $584=((($581)+(1))|0);
    $585=$sp_0300>>>8;
    __ZN7Gbs_Emu9cpu_writeEji($122,$584,$585);
    $pc_0_be=$582;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 249: {
    $587=((HEAP16[(($124)>>1)])|0);
    $588=($587&65535);
    $pc_0_be=$246;$sp_0_be=$588;$flags_0_be=$flags_0299;
    break;
   }
   case 49: {
    $590=((__Z8get_le16PKv($244))|0);
    $591=((($_in306)+(3))|0);
    $pc_0_be=$591;$sp_0_be=$590;$flags_0_be=$flags_0299;
    break;
   }
   case 1:case 17: {
    $593=((__Z8get_le16PKv($244))|0);
    $594=(($593)&65535);
    $595=$245>>>4;
    $596=(($125+($595<<1))|0);
    HEAP16[(($596)>>1)]=$594;
    $597=((($_in306)+(3))|0);
    $pc_0_be=$597;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 197: {
    $905=((HEAP16[(($233)>>1)])|0);
    $906=($905&65535);
    $pc_6=$246;$data_2=$906;
    label = 1343;
    break;
   }
   case 213: {
    $908=((HEAP16[(($235)>>1)])|0);
    $909=($908&65535);
    $pc_6=$246;$data_2=$909;
    label = 1343;
    break;
   }
   case 229: {
    $911=((HEAP16[(($237)>>1)])|0);
    $912=($911&65535);
    $pc_6=$246;$data_2=$912;
    label = 1343;
    break;
   }
   case 245: {
    $914=$flags_0299<<8;
    $915=((HEAP8[($238)])|0);
    $916=($915&255);
    $917=$916|$914;
    $pc_6=$246;$data_2=$917;
    label = 1343;
    break;
   }
   case 255: {
    $919=($246|0)==61454;
    if ($919) {
     label = 1477;
     break L1530;
    } else {
     label = 1453;
    }
    break;
   }
   case 199:case 207:case 215:case 223:case 231:case 239:case 247: {
    label = 1453;
    break;
   }
   case 204: {
    $925=((($_in306)+(3))|0);
    $926=$flags_0299&128;
    $927=($926|0)==0;
    if ($927) {
     $pc_0_be=$925;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    } else {
     $pc_4=$925;
     label = 1341;
    }
    break;
   }
   case 212: {
    $929=((($_in306)+(3))|0);
    $930=$flags_0299&16;
    $931=($930|0)==0;
    if ($931) {
     $pc_4=$929;
     label = 1341;
    } else {
     $pc_0_be=$929;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    }
    break;
   }
   case 220: {
    $933=((($_in306)+(3))|0);
    $934=$flags_0299&16;
    $935=($934|0)==0;
    if ($935) {
     $pc_0_be=$933;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    } else {
     $pc_4=$933;
     label = 1341;
    }
    break;
   }
   case 192: {
    $937=$flags_0299&128;
    $938=($937|0)==0;
    if ($938) {
     label = 1345;
    } else {
     $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    }
    break;
   }
   case 14: {
    HEAP8[($139)]=$247;
    $628=((($_in306)+(2))|0);
    $pc_0_be=$628;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 22: {
    HEAP8[($140)]=$247;
    $630=((($_in306)+(2))|0);
    $pc_0_be=$630;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 30: {
    HEAP8[($141)]=$247;
    $632=((($_in306)+(2))|0);
    $pc_0_be=$632;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 38: {
    HEAP8[($142)]=$247;
    $634=((($_in306)+(2))|0);
    $pc_0_be=$634;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   case 46: {
    HEAP8[($143)]=$247;
    $636=((($_in306)+(2))|0);
    $pc_0_be=$636;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
    break;
   }
   default: {
    label = 1476;
    break L1530;
   }
   }
  } while(0);
  do {
   if ((label|0) == 1330) {
    label = 0;
    $304=$temp_0&8191;
    $305=$temp_0>>>13;
    $306=(($s+($305<<2))|0);
    $307=((HEAP32[(($306)>>2)])|0);
    $308=(($307+$304)|0);
    $309=((HEAP8[($308)])|0);
    HEAP8[($33)]=$309;
    $310=((($temp_0)-(65296))|0);
    $311=($310>>>0)<((49)>>>0);
    if (!($311)) {
     $pc_0_be=$pc_1;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
     break;
    }
    $313=(($37+24800)|0);
    $314=$313;
    $315=((HEAP32[(($36)>>2)])|0);
    $316=((HEAP32[(($24)>>2)])|0);
    $317=$316<<2;
    $318=((($315)-($317))|0);
    $319=((__ZN6Gb_Apu13read_registerEij($314,$318,$temp_0))|0);
    $320=(($319)&255);
    HEAP8[($33)]=$320;
    $pc_0_be=$pc_1;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
   }
   else if ((label|0) == 1368) {
    label = 0;
    $534=$data_6&$flags_0299;
    $535=$534<<4;
    $536=$535|$op_2;
    $537=$op_2<<4;
    $538=$537&16;
    $539=($data_6>>>0)<((16)>>>0);
    if ($539) {
     $541=$536<<8;
     $542=$541|$536;
     $op_3=$542;
    } else {
     $op_3=$536;
    }
    $544=$op_3>>>1;
    $545=$data_6&32;
    $546=($545|0)==0;
    if ($546) {
     $pc_9=$pc_8;$flags_1=$538;$op_4=$544;$data_7=$data_6;
     label = 1372;
     break;
    }
    $548=$544<<1;
    $549=$548&128;
    $550=$549|$544;
    $pc_9=$pc_8;$flags_1=$538;$op_4=$550;$data_7=$data_6;
    label = 1372;
   }
   else if ((label|0) == 1422) {
    label = 0;
    $781=$flags_0299>>>4;
    $782=$781&1;
    $783=((($data_11)+($782))|0);
    $784=$783&255;
    $pc_14=$pc_15;$data_10=$784;
    label = 1417;
   }
   else if ((label|0) == 1443) {
    label = 0;
    $877=((($pc_24)+(1))|0);
    $pc_25=$877;$data_19=$data_18;
    label = 1444;
   }
   else if ((label|0) == 1403) {
    label = 0;
    $675=$flags_0299&16;
    $676=$data_8&15;
    $677=((($676)+(63))|0);
    $678=$677&32;
    $679=$data_8>>>1;
    $680=$679&128;
    $681=$680|$675;
    $682=$681|$678;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$682;
   }
   else if ((label|0) == 1406) {
    label = 0;
    $699=$flags_0299&16;
    $700=$data_9&15;
    $701=((($700)+(49))|0);
    $702=$701&32;
    $703=$702|$699;
    $704=$703|64;
    $705=$data_9&255;
    $706=($705|0)==0;
    if (!($706)) {
     $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$704;
     break;
    }
    $708=$703|192;
    $pc_0_be=$246;$sp_0_be=$sp_0300;$flags_0_be=$708;
   }
   else if ((label|0) == 1469) {
    label = 0;
    $980=((__Z8get_le16PKv($244))|0);
    $pc_0_be=$980;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
   }
   else if ((label|0) == 1430) {
    label = 0;
    $815=$flags_0299>>>4;
    $816=$815&1;
    $817=((($data_13)+($816))|0);
    $818=$817&255;
    $pc_16=$pc_17;$data_12=$818;
    label = 1426;
   }
   else if ((label|0) == 1433) {
    label = 0;
    $830=((($pc_18)+(1))|0);
    $pc_19=$830;$data_15=$data_14;
    label = 1434;
   }
   else if ((label|0) == 1438) {
    label = 0;
    $854=((($pc_21)+(1))|0);
    $pc_22=$854;$data_17=$data_16;
    label = 1439;
   }
   else if ((label|0) == 1365) {
    label = 0;
    $518=$op_1<<1;
    $519=$data_5&$flags_0299;
    $520=$519>>>4;
    $521=$520&1;
    $522=$521|$518;
    $523=$op_1>>>3;
    $524=$523&16;
    $525=($data_5>>>0)<((16)>>>0);
    if (!($525)) {
     $pc_9=$pc_7;$flags_1=$524;$op_4=$522;$data_7=$data_5;
     label = 1372;
     break;
    }
    $527=$op_1>>>7;
    $528=$527&16777215;
    $529=$522|$528;
    $pc_9=$pc_7;$flags_1=$524;$op_4=$529;$data_7=$data_5;
    label = 1372;
   }
   else if ((label|0) == 1388) {
    label = 0;
    $623=((HEAP8[($126)])|0);
    $624=($623&255);
    __ZN7Gbs_Emu9cpu_writeEji($129,$temp7_0,$624);
    $pc_0_be=$pc_11;$sp_0_be=$sp_0300;$flags_0_be=$flags_0299;
   }
   else if ((label|0) == 1341) {
    label = 0;
    $379=((($pc_4)-(2))|0);
    $pc_5=$379;
    label = 1342;
   }
   else if ((label|0) == 1411) {
    label = 0;
    $724=((HEAP16[(($173)>>1)])|0);
    $725=($724&65535);
    $726=((($725)+($temp8_0))|0);
    $727=$flags_0299&128;
    $pc_12=$246;$flags_4=$727;$prev_0=$725;$temp8_1=$726;
    label = 1412;
   }
   else if ((label|0) == 1345) {
    label = 0;
    $394=((__ZN7Gbs_Emu8cpu_readEj($68,$sp_0300))|0);
    $395=((($sp_0300)+(1))|0);
    $396=((__ZN7Gbs_Emu8cpu_readEj($71,$395))|0);
    $397=$396<<8;
    $398=((($397)+($394))|0);
    $399=((($sp_0300)+(2))|0);
    $400=$399&65535;
    $pc_0_be=$398;$sp_0_be=$400;$flags_0_be=$flags_0299;
   }
   else if ((label|0) == 1335) {
    label = 0;
    $334=((HEAP8[($51)])|0);
    $335=($334&255);
    $336=((($335)-($data_0))|0);
    $pc_3=$pc_2;$op_0=$335;$data_1=$336;
    label = 1336;
   }
   else if ((label|0) == 1453) {
    label = 0;
    $921=$245&56;
    $922=((HEAP32[(($239)>>2)])|0);
    $923=((($922)+($921))|0);
    $pc_6=$923;$data_2=$246;
    label = 1343;
   }
  } while(0);
  do {
   if ((label|0) == 1417) {
    label = 0;
    $753=((HEAP8[($180)])|0);
    $754=($753&255);
    $755=((($754)+($data_10))|0);
    $756=$755&15;
    $757=$754&15;
    $758=((($756)-($757))|0);
    $759=$758&32;
    $760=$755>>>4;
    $761=$760&16;
    $762=$759|$761;
    $763=(($755)&255);
    HEAP8[($180)]=$763;
    $764=$755&255;
    $765=($764|0)==0;
    if (!($765)) {
     $pc_0_be=$pc_14;$sp_0_be=$sp_0300;$flags_0_be=$762;
     break;
    }
    $767=$762|128;
    $pc_0_be=$pc_14;$sp_0_be=$sp_0300;$flags_0_be=$767;
   }
   else if ((label|0) == 1372) {
    label = 0;
    $552=$data_7&7;
    $553=$op_4&255;
    $554=($553|0)==0;
    $555=$flags_1|128;
    $flags_2=($554?$555:$flags_1);
    $556=($552|0)==6;
    if ($556) {
     $pc_10=$pc_9;$flags_3=$flags_2;$op_5=$op_4;
     label = 1375;
     break;
    }
    $558=(($op_4)&255);
    $559=$552^1;
    $560=(($107+$559)|0);
    HEAP8[($560)]=$558;
    $pc_0_be=$pc_9;$sp_0_be=$sp_0300;$flags_0_be=$flags_2;
   }
   else if ((label|0) == 1426) {
    label = 0;
    $798=((HEAP8[($193)])|0);
    $799=($798&255);
    $800=((($799)-($data_12))|0);
    $801=(($800)&255);
    HEAP8[($193)]=$801;
    $pc_3=$pc_16;$op_0=$799;$data_1=$800;
    label = 1336;
   }
   else if ((label|0) == 1444) {
    label = 0;
    $879=((HEAP8[($218)])|0);
    $880=($879&255);
    $881=$880^$data_19;
    $882=(($881)&255);
    HEAP8[($218)]=$882;
    $883=((($881)+(511))|0);
    $884=$883>>>1;
    $885=$884&128;
    $pc_0_be=$pc_25;$sp_0_be=$sp_0300;$flags_0_be=$885;
   }
   else if ((label|0) == 1434) {
    label = 0;
    $832=((HEAP8[($202)])|0);
    $833=($832&255);
    $834=$833&$data_15;
    $835=(($834)&255);
    HEAP8[($202)]=$835;
    $pc_20=$pc_19;
    label = 1435;
   }
   else if ((label|0) == 1439) {
    label = 0;
    $856=((HEAP8[($210)])|0);
    $857=($856&255);
    $858=$857|$data_17;
    $859=(($858)&255);
    HEAP8[($210)]=$859;
    $pc_23=$pc_22;
    label = 1440;
   }
   else if ((label|0) == 1342) {
    label = 0;
    $381=((($pc_5)+(2))|0);
    $382=((__Z8get_le16PKv($244))|0);
    $pc_6=$382;$data_2=$381;
    label = 1343;
   }
   else if ((label|0) == 1412) {
    label = 0;
    $729=(($temp8_1)&65535);
    HEAP16[(($171)>>1)]=$729;
    $pc_13=$pc_12;$sp_1=$sp_0300;$flags_5=$flags_4;$prev_1=$prev_0;$temp8_2=$temp8_1;
    label = 1413;
   }
  } while(0);
  do {
   if ((label|0) == 1336) {
    label = 0;
    $338=$op_0&15;
    $339=$data_1&15;
    $340=((($338)-($339))|0);
    $341=$340&32;
    $342=$data_1>>>4;
    $343=$342&16;
    $344=$341|$343;
    $345=$344|64;
    $346=$data_1&255;
    $347=($346|0)==0;
    if (!($347)) {
     $pc_0_be=$pc_3;$sp_0_be=$sp_0300;$flags_0_be=$345;
     break;
    }
    $349=$344|192;
    $pc_0_be=$pc_3;$sp_0_be=$sp_0300;$flags_0_be=$349;
   }
   else if ((label|0) == 1375) {
    label = 0;
    $568=((HEAP16[(($109)>>1)])|0);
    $569=($568&65535);
    $570=$op_5&255;
    __ZN7Gbs_Emu9cpu_writeEji($112,$569,$570);
    $pc_0_be=$pc_10;$sp_0_be=$sp_0300;$flags_0_be=$flags_3;
   }
   else if ((label|0) == 1435) {
    label = 0;
    $837=((HEAP8[($203)])|0);
    $838=($837&255);
    $839=((($838)+(511))|0);
    $840=$839>>>1;
    $841=$840&128;
    $842=$841|32;
    $pc_0_be=$pc_20;$sp_0_be=$sp_0300;$flags_0_be=$842;
   }
   else if ((label|0) == 1440) {
    label = 0;
    $861=((HEAP8[($211)])|0);
    $862=($861&255);
    $863=((($862)+(511))|0);
    $864=$863>>>1;
    $865=$864&128;
    $pc_0_be=$pc_23;$sp_0_be=$sp_0300;$flags_0_be=$865;
   }
   else if ((label|0) == 1343) {
    label = 0;
    $384=((($sp_0300)+(65535))|0);
    $385=$384&65535;
    $386=$data_2>>>8;
    __ZN7Gbs_Emu9cpu_writeEji($65,$385,$386);
    $387=((($sp_0300)+(65534))|0);
    $388=$387&65535;
    $389=$data_2&255;
    __ZN7Gbs_Emu9cpu_writeEji($62,$388,$389);
    $pc_0_be=$pc_6;$sp_0_be=$388;$flags_0_be=$flags_0299;
   }
   else if ((label|0) == 1413) {
    label = 0;
    $731=$temp8_2>>>12;
    $732=$731&16;
    $733=$flags_5|$732;
    $734=$temp8_2&4095;
    $735=$prev_1&4095;
    $736=((($734)-($735))|0);
    $737=$736>>>7;
    $738=$737&32;
    $739=$733|$738;
    $pc_0_be=$pc_13;$sp_0_be=$sp_1;$flags_0_be=$739;
   }
  } while(0);
  $257=$pc_0_be>>>13;
  $258=(($s+($257<<2))|0);
  $259=((HEAP32[(($258)>>2)])|0);
  $260=$pc_0_be&8191;
  $261=(($259+$260)|0);
  $_sum=((($260)+(1))|0);
  $262=(($259+$_sum)|0);
  $263=((HEAP8[($261)])|0);
  $264=((HEAP32[(($24)>>2)])|0);
  $265=((($264)-(1))|0);
  HEAP32[(($24)>>2)]=$265;
  $266=($265|0)==0;
  if ($266) {
   label = 1478;
   break;
  } else {
   $flags_0299=$flags_0_be;$sp_0300=$sp_0_be;$244=$262;$_in307=$263;$_in306=$pc_0_be;
  }
 }
 if ((label|0) == 1475) {
  $1000=((HEAP32[(($24)>>2)])|0);
  $1001=((($1000)+(1))|0);
  HEAP32[(($24)>>2)]=$1001;
  $extract_t308=(($sp_0300)&65535);
  $extract_t310=(($flags_0299)&255);
  $flags_0286_off0=$extract_t310;$sp_0290_off0=$extract_t308;$pc_0294=$_in306;
  $ld$4$0=(($1)|0);
  $1003$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($1+4)|0);
  $1003$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($10)|0);
  tempBigInt=$1003$0;HEAP8[($st$6$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(3))|0)]=tempBigInt&0xff;
  $st$7$1=(($10+4)|0);
  tempBigInt=$1003$1;HEAP8[($st$7$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(3))|0)]=tempBigInt&0xff;
  HEAP32[(($12)>>2)]=$pc_0294;
  HEAP16[(($14)>>1)]=$sp_0290_off0;
  HEAP8[($16)]=$flags_0286_off0;
  HEAP32[(($6)>>2)]=$4;
  (_memcpy((($8)|0), (($7)|0), 40)|0);
  $1004=((HEAP32[(($24)>>2)])|0);
  $1005=($1004|0)>0;
  STACKTOP=sp;return (($1005)|0);
 }
 else if ((label|0) == 1476) {
  ___assert_fail(((3848)|0),((7872)|0),((1041)|0),((9096)|0));
  return ((0)|0);
 }
 else if ((label|0) == 1477) {
  $extract_t313=(($sp_0300)&65535);
  $extract_t315=(($flags_0299)&255);
  $flags_0286_off0=$extract_t315;$sp_0290_off0=$extract_t313;$pc_0294=$_in306;
  $ld$4$0=(($1)|0);
  $1003$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($1+4)|0);
  $1003$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($10)|0);
  tempBigInt=$1003$0;HEAP8[($st$6$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(3))|0)]=tempBigInt&0xff;
  $st$7$1=(($10+4)|0);
  tempBigInt=$1003$1;HEAP8[($st$7$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(3))|0)]=tempBigInt&0xff;
  HEAP32[(($12)>>2)]=$pc_0294;
  HEAP16[(($14)>>1)]=$sp_0290_off0;
  HEAP8[($16)]=$flags_0286_off0;
  HEAP32[(($6)>>2)]=$4;
  (_memcpy((($8)|0), (($7)|0), 40)|0);
  $1004=((HEAP32[(($24)>>2)])|0);
  $1005=($1004|0)>0;
  STACKTOP=sp;return (($1005)|0);
 }
 else if ((label|0) == 1478) {
  $extract_t311=(($sp_0_be)&65535);
  $extract_t=(($flags_0_be)&255);
  $flags_0286_off0=$extract_t;$sp_0290_off0=$extract_t311;$pc_0294=$pc_0_be;
  $ld$4$0=(($1)|0);
  $1003$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($1+4)|0);
  $1003$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($10)|0);
  tempBigInt=$1003$0;HEAP8[($st$6$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(3))|0)]=tempBigInt&0xff;
  $st$7$1=(($10+4)|0);
  tempBigInt=$1003$1;HEAP8[($st$7$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(3))|0)]=tempBigInt&0xff;
  HEAP32[(($12)>>2)]=$pc_0294;
  HEAP16[(($14)>>1)]=$sp_0290_off0;
  HEAP8[($16)]=$flags_0286_off0;
  HEAP32[(($6)>>2)]=$4;
  (_memcpy((($8)|0), (($7)|0), 40)|0);
  $1004=((HEAP32[(($24)>>2)])|0);
  $1005=($1004|0)>0;
  STACKTOP=sp;return (($1005)|0);
 }
 else if ((label|0) == 1363) {
  ___assert_fail(((3848)|0),((7872)|0),((452)|0),((9096)|0));
  return ((0)|0);
 }
  return 0;
}
function __ZNK6Gb_Cpu6remainEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$4<<2;
 return (($5)|0);
}
function __ZN6Gb_Osc5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+28)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+32)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+40)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=3;
 $5=(($this+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+16)|0);
 HEAP32[(($7)>>2)]=$6;
 return;
}
function __ZN6Gb_Osc12clock_lengthEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,label=0;
 $1=(($this+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP8[($3)])|0);
 $5=$4&64;
 $6=(($5<<24)>>24)==0;
 if ($6) {
  return;
 }
 $8=(($this+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if ($10) {
  return;
 }
 $12=((($9)-(1))|0);
 HEAP32[(($8)>>2)]=$12;
 return;
}
function __ZN6Gb_Env14clock_envelopeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,label=0;
 $1=(($this+48)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 }
 $5=((($2)-(1))|0);
 HEAP32[(($1)>>2)]=$5;
 $6=($5|0)==0;
 if (!($6)) {
  return;
 }
 $8=(($this+24)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+2)|0);
 $11=((HEAP8[($10)])|0);
 $12=($11&255);
 $13=$12&7;
 HEAP32[(($1)>>2)]=$13;
 $14=(($this+36)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($15)-(1))|0);
 $17=((HEAP32[(($8)>>2)])|0);
 $18=(($17+2)|0);
 $19=((HEAP8[($18)])|0);
 $20=($19&255);
 $21=$20>>>2;
 $22=$21&2;
 $23=((($16)+($22))|0);
 $24=($23>>>0)<((15)>>>0);
 if (!($24)) {
  return;
 }
 HEAP32[(($14)>>2)]=$23;
 return;
}
function __ZN6Gb_Env14write_registerEii($this,$reg,$data){
 $this=($this)|0;
 $reg=($reg)|0;
 $data=($data)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$13=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$_0=0,label=0;
 if (((($reg|0))|0)==((4)|0)) {
  $15=$data&128;
  $16=($15|0)==0;
  if ($16) {
   $_0=0;
   return (($_0)|0);
  }
  $18=(($this+24)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($19+2)|0);
  $21=((HEAP8[($20)])|0);
  $22=($21&255);
  $23=$22&7;
  $24=(($this+48)|0);
  HEAP32[(($24)>>2)]=$23;
  $25=((HEAP32[(($18)>>2)])|0);
  $26=(($25+2)|0);
  $27=((HEAP8[($26)])|0);
  $28=($27&255);
  $29=$28>>>4;
  $30=(($this+36)|0);
  HEAP32[(($30)>>2)]=$29;
  $31=(($this+44)|0);
  HEAP32[(($31)>>2)]=1;
  $32=(($this+40)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=($33|0)==0;
  if (!($34)) {
   $_0=1;
   return (($_0)|0);
  }
  HEAP32[(($32)>>2)]=64;
  $_0=1;
  return (($_0)|0);
 } else if (((($reg|0))|0)==((2)|0)) {
  $11=($data>>>0)>((15)>>>0);
  if ($11) {
   $_0=0;
   return (($_0)|0);
  }
  $13=(($this+44)|0);
  HEAP32[(($13)>>2)]=0;
  $_0=0;
  return (($_0)|0);
 } else if (((($reg|0))|0)==((1)|0)) {
  $2=(($this+24)|0);
  $3=((HEAP32[(($2)>>2)])|0);
  $4=(($3+1)|0);
  $5=((HEAP8[($4)])|0);
  $6=($5&255);
  $7=$6&63;
  $8=(((64)-($7))|0);
  $9=(($this+40)|0);
  HEAP32[(($9)>>2)]=$8;
  $_0=0;
  return (($_0)|0);
 } else {
  $_0=0;
  return (($_0)|0);
 }
  return 0;
}
function __ZN9Gb_Square5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+64)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+60)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+56)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this)|0);
 __ZN6Gb_Env5resetEv($4);
 return;
}
function __ZN9Gb_Square11clock_sweepEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$offset_0=0,$40=0,$41=0,$44=0;
 var label=0;
 $1=(($this+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP8[($2)])|0);
 $4=($3&255);
 $5=$4>>>4;
 $6=$5&7;
 $7=($6|0)==0;
 if ($7) {
  return;
 }
 $9=(($this+56)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==0;
 if ($11) {
  return;
 }
 $13=((($10)-(1))|0);
 HEAP32[(($9)>>2)]=$13;
 $14=($13|0)==0;
 if (!($14)) {
  return;
 }
 HEAP32[(($9)>>2)]=$6;
 $16=(($this+60)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17)&255);
 $19=((HEAP32[(($1)>>2)])|0);
 $20=(($19+3)|0);
 HEAP8[($20)]=$18;
 $21=((HEAP32[(($1)>>2)])|0);
 $22=(($21+4)|0);
 $23=((HEAP8[($22)])|0);
 $24=($23&255);
 $25=$24&248;
 $26=((HEAP32[(($16)>>2)])|0);
 $27=$26>>>8;
 $28=$27&7;
 $29=$28|$25;
 $30=(($29)&255);
 HEAP8[($22)]=$30;
 $31=((HEAP32[(($16)>>2)])|0);
 $32=((HEAP32[(($1)>>2)])|0);
 $33=((HEAP8[($32)])|0);
 $34=($33&255);
 $35=$34&7;
 $36=$31>>($35|0);
 $37=$34&8;
 $38=($37|0)==0;
 $39=(((-$36))|0);
 $offset_0=($38?$36:$39);
 $40=((($offset_0)+($31))|0);
 HEAP32[(($16)>>2)]=$40;
 $41=($40|0)<0;
 if ($41) {
  HEAP32[(($16)>>2)]=0;
  return;
 }
 $44=($40|0)>2047;
 if (!($44)) {
  return;
 }
 HEAP32[(($9)>>2)]=0;
 HEAP32[(($16)>>2)]=2048;
 return;
}
function __ZN9Gb_Square3runEiii($this,$time,$end_time,$playing){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 $playing=($playing)|0;
 var $1=0,$2=0,$3=0,$_playing=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$amp_0=0,$21=0,$22=0,$23=0,$24=0,$amp_1=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $end_time_=0,$40=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$_1=0,$phase_0=0,$delta1_0=0,$50=0,$51=0,$52=0,$53=0,$or_cond=0,$55=0,$56=0,$delta1_1=0;
 var $58=0,$59=0,$61=0,$_2=0,$63=0,label=0;
 $1=(($this+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==2048;
 $_playing=($3?0:$playing);
 $4=(($this)|0);
 $5=(($this+24)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+1)|0);
 $8=((HEAP8[($7)])|0);
 $9=($8&255);
 $10=$9>>>6;
 $11=((9840+$10)|0);
 $12=((HEAP8[($11)])|0);
 $13=($12&255);
 $14=(($this+36)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=$15&$_playing;
 $17=(($this+64)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($18|0)<($13|0);
 $20=(((-$16))|0);
 $amp_0=($19?$16:$20);
 $21=((__ZNK6Gb_Osc9frequencyEv($4))|0);
 $22=((($21)-(1))|0);
 $23=($22>>>0)>((2040)>>>0);
 $24=$15>>1;
 $amp_1=($23?$24:$amp_0);
 $25=(($this+32)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=($amp_1|0)==($26|0);
 if (!($27)) {
  $29=((($amp_1)-($26))|0);
  HEAP32[(($25)>>2)]=$amp_1;
  $30=(($this+52)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=(($this+16)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($31,$time,$29,$33);
 }
 $35=(($this+28)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=((($36)+($time))|0);
 $38=($_playing|0)==0;
 $39=$23|$38;
 $end_time_=($39?$end_time:$37);
 $40=($end_time_|0)<($end_time|0);
 if (!($40)) {
  $_2=$end_time_;
  $63=((($_2)-($end_time))|0);
  HEAP32[(($35)>>2)]=$63;
  return;
 }
 $42=(((2048)-($21))|0);
 $43=$42<<2;
 $44=(($this+16)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=((HEAP32[(($17)>>2)])|0);
 $47=$amp_1<<1;
 $48=(($this+52)|0);
 $delta1_0=$47;$phase_0=$46;$_1=$end_time_;
 while(1) {
  $50=((($phase_0)+(1))|0);
  $51=$50&7;
  $52=($51|0)==0;
  $53=($51|0)==($13|0);
  $or_cond=$52|$53;
  if ($or_cond) {
   $55=(((-$delta1_0))|0);
   $56=((HEAP32[(($48)>>2)])|0);
   __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($56,$_1,$55,$45);
   $delta1_1=$55;
  } else {
   $delta1_1=$delta1_0;
  }
  $58=((($_1)+($43))|0);
  $59=($58|0)<($end_time|0);
  if ($59) {
   $delta1_0=$delta1_1;$phase_0=$51;$_1=$58;
  } else {
   break;
  }
 }
 HEAP32[(($17)>>2)]=$51;
 $61=$delta1_1>>1;
 HEAP32[(($25)>>2)]=$61;
 $_2=$58;
 $63=((($_2)-($end_time))|0);
 HEAP32[(($35)>>2)]=$63;
 return;
}
function __ZNK6Gb_Osc9frequencyEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 $1=(($this+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP8[($3)])|0);
 $5=($4&255);
 $6=$5<<8;
 $7=$6&1792;
 $8=(($2+3)|0);
 $9=((HEAP8[($8)])|0);
 $10=($9&255);
 $11=$7|$10;
 return (($11)|0);
}
function __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($this,$t,$delta,$buf){
 $this=($this)|0;
 $t=($t)|0;
 $delta=($delta)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($buf)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=(($buf+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($3)+($5))|0);
 __ZNK10Blip_SynthILi12ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
 return;
}
function __ZN8Gb_Noise3runEiii($this,$time,$end_time,$playing){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 $playing=($playing)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$amp_0=0,$17=0,$18=0,$19=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$end_time_=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$resampled_time_0=0,$bits_0=0,$delta1_0=0,$_1=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0;
 var $60=0,$bits_1=0,$delta1_1=0,$62=0,$63=0,$65=0,$_2=0,$67=0,label=0;
 $1=(($this+36)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&$playing;
 $4=(($this+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+3)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=$8&8;
 $10=(((13)-($9))|0);
 $11=(($this+56)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=2<<$10;
 $14=$13&$12;
 $15=($14|0)==0;
 $16=(((-$3))|0);
 $amp_0=($15?$3:$16);
 $17=(($this+32)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($amp_0|0)==($18|0);
 if (!($19)) {
  $21=((($amp_0)-($18))|0);
  HEAP32[(($17)>>2)]=$amp_0;
  $22=(($this+52)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=(($this+16)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($23,$time,$21,$25);
 }
 $27=(($this+28)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((($28)+($time))|0);
 $30=($playing|0)==0;
 $end_time_=($30?$end_time:$29);
 $31=($end_time_|0)<($end_time|0);
 if (!($31)) {
  $_2=$end_time_;
  $67=((($_2)-($end_time))|0);
  HEAP32[(($27)>>2)]=$67;
  return;
 }
 $33=((HEAP32[(($4)>>2)])|0);
 $34=(($33+3)|0);
 $35=((HEAP8[($34)])|0);
 $36=($35&255);
 $37=$36&7;
 $38=((9848+$37)|0);
 $39=((HEAP8[($38)])|0);
 $40=($39&255);
 $41=$36>>>4;
 $42=$40<<$41;
 $43=(($this+16)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=((__ZNK11Blip_Buffer18resampled_durationEi($44,$42))|0);
 $46=((__ZNK11Blip_Buffer14resampled_timeEi($44,$end_time_))|0);
 $47=((HEAP32[(($11)>>2)])|0);
 $48=$amp_0<<1;
 $49=(($this+52)|0);
 $_1=$end_time_;$delta1_0=$48;$bits_0=$47;$resampled_time_0=$46;
 while(1) {
  $51=$bits_0>>>($10>>>0);
  $52=((($51)+(1))|0);
  $53=((($_1)+($42))|0);
  $54=$bits_0<<1;
  $55=$52&2;
  $56=($55|0)==0;
  if ($56) {
   $delta1_1=$delta1_0;$bits_1=$54;
  } else {
   $58=(((-$delta1_0))|0);
   $59=$54|1;
   $60=((HEAP32[(($49)>>2)])|0);
   __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($60,$resampled_time_0,$58,$44);
   $delta1_1=$58;$bits_1=$59;
  }
  $62=((($resampled_time_0)+($45))|0);
  $63=($53|0)<($end_time|0);
  if ($63) {
   $_1=$53;$delta1_0=$delta1_1;$bits_0=$bits_1;$resampled_time_0=$62;
  } else {
   break;
  }
 }
 HEAP32[(($11)>>2)]=$bits_1;
 $65=$delta1_1>>1;
 HEAP32[(($17)>>2)]=$65;
 $_2=$53;
 $67=((($_2)-($end_time))|0);
 HEAP32[(($27)>>2)]=$67;
 return;
}
function __ZNK11Blip_Buffer18resampled_durationEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 return (($3)|0);
}
function __ZN7Gb_Wave3runEiii($this,$time,$end_time,$playing){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 $playing=($playing)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$amp_0=0,$_024=0;
 var $21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$end_time_=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $wave_pos_0_in_in=0,$_1=0,$wave_pos_0_in=0,$wave_pos_0=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$55=0,$56=0,$_2=0,$59=0,label=0;
 $1=(($this)|0);
 $2=(($this+36)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($3)+(7))|0);
 $5=$4&7;
 $6=(($this+52)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($this+56+$7)|0);
 $9=((HEAP8[($8)])|0);
 $10=($9&255);
 $11=$10>>>($5>>>0);
 $12=$11&$playing;
 $13=$12<<1;
 $14=((__ZNK6Gb_Osc9frequencyEv($1))|0);
 $15=((($14)-(1))|0);
 $16=($15>>>0)>((2044)>>>0);
 if ($16) {
  $18=30>>>($5>>>0);
  $19=$18&$playing;
  $_024=0;$amp_0=$19;
 } else {
  $_024=$playing;$amp_0=$13;
 }
 $21=(($this+32)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($amp_0|0)==($22|0);
 if (!($23)) {
  $25=((($amp_0)-($22))|0);
  HEAP32[(($21)>>2)]=$amp_0;
  $26=(($this+48)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=(($this+16)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($27,$time,$25,$29);
 }
 $31=(($this+28)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=((($32)+($time))|0);
 $34=($_024|0)==0;
 $end_time_=($34?$end_time:$33);
 $35=($end_time_|0)<($end_time|0);
 if (!($35)) {
  $_2=$end_time_;
  $59=((($_2)-($end_time))|0);
  HEAP32[(($31)>>2)]=$59;
  return;
 }
 $37=(($this+16)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=(((2048)-($14))|0);
 $40=$39<<1;
 $41=((HEAP32[(($6)>>2)])|0);
 $42=(($this+48)|0);
 $_1=$end_time_;$wave_pos_0_in_in=$41;
 while(1) {
  $wave_pos_0_in=((($wave_pos_0_in_in)+(1))|0);
  $wave_pos_0=$wave_pos_0_in&31;
  $44=(($this+56+$wave_pos_0)|0);
  $45=((HEAP8[($44)])|0);
  $46=($45&255);
  $47=$46>>>($5>>>0);
  $48=$47<<1;
  $49=((HEAP32[(($21)>>2)])|0);
  $50=($48|0)==($49|0);
  if (!($50)) {
   $52=((($48)-($49))|0);
   HEAP32[(($21)>>2)]=$48;
   $53=((HEAP32[(($42)>>2)])|0);
   __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($53,$_1,$52,$38);
  }
  $55=((($_1)+($40))|0);
  $56=($55|0)<($end_time|0);
  if ($56) {
   $_1=$55;$wave_pos_0_in_in=$wave_pos_0;
  } else {
   break;
  }
 }
 HEAP32[(($6)>>2)]=$wave_pos_0;
 $_2=$55;
 $59=((($_2)-($end_time))|0);
 HEAP32[(($31)>>2)]=$59;
 return;
}
function __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($this,$t,$delta,$buf){
 $this=($this)|0;
 $t=($t)|0;
 $delta=($delta)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($buf)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=(($buf+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($3)+($5))|0);
 __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($this,$6,$delta,$buf);
 return;
}
function __ZN6Gb_Apu9write_oscEiii($this,$index,$reg,$data){
 $this=($this)|0;
 $index=($index)|0;
 $reg=($reg)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$5=0,$sq_0=0,$7=0,$8=0,$9=0,$or_cond=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $or_cond14=0,$23=0,$25=0,$27=0,$28=0,$30=0,label=0;
 $1=((($index)*(-5))&-1);
 $2=((($1)+($reg))|0);
 $3=(($this+112)|0);
 if (((($index|0))|0)==((0)|0)) {
  $5=(($this+44)|0);
  $sq_0=$5;
 } else if (((($index|0))|0)==((2)|0)) {
  $25=(($this+180)|0);
  __ZN7Gb_Wave14write_registerEii($25,$2,$data);
  return;
 } else if (((($index|0))|0)==((1)|0)) {
  $sq_0=$3;
 } else if (((($index|0))|0)==((3)|0)) {
  $27=(($this+268)|0);
  $28=((__ZN6Gb_Env14write_registerEii($27,$2,$data))|0);
  if (!($28)) {
   return;
  }
  $30=(($this+324)|0);
  HEAP32[(($30)>>2)]=32767;
  return;
 } else {
  return;
 }
 $7=(($sq_0)|0);
 $8=((__ZN6Gb_Env14write_registerEii($7,$2,$data))|0);
 $9=($index|0)==0;
 $or_cond=$8&$9;
 if (!($or_cond)) {
  return;
 }
 $11=(($this+44)|0);
 $12=(($11)|0);
 $13=((__ZNK6Gb_Osc9frequencyEv($12))|0);
 $14=(($this+104)|0);
 HEAP32[(($14)>>2)]=$13;
 $15=(($this+328)|0);
 $16=((HEAP8[($15)])|0);
 $17=($16&255);
 $18=$17&112;
 $19=($18|0)==0;
 $20=$17&7;
 $21=($20|0)==0;
 $or_cond14=$19|$21;
 if ($or_cond14) {
  return;
 }
 $23=(($this+100)|0);
 HEAP32[(($23)>>2)]=1;
 __ZN9Gb_Square11clock_sweepEv($11);
 return;
}
function __ZN7Gb_Wave14write_registerEii($this,$reg,$data){
 $this=($this)|0;
 $reg=($reg)|0;
 $data=($data)|0;
 var $2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $27=0,$28=0,$29=0,$30=0,$31=0,label=0;
 if (((($reg|0))|0)==((0)|0)) {
  $2=$data&128;
  $3=($2|0)==0;
  if (!($3)) {
   return;
  }
  $5=(($this+44)|0);
  HEAP32[(($5)>>2)]=0;
  return;
 } else if (((($reg|0))|0)==((1)|0)) {
  $7=(($this+24)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(($8+1)|0);
  $10=((HEAP8[($9)])|0);
  $11=($10&255);
  $12=(((256)-($11))|0);
  $13=(($this+40)|0);
  HEAP32[(($13)>>2)]=$12;
  return;
 } else if (((($reg|0))|0)==((4)|0)) {
  $19=$data&128;
  $20=(($this+24)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((HEAP8[($21)])|0);
  $23=($22&255);
  $24=$19&$23;
  $25=($24|0)==0;
  if ($25) {
   return;
  }
  $27=(($this+52)|0);
  HEAP32[(($27)>>2)]=0;
  $28=(($this+44)|0);
  HEAP32[(($28)>>2)]=1;
  $29=(($this+40)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=($30|0)==0;
  if (!($31)) {
   return;
  }
  HEAP32[(($29)>>2)]=256;
  return;
 } else if (((($reg|0))|0)==((2)|0)) {
  $15=$data>>>5;
  $16=$15&3;
  $17=(($this+36)|0);
  HEAP32[(($17)>>2)]=$16;
  return;
 } else {
  return;
 }
}
function __ZN7Gbs_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$13$0=0,$13$1=0,$16$0=0,$16$1=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 __ZN6Gb_CpuC2Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuC2Ev($3);
 $4=$this;
 HEAP32[(($4)>>2)]=13912;
 $5=(($this+336)|0);
 __ZN8Rom_DataILi16384EEC1Ev($5);
 $6=(($this+25072)|0);
 __ZN6Gb_ApuC2Ev($6);
 $8=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($8,272);
 $9=$this;
 __ZN9Music_Emu15set_voice_namesEPKPKc($9,11624);
 __ZN11Classic_Emu15set_voice_typesEPKi($3,11608);
 __ZN9Music_Emu21set_silence_lookaheadEi($9,6);
 __ZN9Music_Emu23set_max_initial_silenceEi($9,21);
 __ZN9Music_Emu8set_gainEd($9,1.2);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($9,11640);
 return;
}
function __ZN6Gb_CpuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+16)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+24)|0);
 $3=(($this+20)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZN8Rom_DataILi16384EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Rom_DataILi16384EEC2Ev($this);
 return;
}
function __ZN9Music_Emu23set_max_initial_silenceEi($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,label=0;
 $1=(($this+160)|0);
 HEAP32[(($1)>>2)]=$n;
 return;
}
function __ZN9Music_Emu8set_gainEd($this,$g){
 $this=($this)|0;
 $g=+($g);
 var $1=0,$2=0,$5=0,label=0;
 $1=((__ZNK9Music_Emu11sample_rateEv($this))|0);
 $2=($1|0)==0;
 if ($2) {
  $5=(($this+184)|0);
  HEAPF64[(($5)>>3)]=$g;
  return;
 } else {
  ___assert_fail(((6984)|0),((6464)|0),((207)|0),((8600)|0));
 }
}
function __ZN8Rom_DataILi16384EED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Rom_DataILi16384EED2Ev($this);
 return;
}
function __ZN7Gbs_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Gbs_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Gbs_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=13912;
 $2=(($this+336)|0);
 __ZN8Rom_DataILi16384EED1Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuD2Ev($3);
 return;
}
function __ZN7Gbs_Emu6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+336)|0);
 __ZN8Rom_DataILi16384EE5clearEv($1);
 $2=$this;
 __ZN9Music_Emu6unloadEv($2);
 return;
}
function __ZN8Rom_DataILi16384EE5clearEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIhE5clearEv($1);
 return;
}
function __ZNK7Gbs_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+372)|0);
 __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($h,$out){
 $h=($h)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($out+272)|0);
 $2=(($h+16)|0);
 __ZN8Gme_File11copy_field_EPcPKci($1,$2,32);
 $3=(($out+784)|0);
 $4=(($h+48)|0);
 __ZN8Gme_File11copy_field_EPcPKci($3,$4,32);
 $5=(($out+1040)|0);
 $6=(($h+80)|0);
 __ZN8Gme_File11copy_field_EPcPKci($5,$6,32);
 return;
}
function __ZL11new_gbs_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(26824))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Gbs_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL12new_gbs_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(368))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Gbs_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Gbs_Emu5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$18=0,$19=0,$20=0,$21=0,$24=0,$25=0,$26=0;
 var $27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$or_cond=0,$38=0,$39=0,$40=.0,$41=0,$42=0,$_0=0,label=0;
 $1=(($this+336)|0);
 $2=(($this+372)|0);
 $3=((__ZN8Rom_DataILi16384EE4loadER11Data_ReaderiPvi($1,$in,112,$2,0))|0);
 $4=($3|0)==0;
 if (!($4)) {
  $_0=$3;
  return (($_0)|0);
 }
 $6=$this;
 $7=(($this+376)|0);
 $8=((HEAP8[($7)])|0);
 $9=($8&255);
 __ZN8Gme_File15set_track_countEi($6,$9);
 $10=((__ZL16check_gbs_headerPKv($2))|0);
 $11=($10|0)==0;
 if (!($11)) {
  $_0=$10;
  return (($_0)|0);
 }
 $13=(($this+375)|0);
 $14=((HEAP8[($13)])|0);
 $15=(($14<<24)>>24)==1;
 if (!($15)) {
  __ZN8Gme_File11set_warningEPKc($6,1944);
 }
 $18=(($this+387)|0);
 $19=((HEAP8[($18)])|0);
 $20=$19&120;
 $21=(($20<<24)>>24)==0;
 if (!($21)) {
  __ZN8Gme_File11set_warningEPKc($6,1512);
 }
 $24=(($this+378)|0);
 $25=((__Z8get_le16PKv($24))|0);
 $26=(($this+379)|0);
 $27=((HEAP8[($26)])|0);
 $28=(($this+381)|0);
 $29=((HEAP8[($28)])|0);
 $30=$29|$27;
 $31=(($this+383)|0);
 $32=((HEAP8[($31)])|0);
 $33=$30|$32;
 $34=(($33<<24)>>24)<0;
 $35=($25>>>0)<((1024)>>>0);
 $or_cond=$34|$35;
 if ($or_cond) {
  __ZN8Gme_File11set_warningEPKc($6,1112);
 }
 $38=$this;
 __ZN9Music_Emu15set_voice_countEi($38,4);
 $39=(($this+25072)|0);
 $40=(+(__ZNK9Music_Emu4gainEv($38)));
 __ZN6Gb_Apu6volumeEd($39,$40);
 $41=(($this)|0);
 $42=((__ZN11Classic_Emu12setup_bufferEl($41,4194304))|0);
 $_0=$42;
 return (($_0)|0);
}
function __ZN8Rom_DataILi16384EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill){
 $this=($this)|0;
 $in=($in)|0;
 $header_size=($header_size)|0;
 $header_out=($header_out)|0;
 $fill=($fill)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($1,$in,$header_size,$header_out,$fill,16392))|0);
 return (($2)|0);
}
function __ZL16check_gbs_headerPKv($header){
 $header=($header)|0;
 var $1=0,$2=0,$_=0,label=0;
 $1=((_memcmp((($header)|0),((2464)|0),((3)|0)))|0);
 $2=($1|0)==0;
 $_=($2?0:16);
 return (($_)|0);
}
function __ZN7Gbs_Emu9update_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+25072)|0);
 __ZN6Gb_Apu9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Gbs_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$c,$l,$r){
 $this=($this)|0;
 $i=($i)|0;
 $c=($c)|0;
 $l=($l)|0;
 $r=($r)|0;
 var $1=0,label=0;
 $1=(($this+25072)|0);
 __ZN6Gb_Apu10osc_outputEiP11Blip_BufferS1_S1_($1,$i,$c,$l,$r);
 return;
}
function __ZN7Gbs_Emu8set_bankEi($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,label=0;
 $1=(($this+336)|0);
 $2=$n<<14;
 $3=((__ZNK8Rom_DataILi16384EE9mask_addrEi($1,$2))|0);
 $4=($3|0)==0;
 do {
  if ($4) {
   $6=((__ZNK8Rom_DataILi16384EE4sizeEv($1))|0);
   $7=($6|0)>16384;
   if (!($7)) {
    break;
   }
   return;
  }
 } while(0);
 $9=(($this+272)|0);
 $10=$9;
 $11=((__ZN8Rom_DataILi16384EE7at_addrEi($1,$3))|0);
 __ZN6Gb_Cpu8map_codeEjjPv($10,16384,16384,$11);
 return;
}
function __ZNK8Rom_DataILi16384EE9mask_addrEi($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&$addr;
 return (($3)|0);
}
function __ZNK8Rom_DataILi16384EE4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN8Rom_DataILi16384EE7at_addrEi($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$_=0,$9=0,label=0;
 $1=((__ZNK8Rom_DataILi16384EE9mask_addrEi($this,$addr))|0);
 $2=(($this+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($1)-($3))|0);
 $5=(($this)|0);
 $6=((__ZNK13blargg_vectorIhE4sizeEv($5))|0);
 $7=((($6)-(16392))|0);
 $8=($4>>>0)>($7>>>0);
 $_=($8?0:$4);
 $9=((__ZNK13blargg_vectorIhEixEj($5,$_))|0);
 return (($9)|0);
}
function __ZN7Gbs_Emu12update_timerEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $23=0,$25=0,$26=.0,$27=0,$29=0,$30=0,$31=.0,$32=.0,$33=0,label=0;
 $1=(($this+387)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3&4;
 $5=($4|0)==0;
 if ($5) {
  $23=(($this+364)|0);
  HEAP32[(($23)>>2)]=70224;
 } else {
  $7=(($this+24811)|0);
  $8=((HEAP8[($7)])|0);
  $9=($8&255);
  $10=$9&3;
  $11=((11656+$10)|0);
  $12=((HEAP8[($11)])|0);
  $13=($12&255);
  $14=$3>>>7;
  $15=((($13)-($14))|0);
  $16=(($this+24810)|0);
  $17=((HEAP8[($16)])|0);
  $18=($17&255);
  $19=(((256)-($18))|0);
  $20=$19<<$15;
  $21=(($this+364)|0);
  HEAP32[(($21)>>2)]=$20;
 }
 $25=$this;
 $26=(+(__ZNK9Music_Emu5tempoEv($25)));
 $27=$26!=(1.0);
 if (!($27)) {
  return;
 }
 $29=(($this+364)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=(+((($30|0))|0));
 $32=($31)/($26);
 $33=(~~($32));
 HEAP32[(($29)>>2)]=$33;
 return;
}
function __ZN7Gbs_Emu7cpu_jsrEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=(($this+280)|0);
 $2=$1;
 HEAP32[(($2)>>2)]=$addr;
 $3=(($this+284)|0);
 $4=$3;
 $5=((HEAP16[(($4)>>1)])|0);
 $6=((($5)-(1))&65535);
 HEAP16[(($4)>>1)]=$6;
 $7=($6&65535);
 __ZN7Gbs_Emu9cpu_writeEji($this,$7,240);
 $8=((HEAP16[(($4)>>1)])|0);
 $9=((($8)-(1))&65535);
 HEAP16[(($4)>>1)]=$9;
 $10=($9&65535);
 __ZN7Gbs_Emu9cpu_writeEji($this,$10,13);
 return;
}
function __ZN7Gbs_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,label=0;
 $1=(($this+25072)|0);
 __ZN6Gb_Apu9set_tempoEd($1,$t);
 __ZN7Gbs_Emu12update_timerEv($this);
 return;
}
function __ZN7Gbs_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_09=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((__ZN11Classic_Emu12start_track_Ei($1,$track))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this+484)|0);
 _memset((((($5)|0))|0), ((((0)|0))|0), ((((16384)|0))|0));
 $6=(($this+16868)|0);
 _memset((((($6)|0))|0), ((((-1)|0))|0), ((((8064)|0))|0));
 $7=(($this+24932)|0);
 _memset((((($7)|0))|0), ((((0)|0))|0), ((((136)|0))|0));
 $8=(($this+24804)|0);
 HEAP8[($8)]=0;
 $9=(($this+25072)|0);
 __ZN6Gb_Apu5resetEv($9);
 $i_09=0;
 while(1) {
  $11=((($i_09)+(65296))|0);
  $12=((18960+$i_09)|0);
  $13=((HEAP8[($12)])|0);
  $14=($13&255);
  __ZN6Gb_Apu14write_registerEiji($9,0,$11,$14);
  $15=((($i_09)+(1))|0);
  $16=($15|0)<48;
  if ($16) {
   $i_09=$15;
  } else {
   break;
  }
 }
 $18=(($this+272)|0);
 $19=$18;
 $20=(($this+336)|0);
 $21=((__ZN8Rom_DataILi16384EE8unmappedEv($20))|0);
 __ZN6Gb_Cpu5resetEPv($19,$21);
 $22=(($this+378)|0);
 $23=((__Z8get_le16PKv($22))|0);
 $24=(($this+288)|0);
 $25=$24;
 HEAP32[(($25)>>2)]=$23;
 __ZN8Rom_DataILi16384EE8set_addrEl($20,$23);
 __ZN6Gb_Cpu8map_codeEjjPv($19,40960,24576,$5);
 $26=((__ZN8Rom_DataILi16384EE7at_addrEi($20,0))|0);
 __ZN6Gb_Cpu8map_codeEjjPv($19,0,16384,$26);
 $27=((__ZNK8Rom_DataILi16384EE4sizeEv($20))|0);
 $28=($27|0)>16384;
 $29=($28&1);
 __ZN7Gbs_Emu8set_bankEi($this,$29);
 $30=(($this+386)|0);
 $31=((HEAP8[($30)])|0);
 $32=(($this+24810)|0);
 HEAP8[($32)]=$31;
 $33=(($this+387)|0);
 $34=((HEAP8[($33)])|0);
 $35=(($this+24811)|0);
 HEAP8[($35)]=$34;
 __ZN7Gbs_Emu12update_timerEv($this);
 $36=(($this+364)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=(($this+368)|0);
 HEAP32[(($38)>>2)]=$37;
 $39=(($track)&255);
 $40=(($this+278)|0);
 HEAP8[($40)]=$39;
 $41=(($this+280)|0);
 $42=$41;
 HEAP32[(($42)>>2)]=61453;
 $43=(($this+384)|0);
 $44=((__Z8get_le16PKv($43))|0);
 $45=(($44)&65535);
 $46=(($this+284)|0);
 $47=$46;
 HEAP16[(($47)>>1)]=$45;
 $48=(($this+360)|0);
 HEAP32[(($48)>>2)]=0;
 $49=(($this+380)|0);
 $50=((__Z8get_le16PKv($49))|0);
 __ZN7Gbs_Emu7cpu_jsrEj($this,$50);
 $_0=0;
 return (($_0)|0);
}
function __ZN8Rom_DataILi16384EE8unmappedEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK13blargg_vectorIhE5beginEv($1))|0);
 return (($2)|0);
}
function __ZN8Rom_DataILi16384EE8set_addrEl($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_9set_addr_Eli($1,$addr,16384);
 return;
}
function __ZN7Gbs_Emu10run_clocksERii($this,$duration,$0){
 $this=($this)|0;
 $duration=($duration)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $25=0,$26=0,$27=0,$30=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$43=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0;
 var $52=0,$53=0,$54=0,$55=0,$_=0,$56=0,$57=0,label=0;
 $2=(($this+360)|0);
 HEAP32[(($2)>>2)]=0;
 $3=((HEAP32[(($duration)>>2)])|0);
 $4=($3|0)>0;
 L1930: do {
  if ($4) {
   $5=(($this+272)|0);
   $6=$5;
   $7=(($this+280)|0);
   $8=$7;
   $9=(($this+368)|0);
   $10=(($this+364)|0);
   $11=(($this+382)|0);
   $12=$this;
   $15=0;$14=$3;
   L1932: while(1) {
    $16=((($14)-($15))|0);
    HEAP32[(($2)>>2)]=$14;
    $17=((__ZN6Gb_Cpu3runEi($6,$16))|0);
    $18=((__ZNK6Gb_Cpu6remainEv($6))|0);
    $19=((HEAP32[(($2)>>2)])|0);
    $20=((($19)-($18))|0);
    HEAP32[(($2)>>2)]=$20;
    do {
     if ($17) {
      $22=((HEAP32[(($8)>>2)])|0);
      $23=($22|0)==61453;
      if (!($23)) {
       $41=($22|0)>65535;
       if ($41) {
        $43=$22&65535;
        HEAP32[(($8)>>2)]=$43;
        break;
       } else {
        __ZN8Gme_File11set_warningEPKc($12,632);
        $45=((HEAP32[(($8)>>2)])|0);
        $46=((($45)+(1))|0);
        $47=$46&65535;
        HEAP32[(($8)>>2)]=$47;
        $48=((HEAP32[(($2)>>2)])|0);
        $49=((($48)+(6))|0);
        HEAP32[(($2)>>2)]=$49;
        break;
       }
      }
      $25=((HEAP32[(($9)>>2)])|0);
      $26=((HEAP32[(($duration)>>2)])|0);
      $27=($25|0)>($26|0);
      if ($27) {
       break L1932;
      }
      $30=($20|0)<($25|0);
      if ($30) {
       HEAP32[(($2)>>2)]=$25;
      }
      $33=((HEAP32[(($10)>>2)])|0);
      $34=((HEAP32[(($9)>>2)])|0);
      $35=((($34)+($33))|0);
      HEAP32[(($9)>>2)]=$35;
      $36=((__Z8get_le16PKv($11))|0);
      __ZN7Gbs_Emu7cpu_jsrEj($this,$36);
     }
    } while(0);
    $37=((HEAP32[(($2)>>2)])|0);
    $38=((HEAP32[(($duration)>>2)])|0);
    $39=($37|0)<($38|0);
    if ($39) {
     $15=$37;$14=$38;
    } else {
     break L1930;
    }
   }
   HEAP32[(($2)>>2)]=$26;
  }
 } while(0);
 $50=((HEAP32[(($2)>>2)])|0);
 HEAP32[(($duration)>>2)]=$50;
 $51=((HEAP32[(($2)>>2)])|0);
 $52=(($this+368)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=((($53)-($51))|0);
 $55=($54|0)<0;
 $_=($55?0:$54);
 HEAP32[(($52)>>2)]=$_;
 $56=(($this+25072)|0);
 $57=((HEAP32[(($2)>>2)])|0);
 __ZN6Gb_Apu9end_frameEi($56,$57);
 return ((0)|0);
}
function __ZNK13blargg_vectorIhE4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN8Gbs_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Gbs_FileC2Ev($this);
 return;
}
function __ZN8Gbs_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=13120;
 $3=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($3,272);
 return;
}
function __ZN8Gbs_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Gbs_FileD2Ev($this);
 return;
}
function __ZN8Gbs_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Gbs_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Gbs_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$_0=0,label=0;
 $1=$in;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+252)|0);
 $6=((FUNCTION_TABLE_iiii[($4)&127]($in,$5,112))|0);
 $7=($6|0)==0;
 if ($7) {
  $12=$this;
  $13=(($this+256)|0);
  $14=((HEAP8[($13)])|0);
  $15=($14&255);
  __ZN8Gme_File15set_track_countEi($12,$15);
  $16=((__ZL16check_gbs_headerPKv($5))|0);
  $_0=$16;
  return (($_0)|0);
 } else {
  $9=($6|0)==17648;
  $10=($9?16:$6);
  $_0=$10;
  return (($_0)|0);
 }
  return 0;
}
function __ZNK8Gbs_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+252)|0);
 __ZL15copy_gbs_fieldsRKN7Gbs_Emu8header_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZN8Gbs_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_D2Ev($1);
 return;
}
function __ZN8Rom_DataILi16384EED2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_D2Ev($1);
 return;
}
function __ZN9Rom_Data_D2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIhED1Ev($1);
 return;
}
function __ZN13blargg_vectorIhED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIhED2Ev($this);
 return;
}
function __ZN13blargg_vectorIhED2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _free($2);
 return;
}
function __ZNK9Music_Emu11sample_rateEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+192)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN8Rom_DataILi16384EEC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_C2Ev($1);
 return;
}
function __ZN9Rom_Data_C2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIhEC1Ev($1);
 return;
}
function __ZN13blargg_vectorIhEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIhEC2Ev($this);
 return;
}
function __ZN13blargg_vectorIhEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZN8Gme_File14clear_playlistEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+28)|0);
 __ZN12M3u_Playlist5clearEv($1);
 $2=$this;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+32)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 FUNCTION_TABLE_vi[($5)&255]($this);
 $6=(($this+12)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($this+8)|0);
 HEAP32[(($8)>>2)]=$7;
 return;
}
function __ZN12M3u_Playlist5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+16)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this)|0);
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEE5clearEv($2);
 $3=(($this+8)|0);
 __ZN13blargg_vectorIcE5clearEv($3);
 return;
}
function __ZN8Gme_File6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 __ZN8Gme_File14clear_playlistEv($this);
 $1=(($this+8)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+12)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+132)|0);
 __ZN13blargg_vectorIhE5clearEv($3);
 return;
}
function __ZN8Gme_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$14$0=0,$14$1=0,$17$0=0,$17$1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=13064;
 $2=(($this+28)|0);
 __ZN12M3u_PlaylistC1Ev($2);
 $3=(($this+132)|0);
 __ZN13blargg_vectorIhEC1Ev($3);
 $4=(($this+4)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this+20)|0);
 HEAP32[(($5)>>2)]=0;
 $6=(($this+24)|0);
 HEAP32[(($6)>>2)]=0;
 $7=$this;
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 FUNCTION_TABLE_vi[($10)&255]($this);
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN12M3u_PlaylistC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN12M3u_PlaylistC2Ev($this);
 return;
}
function __ZN12M3u_PlaylistD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN12M3u_PlaylistD2Ev($this);
 return;
}
function __ZN8Gme_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Gme_FileD2Ev($this);
 $2=$this;
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Gme_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$13=0,$14=0,$12$0=0,$12$1=0,$17$0=0,$17$1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=13064;
 $2=(($this+24)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($3|0)==0;
 if (!($4)) {
  $6=(($this+20)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  FUNCTION_TABLE_vi[($3)&255]($7);
 }
 $9=(($this+132)|0);
 __ZN13blargg_vectorIhED1Ev($9);
 $10=(($this+28)|0);
 __ZN12M3u_PlaylistD1Ev($10);
 return;
}
function __ZN8Gme_File9load_mem_EPKhl($this,$data,$size){
 $this=($this)|0;
 $data=($data)|0;
 $size=($size)|0;
 var $in=0,$1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $in=((sp)|0);
 $1=(($this+132)|0);
 $2=((__ZNK13blargg_vectorIhE5beginEv($1))|0);
 $3=($2|0)==($data|0);
 if ($3) {
  ___assert_fail(((5864)|0),((7680)|0),((55)|0),((8736)|0));
  return ((0)|0);
 } else {
  __ZN15Mem_File_ReaderC2EPKvl($in,$data,$size);
  $6=$this;
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+12)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($in)|0);
  $11=((FUNCTION_TABLE_iii[($9)&127]($this,$10))|0);
  STACKTOP=sp;return (($11)|0);
 }
  return 0;
}
function __ZN8Gme_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$_0=0,label=0;
 $1=(($this+132)|0);
 $2=$in;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+16)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((FUNCTION_TABLE_ii[($5)&31]($in))|0);
 $7=((__ZN13blargg_vectorIhE6resizeEj($1,$6))|0);
 $8=($7|0)==0;
 if (!($8)) {
  $_0=$7;
  return (($_0)|0);
 }
 $10=$in;
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+12)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((__ZNK13blargg_vectorIhE5beginEv($1))|0);
 $15=((__ZNK13blargg_vectorIhE4sizeEv($1))|0);
 $16=((FUNCTION_TABLE_iiii[($13)&127]($in,$14,$15))|0);
 $17=($16|0)==0;
 if (!($17)) {
  $_0=$16;
  return (($_0)|0);
 }
 $19=$this;
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+16)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((__ZNK13blargg_vectorIhE5beginEv($1))|0);
 $24=((__ZNK13blargg_vectorIhE4sizeEv($1))|0);
 $25=((FUNCTION_TABLE_iiii[($22)&127]($this,$23,$24))|0);
 $_0=$25;
 return (($_0)|0);
}
function __ZN8Gme_File8pre_loadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=$this;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 FUNCTION_TABLE_vi[($4)&255]($this);
 return;
}
function __ZN8Gme_File10post_load_Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN8Gme_File9post_loadEPKc($this,$err){
 $this=($this)|0;
 $err=($err)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,label=0;
 $1=((__ZNK8Gme_File11track_countEv($this))|0);
 $2=($1|0)==0;
 if ($2) {
  $4=((__ZNK8Gme_File4typeEv($this))|0);
  $5=(($4+4)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  __ZN8Gme_File15set_track_countEi($this,$6);
 }
 $8=($err|0)==0;
 $9=$this;
 $10=((HEAP32[(($9)>>2)])|0);
 if ($8) {
  $12=(($10+28)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  FUNCTION_TABLE_vi[($13)&255]($this);
  return (($err)|0);
 } else {
  $15=(($10+8)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  FUNCTION_TABLE_vi[($16)&255]($this);
  return (($err)|0);
 }
  return 0;
}
function __ZNK8Gme_File11track_countEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZNK8Gme_File4typeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN8Gme_File4loadER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=$this;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 FUNCTION_TABLE_vi[($4)&255]($this);
 $5=$this;
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+12)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((FUNCTION_TABLE_iii[($8)&127]($this,$in))|0);
 $10=((__ZN8Gme_File9post_loadEPKc($this,$9))|0);
 return (($10)|0);
}
function __ZN8Gme_File11copy_field_EPcPKci($out,$in,$in_size){
 $out=($out)|0;
 $in=($in)|0;
 $in_size=($in_size)|0;
 var $1=0,$3=0,$4=0,$5=0,$_027=0,$_02426=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$_0_lcssa=0,$_024_lcssa=0,$14=0,$__0=0,$len_0=0,$16=0,$18=0;
 var $19=0,$20=0,$21=0,$len_1=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$35=0,$36=0,label=0;
 $1=($in|0)==0;
 if ($1) {
  return;
 }
 $3=((HEAP8[($in)])|0);
 $4=(($3<<24)>>24)==0;
 if ($4) {
  return;
 }
 $5=($in_size|0)==0;
 L2019: do {
  if ($5) {
   $_024_lcssa=$in;$_0_lcssa=0;
  } else {
   $_02426=$in;$_027=$in_size;
   while(1) {
    $6=((HEAP8[($_02426)])|0);
    $7=(($6<<24)>>24);
    $8=((($7)-(1))|0);
    $9=($8>>>0)<((32)>>>0);
    if (!($9)) {
     $_024_lcssa=$_02426;$_0_lcssa=$_027;
     break L2019;
    }
    $11=(($_02426+1)|0);
    $12=((($_027)-(1))|0);
    $13=($12|0)==0;
    if ($13) {
     $_024_lcssa=$11;$_0_lcssa=0;
     break;
    } else {
     $_02426=$11;$_027=$12;
    }
   }
  }
 } while(0);
 $14=($_0_lcssa|0)>255;
 $__0=($14?255:$_0_lcssa);
 $len_0=0;
 while(1) {
  $16=($len_0|0)<($__0|0);
  if (!($16)) {
   $len_1=$len_0;
   break;
  }
  $18=(($_024_lcssa+$len_0)|0);
  $19=((HEAP8[($18)])|0);
  $20=(($19<<24)>>24)==0;
  $21=((($len_0)+(1))|0);
  if ($20) {
   $len_1=$len_0;
   break;
  } else {
   $len_0=$21;
  }
 }
 while(1) {
  $22=($len_1|0)==0;
  if ($22) {
   break;
  }
  $24=((($len_1)-(1))|0);
  $25=(($_024_lcssa+$24)|0);
  $26=((HEAP8[($25)])|0);
  $27=((($26&255))>>>0)<((33)>>>0);
  if ($27) {
   $len_1=$24;
  } else {
   break;
  }
 }
 $28=(($out+$len_1)|0);
 HEAP8[($28)]=0;
 (_memcpy((($out)|0), (($_024_lcssa)|0), $len_1)|0);
 $29=((_strcmp((($out)|0),((5232)|0)))|0);
 $30=($29|0)==0;
 do {
  if (!($30)) {
   $32=((_strcmp((($out)|0),((3784)|0)))|0);
   $33=($32|0)==0;
   if ($33) {
    break;
   }
   $35=((_strcmp((($out)|0),((3056)|0)))|0);
   $36=($35|0)==0;
   if ($36) {
    break;
   }
   return;
  }
 } while(0);
 HEAP8[($out)]=0;
 return;
}
function __ZN8Gme_File11copy_field_EPcPKc($out,$in){
 $out=($out)|0;
 $in=($in)|0;
 var label=0;
 __ZN8Gme_File11copy_field_EPcPKci($out,$in,255);
 return;
}
function __ZNK8Gme_File12remap_track_EPi($this,$track_io){
 $this=($this)|0;
 $track_io=($track_io)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$27=0,$28=0,$29=0,$30=0,$_0=0,label=0;
 $1=((HEAP32[(($track_io)>>2)])|0);
 $2=((__ZNK8Gme_File11track_countEv($this))|0);
 $3=($1>>>0)<($2>>>0);
 if (!($3)) {
  $_0=2440;
  return (($_0)|0);
 }
 $5=(($this+28)|0);
 $6=((__ZNK12M3u_Playlist4sizeEv($5))|0);
 $7=($1>>>0)<($6>>>0);
 do {
  if ($7) {
   $9=((__ZNK12M3u_PlaylistixEi($5,$1))|0);
   HEAP32[(($track_io)>>2)]=0;
   $10=(($9+16)|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=($11|0)>-1;
   do {
    if ($12) {
     HEAP32[(($track_io)>>2)]=$11;
     $14=(($this+4)|0);
     $15=((HEAP32[(($14)>>2)])|0);
     $16=(($15+20)|0);
     $17=((HEAP32[(($16)>>2)])|0);
     $18=$17&2;
     $19=($18|0)==0;
     if (!($19)) {
      break;
     }
     $21=(($9+12)|0);
     $22=((HEAP8[($21)])|0);
     $23=$22&1;
     $24=($23&255);
     $25=((($11)-($24))|0);
     HEAP32[(($track_io)>>2)]=$25;
    }
   } while(0);
   $27=((HEAP32[(($track_io)>>2)])|0);
   $28=(($this+12)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=($27|0)<($29|0);
   if ($30) {
    break;
   } else {
    $_0=1888;
   }
   return (($_0)|0);
  }
 } while(0);
 $_0=0;
 return (($_0)|0);
}
function __ZNK12M3u_Playlist4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK13blargg_vectorIN12M3u_Playlist7entry_tEE4sizeEv($1))|0);
 return (($2)|0);
}
function __ZNK12M3u_PlaylistixEi($this,$i){
 $this=($this)|0;
 $i=($i)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK13blargg_vectorIN12M3u_Playlist7entry_tEEixEj($1,$i))|0);
 return (($2)|0);
}
function __ZNK8Gme_File10track_infoEP12track_info_ti($this,$out,$track){
 $this=($this)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $remapped=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$47=0,$49=0,$50=0,$51=0,$53=0,$55=0,$56=0,$57=0,$59=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $remapped=((sp)|0);
 $1=((__ZNK8Gme_File11track_countEv($this))|0);
 $2=(($out)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($out+4)|0);
 HEAP32[(($3)>>2)]=-1;
 $4=(($out+12)|0);
 HEAP32[(($4)>>2)]=-1;
 $5=(($out+8)|0);
 HEAP32[(($5)>>2)]=-1;
 $6=(($out+528)|0);
 HEAP8[($6)]=0;
 $7=(($out+272)|0);
 HEAP8[($7)]=0;
 $8=(($out+784)|0);
 HEAP8[($8)]=0;
 $9=(($out+1040)|0);
 HEAP8[($9)]=0;
 $10=(($out+1296)|0);
 HEAP8[($10)]=0;
 $11=(($out+1552)|0);
 HEAP8[($11)]=0;
 $12=(($out+16)|0);
 HEAP8[($12)]=0;
 $13=((__ZNK8Gme_File4typeEv($this))|0);
 $14=(($13)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 __ZN8Gme_File11copy_field_EPcPKc($12,$15);
 HEAP32[(($remapped)>>2)]=$track;
 $16=((__ZNK8Gme_File12remap_track_EPi($this,$remapped))|0);
 $17=($16|0)==0;
 if (!($17)) {
  $_0=$16;
  STACKTOP=sp;return (($_0)|0);
 }
 $19=$this;
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+20)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((HEAP32[(($remapped)>>2)])|0);
 $24=((FUNCTION_TABLE_iiii[($22)&127]($this,$out,$23))|0);
 $25=($24|0)==0;
 if (!($25)) {
  $_0=$24;
  STACKTOP=sp;return (($_0)|0);
 }
 $27=(($this+28)|0);
 $28=((__ZNK12M3u_Playlist4sizeEv($27))|0);
 $29=($28|0)==0;
 if ($29) {
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $31=((__ZNK12M3u_Playlist4infoEv($27))|0);
 $32=(($31)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 __ZN8Gme_File11copy_field_EPcPKc($7,$33);
 $34=(($31+8)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 __ZN8Gme_File11copy_field_EPcPKc($8,$35);
 $36=(($31+4)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 __ZN8Gme_File11copy_field_EPcPKc($8,$37);
 $38=(($31+12)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 __ZN8Gme_File11copy_field_EPcPKc($11,$39);
 $40=((__ZNK12M3u_PlaylistixEi($27,$track))|0);
 $41=(($40+8)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 __ZN8Gme_File11copy_field_EPcPKc($6,$42);
 $43=(($40+20)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=($44|0)>-1;
 if ($45) {
  $47=((($44)*(1000))&-1);
  HEAP32[(($3)>>2)]=$47;
 }
 $49=(($40+24)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=($50|0)>-1;
 if ($51) {
  $53=((($50)*(1000))&-1);
  HEAP32[(($5)>>2)]=$53;
 }
 $55=(($40+28)|0);
 $56=((HEAP32[(($55)>>2)])|0);
 $57=($56|0)>-1;
 if (!($57)) {
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $59=((($56)*(1000))&-1);
 HEAP32[(($4)>>2)]=$59;
 $_0=0;
 STACKTOP=sp;return (($_0)|0);
}
function __ZNK12M3u_Playlist4infoEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+20)|0);
 return (($1)|0);
}
function __ZNK13blargg_vectorIN12M3u_Playlist7entry_tEEixEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)<($n>>>0);
 if ($3) {
  ___assert_fail(((1096)|0),((592)|0),((51)|0),((8440)|0));
  return ((0)|0);
 } else {
  $6=(($this)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+((($n)*(40))&-1))|0);
  return (($8)|0);
 }
  return 0;
}
function __ZNK13blargg_vectorIN12M3u_Playlist7entry_tEE4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN12M3u_PlaylistD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 __ZN13blargg_vectorIcED1Ev($1);
 $2=(($this)|0);
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED1Ev($2);
 return;
}
function __ZN13blargg_vectorIcED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIcED2Ev($this);
 return;
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED2Ev($this);
 return;
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEED2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 _free($3);
 return;
}
function __ZN13blargg_vectorIcED2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _free($2);
 return;
}
function __ZN12M3u_PlaylistC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC1Ev($1);
 $2=(($this+8)|0);
 __ZN13blargg_vectorIcEC1Ev($2);
 return;
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC2Ev($this);
 return;
}
function __ZN13blargg_vectorIcEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIcEC2Ev($this);
 return;
}
function __ZN13blargg_vectorIcEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZN13blargg_vectorIN12M3u_Playlist7entry_tEE5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 HEAP32[(($1)>>2)]=0;
 $4=(($this+4)|0);
 HEAP32[(($4)>>2)]=0;
 _free($3);
 return;
}
function __ZN13blargg_vectorIcE5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 HEAP32[(($1)>>2)]=0;
 $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=0;
 _free($2);
 return;
}
function __ZN7Gym_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$8=0,$9=0,$11=0,$13=0,$14=0,$15=0,$18=0,$19=0,$22=0,$23=0,$27=0,$28=0,$_14=0,$_1=0,$_25=0;
 var $_2=0,$32$0=0,$32$1=0,$33$0=0,$33$1=0,$17$0=0,$17$1=0,$21$0=0,$21$1=0,$25$0=0,$25$1=0,$35$0=0,$35$1=0,label=0;
 $1=(($this)|0);
 __ZN9Music_EmuC2Ev($1);
 $2=(($this+256)|0);
 __ZN14Dual_ResamplerC2Ev($2);
 $4=(($this)|0);
 HEAP32[(($4)>>2)]=13800;
 $5=(($this+256)|0);
 HEAP32[(($5)>>2)]=13880;
 $6=(($this+1584)|0);
 __ZN11Blip_BufferC2Ev($6);
 $8=(($this+1628)|0);
 __ZN10Ym2612_EmuC1Ev($8);
 $9=(($this+1632)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($9);
 $11=(($this+2192)|0);
 __ZN7Sms_ApuC2Ev($11);
 $13=(($this+1112)|0);
 HEAP32[(($13)>>2)]=0;
 $14=(($this+1120)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($this)|0);
 __ZN8Gme_File8set_typeEPK11gme_type_t_($15,248);
 __ZN9Music_Emu15set_voice_namesEPKPKc($1,11576);
 __ZN9Music_Emu21set_silence_lookaheadEi($1,1);
 return;
}
function __ZN10Ym2612_EmuC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN10Ym2612_EmuC2Ev($this);
 return;
}
function __ZN7Gym_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Gym_EmuD2Ev($this);
 $2=$this;
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZThn256_N7Gym_EmuD0Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=((($this)-(4816)+4560)|0);
 $2=$1;
 __ZN7Gym_EmuD0Ev($2);
 return;
}
function __ZN7Gym_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$7=0,$9=0,$11=0,$14=0,$15=0,$16=0,$19=0,$20=0,$23=0,$24=0,$_03=0,$_0=0,$26=0,$29=0,$30=0,$_14=0;
 var $_1=0,$32=0,$_25=0,$_2=0,$34=0,$36$0=0,$36$1=0,$37$0=0,$37$1=0,$13$0=0,$13$1=0,$18$0=0,$18$1=0,$22$0=0,$22$1=0,$28$0=0,$28$1=0,$39$0=0,$39$1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=13800;
 $2=(($this+256)|0);
 HEAP32[(($2)>>2)]=13880;
 $3=(($this+2192)|0);
 __ZN7Sms_ApuD2Ev($3);
 $5=(($this+1628)|0);
 __ZN10Ym2612_EmuD2Ev($5);
 $7=(($this+1584)|0);
 __ZN11Blip_BufferD2Ev($7);
 $9=(($this+256)|0);
 __ZN14Dual_ResamplerD2Ev($9);
 $11=(($this)|0);
 __ZN9Music_EmuD2Ev($11);
 return;
}
function __ZThn256_N7Gym_EmuD1Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=((($this)-(4816)+4560)|0);
 $2=$1;
 __ZN7Gym_EmuD2Ev($2);
 return;
}
function __ZNK7Gym_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,$3=0,label=0;
 $2=(($this+1132)|0);
 $3=((__ZNK7Gym_Emu12track_lengthEv($this))|0);
 __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($2,$3,$out);
 return ((0)|0);
}
function __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($h,$length,$out){
 $h=($h)|0;
 $length=($length)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$25=0;
 var $27=0,$28=0,$29=0,$31=0,$33=0,$34=0,$35=0,$37=0,$39=0,$40=0,$41=0,$43=0,$45=0,$46=0,$47=0,$49=0,label=0;
 $1=(($h)|0);
 $2=((_memcmp((($1)|0),((7592)|0),((4)|0)))|0);
 $3=($2|0)==0;
 if (!($3)) {
  return;
 }
 $5=((($length)*(50))&-1);
 $6=(((($5|0))/(3))&-1);
 $7=(($h+420)|0);
 $8=((__Z8get_le32PKv($7))|0);
 $9=($8|0)==0;
 if ($9) {
  $17=(($out+4)|0);
  HEAP32[(($17)>>2)]=$6;
  $18=(($out+8)|0);
  HEAP32[(($18)>>2)]=$6;
  $19=(($out+12)|0);
  HEAP32[(($19)>>2)]=0;
 } else {
  $11=((($8)*(50))&-1);
  $12=(((($11|0))/(3))&-1);
  $13=(($out+8)|0);
  HEAP32[(($13)>>2)]=$12;
  $14=((($6)-($12))|0);
  $15=(($out+12)|0);
  HEAP32[(($15)>>2)]=$14;
 }
 $21=(($h+4)|0);
 $22=((_strcmp((($21)|0),((6440)|0)))|0);
 $23=($22|0)==0;
 if (!($23)) {
  $25=(($out+528)|0);
  __ZN8Gme_File11copy_field_EPcPKci($25,$21,32);
 }
 $27=(($h+36)|0);
 $28=((_strcmp((($27)|0),((6152)|0)))|0);
 $29=($28|0)==0;
 if (!($29)) {
  $31=(($out+272)|0);
  __ZN8Gme_File11copy_field_EPcPKci($31,$27,32);
 }
 $33=(($h+68)|0);
 $34=((_strcmp((($33)|0),((5928)|0)))|0);
 $35=($34|0)==0;
 if (!($35)) {
  $37=(($out+1040)|0);
  __ZN8Gme_File11copy_field_EPcPKci($37,$33,32);
 }
 $39=(($h+132)|0);
 $40=((_strcmp((($39)|0),((5832)|0)))|0);
 $41=($40|0)==0;
 if (!($41)) {
  $43=(($out+1552)|0);
  __ZN8Gme_File11copy_field_EPcPKci($43,$39,32);
 }
 $45=(($h+164)|0);
 $46=((_strcmp((($45)|0),((5672)|0)))|0);
 $47=($46|0)==0;
 if ($47) {
  return;
 }
 $49=(($out+1296)|0);
 __ZN8Gme_File11copy_field_EPcPKci($49,$45,256);
 return;
}
function __ZNK7Gym_Emu12track_lengthEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+1112)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+1124)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((__ZL16gym_track_lengthPKhS0_($2,$4))|0);
 return (($5)|0);
}
function __ZL16gym_track_lengthPKhS0_($p,$end){
 $p=($p)|0;
 $end=($end)|0;
 var $1=0,$time_0_ph10=0,$_0_ph9=0,$_06=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$11=0,$_0_be=0,$12=0,$time_0_ph8=0,label=0;
 $1=($p>>>0)<($end>>>0);
 L2133: do {
  if ($1) {
   $_0_ph9=$p;$time_0_ph10=0;
   while(1) {
    $_06=$_0_ph9;
    while(1) {
     $3=(($_06+1)|0);
     $4=((HEAP8[($_06)])|0);
     $5=($4&255);
     if (((($5|0))|0)==((3)|0)) {
      $11=(($_06+2)|0);
      $_0_be=$11;
     } else if (((($5|0))|0)==((0)|0)) {
      break;
     } else if (((($5|0))|0)==((1)|0)|((($5|0))|0)==((2)|0)) {
      $9=(($_06+3)|0);
      $_0_be=$9;
     } else {
      $_0_be=$3;
     }
     $12=($_0_be>>>0)<($end>>>0);
     if ($12) {
      $_06=$_0_be;
     } else {
      $time_0_ph8=$time_0_ph10;
      break L2133;
     }
    }
    $6=((($time_0_ph10)+(1))|0);
    $7=($3>>>0)<($end>>>0);
    if ($7) {
     $_0_ph9=$3;$time_0_ph10=$6;
    } else {
     $time_0_ph8=$6;
     break;
    }
   }
  } else {
   $time_0_ph8=0;
  }
 } while(0);
 return (($time_0_ph8)|0);
}
function __ZL11new_gym_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(4816))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Gym_EmuC2Ev($4);
  $6=$4;
 }
 $7=(($6)|0);
 return (($7)|0);
}
function __ZL12new_gym_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(264))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Gym_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Gym_Emu16set_sample_rate_El($this,$sample_rate){
 $this=($this)|0;
 $sample_rate=($sample_rate)|0;
 var $eq=0,$1=0,$2=0,$3=0,$4=.0,$5=.0,$6=.0,$7=.0,$8=0,$9=.0,$10=.0,$11=.0,$12=.0,$13=.0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=.0;
 var $21=0,$22=0,$24=.0,$25=0,$26=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $eq=((sp)|0);
 __ZN9blip_eq_tC1Edlll($eq,-32.0,8000,$sample_rate,0);
 $1=(($this+2192)|0);
 __ZN7Sms_Apu9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+1632)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
 $3=(($this)|0);
 $4=(+(__ZNK9Music_Emu4gainEv($3)));
 $5=($4)*((0.405));
 __ZN7Sms_Apu6volumeEd($1,$5);
 $6=(+(__ZNK9Music_Emu4gainEv($3)));
 $7=($6)*((0.00146484375));
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($2,$7);
 $8=(($this+256)|0);
 $9=(+(__ZNK9Music_Emu4gainEv($3)));
 $10=($9)*((3.0));
 $11=(+(__ZN14Dual_Resampler5setupEddd($8,1.6666666666666667,0.99,$10)));
 $12=(+((($sample_rate|0))|0));
 $13=($12)*($11);
 $14=(($this+1560)|0);
 HEAPF64[(($14)>>3)]=$13;
 $15=(($this+1584)|0);
 $16=((__ZN11Blip_Buffer15set_sample_rateEli($15,$sample_rate,66))|0);
 $17=($16|0)==0;
 if (!($17)) {
  $_0=$16;
  STACKTOP=sp;return (($_0)|0);
 }
 __ZN11Blip_Buffer10clock_rateEl($15,3580020);
 $19=(($this+1628)|0);
 $20=(+(HEAPF64[(($14)>>3)]));
 $21=((__ZN10Ym2612_Emu8set_rateEdd($19,$20,7671471.428571428))|0);
 $22=($21|0)==0;
 if (!($22)) {
  $_0=$21;
  STACKTOP=sp;return (($_0)|0);
 }
 $24=($12)*((0.06666666666666667));
 $25=(~~($24));
 $26=((__ZN14Dual_Resampler5resetEi($8,$25))|0);
 $_0=$26;
 STACKTOP=sp;return (($_0)|0);
}
function __ZN9blip_eq_tC1Edlll($this,$t,$rf,$sr,$cf){
 $this=($this)|0;
 $t=+($t);
 $rf=($rf)|0;
 $sr=($sr)|0;
 $cf=($cf)|0;
 var label=0;
 __ZN9blip_eq_tC2Edlll($this,$t,$rf,$sr,$cf);
 return;
}
function __ZN14Dual_Resampler5setupEddd($this,$oversample,$rolloff,$gain){
 $this=($this)|0;
 $oversample=+($oversample);
 $rolloff=+($rolloff);
 $gain=+($gain);
 var $1=0,$2=0,$3=.0,$4=.0,label=0;
 $1=(($this+32)|0);
 $2=$1;
 $3=($gain)*((0.5));
 $4=(+(__ZN14Fir_Resampler_10time_ratioEddd($2,$oversample,$rolloff,$3)));
 return (+($4));
}
function __ZN7Gym_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=.0,$11=.0,$12=0,$13=0,$14=0,$15=0,$16=.0,$17=.0,$18=.0,$19=.0,$20=0,label=0;
 $1=$t<(0.25);
 if ($1) {
  $3=(($this)|0);
  __ZN9Music_Emu9set_tempoEd($3,0.25);
  return;
 }
 $5=(($this+1584)|0);
 $6=((__ZNK11Blip_Buffer11sample_rateEv($5))|0);
 $7=($6|0)==0;
 if ($7) {
  return;
 }
 $9=(($this)|0);
 $10=(+(__ZNK9Music_Emu5tempoEv($9)));
 $11=((59667.0))/($10);
 $12=(~~($11));
 $13=(($this+1568)|0);
 HEAP32[(($13)>>2)]=$12;
 $14=(($this+256)|0);
 $15=((__ZNK9Music_Emu11sample_rateEv($9))|0);
 $16=(+((($15|0))|0));
 $17=(+(__ZNK9Music_Emu5tempoEv($9)));
 $18=($17)*((60.0));
 $19=($16)/($18);
 $20=(~~($19));
 __ZN14Dual_Resampler6resizeEi($14,$20);
 return;
}
function __ZN7Gym_Emu12mute_voices_Ei($this,$mask){
 $this=($this)|0;
 $mask=($mask)|0;
 var $1=0,$2=0,$3=0,$_tr=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+1628)|0);
 __ZN10Ym2612_Emu11mute_voicesEi($1,$mask);
 $2=(($this+1581)|0);
 $3=$mask>>>6;
 $_tr=(($3)&255);
 $4=$_tr&1;
 HEAP8[($2)]=$4;
 $5=(($this+2192)|0);
 $6=$mask&128;
 $7=($6|0)!=0;
 $8=(($this+1584)|0);
 $9=($7?0:$8);
 __ZN7Sms_Apu6outputEP11Blip_Buffer($5,$9);
 return;
}
function __ZN7Sms_Apu6outputEP11Blip_Buffer($this,$b){
 $this=($this)|0;
 $b=($b)|0;
 var label=0;
 __ZN7Sms_Apu6outputEP11Blip_BufferS1_S1_($this,$b,$b,$b);
 return;
}
function __ZN7Gym_Emu9load_mem_EPKhl($this,$in,$size){
 $this=($this)|0;
 $in=($in)|0;
 $size=($size)|0;
 var $offset=0,$1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $offset=((sp)|0);
 HEAP32[(($offset)>>2)]=0;
 $1=((__ZL12check_headerPKhlPi($in,$size,$offset))|0);
 $2=($1|0)==0;
 if (!($2)) {
  $_0=$1;
  STACKTOP=sp;return (($_0)|0);
 }
 $4=(($this)|0);
 __ZN9Music_Emu15set_voice_countEi($4,8);
 $5=((HEAP32[(($offset)>>2)])|0);
 $6=(($in+$5)|0);
 $7=(($this+1112)|0);
 HEAP32[(($7)>>2)]=$6;
 $8=(($in+$size)|0);
 $9=(($this+1124)|0);
 HEAP32[(($9)>>2)]=$8;
 $10=(($this+1116)|0);
 HEAP32[(($10)>>2)]=0;
 $11=((HEAP32[(($offset)>>2)])|0);
 $12=($11|0)==0;
 $13=(($this+1132)|0);
 if ($12) {
  _memset((((($13)|0))|0), ((((0)|0))|0), ((((428)|0))|0));
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 } else {
  (_memcpy((($13)|0), (($in)|0), 428)|0);
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
  return 0;
}
function __ZL12check_headerPKhlPi($in,$size,$data_offset){
 $in=($in)|0;
 $size=($size)|0;
 $data_offset=($data_offset)|0;
 var $1=0,$3=0,$4=0,$6=0,$8=0,$9=0,$10=0,$12=0,$15=0,$16=0,$_0=0,label=0;
 $1=($size|0)<4;
 L2183: do {
  if ($1) {
   $_0=16;
  } else {
   $3=((_memcmp((($in)|0),((7592)|0),((4)|0)))|0);
   $4=($3|0)==0;
   do {
    if ($4) {
     $6=($size|0)<429;
     if ($6) {
      $_0=16;
      break L2183;
     }
     $8=(($in+424)|0);
     $9=((_memcmp((($8)|0),((55792)|0),((4)|0)))|0);
     $10=($9|0)==0;
     if (!($10)) {
      $_0=6912;
      break L2183;
     }
     $12=($data_offset|0)==0;
     if ($12) {
      break;
     }
     HEAP32[(($data_offset)>>2)]=428;
    } else {
     $15=((HEAP8[($in)])|0);
     $16=((($15&255))>>>0)>((3)>>>0);
     if ($16) {
      $_0=16;
      break L2183;
     }
    }
   } while(0);
   $_0=0;
  }
 } while(0);
 return (($_0)|0);
}
function __ZN7Gym_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;
 $1=(($this+1112)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+1120)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($this+1552)|0);
 $5=((__Z8get_le32PKv($4))|0);
 $6=(($this+1128)|0);
 HEAP32[(($6)>>2)]=$5;
 $7=(($this+1576)|0);
 HEAP32[(($7)>>2)]=0;
 $8=(($this+1580)|0);
 HEAP8[($8)]=0;
 $9=(($this+1572)|0);
 HEAP32[(($9)>>2)]=-1;
 $10=(($this+1628)|0);
 __ZN10Ym2612_Emu5resetEv($10);
 $11=(($this+2192)|0);
 __ZN7Sms_Apu5resetEji($11,0,0);
 $12=(($this+1584)|0);
 __ZN11Blip_Buffer5clearEi($12,1);
 $13=(($this+256)|0);
 __ZN14Dual_Resampler5clearEv($13);
 return ((0)|0);
}
function __Z8get_le32PKv($p){
 $p=($p)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;
 $1=(($p+3)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3<<24;
 $5=(($p+2)|0);
 $6=((HEAP8[($5)])|0);
 $7=($6&255);
 $8=$7<<16;
 $9=$8|$4;
 $10=(($p+1)|0);
 $11=((HEAP8[($10)])|0);
 $12=($11&255);
 $13=$12<<8;
 $14=$9|$13;
 $15=((HEAP8[($p)])|0);
 $16=($15&255);
 $17=$14|$16;
 return (($17)|0);
}
function __ZN7Gym_Emu7run_dacEi($this,$dac_count){
 $this=($this)|0;
 $dac_count=($dac_count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$next_dac_count_031=0,$p_030=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_=0,$11=0,$12=0,$or_cond=0,$13=0,$_next_dac_count_0=0,$14=0,$15=0;
 var $next_dac_count_0_lcssa=0,$16=0,$17=0,$18=0,$19=0,$or_cond23=0,$or_cond23_not=0,$20=0,$or_cond24=0,$22=0,$or_cond25=0,$24=0,$or_cond26=0,$_dac_count=0,$rate_count_0=0,$start_0=0,$26=0,$27=0,$28=0,$29=0;
 var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$dac_amp_1_ph=0,$43=0,$44=0,$i_029=0,$dac_amp_128=0,$time_027=0,$46=0,$47=0;
 var $48=0,$49=0,$50=0,$51=0,$52=0,$dac_amp_1_lcssa=0,label=0;
 $1=(($this+1120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP8[($2)])|0);
 $4=(($3<<24)>>24)==0;
 if ($4) {
  $next_dac_count_0_lcssa=0;
 } else {
  $p_030=$2;$next_dac_count_031=0;$5=$3;
  while(1) {
   $6=(($p_030+1)|0);
   $7=(($p_030+2)|0);
   $8=((HEAP8[($6)])|0);
   $9=((($5&255))>>>0)<((3)>>>0);
   $10=(($p_030+3)|0);
   $_=($9?$10:$7);
   $11=(($5<<24)>>24)==1;
   $12=(($8<<24)>>24)==42;
   $or_cond=$11&$12;
   $13=($or_cond&1);
   $_next_dac_count_0=((($13)+($next_dac_count_031))|0);
   $14=((HEAP8[($_)])|0);
   $15=(($14<<24)>>24)==0;
   if ($15) {
    $next_dac_count_0_lcssa=$_next_dac_count_0;
    break;
   } else {
    $p_030=$_;$next_dac_count_031=$_next_dac_count_0;$5=$14;
   }
  }
 }
 $16=(($this+1576)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=($17|0)!=0;
 $19=($next_dac_count_0_lcssa|0)==0;
 $or_cond23=$18|$19;
 $or_cond23_not=$or_cond23^1;
 $20=($next_dac_count_0_lcssa|0)>($dac_count|0);
 $or_cond24=$20&$or_cond23_not;
 if ($or_cond24) {
  $22=((($next_dac_count_0_lcssa)-($dac_count))|0);
  $start_0=$22;$rate_count_0=$next_dac_count_0_lcssa;
 } else {
  $or_cond25=$18&$19;
  $24=($17|0)>($dac_count|0);
  $or_cond26=$or_cond25&$24;
  $_dac_count=($or_cond26?$17:$dac_count);
  $start_0=0;$rate_count_0=$_dac_count;
 }
 $26=(($this+1584)|0);
 $27=(($this+1568)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((__ZNK11Blip_Buffer18resampled_durationEi($26,$28))|0);
 $30=(((($29>>>0))/(($rate_count_0>>>0)))&-1);
 $31=((__ZNK11Blip_Buffer14resampled_timeEi($26,0))|0);
 $32=(Math_imul($30,$start_0)|0);
 $33=((($31)+($32))|0);
 $34=$30>>>1;
 $35=((($33)+($34))|0);
 $36=(($this+1572)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=($37|0)<0;
 if ($38) {
  $40=(($this+3792)|0);
  $41=((HEAP8[($40)])|0);
  $42=($41&255);
  $dac_amp_1_ph=$42;
 } else {
  $dac_amp_1_ph=$37;
 }
 $43=($dac_count|0)>0;
 if (!($43)) {
  $dac_amp_1_lcssa=$dac_amp_1_ph;
  HEAP32[(($36)>>2)]=$dac_amp_1_lcssa;
  return;
 }
 $44=(($this+1632)|0);
 $time_027=$35;$dac_amp_128=$dac_amp_1_ph;$i_029=0;
 while(1) {
  $46=(($this+3792+$i_029)|0);
  $47=((HEAP8[($46)])|0);
  $48=($47&255);
  $49=((($48)-($dac_amp_128))|0);
  __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($44,$time_027,$49,$26);
  $50=((($time_027)+($30))|0);
  $51=((($i_029)+(1))|0);
  $52=($51|0)<($dac_count|0);
  if ($52) {
   $time_027=$50;$dac_amp_128=$48;$i_029=$51;
  } else {
   $dac_amp_1_lcssa=$48;
   break;
  }
 }
 HEAP32[(($36)>>2)]=$dac_amp_1_lcssa;
 return;
}
function __ZN7Gym_Emu11parse_frameEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$dac_count_0_ph29=0,$pos_0_ph28=0;
 var $21=0,$23=0,$24=0,$pos_023=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$_lobit=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0;
 var $45=0,$46=0,$pos_0_be=0,$47=0,$48=0,$49=0,$dac_count_0_ph25=0,$_lcssa=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$59=0,$pos_1=0,$61=0,$63=0,$64=0,$65=0;
 var $66=0,$69=0,label=0;
 $1=(($this+1120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+1128)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 do {
  if (!($5)) {
   $7=((($4)-(1))|0);
   HEAP32[(($3)>>2)]=$7;
   $8=($7|0)==0;
   if (!($8)) {
    break;
   }
   $10=(($this+1116)|0);
   HEAP32[(($10)>>2)]=$2;
  }
 } while(0);
 $11=(($2+1)|0);
 $12=((HEAP8[($2)])|0);
 $13=(($12<<24)>>24)==0;
 L2218: do {
  if ($13) {
   $_lcssa=$11;$dac_count_0_ph25=0;
  } else {
   $14=(($this+1628)|0);
   $15=(($this+1580)|0);
   $16=(($this+1628)|0);
   $17=(($this+2192)|0);
   $18=(($this+1580)|0);
   $pos_0_ph28=$2;$dac_count_0_ph29=0;$20=$11;$19=$12;
   while(1) {
    $21=($dac_count_0_ph29|0)<1024;
    $pos_023=$pos_0_ph28;$24=$20;$23=$19;
    L2222: while(1) {
     $25=(($pos_023+2)|0);
     $26=((HEAP8[($24)])|0);
     $27=($26&255);
     do {
      if ((((($23<<24)>>24))|0)==((1)|0)) {
       $29=(($pos_023+3)|0);
       $30=((HEAP8[($25)])|0);
       $31=($30&255);
       if ((((($26<<24)>>24))|0)==((42)|0)) {
        if ($21) {
         break L2222;
        } else {
         $pos_0_be=$29;
         break;
        }
       } else if ((((($26<<24)>>24))|0)==((43)|0)) {
        $_lobit=($30&255)>>>7;
        HEAP8[($15)]=$_lobit;
       }
       __ZN10Ym2612_Emu6write0Eii($14,$27,$31);
       $pos_0_be=$29;
      } else if ((((($23<<24)>>24))|0)==((2)|0)) {
       $44=(($pos_023+3)|0);
       $45=((HEAP8[($25)])|0);
       $46=($45&255);
       __ZN10Ym2612_Emu6write1Eii($16,$27,$46);
       $pos_0_be=$44;
      } else if ((((($23<<24)>>24))|0)==((3)|0)) {
       __ZN7Sms_Apu10write_dataEii($17,0,$27);
       $pos_0_be=$25;
      } else {
       $pos_0_be=$24;
      }
     } while(0);
     $47=(($pos_0_be+1)|0);
     $48=((HEAP8[($pos_0_be)])|0);
     $49=(($48<<24)>>24)==0;
     if ($49) {
      $_lcssa=$47;$dac_count_0_ph25=$dac_count_0_ph29;
      break L2218;
     } else {
      $pos_023=$pos_0_be;$24=$47;$23=$48;
     }
    }
    $35=(($this+3792+$dac_count_0_ph29)|0);
    HEAP8[($35)]=$30;
    $36=((HEAP8[($18)])|0);
    $37=$36&1;
    $38=($37&255);
    $39=((($38)+($dac_count_0_ph29))|0);
    $40=(($pos_023+4)|0);
    $41=((HEAP8[($29)])|0);
    $42=(($41<<24)>>24)==0;
    if ($42) {
     $_lcssa=$40;$dac_count_0_ph25=$39;
     break;
    } else {
     $pos_0_ph28=$29;$dac_count_0_ph29=$39;$20=$40;$19=$41;
    }
   }
  }
 } while(0);
 $51=(($this+1124)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 $53=($_lcssa>>>0)<($52>>>0);
 do {
  if ($53) {
   $pos_1=$_lcssa;
  } else {
   $55=(($this+1116)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=($56|0)==0;
   if (!($57)) {
    $pos_1=$56;
    break;
   }
   $59=(($this)|0);
   __ZN9Music_Emu15set_track_endedEv($59);
   $pos_1=$_lcssa;
  }
 } while(0);
 HEAP32[(($1)>>2)]=$pos_1;
 $61=($dac_count_0_ph25|0)==0;
 if ($61) {
  $69=(($this+1576)|0);
  HEAP32[(($69)>>2)]=$dac_count_0_ph25;
  return;
 }
 $63=(($this+1581)|0);
 $64=((HEAP8[($63)])|0);
 $65=$64&1;
 $66=(($65<<24)>>24)==0;
 if (!($66)) {
  $69=(($this+1576)|0);
  HEAP32[(($69)>>2)]=$dac_count_0_ph25;
  return;
 }
 __ZN7Gym_Emu7run_dacEi($this,$dac_count_0_ph25);
 $69=(($this+1576)|0);
 HEAP32[(($69)>>2)]=$dac_count_0_ph25;
 return;
}
function __ZN9Music_Emu15set_track_endedEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+208)|0);
 HEAP8[($1)]=1;
 return;
}
function __ZN7Gym_Emu10play_frameEiiPs($this,$blip_time,$sample_count,$buf){
 $this=($this)|0;
 $blip_time=($blip_time)|0;
 $sample_count=($sample_count)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK9Music_Emu11track_endedEv($1))|0);
 if (!($2)) {
  __ZN7Gym_Emu11parse_frameEv($this);
 }
 $5=(($this+2192)|0);
 __ZN7Sms_Apu9end_frameEi($5,$blip_time);
 $6=$buf;
 $7=$sample_count<<1;
 _memset((((($6)|0))|0), ((((0)|0))|0), (((($7)|0))|0));
 $8=(($this+1628)|0);
 $9=$sample_count>>1;
 __ZN10Ym2612_Emu3runEiPs($8,$9,$buf);
 return (($sample_count)|0);
}
function __ZNK9Music_Emu11track_endedEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+209)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)!=0;
 return (($4)|0);
}
function __ZThn256_N7Gym_Emu10play_frameEiiPs($this,$blip_time,$sample_count,$buf){
 $this=($this)|0;
 $blip_time=($blip_time)|0;
 $sample_count=($sample_count)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=((($this)-(4816)+4560)|0);
 $2=$1;
 $3=((__ZN7Gym_Emu10play_frameEiiPs($2,$blip_time,$sample_count,$buf))|0);
 return (($3)|0);
}
function __ZN7Gym_Emu5play_ElPs($this,$count,$out){
 $this=($this)|0;
 $count=($count)|0;
 $out=($out)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+256)|0);
 $2=(($this+1584)|0);
 __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($1,$count,$out,$2);
 return ((0)|0);
}
function __ZN9Music_Emu14set_equalizer_ERK15gme_equalizer_t($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return;
}
function __ZN9blip_eq_tC2Edlll($this,$t,$rf,$sr,$cf){
 $this=($this)|0;
 $t=+($t);
 $rf=($rf)|0;
 $sr=($sr)|0;
 $cf=($cf)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this)|0);
 HEAPF64[(($1)>>3)]=$t;
 $2=(($this+8)|0);
 HEAP32[(($2)>>2)]=$rf;
 $3=(($this+12)|0);
 HEAP32[(($3)>>2)]=$sr;
 $4=(($this+16)|0);
 HEAP32[(($4)>>2)]=$cf;
 return;
}
function __ZN8Gym_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Gym_FileC2Ev($this);
 return;
}
function __ZN8Gym_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12976;
 $3=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($3,248);
 return;
}
function __ZN8Gym_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Gym_FileD2Ev($this);
 return;
}
function __ZN8Gym_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Gym_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Gym_File9load_mem_EPKhl($this,$in,$size){
 $this=($this)|0;
 $in=($in)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+252)|0);
 HEAP32[(($1)>>2)]=$in;
 $2=(($in+$size)|0);
 $3=(($this+256)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($this+260)|0);
 HEAP32[(($4)>>2)]=0;
 $5=((__ZL12check_headerPKhlPi($in,$size,$4))|0);
 return (($5)|0);
}
function __ZNK8Gym_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $2=(($this+260)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($this+252)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+$3)|0);
 $7=(($this+256)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((__ZL16gym_track_lengthPKhS0_($6,$8))|0);
 $10=$5;
 __ZL12get_gym_infoRKN7Gym_Emu8header_tElP12track_info_t($10,$9,$out);
 return ((0)|0);
}
function __ZN8Gym_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_D2Ev($1);
 return;
}
function __ZN10Ym2612_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 return;
}
function __ZN7Hes_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;
 $1=(($this+536)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
 $2=(($this+500)|0);
 $3=(($this+412)|0);
 $4=$2;
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $5=(($this+324)|0);
 $6=$3;
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $7=(($this+236)|0);
 $8=$5;
 _memset((((($8)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $9=(($this+148)|0);
 $10=$7;
 _memset((((($10)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $11=(($this+60)|0);
 $12=$9;
 _memset((((($12)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $13=$11;
 _memset((((($13)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 __ZN7Hes_Apu5resetEv($this);
 return;
}
function __ZN7Hes_Apu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,label=0;
 $1=(($this+528)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+532)|0);
 HEAP32[(($2)>>2)]=255;
 $3=(($this+440)|0);
 _memset((((($3)|0))|0), ((((0)|0))|0), ((((60)|0))|0));
 $4=(($this+520)|0);
 HEAP32[(($4)>>2)]=1;
 $5=(($this+524)|0);
 HEAP8[($5)]=64;
 $6=(($this+494)|0);
 HEAP8[($6)]=-1;
 $7=(($this+352)|0);
 _memset((((($7)|0))|0), ((((0)|0))|0), ((((60)|0))|0));
 $8=(($this+432)|0);
 HEAP32[(($8)>>2)]=1;
 $9=(($this+436)|0);
 HEAP8[($9)]=64;
 $10=(($this+406)|0);
 HEAP8[($10)]=-1;
 $11=(($this+264)|0);
 _memset((((($11)|0))|0), ((((0)|0))|0), ((((60)|0))|0));
 $12=(($this+344)|0);
 HEAP32[(($12)>>2)]=1;
 $13=(($this+348)|0);
 HEAP8[($13)]=64;
 $14=(($this+318)|0);
 HEAP8[($14)]=-1;
 $15=(($this+176)|0);
 _memset((((($15)|0))|0), ((((0)|0))|0), ((((60)|0))|0));
 $16=(($this+256)|0);
 HEAP32[(($16)>>2)]=1;
 $17=(($this+260)|0);
 HEAP8[($17)]=64;
 $18=(($this+230)|0);
 HEAP8[($18)]=-1;
 $19=(($this+88)|0);
 _memset((((($19)|0))|0), ((((0)|0))|0), ((((60)|0))|0));
 $20=(($this+168)|0);
 HEAP32[(($20)>>2)]=1;
 $21=(($this+172)|0);
 HEAP8[($21)]=64;
 $22=(($this+142)|0);
 HEAP8[($22)]=-1;
 $23=(($this)|0);
 _memset((((($23)|0))|0), ((((0)|0))|0), ((((60)|0))|0));
 $24=(($this+80)|0);
 HEAP32[(($24)>>2)]=1;
 $25=(($this+84)|0);
 HEAP8[($25)]=64;
 $26=(($this+54)|0);
 HEAP8[($26)]=-1;
 return;
}
function __ZN7Hes_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right){
 $this=($this)|0;
 $index=($index)|0;
 $center=($center)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=($index>>>0)<((6)>>>0);
 if ($1) {
  $4=(($this+((($index)*(88))&-1)+68)|0);
  HEAP32[(($4)>>2)]=$center;
  $5=(($this+((($index)*(88))&-1)+72)|0);
  HEAP32[(($5)>>2)]=$left;
  $6=(($this+((($index)*(88))&-1)+76)|0);
  HEAP32[(($6)>>2)]=$right;
  $7=(($this+440)|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$7);
  $8=(($this+352)|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$8);
  $9=(($this+264)|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
  $10=(($this+176)|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$10);
  $11=(($this+88)|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$11);
  $12=(($this)|0);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$12);
  return;
 } else {
  ___assert_fail(((5240)|0),((7624)|0),((58)|0),((9048)|0));
 }
}
function __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$osc){
 $this=($this)|0;
 $osc=($osc)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$_=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$right_0=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0;
 var $40=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,label=0;
 $1=(($osc+84)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3&31;
 $5=((($4)-(60))|0);
 $6=(($osc+54)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=$8>>>3;
 $10=$9&30;
 $11=((($10)+($5))|0);
 $12=(($this+532)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=$13>>>3;
 $15=$14&30;
 $16=((($11)+($15))|0);
 $17=($16|0)<0;
 $_=($17?0:$16);
 $18=$8<<1;
 $19=$18&30;
 $20=((($19)+($5))|0);
 $21=$13<<1;
 $22=$21&30;
 $23=((($20)+($22))|0);
 $24=($23|0)<0;
 $right_0=($24?0:$23);
 $25=((11512+($_<<1))|0);
 $26=((HEAP16[(($25)>>1)])|0);
 $27=(($26<<16)>>16);
 $28=((11512+($right_0<<1))|0);
 $29=((HEAP16[(($28)>>1)])|0);
 $30=(($29<<16)>>16);
 $31=(($osc+68)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($osc+60)|0);
 HEAP32[(($33)>>2)]=$32;
 $34=(($osc+64)|0);
 HEAP32[(($34)>>2)]=0;
 $35=(($26<<16)>>16)==(($29<<16)>>16);
 if (!($35)) {
  $37=(($osc+72)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  HEAP32[(($33)>>2)]=$38;
  $39=(($osc+76)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  HEAP32[(($34)>>2)]=$40;
 }
 $42=(($osc+32)|0);
 $43=((HEAP16[(($42)>>1)])|0);
 $44=(($43<<16)>>16);
 $45=((($27)-($44))|0);
 $46=$45<<4;
 $47=(($osc+36)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=((($46)+($48))|0);
 HEAP32[(($47)>>2)]=$49;
 $50=(($osc+34)|0);
 $51=((HEAP16[(($50)>>1)])|0);
 $52=(($51<<16)>>16);
 $53=((($30)-($52))|0);
 $54=$53<<4;
 $55=(($osc+40)|0);
 $56=((HEAP32[(($55)>>2)])|0);
 $57=((($54)+($56))|0);
 HEAP32[(($55)>>2)]=$57;
 HEAP16[(($42)>>1)]=$26;
 HEAP16[(($50)>>1)]=$29;
 return;
}
function __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($this,$synth_,$end_time){
 $this=($this)|0;
 $synth_=($synth_)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$61=0,$noise_lfsr_0=0,$time_0=0,$dac_0=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$72=0,$74=0,$76=0,$dac_1=0,$78=0,$79=0,$81=0,$84=0,$85=0,$86=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0;
 var $96=0,$98=0,$99=0,$phase_0=0,$time_1=0,$dac_2=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$108=0,$110=0,$dac_3=0,$112=0,$113=0,$115=0,$_=0;
 var $116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$phase_1=0,$time_2=0,$dac_4=0,$123=0,$_tr=0,$124=0,$time_3=0,$dac_5=0,$126=0,$127=0,$_73=0,$128=0,$129=0;
 var $130=0,$131=0,$133=0,label=0;
 $1=(($this+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $133=(($this+56)|0);
  HEAP32[(($133)>>2)]=$end_time;
  return;
 }
 $5=(($this+84)|0);
 $6=((HEAP8[($5)])|0);
 $7=(($6<<24)>>24)<0;
 if (!($7)) {
  $133=(($this+56)|0);
  HEAP32[(($133)>>2)]=$end_time;
  return;
 }
 $9=(($this+55)|0);
 $10=((HEAP8[($9)])|0);
 $11=($10&255);
 $12=(($this+32)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=(($13<<16)>>16);
 $15=(Math_imul($14,$11)|0);
 $16=(($this+36)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=($15|0)==($17|0);
 if (!($18)) {
  $20=((($15)-($17))|0);
  $21=(($this+56)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$22,$20,$2);
 }
 __ZN11Blip_Buffer12set_modifiedEv($2);
 $24=(($this+64)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($this+34)|0);
 $27=((HEAP16[(($26)>>1)])|0);
 $28=(($27<<16)>>16);
 $29=($25|0)!=0;
 if ($29) {
  $31=(Math_imul($28,$11)|0);
  $32=(($this+40)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=($31|0)==($33|0);
  if (!($34)) {
   $36=((($31)-($33))|0);
   $37=(($this+56)|0);
   $38=((HEAP32[(($37)>>2)])|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$38,$36,$25);
  }
  __ZN11Blip_Buffer12set_modifiedEv($25);
 }
 $41=(($this+56)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=(($this+44)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=((($44)+($42))|0);
 $46=($45|0)<($end_time|0);
 do {
  if ($46) {
   $48=(($this+52)|0);
   $49=((HEAP8[($48)])|0);
   $50=($49&255);
   $51=$50&128;
   $52=($51|0)==0;
   if (!($52)) {
    $54=$27|$13;
    $55=(($54<<16)>>16)==0;
    if ($55) {
     $dac_5=$11;$time_3=$45;
     break;
    }
    $57=$50&31;
    $58=(((32)-($57))|0);
    $59=$58<<6;
    $60=(($this+80)|0);
    $61=((HEAP32[(($60)>>2)])|0);
    $dac_0=$11;$time_0=$45;$noise_lfsr_0=$61;
    while(1) {
     $63=$noise_lfsr_0>>>1;
     $64=$63&1;
     $65=(((-$64))|0);
     $66=$65&31;
     $67=$noise_lfsr_0&1;
     $68=(((-$67))|0);
     $69=$68&57352;
     $70=$69^$63;
     $71=((($66)-($dac_0))|0);
     $72=($66|0)==($dac_0|0);
     do {
      if ($72) {
       $dac_1=$dac_0;
      } else {
       $74=(Math_imul($71,$14)|0);
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time_0,$74,$2);
       if (!($29)) {
        $dac_1=$66;
        break;
       }
       $76=(Math_imul($71,$28)|0);
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time_0,$76,$25);
       $dac_1=$66;
      }
     } while(0);
     $78=((($time_0)+($59))|0);
     $79=($78|0)<($end_time|0);
     if ($79) {
      $dac_0=$dac_1;$time_0=$78;$noise_lfsr_0=$70;
     } else {
      break;
     }
    }
    HEAP32[(($60)>>2)]=$70;
    $81=($63|0)==($69|0);
    if (!($81)) {
     $dac_5=$dac_1;$time_3=$78;
     break;
    }
    ___assert_fail(((5184)|0),((7624)|0),((127)|0),((8992)|0));
   }
   $84=((HEAP8[($5)])|0);
   $85=$84&64;
   $86=(($85<<24)>>24)==0;
   if (!($86)) {
    $dac_5=$11;$time_3=$45;
    break;
   }
   $88=(($this+53)|0);
   $89=((HEAP8[($88)])|0);
   $90=($89&255);
   $91=((($90)+(1))|0);
   $92=$91&31;
   $93=(($this+48)|0);
   $94=((HEAP32[(($93)>>2)])|0);
   $95=$94<<1;
   $96=($95|0)>13;
   do {
    if ($96) {
     $98=$27|$13;
     $99=(($98<<16)>>16)==0;
     if ($99) {
      label = 2022;
      break;
     } else {
      $dac_2=$11;$time_1=$45;$phase_0=$92;
     }
     while(1) {
      $100=(($this+$phase_0)|0);
      $101=((HEAP8[($100)])|0);
      $102=($101&255);
      $103=((($phase_0)+(1))|0);
      $104=$103&31;
      $105=((($102)-($dac_2))|0);
      $106=($102|0)==($dac_2|0);
      do {
       if ($106) {
        $dac_3=$dac_2;
       } else {
        $108=(Math_imul($105,$14)|0);
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time_1,$108,$2);
        if (!($29)) {
         $dac_3=$102;
         break;
        }
        $110=(Math_imul($105,$28)|0);
        __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($synth_,$time_1,$110,$25);
        $dac_3=$102;
       }
      } while(0);
      $112=((($time_1)+($95))|0);
      $113=($112|0)<($end_time|0);
      if ($113) {
       $dac_2=$dac_3;$time_1=$112;$phase_0=$104;
      } else {
       $dac_4=$dac_3;$time_2=$112;$phase_1=$104;
       break;
      }
     }
    } else {
     label = 2022;
    }
   } while(0);
   if ((label|0) == 2022) {
    $115=($95|0)==0;
    $_=($115?1:$95);
    $116=((($end_time)-(1))|0);
    $117=((($116)-($45))|0);
    $118=((($117)+($_))|0);
    $119=(((($118|0))/(($_|0)))&-1);
    $120=((($119)+($92))|0);
    $121=(Math_imul($119,$_)|0);
    $122=((($121)+($45))|0);
    $dac_4=$11;$time_2=$122;$phase_1=$120;
   }
   $123=((($phase_1)+(31))|0);
   $_tr=(($123)&255);
   $124=$_tr&31;
   HEAP8[($88)]=$124;
   $dac_5=$dac_4;$time_3=$time_2;
  } else {
   $dac_5=$11;$time_3=$45;
  }
 } while(0);
 $126=((($time_3)-($end_time))|0);
 $127=($126|0)<0;
 $_73=($127?0:$126);
 HEAP32[(($43)>>2)]=$_73;
 $128=(($dac_5)&255);
 HEAP8[($9)]=$128;
 $129=(Math_imul($dac_5,$14)|0);
 HEAP32[(($16)>>2)]=$129;
 $130=(Math_imul($dac_5,$28)|0);
 $131=(($this+40)|0);
 HEAP32[(($131)>>2)]=$130;
 $133=(($this+56)|0);
 HEAP32[(($133)>>2)]=$end_time;
 return;
}
function __ZN7Hes_Apu10write_dataEiii($this,$time,$addr,$data){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0,$25=0;
 var $26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$46=0,$48=0,$49=0,$51=0;
 var $52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$67=0,$68=0,$70=0,$71=0,$73=0,$75=0,$76=0;
 var label=0;
 if (((($addr|0))|0)==((2049)|0)) {
  $5=(($this+532)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=($6|0)==($data|0);
  if ($7) {
   return;
  }
  HEAP32[(($5)>>2)]=$data;
  $8=(($this+536)|0);
  $9=(($this)|0);
  $10=(($this+440)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($10,$8,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
  $11=(($this+352)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($11,$8,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
  $12=(($this+264)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($12,$8,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
  $13=(($this+176)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($13,$8,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
  $14=(($this+88)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($14,$8,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
  $15=(($this)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($15,$8,$time);
  __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$9);
  return;
 } else if (((($addr|0))|0)==((2048)|0)) {
  $2=$data&7;
  $3=(($this+528)|0);
  HEAP32[(($3)>>2)]=$2;
  return;
 } else {
  $17=(($this+528)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=($18|0)<6;
  if (!($19)) {
   return;
  }
  $21=(($this+((($18)*(88))&-1))|0);
  $22=(($this+536)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($21,$22,$time);
  switch (($addr|0)) {
  case 2052: {
   $36=(($this+((($18)*(88))&-1)+84)|0);
   $37=((HEAP8[($36)])|0);
   $38=($37&255);
   $39=$data&64;
   $40=$39^64;
   $41=$40&$38;
   $42=($41|0)==0;
   if (!($42)) {
    $44=(($this+((($18)*(88))&-1)+53)|0);
    HEAP8[($44)]=0;
   }
   $46=(($data)&255);
   HEAP8[($36)]=$46;
   __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$21);
   return;
   break;
  }
  case 2050: {
   $24=(($this+((($18)*(88))&-1)+48)|0);
   $25=((HEAP32[(($24)>>2)])|0);
   $26=$25&3840;
   $27=$26|$data;
   HEAP32[(($24)>>2)]=$27;
   return;
   break;
  }
  case 2053: {
   $48=(($data)&255);
   $49=(($this+((($18)*(88))&-1)+54)|0);
   HEAP8[($49)]=$48;
   __ZN7Hes_Apu15balance_changedER7Hes_Osc($this,$21);
   return;
   break;
  }
  case 2051: {
   $29=(($this+((($18)*(88))&-1)+48)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $31=$30&255;
   $32=$data<<8;
   $33=$32&3840;
   $34=$31|$33;
   HEAP32[(($29)>>2)]=$34;
   return;
   break;
  }
  case 2054: {
   $51=$data&31;
   $52=(($this+((($18)*(88))&-1)+84)|0);
   $53=((HEAP8[($52)])|0);
   $54=($53&255);
   $55=$54&64;
   $56=($55|0)==0;
   if ($56) {
    $58=(($51)&255);
    $59=(($this+((($18)*(88))&-1)+53)|0);
    $60=((HEAP8[($59)])|0);
    $61=($60&255);
    $62=(($this+((($18)*(88))&-1)+$61)|0);
    HEAP8[($62)]=$58;
    $63=((HEAP8[($59)])|0);
    $64=((($63)+(1))&255);
    $65=$64&31;
    HEAP8[($59)]=$65;
    return;
   }
   $67=$54&128;
   $68=($67|0)==0;
   if ($68) {
    return;
   }
   $70=(($51)&255);
   $71=(($this+((($18)*(88))&-1)+55)|0);
   HEAP8[($71)]=$70;
   return;
   break;
  }
  case 2055: {
   $73=($18|0)>3;
   if (!($73)) {
    return;
   }
   $75=(($data)&255);
   $76=(($this+((($18)*(88))&-1)+52)|0);
   HEAP8[($76)]=$75;
   return;
   break;
  }
  default: {
   return;
  }
  }
 }
}
function __ZN7Hes_Apu9end_frameEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$9=0,$12=0,$13=0,$14=0,$15=0,$17=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$27=0,$29=0;
 var $30=0,$32=0,$33=0,$34=0,$35=0,$37=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$47=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$57=0;
 var $59=0,$60=0,$62=0,label=0;
 $1=(($this+536)|0);
 $2=(($this+496)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($3|0)<($end_time|0);
 if ($4) {
  $6=(($this+440)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($6,$1,$end_time);
 }
 $8=((HEAP32[(($2)>>2)])|0);
 $9=($8|0)<($end_time|0);
 if ($9) {
  ___assert_fail(((3744)|0),((7624)|0),((311)|0),((9032)|0));
 }
 $12=((($8)-($end_time))|0);
 HEAP32[(($2)>>2)]=$12;
 $13=(($this+408)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)<($end_time|0);
 if ($15) {
  $17=(($this+352)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($17,$1,$end_time);
 }
 $19=((HEAP32[(($13)>>2)])|0);
 $20=($19|0)<($end_time|0);
 if ($20) {
  ___assert_fail(((3744)|0),((7624)|0),((311)|0),((9032)|0));
 }
 $22=((($19)-($end_time))|0);
 HEAP32[(($13)>>2)]=$22;
 $23=(($this+320)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)<($end_time|0);
 if ($25) {
  $27=(($this+264)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($27,$1,$end_time);
 }
 $29=((HEAP32[(($23)>>2)])|0);
 $30=($29|0)<($end_time|0);
 if ($30) {
  ___assert_fail(((3744)|0),((7624)|0),((311)|0),((9032)|0));
 }
 $32=((($29)-($end_time))|0);
 HEAP32[(($23)>>2)]=$32;
 $33=(($this+232)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=($34|0)<($end_time|0);
 if ($35) {
  $37=(($this+176)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($37,$1,$end_time);
 }
 $39=((HEAP32[(($33)>>2)])|0);
 $40=($39|0)<($end_time|0);
 if ($40) {
  ___assert_fail(((3744)|0),((7624)|0),((311)|0),((9032)|0));
 }
 $42=((($39)-($end_time))|0);
 HEAP32[(($33)>>2)]=$42;
 $43=(($this+144)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=($44|0)<($end_time|0);
 if ($45) {
  $47=(($this+88)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($47,$1,$end_time);
 }
 $49=((HEAP32[(($43)>>2)])|0);
 $50=($49|0)<($end_time|0);
 if ($50) {
  ___assert_fail(((3744)|0),((7624)|0),((311)|0),((9032)|0));
 }
 $52=((($49)-($end_time))|0);
 HEAP32[(($43)>>2)]=$52;
 $53=(($this+56)|0);
 $54=((HEAP32[(($53)>>2)])|0);
 $55=($54|0)<($end_time|0);
 if ($55) {
  $57=(($this)|0);
  __ZN7Hes_Osc9run_untilER10Blip_SynthILi8ELi1EEi($57,$1,$end_time);
 }
 $59=((HEAP32[(($53)>>2)])|0);
 $60=($59|0)<($end_time|0);
 if ($60) {
  ___assert_fail(((3744)|0),((7624)|0),((311)|0),((9032)|0));
 } else {
  $62=((($59)-($end_time))|0);
  HEAP32[(($53)>>2)]=$62;
  return;
 }
}
function __ZN7Hes_Emu8cpu_readEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$_sum=0,$7=0,$8=0,$9=0,$11=0,$result_0=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 $3=((__ZN7Hes_Cpu8get_codeEj($2,$addr))|0);
 $4=((HEAP8[($3)])|0);
 $5=($4&255);
 $6=$addr>>>13;
 $_sum=((($6)+(8472))|0);
 $7=(($this+$_sum)|0);
 $8=((HEAP8[($7)])|0);
 $9=(($8<<24)>>24)==-1;
 if (!($9)) {
  $result_0=$5;
  return (($result_0)|0);
 }
 $11=((__ZN7Hes_Emu9cpu_read_Ej($this,$addr))|0);
 $result_0=$11;
 return (($result_0)|0);
}
function __ZN7Hes_Cpu8get_codeEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=$addr>>>13;
 $2=(($this+8212)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+($1<<2))|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$addr&8191;
 $7=(($5+$6)|0);
 return (($7)|0);
}
function __ZN7Hes_Emu9cpu_writeEji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,label=0;
 $1=$addr>>>13;
 $2=(($this+8540+($1<<2))|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=$addr&8191;
 $5=($3|0)==0;
 if (!($5)) {
  $7=(($data)&255);
  $8=(($3+$4)|0);
  HEAP8[($8)]=$7;
  return;
 }
 $10=(($this+8472)|0);
 $11=((HEAP8[($10)])|0);
 $12=(($11<<24)>>24)==-1;
 if (!($12)) {
  return;
 }
 __ZN7Hes_Emu10cpu_write_Eji($this,$4,$data);
 return;
}
function __ZN7Hes_Cpu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=(($this+8216)|0);
 $2=(($this+8212)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($this+8256)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+8252)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this+8260)|0);
 HEAP32[(($5)>>2)]=1073741824;
 $6=(($this+8264)|0);
 HEAP32[(($6)>>2)]=1073741824;
 $7=(($this+8197)|0);
 HEAP8[($7)]=4;
 $8=(($this+8198)|0);
 HEAP8[($8)]=0;
 $9=(($this+8192)|0);
 $10=$9;
 _memset((((($10)|0))|0), ((((0)|0))|0), ((((5)|0))|0));
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Hes_Cpu7set_mmrEii($this,$reg,$bank){
 $this=($this)|0;
 $reg=($reg)|0;
 $bank=($bank)|0;
 var $1=0,$4=0,$7=0,$8=0,$9=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;
 $1=($reg>>>0)<((9)>>>0);
 if (!($1)) {
  ___assert_fail(((5128)|0),((7512)|0),((71)|0),((9024)|0));
 }
 $4=($bank>>>0)<((256)>>>0);
 if (!($4)) {
  ___assert_fail(((5160)|0),((7512)|0),((72)|0),((9024)|0));
 }
 $7=(($bank)&255);
 $8=(($this+8200+$reg)|0);
 HEAP8[($8)]=$7;
 $9=($this|0)==0;
 if ($9) {
  $14=0;
 } else {
  $11=((($this)-(272))|0);
  $12=$11;
  $14=$12;
 }
 $15=((__ZN7Hes_Emu11cpu_set_mmrEii($14,$reg,$bank))|0);
 $16=(($this+8212)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17+($reg<<2))|0);
 HEAP32[(($18)>>2)]=$15;
 return;
}
function __ZN7Hes_Emu11cpu_set_mmrEii($this,$page,$bank){
 $this=($this)|0;
 $page=($page)|0;
 $bank=($bank)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$data_0=0,$_0=0,label=0;
 $1=(($this+8540+($page<<2))|0);
 HEAP32[(($1)>>2)]=0;
 $2=($bank|0)<128;
 if ($2) {
  $4=(($this+8576)|0);
  $5=$bank<<13;
  $6=((__ZN8Rom_DataILi8192EE7at_addrEi($4,$5))|0);
  $_0=$6;
  return (($_0)|0);
 }
 if (((($bank|0))|0)==((248)|0)) {
  $9=(($this+272)|0);
  $data_0=$9;
 } else if (((($bank|0))|0)==((249)|0)|((($bank|0))|0)==((250)|0)|((($bank|0))|0)==((251)|0)) {
  $11=$bank<<13;
  $12=((($11)-(2039808))|0);
  $13=(($this+9784+$12)|0);
  $data_0=$13;
 } else {
  $15=(($this+8576)|0);
  $16=((__ZN8Rom_DataILi8192EE8unmappedEv($15))|0);
  $_0=$16;
  return (($_0)|0);
 }
 HEAP32[(($1)>>2)]=$data_0;
 $_0=$data_0;
 return (($_0)|0);
}
function __ZN7Hes_Cpu3runEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $s=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$_=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$_692=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0;
 var $58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0;
 var $78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0;
 var $98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0;
 var $118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$pc_0=0,$134=0,$135=0,$nz_0=0,$c_0=0;
 var $status_0=0,$sp_0=0,$y_0=0,$x_0=0,$a_0=0,$pc_1=0,$s_time_0=0,$illegal_encountered_0_off0=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$_sum=0,$143=0,$144=0,$145=0,$146=0;
 var $147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$or_cond=0,$154=0,$155=0,$157=0,$158=0,$159=0,$161=0,$162=0,$163=0,$165=0,$166=0,$167=0,$169=0,$170=0;
 var $171=0,$173=0,$174=0,$175=0,$177=0,$178=0,$179=0,$181=0,$182=0,$183=0,$185=0,$186=0,$187=0,$189=0,$190=0,$191=0,$193=0,$194=0,$195=0,$197=0;
 var $198=0,$199=0,$201=0,$202=0,$203=0,$205=0,$206=0,$207=0,$209=0,$210=0,$211=0,$213=0,$214=0,$215=0,$217=0,$218=0,$219=0,$sp_1=0,$221=0,$222=0;
 var $223=0,$224=0,$226=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$236=0,$237=0,$_sum689=0,$239=0,$240=0,$241=0,$242=0,$243=0,$245=0;
 var $247=0,$data_0=0,$_sum688=0,$249=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0,$261=0,$262=0,$263=0,$264=0,$265=0,$266=0;
 var $267=0,$268=0,$269=0,$271=0,$272=0,$273=0,$274=0,$275=0,$276=0,$277=0,$278=0,$279=0,$280=0,$281=0,$283=0,$284=0,$285=0,$286=0,$287=0,$288=0;
 var $289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=0,$297=0,$298=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=0,$308=0,$309=0;
 var $_729=0,$311=0,$312=0,$314=0,$315=0,$316=0,$317=0,$318=0,$319=0,$320=0,$321=0,$323=0,$324=0,$326=0,$327=0,$329=0,$331=0,$332=0,$data_1=0,$334=0;
 var $335=0,$336=0,$338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$349=0,$351=0,$352=0,$354=0,$355=0,$356=0,$357=0;
 var $359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$372=0,$373=0,$data_2=0,$375=0,$376=0,$377=0,$378=0,$379=0;
 var $380=0,$381=0,$382=0,$383=0,$384=0,$385=0,$387=0,$data_3=0,$_sum680=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0,$addr13_0=0,$pc_2=0,$396=0,$397=0,$398=0;
 var $399=0,$400=0,$402=0,$403=0,$405=0,$406=0,$408=0,$410=0,$411=0,$data_4=0,$413=0,$414=0,$415=0,$416=0,$417=0,$418=0,$419=0,$420=0,$421=0,$422=0;
 var $423=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$438=0,$data_5=0,$_sum679=0,$440=0,$441=0,$442=0,$443=0;
 var $444=0,$445=0,$addr15_0=0,$pc_3=0,$447=0,$448=0,$449=0,$450=0,$451=0,$452=0,$453=0,$454=0,$455=0,$456=0,$_730=0,$458=0,$459=0,$461=0,$462=0,$463=0;
 var $_731=0,$464=0,$465=0,$467=0,$468=0,$469=0,$470=0,$471=0,$472=0,$474=0,$476=0,$data_6=0,$478=0,$_sum678=0,$479=0,$480=0,$481=0,$482=0,$483=0,$_732=0;
 var $484=0,$485=0,$487=0,$488=0,$data_7=0,$490=0,$491=0,$492=0,$nz_4=0,$pc_4=0,$s_time_4=0,$494=0,$495=0,$496=0,$497=0,$498=0,$499=0,$501=0,$_sum677=0,$503=0;
 var $504=0,$505=0,$506=0,$_sum675=0,$508=0,$509=0,$510=0,$addr18_0=0,$_sum676=0,$512=0,$513=0,$514=0,$515=0,$516=0,$517=0,$_733=0,$518=0,$519=0,$_sum674=0,$521=0;
 var $522=0,$523=0,$524=0,$525=0,$526=0,$527=0,$528=0,$_sum673=0,$530=0,$531=0,$532=0,$533=0,$534=0,$535=0,$nz_5=0,$pc_5=0,$s_time_5=0,$537=0,$538=0,$539=0;
 var $540=0,$541=0,$542=0,$544=0,$546=0,$547=0,$549=0,$addr19_0=0,$pc_6=0,$_734=0,$551=0,$552=0,$553=0,$554=0,$555=0,$nz_6=0,$556=0,$557=0,$558=0,$559=0;
 var $560=0,$561=0,$563=0,$564=0,$565=0,$566=0,$567=0,$568=0,$569=0,$570=0,$571=0,$573=0,$574=0,$575=0,$576=0,$577=0,$578=0,$579=0,$580=0,$581=0;
 var $583=0,$data_9=0,$_sum672=0,$585=0,$586=0,$587=0,$588=0,$589=0,$590=0,$_735=0,$591=0,$593=0,$594=0,$data_10=0,$596=0,$597=0,$599=0,$600=0,$data_11=0,$602=0;
 var $603=0,$604=0,$606=0,$607=0,$data_12=0,$609=0,$610=0,$611=0,$613=0,$614=0,$data_13=0,$616=0,$617=0,$618=0,$data_14=0,$620=0,$622=0,$623=0,$data_15=0,$625=0;
 var $626=0,$627=0,$data_16=0,$629=0,$631=0,$data_17=0,$_sum671=0,$633=0,$634=0,$635=0,$636=0,$637=0,$638=0,$_736=0,$639=0,$640=0,$temp21_0=0,$643=0,$644=0,$_737=0;
 var $645=0,$647=0,$648=0,$_738=0,$649=0,$650=0,$652=0,$653=0,$654=0,$data_18=0,$pc_7=0,$s_time_6=0,$656=0,$657=0,$658=0,$659=0,$661=0,$662=0,$_739=0,$663=0;
 var $664=0,$666=0,$667=0,$668=0,$data_19=0,$pc_8=0,$s_time_7=0,$670=0,$671=0,$672=0,$673=0,$675=0,$676=0,$data_20=0,$678=0,$679=0,$680=0,$681=0,$682=0,$683=0;
 var $684=0,$685=0,$686=0,$687=0,$688=0,$689=0,$690=0,$691=0,$692=0,$693=0,$694=0,$695=0,$696=0,$697=0,$698=0,$700=0,$701=0,$data_21=0,$703=0,$704=0;
 var $705=0,$707=0,$709=0,$data_22=0,$711=0,$_sum670=0,$712=0,$713=0,$714=0,$715=0,$716=0,$data_23=0,$pc_9=0,$pc_9698=0,$data_23696=0,$pc_9699=0,$data_23697=0,$720=0,$721=0,$722=0;
 var $data_24=0,$pc_10=0,$s_time_8=0,$724=0,$725=0,$726=0,$727=0,$729=0,$730=0,$data_25=0,$732=0,$733=0,$734=0,$735=0,$736=0,$737=0,$738=0,$739=0,$740=0,$741=0;
 var $742=0,$743=0,$744=0,$745=0,$746=0,$747=0,$748=0,$749=0,$750=0,$751=0,$752=0,$754=0,$755=0,$data_26=0,$757=0,$758=0,$759=0,$761=0,$763=0,$data_27=0;
 var $765=0,$_sum669=0,$766=0,$767=0,$768=0,$769=0,$770=0,$data_28=0,$pc_11=0,$pc_11703=0,$data_28701=0,$pc_11704=0,$data_28702=0,$774=0,$775=0,$776=0,$data_29=0,$pc_12=0,$s_time_9=0,$778=0;
 var $779=0,$781=0,$782=0,$data_30=0,$784=0,$785=0,$786=0,$787=0,$788=0,$789=0,$790=0,$791=0,$792=0,$793=0,$794=0,$795=0,$796=0,$797=0,$798=0,$799=0;
 var $800=0,$801=0,$802=0,$803=0,$804=0,$806=0,$807=0,$data_31=0,$809=0,$810=0,$811=0,$813=0,$815=0,$data_32=0,$817=0,$_sum668=0,$818=0,$819=0,$820=0,$821=0;
 var $822=0,$data_33=0,$pc_13=0,$pc_13708=0,$data_33706=0,$pc_13709=0,$data_33707=0,$826=0,$827=0,$828=0,$data_34=0,$pc_14=0,$s_time_10=0,$830=0,$831=0,$833=0,$834=0,$data_35=0,$836=0,$837=0;
 var $838=0,$839=0,$840=0,$841=0,$842=0,$843=0,$844=0,$845=0,$846=0,$847=0,$848=0,$849=0,$850=0,$851=0,$852=0,$853=0,$854=0,$855=0,$856=0,$858=0;
 var $859=0,$data_36=0,$861=0,$862=0,$863=0,$865=0,$867=0,$data_37=0,$869=0,$_sum667=0,$870=0,$871=0,$872=0,$873=0,$874=0,$data_38=0,$pc_15=0,$pc_15713=0,$data_38711=0,$pc_15714=0;
 var $data_38712=0,$878=0,$879=0,$880=0,$data_39=0,$pc_16=0,$s_time_11=0,$882=0,$883=0,$885=0,$886=0,$data_40=0,$888=0,$889=0,$890=0,$891=0,$892=0,$893=0,$894=0,$895=0;
 var $896=0,$897=0,$898=0,$899=0,$900=0,$901=0,$902=0,$903=0,$904=0,$905=0,$906=0,$907=0,$908=0,$910=0,$911=0,$data_41=0,$913=0,$914=0,$915=0,$917=0;
 var $919=0,$data_42=0,$921=0,$_sum666=0,$922=0,$923=0,$924=0,$925=0,$926=0,$data_43=0,$pc_17=0,$pc_17718=0,$data_43716=0,$pc_17719=0,$data_43717=0,$930=0,$931=0,$932=0,$data_44=0,$pc_18=0;
 var $s_time_12=0,$934=0,$936=0,$937=0,$data_45=0,$939=0,$940=0,$941=0,$942=0,$943=0,$944=0,$945=0,$946=0,$947=0,$948=0,$949=0,$950=0,$951=0,$952=0,$953=0;
 var $954=0,$955=0,$956=0,$957=0,$958=0,$959=0,$961=0,$962=0,$data_46=0,$964=0,$965=0,$966=0,$968=0,$970=0,$data_47=0,$972=0,$_sum665=0,$973=0,$974=0,$975=0;
 var $976=0,$977=0,$data_48=0,$pc_19=0,$pc_19723=0,$data_48721=0,$pc_19724=0,$data_48722=0,$981=0,$982=0,$983=0,$data_49=0,$pc_20=0,$s_time_13=0,$985=0,$986=0,$987=0,$988=0,$sext=0,$989=0;
 var $990=0,$991=0,$992=0,$993=0,$994=0,$995=0,$996=0,$997=0,$998=0,$c_1=0,$1001=0,$1002=0,$1003=0,$1004=0,$1005=0,$1007=0,$1008=0,$1010=0,$1011=0,$1012=0;
 var $1013=0,$1014=0,$1016=0,$data_50=0,$data_51=0,$c_2=0,$_sum663=0,$1019=0,$1020=0,$1021=0,$1022=0,$1023=0,$_740=0,$1024=0,$1025=0,$1026=0,$1027=0,$1028=0,$1029=0,$1031=0;
 var $1033=0,$data_52=0,$data_53=0,$c_3=0,$_sum664=0,$1036=0,$1037=0,$1038=0,$1039=0,$1040=0,$1041=0,$1042=0,$_741=0,$1043=0,$1044=0,$1045=0,$data_54=0,$nz_7=0,$c_4=0,$1047=0;
 var $_742=0,$1048=0,$1049=0,$1051=0,$1053=0,$1054=0,$1056=0,$1057=0,$data_55=0,$data_56=0,$c_5=0,$1060=0,$1061=0,$1062=0,$1063=0,$1064=0,$1065=0,$1066=0,$1067=0,$1069=0;
 var $1070=0,$1072=0,$1073=0,$data_57=0,$data_58=0,$c_6=0,$1076=0,$1077=0,$1078=0,$1079=0,$1080=0,$1081=0,$1082=0,$1084=0,$1085=0,$1087=0,$1088=0,$1090=0,$1091=0,$1093=0;
 var $1094=0,$1096=0,$1097=0,$1099=0,$1100=0,$1102=0,$1103=0,$1105=0,$1106=0,$data_60=0,$data_61=0,$nz_8=0,$1109=0,$1110=0,$1111=0,$1112=0,$data_62=0,$nz_9=0,$c_7=0,$1114=0;
 var $1115=0,$1116=0,$1118=0,$1119=0,$1121=0,$1123=0,$1124=0,$1126=0,$data_65=0,$nz_10=0,$1128=0,$1130=0,$_pn=0,$1132=0,$1133=0,$1134=0,$1135=0,$1136=0,$1142=0,$1143=0;
 var $1145=0,$1146=0,$1154=0,$1155=0,$1156=0,$1157=0,$1159=0,$1160=0,$1161=0,$1162=0,$1164=0,$1165=0,$1166=0,$1167=0,$1169=0,$1170=0,$1171=0,$1172=0,$1173=0,$1174=0;
 var $1175=0,$1176=0,$1177=0,$1178=0,$1179=0,$1180=0,$1181=0,$1182=0,$1183=0,$1184=0,$1185=0,$1186=0,$1187=0,$1188=0,$1189=0,$1190=0,$1191=0,$1192=0,$1193=0,$1194=0;
 var $1196=0,$1197=0,$1198=0,$1200=0,$1201=0,$_693=0,$new_time_0=0,$1203=0,$1204=0,$1205=0,$1207=0,$1208=0,$1209=0,$1210=0,$1211=0,$1213=0,$1214=0,$1215=0,$1216=0,$1217=0;
 var $1219=0,$1220=0,$1221=0,$1222=0,$1223=0,$1225=0,$1226=0,$1227=0,$1228=0,$1229=0,$1230=0,$1231=0,$1232=0,$1233=0,$1234=0,$1235=0,$1236=0,$1237=0,$1239=0,$1240=0;
 var $1242=0,$1243=0,$1244=0,$1245=0,$1246=0,$1247=0,$1248=0,$1249=0,$1250=0,$1251=0,$1252=0,$temp39_0=0,$1253=0,$1254=0,$1255=0,$1256=0,$1257=0,$1261=0,$1263=0,$1265=0;
 var $1268=0,$nz_11=0,$c_8=0,$status_1=0,$sp_2=0,$1270=0,$1271=0,$1272=0,$1273=0,$1274=0,$1276=0,$1277=0,$1279=0,$1280=0,$1282=0,$1285=0,$nz_12=0,$c_9=0,$status_2=0,$sp_3=0;
 var $1287=0,$1288=0,$1289=0,$1290=0,$1291=0,$1293=0,$1294=0,$1297=0,$1298=0,$data_66=0,$a_1=0,$in_0=0,$1300=0,$1301=0,$1303=0,$1304=0,$a_2=0,$1306=0,$1307=0,$1308=0;
 var $1310=0,$1311=0,$1312=0,$_694=0,$1313=0,$_743=0,$1314=0,$in_alt_0=0,$1319=0,$phitmp=0,$in_alt_1=0,$in_inc_1=0,$out_alt_0=0,$out_inc_1=0,$1323=0,$_sum661=0,$1324=0,$1325=0,$_sum662=0,$1326=0;
 var $1327=0,$1328=0,$_695=0,$1329=0,$1330=0,$1331=0,$1332=0,$1333=0,$1334=0,$1335=0,$1336=0,$1337=0,$1338=0,$1339=0,$1340=0,$1341=0,$in_inc_2=0,$out_inc_2=0,$in43_0=0,$out44_0=0;
 var $count_1=0,$_744=0,$1343=0,$1344=0,$1345=0,$1346=0,$1347=0,$1348=0,$in_inc_2_=0,$1349=0,$1350=0,$1351=0,$1352=0,$out_inc_2_=0,$1353=0,$1354=0,$1356=0,$1357=0,$1360=0,$extract_t=0;
 var $extract=0,$extract_t682=0,$pc_22_off0=0,$pc_22_off8=0,$s_time_14=0,$result__0=0,$1362=0,$1363=0,$1364=0,$1365=0,$1366=0,$1367=0,$1368=0,$_sum685=0,$1369=0,$1370=0,$1371=0,$1372=0,$1373=0,$1374=0;
 var $1375=0,$1376=0,$1377=0,$1378=0,$1379=0,$1380=0,$1381=0,$1382=0,$1383=0,$temp46_0=0,$1384=0,$extract_t687=0,$1386=0,$extract_t686=0,$temp46_1_off0=0,$1388=0,$1389=0,$1390=0,$1391=0,$1392=0;
 var $1393=0,$1394=0,$1395=0,$1396=0,$s_time_15=0,$_745=0,$1398=0,$1399=0,$1400=0,$extract_t681=0,$extract683=0,$extract_t684=0,$1402=0,$1404=0,$1405=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0;
 var $1411=0,$1412=0,$1413=0,$1414=0,$1415=0,$1416=0,$1417=0,$1418=0,$1419=0,$extract_t690=0,$1421=0,$extract_t691=0,$temp48_0_off0=0,$1425=0,$1426=0,$1429=0,$1430=0,$1433=0,$1434=0,$1437=0;
 var $1438=0,$1441=0,$1442=0,$1445=0,$1446=0,$1448=0,$y_0$phi=0,$x_0$phi=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;
 $s=((sp)|0);
 __ZN7Hes_Cpu12set_end_timeEi($this,$end_time);
 $1=(($this+8216)|0);
 $2=$s;
 $3=$1;
 (_memcpy((($2)|0), (($3)|0), 44)|0);
 $4=(($this+8212)|0);
 HEAP32[(($4)>>2)]=$s;
 $5=(($s+40)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+8192)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($this+8194)|0);
 $11=((HEAP8[($10)])|0);
 $12=($11&255);
 $13=(($this+8195)|0);
 $14=((HEAP8[($13)])|0);
 $15=($14&255);
 $16=(($this+8196)|0);
 $17=((HEAP8[($16)])|0);
 $18=($17&255);
 $19=(($this+8198)|0);
 $20=((HEAP8[($19)])|0);
 $21=($20&255);
 $22=((($21)+(1))|0);
 $23=$22|256;
 $24=(($this+8197)|0);
 $25=((HEAP8[($24)])|0);
 $26=($25&255);
 $27=$26&76;
 $28=$26<<8;
 $29=$26&2;
 $30=$29|$28;
 $31=$30^2;
 $32=(($this+8264)|0);
 $33=($this|0)==0;
 $34=((($this)-(272))|0);
 $35=$34;
 $36=((($this)-(272))|0);
 $37=$36;
 $38=(($this+8268)|0);
 $39=$38;
 $40=(($this+8200)|0);
 $41=($this|0)==0;
 $_=($41?0:$37);
 $42=((($this)-(272))|0);
 $43=$42;
 $44=((($this)-(272))|0);
 $45=$44;
 $46=(($this+8268)|0);
 $47=$46;
 $48=(($this+8200)|0);
 $49=($this|0)==0;
 $_692=($49?0:$45);
 $50=($this|0)==0;
 $51=((($this)-(272))|0);
 $52=$51;
 $53=($this|0)==0;
 $54=((($this)-(272))|0);
 $55=$54;
 $56=($this|0)==0;
 $57=((($this)-(272))|0);
 $58=$57;
 $59=($this|0)==0;
 $60=((($this)-(272))|0);
 $61=$60;
 $62=($this|0)==0;
 $63=((($this)-(272))|0);
 $64=$63;
 $65=((($this)-(272))|0);
 $66=$65;
 $67=($this|0)==0;
 $68=((($this)-(272))|0);
 $69=$68;
 $70=($this|0)==0;
 $71=((($this)-(272))|0);
 $72=$71;
 $73=($this|0)==0;
 $74=((($this)-(272))|0);
 $75=$74;
 $76=($this|0)==0;
 $77=((($this)-(272))|0);
 $78=$77;
 $79=($this|0)==0;
 $80=((($this)-(272))|0);
 $81=$80;
 $82=($this|0)==0;
 $83=((($this)-(272))|0);
 $84=$83;
 $85=($this|0)==0;
 $86=((($this)-(272))|0);
 $87=$86;
 $88=($this|0)==0;
 $89=((($this)-(272))|0);
 $90=$89;
 $91=($this|0)==0;
 $92=((($this)-(272))|0);
 $93=$92;
 $94=($this|0)==0;
 $95=((($this)-(272))|0);
 $96=$95;
 $97=($this|0)==0;
 $98=((($this)-(272))|0);
 $99=$98;
 $100=($this|0)==0;
 $101=((($this)-(272))|0);
 $102=$101;
 $103=($this|0)==0;
 $104=((($this)-(272))|0);
 $105=$104;
 $106=($this|0)==0;
 $107=((($this)-(272))|0);
 $108=$107;
 $109=($this|0)==0;
 $110=((($this)-(272))|0);
 $111=$110;
 $112=((($this)-(272))|0);
 $113=$112;
 $114=(($this+8260)|0);
 $115=(($s+36)|0);
 $116=(($s+36)|0);
 $117=(($this+8260)|0);
 $118=(($s+36)|0);
 $119=(($this+8200)|0);
 $120=($this|0)==0;
 $121=((($this)-(272))|0);
 $122=$121;
 $123=($this|0)==0;
 $124=((($this)-(272))|0);
 $125=$124;
 $126=((($this)-(272))|0);
 $127=$126;
 $128=($this|0)==0;
 $129=((($this)-(272))|0);
 $130=$129;
 $131=(($s+28)|0);
 $132=(($s+36)|0);
 $illegal_encountered_0_off0=0;$s_time_0=$6;$pc_1=$9;$a_0=$12;$x_0=$15;$y_0=$18;$sp_0=$23;$status_0=$27;$c_0=$28;$nz_0=$31;
 L2435: while(1) {
  $136=$status_0&4;
  $137=($136|0)!=0;
  $138=$pc_1>>>13;
  $139=(($s+($138<<2))|0);
  $140=((HEAP32[(($139)>>2)])|0);
  $141=$pc_1&8191;
  $142=(($140+$141)|0);
  $_sum=((($141)+(1))|0);
  $143=(($140+$_sum)|0);
  $144=((HEAP8[($142)])|0);
  $145=($144&255);
  $146=((($pc_1)+(1))|0);
  $147=((11256+$145)|0);
  $148=((HEAP8[($147)])|0);
  $149=($148&255);
  $150=((($149)+($s_time_0))|0);
  $151=($150|0)<0;
  $152=($150|0)<($149|0);
  $or_cond=$151|$152;
  L2437: do {
   if ($or_cond) {
    $154=((HEAP8[($143)])|0);
    $155=($154&255);
    L2439: do {
     switch (($145|0)) {
     case 120: {
      if ($137) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
       continue L2435;
      }
      $1285=$status_0|4;
      $sp_3=$sp_0;$status_2=$1285;$c_9=$c_0;$nz_12=$nz_0;
      label = 2374;
      break;
     }
     case 83: {
      $1293=$155&1;
      $1294=($1293|0)==0;
      if (!($1294)) {
       __ZN7Hes_Cpu7set_mmrEii($this,0,$a_0);
      }
      $1297=$155&2;
      $1298=($1297|0)==0;
      if (!($1298)) {
       __ZN7Hes_Cpu7set_mmrEii($this,1,$a_0);
      }
      $1425=$155&4;
      $1426=($1425|0)==0;
      if (!($1426)) {
       __ZN7Hes_Cpu7set_mmrEii($this,2,$a_0);
      }
      $1429=$155&8;
      $1430=($1429|0)==0;
      if (!($1430)) {
       __ZN7Hes_Cpu7set_mmrEii($this,3,$a_0);
      }
      $1433=$155&16;
      $1434=($1433|0)==0;
      if (!($1434)) {
       __ZN7Hes_Cpu7set_mmrEii($this,4,$a_0);
      }
      $1437=$155&32;
      $1438=($1437|0)==0;
      if (!($1438)) {
       __ZN7Hes_Cpu7set_mmrEii($this,5,$a_0);
      }
      $1441=$155&64;
      $1442=($1441|0)==0;
      if (!($1442)) {
       __ZN7Hes_Cpu7set_mmrEii($this,6,$a_0);
      }
      $1445=$155&128;
      $1446=($1445|0)==0;
      if (!($1446)) {
       __ZN7Hes_Cpu7set_mmrEii($this,7,$a_0);
      }
      $1448=((($pc_1)+(2))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$1448;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 238: {
      $1121=((__Z8get_le16PKv($143))|0);
      $nz_10=1;$data_65=$1121;
      label = 2332;
      break;
     }
     case 222: {
      $1123=((__Z8get_le16PKv($143))|0);
      $1124=((($1123)+($x_0))|0);
      $nz_10=-1;$data_65=$1124;
      label = 2332;
      break;
     }
     case 206: {
      $1126=((__Z8get_le16PKv($143))|0);
      $nz_10=-1;$data_65=$1126;
      label = 2332;
      break;
     }
     case 67: {
      $in_0=$119;$a_1=$a_0;$data_66=$155;
      while(1) {
       $1300=$data_66&1;
       $1301=($1300|0)==0;
       if ($1301) {
        $a_2=$a_1;
       } else {
        $1303=((HEAP8[($in_0)])|0);
        $1304=($1303&255);
        $a_2=$1304;
       }
       $1306=(($in_0+1)|0);
       $1307=$data_66>>>1;
       $1308=($1307|0)==0;
       if ($1308) {
        break;
       } else {
        $in_0=$1306;$a_1=$a_2;$data_66=$1307;
       }
      }
      $135=((($pc_1)+(2))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$135;$a_0=$a_2;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 16: {
      $173=((($pc_1)+(2))|0);
      $174=$nz_0&32896;
      $175=($174|0)==0;
      if (!($175)) {
       $pc_0=$173;
       label = 2122;
       break L2439;
      }
      $177=(($154<<24)>>24);
      $178=((($177)+($173))|0);
      $179=$178&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$179;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 152: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$y_0;$x_0=$x_0;$nz_0=$y_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
      continue L2435;
      break;
     }
     case 170: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$x_0=$a_0;$nz_0=$a_0;$a_0=$a_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
      continue L2435;
      break;
     }
     case 138: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$x_0;$nz_0=$x_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
      continue L2435;
      break;
     }
     case 154: {
      $1142=((($x_0)+(1))|0);
      $1143=$1142|256;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1143;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 186: {
      $1145=((($sp_0)+(255))|0);
      $1146=$1145&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$1146;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1146;
      continue L2435;
      break;
     }
     case 2: {
      $y_0$phi=$x_0;$x_0=$y_0;$illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;$y_0=$y_0$phi;
      continue L2435;
      break;
     }
     case 34: {
      $x_0$phi=$a_0;$a_0=$x_0;$illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;$x_0=$x_0$phi;
      continue L2435;
      break;
     }
     case 66: {
      $y_0$phi=$a_0;$a_0=$y_0;$illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$x_0=$x_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;$y_0=$y_0$phi;
      continue L2435;
      break;
     }
     case 98: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 130: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 234:case 212: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 24: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 184: {
      $1261=$status_0&-65;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1261;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 216: {
      $1263=$status_0&-9;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1263;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 248: {
      $1265=$status_0|8;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1265;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 88: {
      if (!($137)) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
       continue L2435;
      }
      $1268=$status_0&-5;
      $sp_2=$sp_0;$status_1=$1268;$c_8=$c_0;$nz_11=$nz_0;
      label = 2368;
      break;
     }
     case 0: {
      $1360=((($pc_1)+(2))|0);
      $extract_t=(($1360)&255);
      $extract=$1360>>>8;
      $extract_t682=(($extract)&255);
      $result__0=6;$s_time_14=$150;$pc_22_off8=$extract_t682;$pc_22_off0=$extract_t;
      break L2437;
      break;
     }
     case 104: {
      $1207=(($this+$sp_0)|0);
      $1208=((HEAP8[($1207)])|0);
      $1209=($1208&255);
      $1210=((($sp_0)-(255))|0);
      $1211=$1210|256;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$1209;$x_0=$x_0;$y_0=$y_0;$sp_0=$1211;$status_0=$status_0;$c_0=$c_0;$nz_0=$1209;
      continue L2435;
      break;
     }
     case 8: {
      $1242=$status_0&76;
      $1243=$nz_0>>>8;
      $1244=$1243|$nz_0;
      $1245=$1244&128;
      $1246=$1242|$1245;
      $1247=$c_0>>>8;
      $1248=$1247&1;
      $1249=$1246|$1248;
      $1250=$nz_0&255;
      $1251=($1250|0)==0;
      $1252=$1249|2;
      $temp39_0=($1251?$1252:$1249);
      $1253=((($sp_0)-(1))|0);
      $1254=$1253|256;
      $1255=$temp39_0|16;
      $1256=(($1255)&255);
      $1257=(($this+$1254)|0);
      HEAP8[($1257)]=$1256;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1254;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 56: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=-1;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 142: {
      $temp21_0=$x_0;
      label = 2217;
      break;
     }
     case 250: {
      $1213=(($this+$sp_0)|0);
      $1214=((HEAP8[($1213)])|0);
      $1215=($1214&255);
      $1216=((($sp_0)-(255))|0);
      $1217=$1216|256;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$1215;$y_0=$y_0;$sp_0=$1217;$status_0=$status_0;$c_0=$c_0;$nz_0=$1215;
      continue L2435;
      break;
     }
     case 122: {
      $1219=(($this+$sp_0)|0);
      $1220=((HEAP8[($1219)])|0);
      $1221=($1220&255);
      $1222=((($sp_0)-(255))|0);
      $1223=$1222|256;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$1221;$sp_0=$1223;$status_0=$status_0;$c_0=$c_0;$nz_0=$1221;
      continue L2435;
      break;
     }
     case 40: {
      $1225=(($this+$sp_0)|0);
      $1226=((HEAP8[($1225)])|0);
      $1227=($1226&255);
      $1228=((($sp_0)-(255))|0);
      $1229=$1228|256;
      $1230=$1227^$status_0;
      $1231=$1227&76;
      $1232=$1227<<8;
      $1233=$1227&2;
      $1234=$1233|$1232;
      $1235=$1234^2;
      $1236=$1230&4;
      $1237=($1236|0)==0;
      if ($1237) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1229;$status_0=$1231;$c_0=$1232;$nz_0=$1235;
       continue L2435;
      }
      $1239=$1227&4;
      $1240=($1239|0)==0;
      if ($1240) {
       $sp_2=$1229;$status_1=$1231;$c_8=$1232;$nz_11=$1235;
       label = 2368;
      } else {
       $sp_3=$1229;$status_2=$1231;$c_9=$1232;$nz_12=$1235;
       label = 2374;
      }
      break;
     }
     case 230: {
      $nz_8=1;$data_61=$155;
      label = 2326;
      break;
     }
     case 240: {
      $157=((($pc_1)+(2))|0);
      $158=(($nz_0)&255);
      $159=(($158<<24)>>24)==0;
      if (!($159)) {
       $pc_0=$157;
       label = 2122;
       break L2439;
      }
      $161=(($154<<24)>>24);
      $162=((($161)+($157))|0);
      $163=$162&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$163;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 194: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 72: {
      $1154=((($sp_0)-(1))|0);
      $1155=$1154|256;
      $1156=(($a_0)&255);
      $1157=(($this+$1155)|0);
      HEAP8[($1157)]=$1156;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1155;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 218: {
      $1159=((($sp_0)-(1))|0);
      $1160=$1159|256;
      $1161=(($x_0)&255);
      $1162=(($this+$1160)|0);
      HEAP8[($1162)]=$1161;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1160;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 168: {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$y_0=$a_0;$nz_0=$a_0;$a_0=$a_0;$x_0=$x_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
      continue L2435;
      break;
     }
     case 84: {
      $illegal_encountered_0_off0=1;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 244: {
      $illegal_encountered_0_off0=1;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 243: {
      $in_alt_0=1;
      label = 2385;
      break;
     }
     case 227: {
      $in_alt_0=0;
      label = 2385;
      break;
     }
     case 195: {
      $out_inc_1=-1;$out_alt_0=1;$in_inc_1=-1;$in_alt_1=0;
      label = 2388;
      break;
     }
     case 115: {
      $out_inc_1=1;$out_alt_0=1;$in_inc_1=1;$in_alt_1=0;
      label = 2388;
      break;
     }
     case 211: {
      $out_inc_1=0;$out_alt_0=1;$in_inc_1=1;$in_alt_1=0;
      label = 2388;
      break;
     }
     case 208: {
      $165=((($pc_1)+(2))|0);
      $166=(($nz_0)&255);
      $167=(($166<<24)>>24)==0;
      if ($167) {
       $pc_0=$165;
       label = 2122;
       break L2439;
      }
      $169=(($154<<24)>>24);
      $170=((($169)+($165))|0);
      $171=$170&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$171;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 3:case 19:case 35: {
      $1310=$145>>>4;
      $1311=($1310|0)==0;
      $1312=((($1310)+(1))|0);
      $_694=($1311?0:$1312);
      $1313=((($pc_1)+(2))|0);
      HEAP32[(($5)>>2)]=$150;
      $_743=($120?0:$122);
      __ZN7Hes_Emu13cpu_write_vdpEii($_743,$_694,$155);
      $1314=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1314;$pc_1=$1313;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 198: {
      $data_60=$155;
      label = 2325;
      break;
     }
     case 116: {
      $593=((($155)+($x_0))|0);
      $594=$593&255;
      $data_10=$594;
      label = 2203;
      break;
     }
     case 254: {
      $1118=((__Z8get_le16PKv($143))|0);
      $1119=((($1118)+($x_0))|0);
      $nz_10=1;$data_65=$1119;
      label = 2332;
      break;
     }
     case 90: {
      $1164=((($sp_0)-(1))|0);
      $1165=$1164|256;
      $1166=(($y_0)&255);
      $1167=(($this+$1165)|0);
      HEAP8[($1167)]=$1166;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1165;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 64: {
      $1169=(($this+$sp_0)|0);
      $1170=((HEAP8[($1169)])|0);
      $1171=($1170&255);
      $1172=((($sp_0)-(255))|0);
      $1173=$1172|256;
      $1174=(($this+$1173)|0);
      $1175=((HEAP8[($1174)])|0);
      $1176=($1175&255);
      $1177=((($sp_0)-(254))|0);
      $1178=$1177|256;
      $1179=(($this+$1178)|0);
      $1180=((HEAP8[($1179)])|0);
      $1181=($1180&255);
      $1182=$1181<<8;
      $1183=$1182|$1176;
      $1184=((($sp_0)-(253))|0);
      $1185=$1184|256;
      $1186=$1171&76;
      $1187=$1171<<8;
      $1188=$1171&2;
      $1189=$1188|$1187;
      $1190=$1189^2;
      $1191=(($1186)&255);
      HEAP8[($24)]=$1191;
      $1192=$1171^$status_0;
      $1193=$1192&4;
      $1194=($1193|0)==0;
      if ($1194) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$1183;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1185;$status_0=$1186;$c_0=$1187;$nz_0=$1190;
       continue L2435;
      }
      $1196=((HEAP32[(($32)>>2)])|0);
      $1197=$1171&4;
      $1198=($1197|0)==0;
      if ($1198) {
       $1200=((HEAP32[(($114)>>2)])|0);
       $1201=($1196|0)>($1200|0);
       $_693=($1201?$1200:$1196);
       $new_time_0=$_693;
      } else {
       $new_time_0=$1196;
      }
      $1203=((HEAP32[(($115)>>2)])|0);
      HEAP32[(($115)>>2)]=$new_time_0;
      $1204=((($150)-($new_time_0))|0);
      $1205=((($1204)+($1203))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1205;$pc_1=$1183;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1185;$status_0=$1186;$c_0=$1187;$nz_0=$1190;
      continue L2435;
      break;
     }
     case 144: {
      $181=((($pc_1)+(2))|0);
      $182=$c_0&256;
      $183=($182|0)==0;
      if (!($183)) {
       $pc_0=$181;
       label = 2122;
       break L2439;
      }
      $185=(($154<<24)>>24);
      $186=((($185)+($181))|0);
      $187=$186&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$187;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 48: {
      $189=((($pc_1)+(2))|0);
      $190=$nz_0&32896;
      $191=($190|0)==0;
      if ($191) {
       $pc_0=$189;
       label = 2122;
       break L2439;
      }
      $193=(($154<<24)>>24);
      $194=((($193)+($189))|0);
      $195=$194&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$195;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 80: {
      $197=((($pc_1)+(2))|0);
      $198=$status_0&64;
      $199=($198|0)==0;
      if (!($199)) {
       $pc_0=$197;
       label = 2122;
       break L2439;
      }
      $201=(($154<<24)>>24);
      $202=((($201)+($197))|0);
      $203=$202&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$203;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 112: {
      $205=((($pc_1)+(2))|0);
      $206=$status_0&64;
      $207=($206|0)==0;
      if ($207) {
       $pc_0=$205;
       label = 2122;
       break L2439;
      }
      $209=(($154<<24)>>24);
      $210=((($209)+($205))|0);
      $211=$210&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$211;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 176: {
      $213=((($pc_1)+(2))|0);
      $214=$c_0&256;
      $215=($214|0)==0;
      if ($215) {
       $pc_0=$213;
       label = 2122;
       break L2439;
      }
      $217=(($154<<24)>>24);
      $218=((($217)+($213))|0);
      $219=$218&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$219;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 128: {
      $sp_1=$sp_0;
      label = 2142;
      break;
     }
     case 255: {
      $226=($146|0)==8192;
      if ($226) {
       $s_time_15=0;
       label = 2396;
       break L2437;
      } else {
       label = 2144;
      }
      break;
     }
     case 15:case 31:case 47:case 63:case 79:case 95:case 111:case 127:case 143:case 159:case 175:case 191:case 207:case 223:case 239: {
      label = 2144;
      break;
     }
     case 76: {
      $245=((__Z8get_le16PKv($143))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$245;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 124: {
      $247=((($155)+($x_0))|0);
      $data_0=$247;
      label = 2148;
      break;
     }
     case 108: {
      $data_0=$155;
      label = 2148;
      break;
     }
     case 68: {
      $261=$146>>>8;
      $262=(($261)&255);
      $263=((($sp_0)-(1))|0);
      $264=$263|256;
      $265=(($this+$264)|0);
      HEAP8[($265)]=$262;
      $266=((($sp_0)-(2))|0);
      $267=$266|256;
      $268=(($146)&255);
      $269=(($this+$267)|0);
      HEAP8[($269)]=$268;
      $sp_1=$267;
      label = 2142;
      break;
     }
     case 32: {
      $271=((($pc_1)+(2))|0);
      $272=((__Z8get_le16PKv($143))|0);
      $273=$271>>>8;
      $274=(($273)&255);
      $275=((($sp_0)-(1))|0);
      $276=$275|256;
      $277=(($this+$276)|0);
      HEAP8[($277)]=$274;
      $278=((($sp_0)-(2))|0);
      $279=$278|256;
      $280=(($271)&255);
      $281=(($this+$279)|0);
      HEAP8[($281)]=$280;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$272;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$279;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 96: {
      $283=((($sp_0)-(255))|0);
      $284=$283|256;
      $285=(($this+$284)|0);
      $286=((HEAP8[($285)])|0);
      $287=($286&255);
      $288=$287<<8;
      $289=(($this+$sp_0)|0);
      $290=((HEAP8[($289)])|0);
      $291=($290&255);
      $292=((($291)+(1))|0);
      $293=((($292)+($288))|0);
      $294=((($sp_0)-(254))|0);
      $295=$294|256;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$293;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$295;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 189: {
      $297=((__Z8get_le16PKv($143))|0);
      $298=((($297)+($x_0))|0);
      $299=((($pc_1)+(3))|0);
      $300=$298&8191;
      $301=$298>>>13;
      $302=(($s+($301<<2))|0);
      $303=((HEAP32[(($302)>>2)])|0);
      $304=(($303+$300)|0);
      $305=((HEAP8[($304)])|0);
      $306=($305&255);
      $307=(($this+8200+$301)|0);
      $308=((HEAP8[($307)])|0);
      $309=(($308<<24)>>24)==-1;
      if (!($309)) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$299;$a_0=$306;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$306;
       continue L2435;
      }
      HEAP32[(($5)>>2)]=$150;
      $_729=($33?0:$35);
      $311=((__ZN7Hes_Emu9cpu_read_Ej($_729,$298))|0);
      $312=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$312;$pc_1=$299;$a_0=$311;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$311;
      continue L2435;
      break;
     }
     case 157: {
      $314=((__Z8get_le16PKv($143))|0);
      $315=((($314)+($x_0))|0);
      $316=((($pc_1)+(3))|0);
      $317=$315>>>13;
      $318=(($39+($317<<2))|0);
      $319=((HEAP32[(($318)>>2)])|0);
      $320=$315&8191;
      $321=($319|0)==0;
      if (!($321)) {
       $323=(($a_0)&255);
       $324=(($319+$320)|0);
       HEAP8[($324)]=$323;
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$316;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
       continue L2435;
      }
      $326=((HEAP8[($40)])|0);
      $327=(($326<<24)>>24)==-1;
      if (!($327)) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$316;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
       continue L2435;
      }
      HEAP32[(($5)>>2)]=$150;
      __ZN7Hes_Emu10cpu_write_Eji($_,$320,$a_0);
      $329=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$329;$pc_1=$316;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 149: {
      $331=((($155)+($x_0))|0);
      $332=$331&255;
      $data_1=$332;
      label = 2159;
      break;
     }
     case 133: {
      $data_1=$155;
      label = 2159;
      break;
     }
     case 174: {
      $338=((__Z8get_le16PKv($143))|0);
      $339=((($pc_1)+(3))|0);
      $340=$338&8191;
      $341=$338>>>13;
      $342=(($s+($341<<2))|0);
      $343=((HEAP32[(($342)>>2)])|0);
      $344=(($343+$340)|0);
      $345=((HEAP8[($344)])|0);
      $346=($345&255);
      $347=(($this+8200+$341)|0);
      $348=((HEAP8[($347)])|0);
      $349=(($348<<24)>>24)==-1;
      if (!($349)) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$339;$a_0=$a_0;$x_0=$346;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$346;
       continue L2435;
      }
      HEAP32[(($5)>>2)]=$150;
      $351=((__ZN7Hes_Emu9cpu_read_Ej($43,$338))|0);
      $352=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$352;$pc_1=$339;$a_0=$a_0;$x_0=$351;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$351;
      continue L2435;
      break;
     }
     case 165: {
      $354=(($this+$155)|0);
      $355=((HEAP8[($354)])|0);
      $356=($355&255);
      $357=((($pc_1)+(2))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$357;$a_0=$356;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$356;
      continue L2435;
      break;
     }
     case 145: {
      $359=((($154)+(1))&255);
      $360=($359&255);
      $361=(($this+$360)|0);
      $362=((HEAP8[($361)])|0);
      $363=($362&255);
      $364=$363<<8;
      $365=(($this+$155)|0);
      $366=((HEAP8[($365)])|0);
      $367=($366&255);
      $368=((($367)+($y_0))|0);
      $369=((($368)+($364))|0);
      $370=((($pc_1)+(2))|0);
      $pc_2=$370;$addr13_0=$369;
      label = 2168;
      break;
     }
     case 129: {
      $372=((($155)+($x_0))|0);
      $373=$372&255;
      $data_2=$373;
      label = 2165;
      break;
     }
     case 146: {
      $data_2=$155;
      label = 2165;
      break;
     }
     case 153: {
      $387=((($155)+($y_0))|0);
      $data_3=$387;
      label = 2167;
      break;
     }
     case 141: {
      $data_3=$155;
      label = 2167;
      break;
     }
     case 161: {
      $410=((($155)+($x_0))|0);
      $411=$410&255;
      $data_4=$411;
      label = 2173;
      break;
     }
     case 178: {
      $data_4=$155;
      label = 2173;
      break;
     }
     case 177: {
      $425=(($this+$155)|0);
      $426=((HEAP8[($425)])|0);
      $427=($426&255);
      $428=((($427)+($y_0))|0);
      $429=((($154)+(1))&255);
      $430=($429&255);
      $431=(($this+$430)|0);
      $432=((HEAP8[($431)])|0);
      $433=($432&255);
      $434=$433<<8;
      $435=((($428)+($434))|0);
      $436=((($pc_1)+(2))|0);
      $pc_3=$436;$addr15_0=$435;
      label = 2177;
      break;
     }
     case 185: {
      $438=((($155)+($y_0))|0);
      $data_5=$438;
      label = 2176;
      break;
     }
     case 173: {
      $data_5=$155;
      label = 2176;
      break;
     }
     case 190: {
      $461=((__Z8get_le16PKv($143))|0);
      $462=((($461)+($y_0))|0);
      $463=((($pc_1)+(3))|0);
      HEAP32[(($5)>>2)]=$150;
      $_731=($53?0:$55);
      $464=((__ZN7Hes_Emu8cpu_readEj($_731,$462))|0);
      $465=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$465;$pc_1=$463;$a_0=$a_0;$x_0=$464;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$464;
      continue L2435;
      break;
     }
     case 181: {
      $467=((($155)+($x_0))|0);
      $468=$467&255;
      $469=(($this+$468)|0);
      $470=((HEAP8[($469)])|0);
      $471=($470&255);
      $472=((($pc_1)+(2))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$472;$a_0=$471;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$471;
      continue L2435;
      break;
     }
     case 169: {
      $474=((($pc_1)+(2))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$474;$a_0=$155;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$155;
      continue L2435;
      break;
     }
     case 60: {
      $476=((($155)+($x_0))|0);
      $data_6=$476;
      label = 2183;
      break;
     }
     case 44: {
      $data_6=$155;
      label = 2183;
      break;
     }
     case 52: {
      $487=((($155)+($x_0))|0);
      $488=$487&255;
      $data_7=$488;
      label = 2185;
      break;
     }
     case 36: {
      $data_7=$155;
      label = 2185;
      break;
     }
     case 137: {
      $s_time_4=$150;$pc_4=$146;$nz_4=$155;
      label = 2186;
      break;
     }
     case 179: {
      $_sum677=((($141)+(2))|0);
      $503=(($140+$_sum677)|0);
      $504=((HEAP8[($503)])|0);
      $505=($504&255);
      $506=((($505)+($x_0))|0);
      $addr18_0=$506;
      label = 2190;
      break;
     }
     case 147: {
      $_sum675=((($141)+(2))|0);
      $508=(($140+$_sum675)|0);
      $509=((HEAP8[($508)])|0);
      $510=($509&255);
      $addr18_0=$510;
      label = 2190;
      break;
     }
     case 163: {
      $_sum674=((($141)+(2))|0);
      $521=(($140+$_sum674)|0);
      $522=((HEAP8[($521)])|0);
      $523=($522&255);
      $524=((($523)+($x_0))|0);
      $525=$524&255;
      $526=(($this+$525)|0);
      $527=((HEAP8[($526)])|0);
      $528=($527&255);
      $s_time_5=$150;$pc_5=$146;$nz_5=$528;
      label = 2193;
      break;
     }
     case 131: {
      $_sum673=((($141)+(2))|0);
      $530=(($140+$_sum673)|0);
      $531=((HEAP8[($530)])|0);
      $532=($531&255);
      $533=(($this+$532)|0);
      $534=((HEAP8[($533)])|0);
      $535=($534&255);
      $s_time_5=$150;$pc_5=$146;$nz_5=$535;
      label = 2193;
      break;
     }
     case 12:case 28: {
      $546=((__Z8get_le16PKv($143))|0);
      $547=((($pc_1)+(2))|0);
      $pc_6=$547;$addr19_0=$546;
      label = 2197;
      break;
     }
     case 4:case 20: {
      $549=$155|8192;
      $pc_6=$146;$addr19_0=$549;
      label = 2197;
      break;
     }
     case 7:case 23:case 39:case 55:case 71:case 87:case 103:case 119: {
      $563=((($pc_1)+(2))|0);
      $564=$145>>>4;
      $565=1<<$564;
      $566=$565^255;
      $567=(($this+$155)|0);
      $568=((HEAP8[($567)])|0);
      $569=($568&255);
      $570=$569&$566;
      $571=(($570)&255);
      HEAP8[($567)]=$571;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$563;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 135:case 151:case 167:case 183:case 199:case 215:case 231:case 247: {
      $573=((($pc_1)+(2))|0);
      $574=$145>>>4;
      $575=((($574)-(8))|0);
      $576=1<<$575;
      $577=(($this+$155)|0);
      $578=((HEAP8[($577)])|0);
      $579=($578&255);
      $580=$579|$576;
      $581=(($580)&255);
      HEAP8[($577)]=$581;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$573;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
      break;
     }
     case 158: {
      $583=((($155)+($x_0))|0);
      $data_9=$583;
      label = 2201;
      break;
     }
     case 156: {
      $data_9=$155;
      label = 2201;
      break;
     }
     case 100: {
      $data_10=$155;
      label = 2203;
      break;
     }
     case 148: {
      $599=((($155)+($x_0))|0);
      $600=$599&255;
      $data_11=$600;
      label = 2205;
      break;
     }
     case 132: {
      $data_11=$155;
      label = 2205;
      break;
     }
     case 150: {
      $606=((($155)+($y_0))|0);
      $607=$606&255;
      $data_12=$607;
      label = 2207;
      break;
     }
     case 134: {
      $data_12=$155;
      label = 2207;
      break;
     }
     case 182: {
      $613=((($155)+($y_0))|0);
      $614=$613&255;
      $data_13=$614;
      label = 2209;
      break;
     }
     case 166: {
      $data_13=$155;
      label = 2209;
      break;
     }
     case 162: {
      $data_14=$155;
      label = 2210;
      break;
     }
     case 180: {
      $622=((($155)+($x_0))|0);
      $623=$622&255;
      $data_15=$623;
      label = 2212;
      break;
     }
     case 164: {
      $data_15=$155;
      label = 2212;
      break;
     }
     case 160: {
      $data_16=$155;
      label = 2213;
      break;
     }
     case 188: {
      $631=((($155)+($x_0))|0);
      $data_17=$631;
      label = 2215;
      break;
     }
     case 172: {
      $data_17=$155;
      label = 2215;
      break;
     }
     case 140: {
      $temp21_0=$y_0;
      label = 2217;
      break;
     }
     case 236: {
      $647=((__Z8get_le16PKv($143))|0);
      $648=((($pc_1)+(2))|0);
      HEAP32[(($5)>>2)]=$150;
      $_738=($76?0:$78);
      $649=((__ZN7Hes_Emu8cpu_readEj($_738,$647))|0);
      $650=((HEAP32[(($5)>>2)])|0);
      $s_time_6=$650;$pc_7=$648;$data_18=$649;
      label = 2220;
      break;
     }
     case 228: {
      $652=(($this+$155)|0);
      $653=((HEAP8[($652)])|0);
      $654=($653&255);
      $s_time_6=$150;$pc_7=$146;$data_18=$654;
      label = 2220;
      break;
     }
     case 224: {
      $s_time_6=$150;$pc_7=$146;$data_18=$155;
      label = 2220;
      break;
     }
     case 204: {
      $661=((__Z8get_le16PKv($143))|0);
      $662=((($pc_1)+(2))|0);
      HEAP32[(($5)>>2)]=$150;
      $_739=($79?0:$81);
      $663=((__ZN7Hes_Emu8cpu_readEj($_739,$661))|0);
      $664=((HEAP32[(($5)>>2)])|0);
      $s_time_7=$664;$pc_8=$662;$data_19=$663;
      label = 2223;
      break;
     }
     case 196: {
      $666=(($this+$155)|0);
      $667=((HEAP8[($666)])|0);
      $668=($667&255);
      $s_time_7=$150;$pc_8=$146;$data_19=$668;
      label = 2223;
      break;
     }
     case 192: {
      $s_time_7=$150;$pc_8=$146;$data_19=$155;
      label = 2223;
      break;
     }
     case 193: {
      $675=((($155)+($x_0))|0);
      $676=$675&255;
      $data_20=$676;
      label = 2225;
      break;
     }
     case 210: {
      $data_20=$155;
      label = 2225;
      break;
     }
     case 209: {
      $688=(($this+$155)|0);
      $689=((HEAP8[($688)])|0);
      $690=($689&255);
      $691=((($690)+($y_0))|0);
      $692=((($154)+(1))&255);
      $693=($692&255);
      $694=(($this+$693)|0);
      $695=((HEAP8[($694)])|0);
      $696=($695&255);
      $697=$696<<8;
      $698=((($691)+($697))|0);
      HEAP32[(($5)>>2)]=$150;
      $data_23696=$698;$pc_9698=$146;
      label = 2233;
      break;
     }
     case 213: {
      $700=((($155)+($x_0))|0);
      $701=$700&255;
      $data_21=$701;
      label = 2228;
      break;
     }
     case 197: {
      $data_21=$155;
      label = 2228;
      break;
     }
     case 217: {
      $707=((($155)+($y_0))|0);
      $data_22=$707;
      label = 2231;
      break;
     }
     case 221: {
      $709=((($155)+($x_0))|0);
      $data_22=$709;
      label = 2231;
      break;
     }
     case 205: {
      $data_22=$155;
      label = 2231;
      break;
     }
     case 201: {
      $s_time_8=$150;$pc_10=$146;$data_24=$155;
      label = 2235;
      break;
     }
     case 33: {
      $729=((($155)+($x_0))|0);
      $730=$729&255;
      $data_25=$730;
      label = 2237;
      break;
     }
     case 50: {
      $data_25=$155;
      label = 2237;
      break;
     }
     case 49: {
      $742=(($this+$155)|0);
      $743=((HEAP8[($742)])|0);
      $744=($743&255);
      $745=((($744)+($y_0))|0);
      $746=((($154)+(1))&255);
      $747=($746&255);
      $748=(($this+$747)|0);
      $749=((HEAP8[($748)])|0);
      $750=($749&255);
      $751=$750<<8;
      $752=((($745)+($751))|0);
      HEAP32[(($5)>>2)]=$150;
      $data_28701=$752;$pc_11703=$146;
      label = 2245;
      break;
     }
     case 53: {
      $754=((($155)+($x_0))|0);
      $755=$754&255;
      $data_26=$755;
      label = 2240;
      break;
     }
     case 37: {
      $data_26=$155;
      label = 2240;
      break;
     }
     case 57: {
      $761=((($155)+($y_0))|0);
      $data_27=$761;
      label = 2243;
      break;
     }
     case 61: {
      $763=((($155)+($x_0))|0);
      $data_27=$763;
      label = 2243;
      break;
     }
     case 45: {
      $data_27=$155;
      label = 2243;
      break;
     }
     case 41: {
      $s_time_9=$150;$pc_12=$146;$data_29=$155;
      label = 2247;
      break;
     }
     case 65: {
      $781=((($155)+($x_0))|0);
      $782=$781&255;
      $data_30=$782;
      label = 2249;
      break;
     }
     case 82: {
      $data_30=$155;
      label = 2249;
      break;
     }
     case 81: {
      $794=(($this+$155)|0);
      $795=((HEAP8[($794)])|0);
      $796=($795&255);
      $797=((($796)+($y_0))|0);
      $798=((($154)+(1))&255);
      $799=($798&255);
      $800=(($this+$799)|0);
      $801=((HEAP8[($800)])|0);
      $802=($801&255);
      $803=$802<<8;
      $804=((($797)+($803))|0);
      HEAP32[(($5)>>2)]=$150;
      $data_33706=$804;$pc_13708=$146;
      label = 2257;
      break;
     }
     case 85: {
      $806=((($155)+($x_0))|0);
      $807=$806&255;
      $data_31=$807;
      label = 2252;
      break;
     }
     case 69: {
      $data_31=$155;
      label = 2252;
      break;
     }
     case 89: {
      $813=((($155)+($y_0))|0);
      $data_32=$813;
      label = 2255;
      break;
     }
     case 93: {
      $815=((($155)+($x_0))|0);
      $data_32=$815;
      label = 2255;
      break;
     }
     case 77: {
      $data_32=$155;
      label = 2255;
      break;
     }
     case 73: {
      $s_time_10=$150;$pc_14=$146;$data_34=$155;
      label = 2259;
      break;
     }
     case 1: {
      $833=((($155)+($x_0))|0);
      $834=$833&255;
      $data_35=$834;
      label = 2261;
      break;
     }
     case 18: {
      $data_35=$155;
      label = 2261;
      break;
     }
     case 17: {
      $846=(($this+$155)|0);
      $847=((HEAP8[($846)])|0);
      $848=($847&255);
      $849=((($848)+($y_0))|0);
      $850=((($154)+(1))&255);
      $851=($850&255);
      $852=(($this+$851)|0);
      $853=((HEAP8[($852)])|0);
      $854=($853&255);
      $855=$854<<8;
      $856=((($849)+($855))|0);
      HEAP32[(($5)>>2)]=$150;
      $data_38711=$856;$pc_15713=$146;
      label = 2269;
      break;
     }
     case 21: {
      $858=((($155)+($x_0))|0);
      $859=$858&255;
      $data_36=$859;
      label = 2264;
      break;
     }
     case 5: {
      $data_36=$155;
      label = 2264;
      break;
     }
     case 25: {
      $865=((($155)+($y_0))|0);
      $data_37=$865;
      label = 2267;
      break;
     }
     case 29: {
      $867=((($155)+($x_0))|0);
      $data_37=$867;
      label = 2267;
      break;
     }
     case 13: {
      $data_37=$155;
      label = 2267;
      break;
     }
     case 9: {
      $s_time_11=$150;$pc_16=$146;$data_39=$155;
      label = 2271;
      break;
     }
     case 225: {
      $885=((($155)+($x_0))|0);
      $886=$885&255;
      $data_40=$886;
      label = 2273;
      break;
     }
     case 242: {
      $data_40=$155;
      label = 2273;
      break;
     }
     case 241: {
      $898=(($this+$155)|0);
      $899=((HEAP8[($898)])|0);
      $900=($899&255);
      $901=((($900)+($y_0))|0);
      $902=((($154)+(1))&255);
      $903=($902&255);
      $904=(($this+$903)|0);
      $905=((HEAP8[($904)])|0);
      $906=($905&255);
      $907=$906<<8;
      $908=((($901)+($907))|0);
      HEAP32[(($5)>>2)]=$150;
      $data_43716=$908;$pc_17718=$146;
      label = 2281;
      break;
     }
     case 245: {
      $910=((($155)+($x_0))|0);
      $911=$910&255;
      $data_41=$911;
      label = 2276;
      break;
     }
     case 229: {
      $data_41=$155;
      label = 2276;
      break;
     }
     case 249: {
      $917=((($155)+($y_0))|0);
      $data_42=$917;
      label = 2279;
      break;
     }
     case 253: {
      $919=((($155)+($x_0))|0);
      $data_42=$919;
      label = 2279;
      break;
     }
     case 237: {
      $data_42=$155;
      label = 2279;
      break;
     }
     case 233: {
      $s_time_12=$150;$pc_18=$146;$data_44=$155;
      label = 2283;
      break;
     }
     case 97: {
      $936=((($155)+($x_0))|0);
      $937=$936&255;
      $data_45=$937;
      label = 2285;
      break;
     }
     case 114: {
      $data_45=$155;
      label = 2285;
      break;
     }
     case 113: {
      $949=(($this+$155)|0);
      $950=((HEAP8[($949)])|0);
      $951=($950&255);
      $952=((($951)+($y_0))|0);
      $953=((($154)+(1))&255);
      $954=($953&255);
      $955=(($this+$954)|0);
      $956=((HEAP8[($955)])|0);
      $957=($956&255);
      $958=$957<<8;
      $959=((($952)+($958))|0);
      HEAP32[(($5)>>2)]=$150;
      $data_48721=$959;$pc_19723=$146;
      label = 2293;
      break;
     }
     case 117: {
      $961=((($155)+($x_0))|0);
      $962=$961&255;
      $data_46=$962;
      label = 2288;
      break;
     }
     case 101: {
      $data_46=$155;
      label = 2288;
      break;
     }
     case 121: {
      $968=((($155)+($y_0))|0);
      $data_47=$968;
      label = 2291;
      break;
     }
     case 125: {
      $970=((($155)+($x_0))|0);
      $data_47=$970;
      label = 2291;
      break;
     }
     case 109: {
      $data_47=$155;
      label = 2291;
      break;
     }
     case 105: {
      $s_time_13=$150;$pc_20=$146;$data_49=$155;
      break;
     }
     case 74: {
      $c_1=0;
      label = 2297;
      break;
     }
     case 106: {
      $c_1=$c_0;
      label = 2297;
      break;
     }
     case 10: {
      $1007=$a_0<<1;
      $1008=$1007&254;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$1008;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$1007;$nz_0=$1007;
      continue L2435;
      break;
     }
     case 42: {
      $1010=$a_0<<1;
      $1011=$c_0>>>8;
      $1012=$1011&1;
      $1013=$1010|$1012;
      $1014=$1013&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$1014;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$1010;$nz_0=$1013;
      continue L2435;
      break;
     }
     case 94: {
      $1016=((($155)+($x_0))|0);
      $data_50=$1016;
      label = 2301;
      break;
     }
     case 78: {
      $data_50=$155;
      label = 2301;
      break;
     }
     case 110: {
      $c_2=$c_0;$data_51=$155;
      label = 2302;
      break;
     }
     case 62: {
      $1031=((($155)+($x_0))|0);
      $c_3=$c_0;$data_53=$1031;
      label = 2306;
      break;
     }
     case 30: {
      $1033=((($155)+($x_0))|0);
      $data_52=$1033;
      label = 2305;
      break;
     }
     case 14: {
      $data_52=$155;
      label = 2305;
      break;
     }
     case 46: {
      $c_3=$c_0;$data_53=$155;
      label = 2306;
      break;
     }
     case 126: {
      $1051=((($155)+($x_0))|0);
      $c_2=$c_0;$data_51=$1051;
      label = 2302;
      break;
     }
     case 118: {
      $1053=((($155)+($x_0))|0);
      $1054=$1053&255;
      $c_5=$c_0;$data_56=$1054;
      label = 2312;
      break;
     }
     case 86: {
      $1056=((($155)+($x_0))|0);
      $1057=$1056&255;
      $data_55=$1057;
      label = 2311;
      break;
     }
     case 70: {
      $data_55=$155;
      label = 2311;
      break;
     }
     case 102: {
      $c_5=$c_0;$data_56=$155;
      label = 2312;
      break;
     }
     case 54: {
      $1069=((($155)+($x_0))|0);
      $1070=$1069&255;
      $c_6=$c_0;$data_58=$1070;
      label = 2316;
      break;
     }
     case 22: {
      $1072=((($155)+($x_0))|0);
      $1073=$1072&255;
      $data_57=$1073;
      label = 2315;
      break;
     }
     case 6: {
      $data_57=$155;
      label = 2315;
      break;
     }
     case 38: {
      $c_6=$c_0;$data_58=$155;
      label = 2316;
      break;
     }
     case 26: {
      $1084=((($a_0)+(1))|0);
      $1085=$1084&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$1085;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1084;
      continue L2435;
      break;
     }
     case 232: {
      $1087=((($x_0)+(1))|0);
      $1088=$1087&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$1088;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1087;
      continue L2435;
      break;
     }
     case 200: {
      $1090=((($y_0)+(1))|0);
      $1091=$1090&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$1091;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1090;
      continue L2435;
      break;
     }
     case 58: {
      $1093=((($a_0)-(1))|0);
      $1094=$1093&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$1094;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1093;
      continue L2435;
      break;
     }
     case 202: {
      $1096=((($x_0)-(1))|0);
      $1097=$1096&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$1097;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1096;
      continue L2435;
      break;
     }
     case 136: {
      $1099=((($y_0)-(1))|0);
      $1100=$1099&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$1100;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1099;
      continue L2435;
      break;
     }
     case 246: {
      $1102=((($155)+($x_0))|0);
      $1103=$1102&255;
      $nz_8=1;$data_61=$1103;
      label = 2326;
      break;
     }
     case 214: {
      $1105=((($155)+($x_0))|0);
      $1106=$1105&255;
      $data_60=$1106;
      label = 2325;
      break;
     }
     default: {
      $illegal_encountered_0_off0=1;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     }
    } while(0);
    do {
     if ((label|0) == 2374) {
      label = 0;
      $1287=(($status_2)&255);
      HEAP8[($24)]=$1287;
      $1288=((HEAP32[(($118)>>2)])|0);
      $1289=((HEAP32[(($32)>>2)])|0);
      HEAP32[(($118)>>2)]=$1289;
      $1290=((($1288)+($150))|0);
      $1291=((($1290)-($1289))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1291;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_3;$status_0=$status_2;$c_0=$c_9;$nz_0=$nz_12;
      continue L2435;
     }
     else if ((label|0) == 2332) {
      label = 0;
      HEAP32[(($5)>>2)]=$150;
      if ($109) {
       $1128=((__ZN7Hes_Emu8cpu_readEj(0,$data_65))|0);
       $1132=0;$_pn=$1128;
      } else {
       $1130=((__ZN7Hes_Emu8cpu_readEj($111,$data_65))|0);
       $1132=$113;$_pn=$1130;
      }
      $1133=((($_pn)+($nz_10))|0);
      $1134=((($pc_1)+(3))|0);
      $1135=$1133&255;
      __ZN7Hes_Emu9cpu_writeEji($1132,$data_65,$1135);
      $1136=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1136;$pc_1=$1134;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$1133;
      continue L2435;
     }
     else if ((label|0) == 2385) {
      label = 0;
      $1319=$in_alt_0^1;
      $phitmp=($in_alt_0|0)==1;
      $out_inc_1=$in_alt_0;$out_alt_0=$phitmp;$in_inc_1=$1319;$in_alt_1=$in_alt_0;
      label = 2388;
     }
     else if ((label|0) == 2325) {
      label = 0;
      $nz_8=-1;$data_61=$data_60;
      label = 2326;
     }
     else if ((label|0) == 2368) {
      label = 0;
      $1270=(($status_1)&255);
      HEAP8[($24)]=$1270;
      $1271=((HEAP32[(($116)>>2)])|0);
      $1272=((HEAP32[(($117)>>2)])|0);
      $1273=((($1271)-($1272))|0);
      $1274=($1273|0)<1;
      if ($1274) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_2;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_11;
       continue L2435;
      }
      HEAP32[(($116)>>2)]=$1272;
      $1276=((($1273)+($150))|0);
      $1277=($1276|0)<0;
      if ($1277) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1276;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_2;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_11;
       continue L2435;
      }
      $1279=((($1276)+(1))|0);
      $1280=($1273|0)<($1279|0);
      if ($1280) {
       $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1276;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_2;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_11;
       continue L2435;
      }
      $1282=((($1279)+($1272))|0);
      HEAP32[(($116)>>2)]=$1282;
      HEAP32[(($117)>>2)]=$1282;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=-1;$pc_1=$146;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_2;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_11;
      continue L2435;
     }
     else if ((label|0) == 2142) {
      label = 0;
      $221=(($154<<24)>>24);
      $222=((($pc_1)+(2))|0);
      $223=((($222)+($221))|0);
      $224=$223&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$224;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2144) {
      label = 0;
      $228=(($this+$155)|0);
      $229=((HEAP8[($228)])|0);
      $230=($229&255);
      $231=((($230)*(257))&-1);
      $232=$231^255;
      $233=((($pc_1)+(3))|0);
      $234=$145>>>4;
      $235=1<<$234;
      $236=$232&$235;
      $237=($236|0)==0;
      if ($237) {
       $pc_0=$233;
       label = 2122;
       break;
      }
      $_sum689=((($141)+(2))|0);
      $239=(($140+$_sum689)|0);
      $240=((HEAP8[($239)])|0);
      $241=(($240<<24)>>24);
      $242=((($241)+($233))|0);
      $243=$242&65535;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$243;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2148) {
      label = 0;
      $_sum688=((($141)+(2))|0);
      $249=(($140+$_sum688)|0);
      $250=((HEAP8[($249)])|0);
      $251=($250&255);
      $252=$251<<8;
      $253=((($252)+($data_0))|0);
      $254=$253&8191;
      $255=$253>>>13;
      $256=(($s+($255<<2))|0);
      $257=((HEAP32[(($256)>>2)])|0);
      $258=(($257+$254)|0);
      $259=((__Z8get_le16PKv($258))|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$259;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2159) {
      label = 0;
      $334=((($pc_1)+(2))|0);
      $335=(($a_0)&255);
      $336=(($this+$data_1)|0);
      HEAP8[($336)]=$335;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$334;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2165) {
      label = 0;
      $375=((($data_2)+(1))|0);
      $376=$375&255;
      $377=(($this+$376)|0);
      $378=((HEAP8[($377)])|0);
      $379=($378&255);
      $380=$379<<8;
      $381=(($this+$data_2)|0);
      $382=((HEAP8[($381)])|0);
      $383=($382&255);
      $384=$380|$383;
      $385=((($pc_1)+(2))|0);
      $pc_2=$385;$addr13_0=$384;
      label = 2168;
     }
     else if ((label|0) == 2167) {
      label = 0;
      $_sum680=((($141)+(2))|0);
      $389=(($140+$_sum680)|0);
      $390=((HEAP8[($389)])|0);
      $391=($390&255);
      $392=$391<<8;
      $393=((($392)+($data_3))|0);
      $394=((($pc_1)+(3))|0);
      $pc_2=$394;$addr13_0=$393;
      label = 2168;
     }
     else if ((label|0) == 2173) {
      label = 0;
      $413=((($data_4)+(1))|0);
      $414=$413&255;
      $415=(($this+$414)|0);
      $416=((HEAP8[($415)])|0);
      $417=($416&255);
      $418=$417<<8;
      $419=(($this+$data_4)|0);
      $420=((HEAP8[($419)])|0);
      $421=($420&255);
      $422=$418|$421;
      $423=((($pc_1)+(2))|0);
      $pc_3=$423;$addr15_0=$422;
      label = 2177;
     }
     else if ((label|0) == 2176) {
      label = 0;
      $_sum679=((($141)+(2))|0);
      $440=(($140+$_sum679)|0);
      $441=((HEAP8[($440)])|0);
      $442=($441&255);
      $443=$442<<8;
      $444=((($443)+($data_5))|0);
      $445=((($pc_1)+(3))|0);
      $pc_3=$445;$addr15_0=$444;
      label = 2177;
     }
     else if ((label|0) == 2183) {
      label = 0;
      $478=((($pc_1)+(2))|0);
      $_sum678=((($141)+(2))|0);
      $479=(($140+$_sum678)|0);
      $480=((HEAP8[($479)])|0);
      $481=($480&255);
      $482=$481<<8;
      $483=((($482)+($data_6))|0);
      HEAP32[(($5)>>2)]=$150;
      $_732=($56?0:$58);
      $484=((__ZN7Hes_Emu8cpu_readEj($_732,$483))|0);
      $485=((HEAP32[(($5)>>2)])|0);
      $s_time_4=$485;$pc_4=$478;$nz_4=$484;
      label = 2186;
     }
     else if ((label|0) == 2185) {
      label = 0;
      $490=(($this+$data_7)|0);
      $491=((HEAP8[($490)])|0);
      $492=($491&255);
      $s_time_4=$150;$pc_4=$146;$nz_4=$492;
      label = 2186;
     }
     else if ((label|0) == 2190) {
      label = 0;
      $_sum676=((($141)+(3))|0);
      $512=(($140+$_sum676)|0);
      $513=((HEAP8[($512)])|0);
      $514=($513&255);
      $515=$514<<8;
      $516=((($515)+($addr18_0))|0);
      $517=((($pc_1)+(2))|0);
      HEAP32[(($5)>>2)]=$150;
      $_733=($59?0:$61);
      $518=((__ZN7Hes_Emu8cpu_readEj($_733,$516))|0);
      $519=((HEAP32[(($5)>>2)])|0);
      $s_time_5=$519;$pc_5=$517;$nz_5=$518;
      label = 2193;
     }
     else if ((label|0) == 2197) {
      label = 0;
      HEAP32[(($5)>>2)]=$150;
      $_734=($62?0:$66);
      $551=((__ZN7Hes_Emu8cpu_readEj($_734,$addr19_0))|0);
      $552=$551|$a_0;
      $553=$145&16;
      $554=($553|0)==0;
      $555=($554?0:$a_0);
      $nz_6=$552^$555;
      $556=$status_0&-65;
      $557=$nz_6&64;
      $558=$557|$556;
      $559=((($pc_6)+(1))|0);
      $560=($62?0:$64);
      __ZN7Hes_Emu9cpu_writeEji($560,$addr19_0,$nz_6);
      $561=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$561;$pc_1=$559;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$558;$c_0=$c_0;$nz_0=$nz_6;
      continue L2435;
     }
     else if ((label|0) == 2201) {
      label = 0;
      $_sum672=((($141)+(2))|0);
      $585=(($140+$_sum672)|0);
      $586=((HEAP8[($585)])|0);
      $587=($586&255);
      $588=$587<<8;
      $589=((($588)+($data_9))|0);
      $590=((($pc_1)+(3))|0);
      HEAP32[(($5)>>2)]=$150;
      $_735=($67?0:$69);
      __ZN7Hes_Emu9cpu_writeEji($_735,$589,0);
      $591=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$591;$pc_1=$590;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2203) {
      label = 0;
      $596=((($pc_1)+(2))|0);
      $597=(($this+$data_10)|0);
      HEAP8[($597)]=0;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$596;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2205) {
      label = 0;
      $602=((($pc_1)+(2))|0);
      $603=(($y_0)&255);
      $604=(($this+$data_11)|0);
      HEAP8[($604)]=$603;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$602;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2207) {
      label = 0;
      $609=((($pc_1)+(2))|0);
      $610=(($x_0)&255);
      $611=(($this+$data_12)|0);
      HEAP8[($611)]=$610;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$609;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2209) {
      label = 0;
      $616=(($this+$data_13)|0);
      $617=((HEAP8[($616)])|0);
      $618=($617&255);
      $data_14=$618;
      label = 2210;
     }
     else if ((label|0) == 2212) {
      label = 0;
      $625=(($this+$data_15)|0);
      $626=((HEAP8[($625)])|0);
      $627=($626&255);
      $data_16=$627;
      label = 2213;
     }
     else if ((label|0) == 2215) {
      label = 0;
      $_sum671=((($141)+(2))|0);
      $633=(($140+$_sum671)|0);
      $634=((HEAP8[($633)])|0);
      $635=($634&255);
      $636=$635<<8;
      $637=((($636)+($data_17))|0);
      $638=((($pc_1)+(3))|0);
      HEAP32[(($5)>>2)]=$150;
      $_736=($70?0:$72);
      $639=((__ZN7Hes_Emu8cpu_readEj($_736,$637))|0);
      $640=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$640;$pc_1=$638;$a_0=$a_0;$x_0=$x_0;$y_0=$639;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$639;
      continue L2435;
     }
     else if ((label|0) == 2217) {
      label = 0;
      $643=((__Z8get_le16PKv($143))|0);
      $644=((($pc_1)+(3))|0);
      HEAP32[(($5)>>2)]=$150;
      $_737=($73?0:$75);
      __ZN7Hes_Emu9cpu_writeEji($_737,$643,$temp21_0);
      $645=((HEAP32[(($5)>>2)])|0);
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$645;$pc_1=$644;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     else if ((label|0) == 2220) {
      label = 0;
      $656=((($x_0)-($data_18))|0);
      $657=((($pc_7)+(1))|0);
      $658=$656^-1;
      $659=$656&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_6;$pc_1=$657;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$658;$nz_0=$659;
      continue L2435;
     }
     else if ((label|0) == 2223) {
      label = 0;
      $670=((($y_0)-($data_19))|0);
      $671=((($pc_8)+(1))|0);
      $672=$670^-1;
      $673=$670&255;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_7;$pc_1=$671;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$672;$nz_0=$673;
      continue L2435;
     }
     else if ((label|0) == 2225) {
      label = 0;
      $678=((($data_20)+(1))|0);
      $679=$678&255;
      $680=(($this+$679)|0);
      $681=((HEAP8[($680)])|0);
      $682=($681&255);
      $683=$682<<8;
      $684=(($this+$data_20)|0);
      $685=((HEAP8[($684)])|0);
      $686=($685&255);
      $687=$683|$686;
      $pc_9=$146;$data_23=$687;
      label = 2232;
     }
     else if ((label|0) == 2228) {
      label = 0;
      $703=(($this+$data_21)|0);
      $704=((HEAP8[($703)])|0);
      $705=($704&255);
      $s_time_8=$150;$pc_10=$146;$data_24=$705;
      label = 2235;
     }
     else if ((label|0) == 2231) {
      label = 0;
      $711=((($pc_1)+(2))|0);
      $_sum670=((($141)+(2))|0);
      $712=(($140+$_sum670)|0);
      $713=((HEAP8[($712)])|0);
      $714=($713&255);
      $715=$714<<8;
      $716=((($715)+($data_22))|0);
      $pc_9=$711;$data_23=$716;
      label = 2232;
     }
     else if ((label|0) == 2237) {
      label = 0;
      $732=((($data_25)+(1))|0);
      $733=$732&255;
      $734=(($this+$733)|0);
      $735=((HEAP8[($734)])|0);
      $736=($735&255);
      $737=$736<<8;
      $738=(($this+$data_25)|0);
      $739=((HEAP8[($738)])|0);
      $740=($739&255);
      $741=$737|$740;
      $pc_11=$146;$data_28=$741;
      label = 2244;
     }
     else if ((label|0) == 2240) {
      label = 0;
      $757=(($this+$data_26)|0);
      $758=((HEAP8[($757)])|0);
      $759=($758&255);
      $s_time_9=$150;$pc_12=$146;$data_29=$759;
      label = 2247;
     }
     else if ((label|0) == 2243) {
      label = 0;
      $765=((($pc_1)+(2))|0);
      $_sum669=((($141)+(2))|0);
      $766=(($140+$_sum669)|0);
      $767=((HEAP8[($766)])|0);
      $768=($767&255);
      $769=$768<<8;
      $770=((($769)+($data_27))|0);
      $pc_11=$765;$data_28=$770;
      label = 2244;
     }
     else if ((label|0) == 2249) {
      label = 0;
      $784=((($data_30)+(1))|0);
      $785=$784&255;
      $786=(($this+$785)|0);
      $787=((HEAP8[($786)])|0);
      $788=($787&255);
      $789=$788<<8;
      $790=(($this+$data_30)|0);
      $791=((HEAP8[($790)])|0);
      $792=($791&255);
      $793=$789|$792;
      $pc_13=$146;$data_33=$793;
      label = 2256;
     }
     else if ((label|0) == 2252) {
      label = 0;
      $809=(($this+$data_31)|0);
      $810=((HEAP8[($809)])|0);
      $811=($810&255);
      $s_time_10=$150;$pc_14=$146;$data_34=$811;
      label = 2259;
     }
     else if ((label|0) == 2255) {
      label = 0;
      $817=((($pc_1)+(2))|0);
      $_sum668=((($141)+(2))|0);
      $818=(($140+$_sum668)|0);
      $819=((HEAP8[($818)])|0);
      $820=($819&255);
      $821=$820<<8;
      $822=((($821)+($data_32))|0);
      $pc_13=$817;$data_33=$822;
      label = 2256;
     }
     else if ((label|0) == 2261) {
      label = 0;
      $836=((($data_35)+(1))|0);
      $837=$836&255;
      $838=(($this+$837)|0);
      $839=((HEAP8[($838)])|0);
      $840=($839&255);
      $841=$840<<8;
      $842=(($this+$data_35)|0);
      $843=((HEAP8[($842)])|0);
      $844=($843&255);
      $845=$841|$844;
      $pc_15=$146;$data_38=$845;
      label = 2268;
     }
     else if ((label|0) == 2264) {
      label = 0;
      $861=(($this+$data_36)|0);
      $862=((HEAP8[($861)])|0);
      $863=($862&255);
      $s_time_11=$150;$pc_16=$146;$data_39=$863;
      label = 2271;
     }
     else if ((label|0) == 2267) {
      label = 0;
      $869=((($pc_1)+(2))|0);
      $_sum667=((($141)+(2))|0);
      $870=(($140+$_sum667)|0);
      $871=((HEAP8[($870)])|0);
      $872=($871&255);
      $873=$872<<8;
      $874=((($873)+($data_37))|0);
      $pc_15=$869;$data_38=$874;
      label = 2268;
     }
     else if ((label|0) == 2273) {
      label = 0;
      $888=((($data_40)+(1))|0);
      $889=$888&255;
      $890=(($this+$889)|0);
      $891=((HEAP8[($890)])|0);
      $892=($891&255);
      $893=$892<<8;
      $894=(($this+$data_40)|0);
      $895=((HEAP8[($894)])|0);
      $896=($895&255);
      $897=$893|$896;
      $pc_17=$146;$data_43=$897;
      label = 2280;
     }
     else if ((label|0) == 2276) {
      label = 0;
      $913=(($this+$data_41)|0);
      $914=((HEAP8[($913)])|0);
      $915=($914&255);
      $s_time_12=$150;$pc_18=$146;$data_44=$915;
      label = 2283;
     }
     else if ((label|0) == 2279) {
      label = 0;
      $921=((($pc_1)+(2))|0);
      $_sum666=((($141)+(2))|0);
      $922=(($140+$_sum666)|0);
      $923=((HEAP8[($922)])|0);
      $924=($923&255);
      $925=$924<<8;
      $926=((($925)+($data_42))|0);
      $pc_17=$921;$data_43=$926;
      label = 2280;
     }
     else if ((label|0) == 2285) {
      label = 0;
      $939=((($data_45)+(1))|0);
      $940=$939&255;
      $941=(($this+$940)|0);
      $942=((HEAP8[($941)])|0);
      $943=($942&255);
      $944=$943<<8;
      $945=(($this+$data_45)|0);
      $946=((HEAP8[($945)])|0);
      $947=($946&255);
      $948=$944|$947;
      $pc_19=$146;$data_48=$948;
      label = 2292;
     }
     else if ((label|0) == 2288) {
      label = 0;
      $964=(($this+$data_46)|0);
      $965=((HEAP8[($964)])|0);
      $966=($965&255);
      $s_time_13=$150;$pc_20=$146;$data_49=$966;
     }
     else if ((label|0) == 2291) {
      label = 0;
      $972=((($pc_1)+(2))|0);
      $_sum665=((($141)+(2))|0);
      $973=(($140+$_sum665)|0);
      $974=((HEAP8[($973)])|0);
      $975=($974&255);
      $976=$975<<8;
      $977=((($976)+($data_47))|0);
      $pc_19=$972;$data_48=$977;
      label = 2292;
     }
     else if ((label|0) == 2297) {
      label = 0;
      $1001=$c_1>>>1;
      $1002=$1001&128;
      $1003=$a_0<<8;
      $1004=$a_0>>>1;
      $1005=$1002|$1004;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$146;$a_0=$1005;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$1003;$nz_0=$1005;
      continue L2435;
     }
     else if ((label|0) == 2301) {
      label = 0;
      $c_2=0;$data_51=$data_50;
      label = 2302;
     }
     else if ((label|0) == 2305) {
      label = 0;
      $c_3=0;$data_53=$data_52;
      label = 2306;
     }
     else if ((label|0) == 2311) {
      label = 0;
      $c_5=0;$data_56=$data_55;
      label = 2312;
     }
     else if ((label|0) == 2315) {
      label = 0;
      $c_6=0;$data_58=$data_57;
      label = 2316;
     }
    } while(0);
    if ((label|0) == 2122) {
     label = 0;
     $134=((($150)-(2))|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$134;$pc_1=$pc_0;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L2435;
    }
    else if ((label|0) == 2326) {
     label = 0;
     $1109=(($this+$data_61)|0);
     $1110=((HEAP8[($1109)])|0);
     $1111=($1110&255);
     $1112=((($1111)+($nz_8))|0);
     $c_7=$c_0;$nz_9=$1112;$data_62=$data_61;
     label = 2327;
    }
    else if ((label|0) == 2388) {
     label = 0;
     $1323=((__Z8get_le16PKv($143))|0);
     $_sum661=((($141)+(3))|0);
     $1324=(($140+$_sum661)|0);
     $1325=((__Z8get_le16PKv($1324))|0);
     $_sum662=((($141)+(5))|0);
     $1326=(($140+$_sum662)|0);
     $1327=((__Z8get_le16PKv($1326))|0);
     $1328=($1327|0)==0;
     $_695=($1328?65536:$1327);
     $1329=(($y_0)&255);
     $1330=((($sp_0)-(1))|0);
     $1331=$1330|256;
     $1332=(($this+$1331)|0);
     HEAP8[($1332)]=$1329;
     $1333=(($a_0)&255);
     $1334=((($sp_0)-(2))|0);
     $1335=$1334|256;
     $1336=(($this+$1335)|0);
     HEAP8[($1336)]=$1333;
     $1337=(($x_0)&255);
     $1338=((($sp_0)-(3))|0);
     $1339=$1338|256;
     $1340=(($this+$1339)|0);
     HEAP8[($1340)]=$1337;
     HEAP32[(($5)>>2)]=$150;
     $1341=($in_alt_1|0)==0;
     $count_1=$_695;$out44_0=$1325;$in43_0=$1323;$out_inc_2=$out_inc_1;$in_inc_2=$in_inc_1;
     while(1) {
      $_744=($123?0:$127);
      $1343=((__ZN7Hes_Emu8cpu_readEj($_744,$in43_0))|0);
      $1344=((($in43_0)+($in_inc_2))|0);
      $1345=$1344&65535;
      $1346=((HEAP32[(($5)>>2)])|0);
      $1347=((($1346)+(6))|0);
      HEAP32[(($5)>>2)]=$1347;
      $1348=(((-$in_inc_2))|0);
      $in_inc_2_=($1341?$in_inc_2:$1348);
      $1349=($123?0:$125);
      __ZN7Hes_Emu9cpu_writeEji($1349,$out44_0,$1343);
      $1350=((($out44_0)+($out_inc_2))|0);
      $1351=$1350&65535;
      $1352=(((-$out_inc_2))|0);
      $out_inc_2_=($out_alt_0?$out_inc_2:$1352);
      $1353=((($count_1)-(1))|0);
      $1354=($1353|0)==0;
      if ($1354) {
       break;
      } else {
       $count_1=$1353;$out44_0=$1351;$in43_0=$1345;$out_inc_2=$out_inc_2_;$in_inc_2=$in_inc_2_;
      }
     }
     $1356=((($pc_1)+(7))|0);
     $1357=((HEAP32[(($5)>>2)])|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1357;$pc_1=$1356;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L2435;
    }
    else if ((label|0) == 2168) {
     label = 0;
     $396=$addr13_0>>>13;
     $397=(($47+($396<<2))|0);
     $398=((HEAP32[(($397)>>2)])|0);
     $399=$addr13_0&8191;
     $400=($398|0)==0;
     if (!($400)) {
      $402=(($a_0)&255);
      $403=(($398+$399)|0);
      HEAP8[($403)]=$402;
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$pc_2;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     $405=((HEAP8[($48)])|0);
     $406=(($405<<24)>>24)==-1;
     if (!($406)) {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$pc_2;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
      continue L2435;
     }
     HEAP32[(($5)>>2)]=$150;
     __ZN7Hes_Emu10cpu_write_Eji($_692,$399,$a_0);
     $408=((HEAP32[(($5)>>2)])|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$408;$pc_1=$pc_2;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L2435;
    }
    else if ((label|0) == 2177) {
     label = 0;
     $447=$addr15_0&8191;
     $448=$addr15_0>>>13;
     $449=(($s+($448<<2))|0);
     $450=((HEAP32[(($449)>>2)])|0);
     $451=(($450+$447)|0);
     $452=((HEAP8[($451)])|0);
     $453=($452&255);
     $454=(($this+8200+$448)|0);
     $455=((HEAP8[($454)])|0);
     $456=(($455<<24)>>24)==-1;
     if (!($456)) {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$pc_3;$a_0=$453;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$453;
      continue L2435;
     }
     HEAP32[(($5)>>2)]=$150;
     $_730=($50?0:$52);
     $458=((__ZN7Hes_Emu9cpu_read_Ej($_730,$addr15_0))|0);
     $459=((HEAP32[(($5)>>2)])|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$459;$pc_1=$pc_3;$a_0=$458;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$458;
     continue L2435;
    }
    else if ((label|0) == 2186) {
     label = 0;
     $494=((($pc_4)+(1))|0);
     $495=$status_0&-65;
     $496=$nz_4&64;
     $497=$496|$495;
     $498=$nz_4&$a_0;
     $499=($498|0)==0;
     if (!($499)) {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_4;$pc_1=$494;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$497;$c_0=$c_0;$nz_0=$nz_4;
      continue L2435;
     }
     $501=$nz_4<<8;
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_4;$pc_1=$494;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$497;$c_0=$c_0;$nz_0=$501;
     continue L2435;
    }
    else if ((label|0) == 2193) {
     label = 0;
     $537=((($pc_5)+(2))|0);
     $538=$status_0&-65;
     $539=$nz_5&64;
     $540=$539|$538;
     $541=$nz_5&$155;
     $542=($541|0)==0;
     if (!($542)) {
      $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_5;$pc_1=$537;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$540;$c_0=$c_0;$nz_0=$nz_5;
      continue L2435;
     }
     $544=$nz_5<<8;
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_5;$pc_1=$537;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$540;$c_0=$c_0;$nz_0=$544;
     continue L2435;
    }
    else if ((label|0) == 2210) {
     label = 0;
     $620=((($pc_1)+(2))|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$620;$a_0=$a_0;$x_0=$data_14;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$data_14;
     continue L2435;
    }
    else if ((label|0) == 2213) {
     label = 0;
     $629=((($pc_1)+(2))|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$629;$a_0=$a_0;$x_0=$x_0;$y_0=$data_16;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$data_16;
     continue L2435;
    }
    else if ((label|0) == 2232) {
     label = 0;
     HEAP32[(($5)>>2)]=$150;
     if ($82) {
      $720=0;$data_23697=$data_23;$pc_9699=$pc_9;
      label = 2234;
     } else {
      $data_23696=$data_23;$pc_9698=$pc_9;
      label = 2233;
     }
    }
    else if ((label|0) == 2244) {
     label = 0;
     HEAP32[(($5)>>2)]=$150;
     if ($85) {
      $774=0;$data_28702=$data_28;$pc_11704=$pc_11;
      label = 2246;
     } else {
      $data_28701=$data_28;$pc_11703=$pc_11;
      label = 2245;
     }
    }
    else if ((label|0) == 2256) {
     label = 0;
     HEAP32[(($5)>>2)]=$150;
     if ($88) {
      $826=0;$data_33707=$data_33;$pc_13709=$pc_13;
      label = 2258;
     } else {
      $data_33706=$data_33;$pc_13708=$pc_13;
      label = 2257;
     }
    }
    else if ((label|0) == 2268) {
     label = 0;
     HEAP32[(($5)>>2)]=$150;
     if ($91) {
      $878=0;$data_38712=$data_38;$pc_15714=$pc_15;
      label = 2270;
     } else {
      $data_38711=$data_38;$pc_15713=$pc_15;
      label = 2269;
     }
    }
    else if ((label|0) == 2280) {
     label = 0;
     HEAP32[(($5)>>2)]=$150;
     if ($94) {
      $930=0;$data_43717=$data_43;$pc_17719=$pc_17;
      label = 2282;
     } else {
      $data_43716=$data_43;$pc_17718=$pc_17;
      label = 2281;
     }
    }
    else if ((label|0) == 2292) {
     label = 0;
     HEAP32[(($5)>>2)]=$150;
     if ($97) {
      $981=0;$data_48722=$data_48;$pc_19724=$pc_19;
      label = 2294;
     } else {
      $data_48721=$data_48;$pc_19723=$pc_19;
      label = 2293;
     }
    }
    else if ((label|0) == 2302) {
     label = 0;
     $_sum663=((($141)+(2))|0);
     $1019=(($140+$_sum663)|0);
     $1020=((HEAP8[($1019)])|0);
     $1021=($1020&255);
     $1022=$1021<<8;
     $1023=((($1022)+($data_51))|0);
     HEAP32[(($5)>>2)]=$150;
     $_740=($100?0:$102);
     $1024=((__ZN7Hes_Emu8cpu_readEj($_740,$1023))|0);
     $1025=$c_2>>>1;
     $1026=$1025&128;
     $1027=$1024>>1;
     $1028=$1027|$1026;
     $1029=$1024<<8;
     $c_4=$1029;$nz_7=$1028;$data_54=$1023;
     label = 2307;
    }
    else if ((label|0) == 2306) {
     label = 0;
     $_sum664=((($141)+(2))|0);
     $1036=(($140+$_sum664)|0);
     $1037=((HEAP8[($1036)])|0);
     $1038=($1037&255);
     $1039=$1038<<8;
     $1040=((($1039)+($data_53))|0);
     $1041=$c_3>>>8;
     $1042=$1041&1;
     HEAP32[(($5)>>2)]=$150;
     $_741=($106?0:$108);
     $1043=((__ZN7Hes_Emu8cpu_readEj($_741,$1040))|0);
     $1044=$1043<<1;
     $1045=$1044|$1042;
     $c_4=$1044;$nz_7=$1045;$data_54=$1040;
     label = 2307;
    }
    else if ((label|0) == 2312) {
     label = 0;
     $1060=(($this+$data_56)|0);
     $1061=((HEAP8[($1060)])|0);
     $1062=($1061&255);
     $1063=$c_5>>>1;
     $1064=$1063&128;
     $1065=$1062>>>1;
     $1066=$1065|$1064;
     $1067=$1062<<8;
     $c_7=$1067;$nz_9=$1066;$data_62=$data_56;
     label = 2327;
    }
    else if ((label|0) == 2316) {
     label = 0;
     $1076=$c_6>>>8;
     $1077=$1076&1;
     $1078=(($this+$data_58)|0);
     $1079=((HEAP8[($1078)])|0);
     $1080=($1079&255);
     $1081=$1080<<1;
     $1082=$1081|$1077;
     $c_7=$1081;$nz_9=$1082;$data_62=$data_58;
     label = 2327;
    }
    if ((label|0) == 2307) {
     label = 0;
     $1047=((($pc_1)+(3))|0);
     $_742=($103?0:$105);
     $1048=$nz_7&255;
     __ZN7Hes_Emu9cpu_writeEji($_742,$data_54,$1048);
     $1049=((HEAP32[(($5)>>2)])|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1049;$pc_1=$1047;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_4;$nz_0=$nz_7;
     continue L2435;
    }
    else if ((label|0) == 2327) {
     label = 0;
     $1114=((($pc_1)+(2))|0);
     $1115=(($nz_9)&255);
     $1116=(($this+$data_62)|0);
     HEAP8[($1116)]=$1115;
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$150;$pc_1=$1114;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_7;$nz_0=$nz_9;
     continue L2435;
    }
    else if ((label|0) == 2233) {
     label = 0;
     $720=$84;$data_23697=$data_23696;$pc_9699=$pc_9698;
     label = 2234;
    }
    else if ((label|0) == 2245) {
     label = 0;
     $774=$87;$data_28702=$data_28701;$pc_11704=$pc_11703;
     label = 2246;
    }
    else if ((label|0) == 2257) {
     label = 0;
     $826=$90;$data_33707=$data_33706;$pc_13709=$pc_13708;
     label = 2258;
    }
    else if ((label|0) == 2269) {
     label = 0;
     $878=$93;$data_38712=$data_38711;$pc_15714=$pc_15713;
     label = 2270;
    }
    else if ((label|0) == 2281) {
     label = 0;
     $930=$96;$data_43717=$data_43716;$pc_17719=$pc_17718;
     label = 2282;
    }
    else if ((label|0) == 2293) {
     label = 0;
     $981=$99;$data_48722=$data_48721;$pc_19724=$pc_19723;
     label = 2294;
    }
    if ((label|0) == 2234) {
     label = 0;
     $721=((__ZN7Hes_Emu8cpu_readEj($720,$data_23697))|0);
     $722=((HEAP32[(($5)>>2)])|0);
     $s_time_8=$722;$pc_10=$pc_9699;$data_24=$721;
     label = 2235;
    }
    else if ((label|0) == 2246) {
     label = 0;
     $775=((__ZN7Hes_Emu8cpu_readEj($774,$data_28702))|0);
     $776=((HEAP32[(($5)>>2)])|0);
     $s_time_9=$776;$pc_12=$pc_11704;$data_29=$775;
     label = 2247;
    }
    else if ((label|0) == 2258) {
     label = 0;
     $827=((__ZN7Hes_Emu8cpu_readEj($826,$data_33707))|0);
     $828=((HEAP32[(($5)>>2)])|0);
     $s_time_10=$828;$pc_14=$pc_13709;$data_34=$827;
     label = 2259;
    }
    else if ((label|0) == 2270) {
     label = 0;
     $879=((__ZN7Hes_Emu8cpu_readEj($878,$data_38712))|0);
     $880=((HEAP32[(($5)>>2)])|0);
     $s_time_11=$880;$pc_16=$pc_15714;$data_39=$879;
     label = 2271;
    }
    else if ((label|0) == 2282) {
     label = 0;
     $931=((__ZN7Hes_Emu8cpu_readEj($930,$data_43717))|0);
     $932=((HEAP32[(($5)>>2)])|0);
     $s_time_12=$932;$pc_18=$pc_17719;$data_44=$931;
     label = 2283;
    }
    else if ((label|0) == 2294) {
     label = 0;
     $982=((__ZN7Hes_Emu8cpu_readEj($981,$data_48722))|0);
     $983=((HEAP32[(($5)>>2)])|0);
     $s_time_13=$983;$pc_20=$pc_19724;$data_49=$982;
    }
    if ((label|0) == 2235) {
     label = 0;
     $724=((($a_0)-($data_24))|0);
     $725=((($pc_10)+(1))|0);
     $726=$724^-1;
     $727=$724&255;
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_8;$pc_1=$725;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$726;$nz_0=$727;
     continue L2435;
    }
    else if ((label|0) == 2247) {
     label = 0;
     $778=$data_29&$a_0;
     $779=((($pc_12)+(1))|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_9;$pc_1=$779;$a_0=$778;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$778;
     continue L2435;
    }
    else if ((label|0) == 2259) {
     label = 0;
     $830=$data_34^$a_0;
     $831=((($pc_14)+(1))|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_10;$pc_1=$831;$a_0=$830;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$830;
     continue L2435;
    }
    else if ((label|0) == 2271) {
     label = 0;
     $882=$data_39|$a_0;
     $883=((($pc_16)+(1))|0);
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_11;$pc_1=$883;$a_0=$882;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$882;
     continue L2435;
    }
    else if ((label|0) == 2283) {
     label = 0;
     $934=$data_44^255;
     $s_time_13=$s_time_12;$pc_20=$pc_18;$data_49=$934;
    }
    $985=$c_0>>>8;
    $986=$985&1;
    $987=$a_0^128;
    $988=((($987)+($986))|0);
    $sext=$data_49<<24;
    $989=$sext>>24;
    $990=((($988)+($989))|0);
    $991=$status_0&-65;
    $992=$990>>>2;
    $993=$992&64;
    $994=$993|$991;
    $995=((($a_0)+($986))|0);
    $996=((($995)+($data_49))|0);
    $997=((($pc_20)+(1))|0);
    $998=$996&255;
    $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$s_time_13;$pc_1=$997;$a_0=$998;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$994;$c_0=$996;$nz_0=$996;
    continue L2435;
   } else {
    $s_time_15=$s_time_0;
    label = 2396;
   }
  } while(0);
  do {
   if ((label|0) == 2396) {
    label = 0;
    HEAP32[(($5)>>2)]=$s_time_15;
    $_745=($128?0:$130);
    $1398=((__ZN7Hes_Emu8cpu_doneEv($_745))|0);
    $1399=((HEAP32[(($5)>>2)])|0);
    $1400=($1398|0)>0;
    $extract_t681=(($pc_1)&255);
    $extract683=$pc_1>>>8;
    $extract_t684=(($extract683)&255);
    if ($1400) {
     $result__0=$1398;$s_time_14=$1399;$pc_22_off8=$extract_t684;$pc_22_off0=$extract_t681;
     break;
    }
    $1402=($1399|0)<0;
    if ($1402) {
     $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1399;$pc_1=$pc_1;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L2435;
    } else {
     break L2435;
    }
   }
  } while(0);
  $1362=((($sp_0)-(1))|0);
  $1363=$1362|256;
  $1364=(($this+$1363)|0);
  HEAP8[($1364)]=$pc_22_off8;
  $1365=((($sp_0)-(2))|0);
  $1366=$1365|256;
  $1367=(($this+$1366)|0);
  HEAP8[($1367)]=$pc_22_off0;
  $1368=((HEAP32[(($131)>>2)])|0);
  $_sum685=((($result__0)+(8176))|0);
  $1369=(($1368+$_sum685)|0);
  $1370=((__Z8get_le16PKv($1369))|0);
  $1371=((($sp_0)-(3))|0);
  $1372=$1371|256;
  $1373=$status_0&76;
  $1374=$nz_0>>>8;
  $1375=$1374|$nz_0;
  $1376=$1375&128;
  $1377=$1373|$1376;
  $1378=$c_0>>>8;
  $1379=$1378&1;
  $1380=$1377|$1379;
  $1381=$nz_0&255;
  $1382=($1381|0)==0;
  $1383=$1380|2;
  $temp46_0=($1382?$1383:$1380);
  $1384=($result__0|0)==6;
  $extract_t687=(($temp46_0)&255);
  if ($1384) {
   $1386=$temp46_0|16;
   $extract_t686=(($1386)&255);
   $temp46_1_off0=$extract_t686;
  } else {
   $temp46_1_off0=$extract_t687;
  }
  $1388=(($this+$1372)|0);
  HEAP8[($1388)]=$temp46_1_off0;
  $1389=$status_0&-13;
  $1390=$1389|4;
  $1391=(($1390)&255);
  HEAP8[($24)]=$1391;
  $1392=((HEAP32[(($132)>>2)])|0);
  $1393=((HEAP32[(($32)>>2)])|0);
  HEAP32[(($132)>>2)]=$1393;
  $1394=((($s_time_14)+(7))|0);
  $1395=((($1394)+($1392))|0);
  $1396=((($1395)-($1393))|0);
  $illegal_encountered_0_off0=$illegal_encountered_0_off0;$s_time_0=$1396;$pc_1=$1370;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1372;$status_0=$1390;$c_0=$c_0;$nz_0=$nz_0;
 }
 HEAP32[(($5)>>2)]=$1399;
 $1404=(($pc_1)&65535);
 HEAP16[(($7)>>1)]=$1404;
 $1405=((($sp_0)+(255))|0);
 $1406=(($1405)&255);
 HEAP8[($19)]=$1406;
 $1407=(($a_0)&255);
 HEAP8[($10)]=$1407;
 $1408=(($x_0)&255);
 HEAP8[($13)]=$1408;
 $1409=(($y_0)&255);
 HEAP8[($16)]=$1409;
 $1410=$status_0&76;
 $1411=$nz_0>>>8;
 $1412=$1411|$nz_0;
 $1413=$1412&128;
 $1414=$1410|$1413;
 $1415=$c_0>>>8;
 $1416=$1415&1;
 $1417=$1414|$1416;
 $1418=$nz_0&255;
 $1419=($1418|0)==0;
 $extract_t690=(($1417)&255);
 if (!($1419)) {
  $temp48_0_off0=$extract_t690;
  HEAP8[($24)]=$temp48_0_off0;
  (_memcpy((($3)|0), (($2)|0), 44)|0);
  HEAP32[(($4)>>2)]=$1;
  STACKTOP=sp;return (($illegal_encountered_0_off0)|0);
 }
 $1421=$1417|2;
 $extract_t691=(($1421)&255);
 $temp48_0_off0=$extract_t691;
 HEAP8[($24)]=$temp48_0_off0;
 (_memcpy((($3)|0), (($2)|0), 44)|0);
 HEAP32[(($4)>>2)]=$1;
 STACKTOP=sp;return (($illegal_encountered_0_off0)|0);
}
function __ZN7Hes_Cpu12set_end_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+8264)|0);
 HEAP32[(($1)>>2)]=$t;
 $2=(($this+8260)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((__ZN7Hes_Cpu15update_end_timeEii($this,$t,$3))|0);
 $5=(($this+8212)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)+($4))|0);
 HEAP32[(($7)>>2)]=$9;
 return;
}
function __ZN7Hes_Cpu15update_end_timeEii($this,$t,$irq){
 $this=($this)|0;
 $t=($t)|0;
 $irq=($irq)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$irq_t=0,$_0=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=($irq|0)<($t|0);
 if ($1) {
  $3=(($this+8197)|0);
  $4=((HEAP8[($3)])|0);
  $5=$4&4;
  $6=(($5<<24)>>24)==0;
  $irq_t=($6?$irq:$t);
  $_0=$irq_t;
 } else {
  $_0=$t;
 }
 $8=(($this+8212)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+36)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((($11)-($_0))|0);
 HEAP32[(($10)>>2)]=$_0;
 return (($12)|0);
}
function __ZN8Rom_DataILi8192EE7at_addrEi($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$_=0,$9=0,label=0;
 $1=((__ZNK8Rom_DataILi8192EE9mask_addrEi($this,$addr))|0);
 $2=(($this+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($1)-($3))|0);
 $5=(($this)|0);
 $6=((__ZNK13blargg_vectorIhE4sizeEv($5))|0);
 $7=((($6)-(8200))|0);
 $8=($4>>>0)>($7>>>0);
 $_=($8?0:$4);
 $9=((__ZNK13blargg_vectorIhEixEj($5,$_))|0);
 return (($9)|0);
}
function __ZN8Rom_DataILi8192EE8unmappedEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK13blargg_vectorIhE5beginEv($1))|0);
 return (($2)|0);
}
function __ZNK8Rom_DataILi8192EE9mask_addrEi($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&$addr;
 return (($3)|0);
}
function __ZN7Hes_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13$0=0,$13$1=0,$16$0=0,$16$1=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 __ZN7Hes_CpuC2Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuC2Ev($3);
 $4=$this;
 HEAP32[(($4)>>2)]=13704;
 $5=(($this+8576)|0);
 __ZN8Rom_DataILi8192EEC1Ev($5);
 $6=(($this+8688)|0);
 __ZN7Hes_ApuC2Ev($6);
 $8=(($this+8656)|0);
 HEAP32[(($8)>>2)]=0;
 $9=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($9,224);
 $10=$this;
 __ZN9Music_Emu15set_voice_namesEPKPKc($10,11232);
 __ZN11Classic_Emu15set_voice_typesEPKi($3,11208);
 __ZN9Music_Emu21set_silence_lookaheadEi($10,6);
 __ZN9Music_Emu8set_gainEd($10,1.11);
 return;
}
function __ZN7Hes_CpuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8216)|0);
 $2=(($this+8212)|0);
 HEAP32[(($2)>>2)]=$1;
 return;
}
function __ZN8Rom_DataILi8192EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Rom_DataILi8192EEC2Ev($this);
 return;
}
function __ZN8Rom_DataILi8192EED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Rom_DataILi8192EED2Ev($this);
 return;
}
function __ZN7Hes_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Hes_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Hes_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=13704;
 $2=(($this+8576)|0);
 __ZN8Rom_DataILi8192EED1Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuD2Ev($3);
 return;
}
function __ZN7Hes_Emu6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8576)|0);
 __ZN8Rom_DataILi8192EE5clearEv($1);
 $2=$this;
 __ZN9Music_Emu6unloadEv($2);
 return;
}
function __ZN8Rom_DataILi8192EE5clearEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIhE5clearEv($1);
 return;
}
function __ZNK7Hes_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,label=0;
 $2=(($this+8576)|0);
 $3=((__ZNK8Rom_DataILi8192EE5beginEv($2))|0);
 $4=(($3+32)|0);
 __ZL15copy_hes_fieldsPKhP12track_info_t($4,$out);
 return ((0)|0);
}
function __ZL15copy_hes_fieldsPKhP12track_info_t($in,$out){
 $in=($in)|0;
 $out=($out)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=((HEAP8[($in)])|0);
 $2=((($1&255))>>>0)>((31)>>>0);
 if (!($2)) {
  return;
 }
 $4=(($out+272)|0);
 $5=((__ZL10copy_fieldPKhPc($in,$4))|0);
 $6=(($out+784)|0);
 $7=((__ZL10copy_fieldPKhPc($5,$6))|0);
 $8=(($out+1040)|0);
 $9=((__ZL10copy_fieldPKhPc($7,$8))|0);
 return;
}
function __ZNK8Rom_DataILi8192EE5beginEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK13blargg_vectorIhE5beginEv($1))|0);
 $3=(($2+8200)|0);
 return (($3)|0);
}
function __ZL11new_hes_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(34368))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Hes_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL12new_hes_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(464))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Hes_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Hes_Emu5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$15=0,$16=0,$17=0,$19=0,$21=0,$22=0,$23=0,$25=0,$27=0,$28=0;
 var $29=0,$30=0,$31=0,$33=0,$34=0,$addr_0=0,$36=0,$37=0,$39=0,$41=0,$42=0,$44=0,$45=0,$47=0,$48=0,$49=0,$50=0,$52=0,$54=0,$55=0;
 var $56=0,$60=0,$61=0,$62=.0,$63=0,$64=0,$_0=0,label=0;
 $1=(($this+8576)|0);
 $2=(($this+8600)|0);
 $3=((__ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($1,$in,32,$2,255))|0);
 $4=($3|0)==0;
 if (!($4)) {
  $_0=$3;
  return (($_0)|0);
 }
 $6=((__ZL16check_hes_headerPKv($2))|0);
 $7=($6|0)==0;
 if (!($7)) {
  $_0=$6;
  return (($_0)|0);
 }
 $9=(($this+8604)|0);
 $10=((HEAP8[($9)])|0);
 $11=(($10<<24)>>24)==0;
 if (!($11)) {
  $13=$this;
  __ZN8Gme_File11set_warningEPKc($13,1032);
 }
 $15=(($this+8616)|0);
 $16=((_memcmp((($15)|0),((552)|0),((4)|0)))|0);
 $17=($16|0)==0;
 if (!($17)) {
  $19=$this;
  __ZN8Gme_File11set_warningEPKc($19,8192);
 }
 $21=(($this+8628)|0);
 $22=((_memcmp((($21)|0),((55800)|0),((4)|0)))|0);
 $23=($22|0)==0;
 if (!($23)) {
  $25=$this;
  __ZN8Gme_File11set_warningEPKc($25,7552);
 }
 $27=(($this+8624)|0);
 $28=((__Z8get_le32PKv($27))|0);
 $29=(($this+8620)|0);
 $30=((__Z8get_le32PKv($29))|0);
 $31=($28>>>0)>((1048575)>>>0);
 if ($31) {
  $33=$this;
  __ZN8Gme_File11set_warningEPKc($33,7256);
  $34=$28&1048575;
  $addr_0=$34;
 } else {
  $addr_0=$28;
 }
 $36=((($addr_0)+($30))|0);
 $37=($36>>>0)>((1048576)>>>0);
 if ($37) {
  $39=$this;
  __ZN8Gme_File11set_warningEPKc($39,6848);
 }
 $41=((__ZNK8Rom_DataILi8192EE9file_sizeEv($1))|0);
 $42=($30|0)==($41|0);
 L2811: do {
  if (!($42)) {
   $44=((($41)-(4))|0);
   $45=($30|0)>($44|0);
   do {
    if (!($45)) {
     $47=((__ZNK8Rom_DataILi8192EE5beginEv($1))|0);
     $48=(($47+$30)|0);
     $49=((_memcmp((($48)|0),((552)|0),((4)|0)))|0);
     $50=($49|0)==0;
     if (!($50)) {
      break;
     }
     $52=$this;
     __ZN8Gme_File11set_warningEPKc($52,6408);
     break L2811;
    }
   } while(0);
   $54=((__ZNK8Rom_DataILi8192EE9file_sizeEv($1))|0);
   $55=($30|0)<($54|0);
   $56=$this;
   if ($55) {
    __ZN8Gme_File11set_warningEPKc($56,6136);
    break;
   } else {
    __ZN8Gme_File11set_warningEPKc($56,5896);
    break;
   }
  }
 } while(0);
 __ZN8Rom_DataILi8192EE8set_addrEl($1,$addr_0);
 $60=$this;
 __ZN9Music_Emu15set_voice_countEi($60,6);
 $61=(($this+8688)|0);
 $62=(+(__ZNK9Music_Emu4gainEv($60)));
 __ZN7Hes_Apu6volumeEd($61,$62);
 $63=(($this)|0);
 $64=((__ZN11Classic_Emu12setup_bufferEl($63,7159091))|0);
 $_0=$64;
 return (($_0)|0);
}
function __ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill){
 $this=($this)|0;
 $in=($in)|0;
 $header_size=($header_size)|0;
 $header_out=($header_out)|0;
 $fill=($fill)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($1,$in,$header_size,$header_out,$fill,8200))|0);
 return (($2)|0);
}
function __ZL16check_hes_headerPKv($header){
 $header=($header)|0;
 var $1=0,$2=0,$_=0,label=0;
 $1=((_memcmp((($header)|0),((4768)|0),((4)|0)))|0);
 $2=($1|0)==0;
 $_=($2?0:16);
 return (($_)|0);
}
function __ZNK8Rom_DataILi8192EE9file_sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN8Rom_DataILi8192EE8set_addrEl($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_9set_addr_Eli($1,$addr,8192);
 return;
}
function __ZN7Hes_Apu6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=.0,label=0;
 $1=(($this+536)|0);
 $2=($v)*((0.0000091552734375));
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($1,$2);
 return;
}
function __ZN7Hes_Emu9update_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+8688)|0);
 __ZN7Hes_Apu9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Hes_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+536)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Hes_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right){
 $this=($this)|0;
 $i=($i)|0;
 $center=($center)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,label=0;
 $1=(($this+8688)|0);
 __ZN7Hes_Apu10osc_outputEiP11Blip_BufferS1_S1_($1,$i,$center,$left,$right);
 return;
}
function __ZN7Hes_Emu17recalc_timer_loadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+8656)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+8640)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(Math_imul($4,$2)|0);
 $6=((($5)+(1))|0);
 $7=(($this+8652)|0);
 HEAP32[(($7)>>2)]=$6;
 return;
}
function __ZN7Hes_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=.0,$2=0,$3=0,$4=.0,$5=0,$6=0,label=0;
 $1=((119210.0))/($t);
 $2=(~~($1));
 $3=(($this+8632)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=((1024.0))/($t);
 $5=(~~($4));
 $6=(($this+8640)|0);
 HEAP32[(($6)>>2)]=$5;
 __ZN7Hes_Emu17recalc_timer_loadEv($this);
 return;
}
function __ZN7Hes_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((__ZN11Classic_Emu12start_track_Ei($1,$track))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this+272)|0);
 $6=$5;
 _memset((((($5)|0))|0), ((((0)|0))|0), ((((8192)|0))|0));
 $7=(($this+9784)|0);
 _memset((((($7)|0))|0), ((((0)|0))|0), ((((24584)|0))|0));
 $8=(($this+8688)|0);
 __ZN7Hes_Apu5resetEv($8);
 __ZN7Hes_Cpu5resetEv($6);
 $9=(($this+8608)|0);
 $10=((HEAP8[($9)])|0);
 $11=($10&255);
 __ZN7Hes_Cpu7set_mmrEii($6,0,$11);
 $12=(($this+8609)|0);
 $13=((HEAP8[($12)])|0);
 $14=($13&255);
 __ZN7Hes_Cpu7set_mmrEii($6,1,$14);
 $15=(($this+8610)|0);
 $16=((HEAP8[($15)])|0);
 $17=($16&255);
 __ZN7Hes_Cpu7set_mmrEii($6,2,$17);
 $18=(($this+8611)|0);
 $19=((HEAP8[($18)])|0);
 $20=($19&255);
 __ZN7Hes_Cpu7set_mmrEii($6,3,$20);
 $21=(($this+8612)|0);
 $22=((HEAP8[($21)])|0);
 $23=($22&255);
 __ZN7Hes_Cpu7set_mmrEii($6,4,$23);
 $24=(($this+8613)|0);
 $25=((HEAP8[($24)])|0);
 $26=($25&255);
 __ZN7Hes_Cpu7set_mmrEii($6,5,$26);
 $27=(($this+8614)|0);
 $28=((HEAP8[($27)])|0);
 $29=($28&255);
 __ZN7Hes_Cpu7set_mmrEii($6,6,$29);
 $30=(($this+8615)|0);
 $31=((HEAP8[($30)])|0);
 $32=($31&255);
 __ZN7Hes_Cpu7set_mmrEii($6,7,$32);
 __ZN7Hes_Cpu7set_mmrEii($6,8,255);
 $33=(($this+8680)|0);
 HEAP8[($33)]=6;
 $34=(($this+8672)|0);
 HEAP32[(($34)>>2)]=1073741824;
 $35=(($this+8676)|0);
 HEAP32[(($35)>>2)]=1073741824;
 $36=(($this+8660)|0);
 HEAP8[($36)]=0;
 $37=(($this+8656)|0);
 HEAP32[(($37)>>2)]=128;
 $38=(($this+8652)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($this+8648)|0);
 HEAP32[(($40)>>2)]=$39;
 $41=(($this+8661)|0);
 HEAP8[($41)]=0;
 $42=(($this+8644)|0);
 HEAP32[(($42)>>2)]=0;
 $43=(($this+8668)|0);
 HEAP8[($43)]=0;
 $44=(($this+8669)|0);
 HEAP8[($44)]=0;
 $45=(($this+8664)|0);
 HEAP32[(($45)>>2)]=0;
 $46=(($this+783)|0);
 HEAP8[($46)]=31;
 $47=(($this+782)|0);
 HEAP8[($47)]=-2;
 $48=(($this+8464)|0);
 $49=(($this+8470)|0);
 HEAP8[($49)]=-3;
 $50=(($this+8606)|0);
 $51=((__Z8get_le16PKv($50))|0);
 $52=(($51)&65535);
 $53=$48;
 HEAP16[(($53)>>1)]=$52;
 $54=(($track)&255);
 $55=(($this+8466)|0);
 HEAP8[($55)]=$54;
 __ZN7Hes_Emu17recalc_timer_loadEv($this);
 $56=(($this+8636)|0);
 HEAP32[(($56)>>2)]=0;
 $_0=0;
 return (($_0)|0);
}
function __ZN7Hes_Emu13cpu_write_vdpEii($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $data_tr=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;
 if (((($addr|0))|0)==((2)|0)) {
  $5=(($this+8668)|0);
  $6=((HEAP8[($5)])|0);
  $7=(($6<<24)>>24)==5;
  if (!($7)) {
   return;
  }
  $9=$data&4;
  $10=($9|0)==0;
  if (!($10)) {
   $12=$this;
   __ZN8Gme_File11set_warningEPKc($12,5800);
  }
  $14=(($this+272)|0);
  $15=$14;
  $16=((__ZNK7Hes_Cpu4timeEv($15))|0);
  __ZN7Hes_Emu9run_untilEi($this,$16);
  $17=(($data)&255);
  $18=(($this+8669)|0);
  HEAP8[($18)]=$17;
  __ZN7Hes_Emu11irq_changedEv($this);
  return;
 } else if (((($addr|0))|0)==((0)|0)) {
  $data_tr=(($data)&255);
  $2=$data_tr&31;
  $3=(($this+8668)|0);
  HEAP8[($3)]=$2;
  return;
 } else {
  return;
 }
}
function __ZN7Hes_Emu9run_untilEi($this,$present){
 $this=($this)|0;
 $present=($present)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0,$25=0;
 var $26=0,$27=0,label=0;
 $1=(($this+8664)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($present|0);
 if ($3) {
  $4=(($this+8632)|0);
  $5=((HEAP32[(($4)>>2)])|0);
  $7=$2;
  while(1) {
   $8=((($5)+($7))|0);
   $9=($8|0)<($present|0);
   if ($9) {
    $7=$8;
   } else {
    break;
   }
  }
  HEAP32[(($1)>>2)]=$8;
 }
 $11=(($this+8644)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($present)-($12))|0);
 $14=($13|0)>0;
 if (!($14)) {
  return;
 }
 $16=(($this+8660)|0);
 $17=((HEAP8[($16)])|0);
 $18=(($17<<24)>>24)==0;
 do {
  if (!($18)) {
   $20=(($this+8648)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=((($21)-($13))|0);
   HEAP32[(($20)>>2)]=$22;
   $23=($22|0)<1;
   if (!($23)) {
    break;
   }
   $25=(($this+8652)|0);
   $26=((HEAP32[(($25)>>2)])|0);
   $27=((($26)+($22))|0);
   HEAP32[(($20)>>2)]=$27;
  }
 } while(0);
 HEAP32[(($11)>>2)]=$present;
 return;
}
function __ZNK7Hes_Cpu4timeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+8212)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+36)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)+($4))|0);
 return (($7)|0);
}
function __ZN7Hes_Emu11irq_changedEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$24=0,$25=0;
 var $26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$37=0,$time_0=0,$39=0,$40=0,$41=0,$43=0,$44=0,$time_1=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 $3=((__ZNK7Hes_Cpu4timeEv($2))|0);
 $4=(($this+8672)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)>($3|0);
 do {
  if ($6) {
   HEAP32[(($4)>>2)]=1073741824;
   $8=(($this+8660)|0);
   $9=((HEAP8[($8)])|0);
   $10=(($9<<24)>>24)==0;
   if ($10) {
    break;
   }
   $12=(($this+8661)|0);
   $13=((HEAP8[($12)])|0);
   $14=(($13<<24)>>24)==0;
   if (!($14)) {
    break;
   }
   $16=(($this+8648)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=((($17)+($3))|0);
   HEAP32[(($4)>>2)]=$18;
  }
 } while(0);
 $20=(($this+8676)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($21|0)>($3|0);
 do {
  if ($22) {
   HEAP32[(($20)>>2)]=1073741824;
   $24=(($this+8669)|0);
   $25=((HEAP8[($24)])|0);
   $26=$25&8;
   $27=(($26<<24)>>24)==0;
   if ($27) {
    break;
   }
   $29=(($this+8664)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   HEAP32[(($20)>>2)]=$30;
  }
 } while(0);
 $32=(($this+8680)|0);
 $33=((HEAP8[($32)])|0);
 $34=$33&4;
 $35=(($34<<24)>>24)==0;
 if ($35) {
  $37=((HEAP32[(($4)>>2)])|0);
  $time_0=$37;
 } else {
  $time_0=1073741824;
 }
 $39=((HEAP8[($32)])|0);
 $40=$39&2;
 $41=(($40<<24)>>24)==0;
 if (!($41)) {
  $time_1=$time_0;
  __ZN7Hes_Cpu12set_irq_timeEi($2,$time_1);
  return;
 }
 $43=((HEAP32[(($20)>>2)])|0);
 $44=((__Z3minIiET_S0_S0_($time_0,$43))|0);
 $time_1=$44;
 __ZN7Hes_Cpu12set_irq_timeEi($2,$time_1);
 return;
}
function __ZN7Hes_Emu10cpu_write_Eji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$45=0,label=0;
 $1=((($addr)-(2048))|0);
 $2=($1>>>0)<((10)>>>0);
 $3=(($this+272)|0);
 $4=$3;
 $5=((__ZNK7Hes_Cpu4timeEv($4))|0);
 if ($2) {
  $7=((__ZNK7Hes_Cpu8end_timeEv($4))|0);
  $8=((($7)+(8))|0);
  $9=((__Z3minIiET_S0_S0_($5,$8))|0);
  $10=(($this+8688)|0);
  __ZN7Hes_Apu10write_dataEiii($10,$9,$addr,$data);
  return;
 }
 L2888: do {
  switch (($addr|0)) {
  case 3072: {
   __ZN7Hes_Emu9run_untilEi($this,$5);
   $14=$data&127;
   $15=((($14)+(1))|0);
   $16=(($this+8656)|0);
   HEAP32[(($16)>>2)]=$15;
   __ZN7Hes_Emu17recalc_timer_loadEv($this);
   $17=(($this+8652)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=(($this+8648)|0);
   HEAP32[(($19)>>2)]=$18;
   break;
  }
  case 5123: {
   __ZN7Hes_Emu9run_untilEi($this,$5);
   $37=(($this+8660)|0);
   $38=((HEAP8[($37)])|0);
   $39=(($38<<24)>>24)==0;
   if (!($39)) {
    $41=(($this+8652)|0);
    $42=((HEAP32[(($41)>>2)])|0);
    $43=(($this+8648)|0);
    HEAP32[(($43)>>2)]=$42;
   }
   $45=(($this+8661)|0);
   HEAP8[($45)]=0;
   break;
  }
  case 3073: {
   $21=$data&1;
   $22=(($this+8660)|0);
   $23=((HEAP8[($22)])|0);
   $24=($23&255);
   $25=($24|0)==($21|0);
   if ($25) {
    return;
   }
   __ZN7Hes_Emu9run_untilEi($this,$5);
   $27=(($21)&255);
   HEAP8[($22)]=$27;
   $28=($21|0)==0;
   if ($28) {
    break L2888;
   }
   $30=(($this+8652)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=(($this+8648)|0);
   HEAP32[(($32)>>2)]=$31;
   break;
  }
  case 5122: {
   __ZN7Hes_Emu9run_untilEi($this,$5);
   $34=(($data)&255);
   $35=(($this+8680)|0);
   HEAP8[($35)]=$34;
   break;
  }
  case 0:case 2:case 3: {
   __ZN7Hes_Emu13cpu_write_vdpEii($this,$addr,$data);
   return;
   break;
  }
  default: {
   return;
  }
  }
 } while(0);
 __ZN7Hes_Emu11irq_changedEv($this);
 return;
}
function __ZNK7Hes_Cpu8end_timeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+8264)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN7Hes_Emu9cpu_read_Ej($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$_=0;
 var $25=0,$26=0,$27=0,$28=0,$status_1=0,$_0=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 $3=((__ZNK7Hes_Cpu4timeEv($2))|0);
 $4=$addr&8191;
 switch (($4|0)) {
 case 3073:case 3072: {
  __ZN7Hes_Emu9run_untilEi($this,$3);
  $11=(($this+8648)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=((($12)-(1))|0);
  $14=(($this+8640)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=(((($13>>>0))/(($15>>>0)))&-1);
  $_0=$16;
  return (($_0)|0);
  break;
 }
 case 5122: {
  $18=(($this+8680)|0);
  $19=((HEAP8[($18)])|0);
  $20=($19&255);
  $_0=$20;
  return (($_0)|0);
  break;
 }
 case 0: {
  $6=(($this+8676)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=($7|0)>($3|0);
  if ($8) {
   $_0=0;
   return (($_0)|0);
  }
  HEAP32[(($6)>>2)]=1073741824;
  __ZN7Hes_Emu9run_untilEi($this,$3);
  __ZN7Hes_Emu11irq_changedEv($this);
  $_0=32;
  return (($_0)|0);
  break;
 }
 case 2:case 3: {
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 5123: {
  $22=(($this+8672)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=($23|0)>($3|0);
  $_=($24?0:4);
  $25=(($this+8676)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=($26|0)>($3|0);
  $28=$_|2;
  $status_1=($27?$_:$28);
  $_0=$status_1;
  return (($_0)|0);
  break;
 }
 default: {
  $_0=255;
  return (($_0)|0);
 }
 }
  return 0;
}
function __ZN7Hes_Cpu12set_irq_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+8264)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+8260)|0);
 HEAP32[(($3)>>2)]=$t;
 $4=((__ZN7Hes_Cpu15update_end_timeEii($this,$2,$t))|0);
 $5=(($this+8212)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)+($4))|0);
 HEAP32[(($7)>>2)]=$9;
 return;
}
function __ZN7Hes_Emu8cpu_doneEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$20=0,$21=0,$22=0,$24=0,$25=0;
 var $26=0,$27=0,$_0=0,label=0;
 $1=(($this+8469)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&4;
 $4=(($3<<24)>>24)==0;
 do {
  if ($4) {
   $6=(($this+272)|0);
   $7=$6;
   $8=((__ZNK7Hes_Cpu4timeEv($7))|0);
   $9=(($this+8672)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=($10|0)>($8|0);
   do {
    if (!($11)) {
     $13=(($this+8680)|0);
     $14=((HEAP8[($13)])|0);
     $15=$14&4;
     $16=(($15<<24)>>24)==0;
     if (!($16)) {
      break;
     }
     $18=(($this+8661)|0);
     HEAP8[($18)]=1;
     HEAP32[(($9)>>2)]=1073741824;
     __ZN7Hes_Emu11irq_changedEv($this);
     $_0=10;
     return (($_0)|0);
    }
   } while(0);
   $20=(($this+8676)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=($21|0)>($8|0);
   if ($22) {
    break;
   }
   $24=(($this+8680)|0);
   $25=((HEAP8[($24)])|0);
   $26=$25&2;
   $27=(($26<<24)>>24)==0;
   if ($27) {
    $_0=8;
   } else {
    break;
   }
   return (($_0)|0);
  }
 } while(0);
 $_0=0;
 return (($_0)|0);
}
function __ZN7Hes_Emu10run_clocksERii($this,$duration_,$0){
 $this=($this)|0;
 $duration_=($duration_)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;
 $2=((HEAP32[(($duration_)>>2)])|0);
 $3=(($this+272)|0);
 $4=$3;
 $5=((__ZN7Hes_Cpu3runEi($4,$2))|0);
 if ($5) {
  $7=$this;
  __ZN8Gme_File11set_warningEPKc($7,5632);
 }
 __ZN7Hes_Emu9run_untilEi($this,$2);
 $9=(($this+8644)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((($10)-($2))|0);
 HEAP32[(($9)>>2)]=$11;
 $12=(($this+8664)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((($13)-($2))|0);
 HEAP32[(($12)>>2)]=$14;
 __ZN7Hes_Cpu9end_frameEi($4,$2);
 $15=(($this+8672)|0);
 __ZL11adjust_timeRii($15,$2);
 $16=(($this+8676)|0);
 __ZL11adjust_timeRii($16,$2);
 $17=(($this+8688)|0);
 __ZN7Hes_Apu9end_frameEi($17,$2);
 return ((0)|0);
}
function __ZN7Hes_Cpu9end_frameEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$20=0,label=0;
 $1=(($this+8212)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+8216)|0);
 $4=($2|0)==($3|0);
 if (!($4)) {
  ___assert_fail(((5200)|0),((5016)|0),((118)|0),((9008)|0));
 }
 $7=(($this+8252)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)-($t))|0);
 HEAP32[(($7)>>2)]=$9;
 $10=(($this+8260)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=($11|0)<1073741824;
 if ($12) {
  $14=((($11)-($t))|0);
  HEAP32[(($10)>>2)]=$14;
 }
 $16=(($this+8264)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=($17|0)<1073741824;
 if (!($18)) {
  return;
 }
 $20=((($17)-($t))|0);
 HEAP32[(($16)>>2)]=$20;
 return;
}
function __ZL11adjust_timeRii($time,$delta){
 $time=($time)|0;
 $delta=($delta)|0;
 var $1=0,$2=0,$4=0,$5=0,label=0;
 $1=((HEAP32[(($time)>>2)])|0);
 $2=($1|0)<1073741824;
 if (!($2)) {
  return;
 }
 $4=((($1)-($delta))|0);
 HEAP32[(($time)>>2)]=$4;
 $5=($4|0)<0;
 if (!($5)) {
  return;
 }
 HEAP32[(($time)>>2)]=0;
 return;
}
function __ZN8Hes_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Hes_FileC2Ev($this);
 return;
}
function __ZN8Hes_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12888;
 $3=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($3,224);
 return;
}
function __ZN8Hes_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Hes_FileD2Ev($this);
 return;
}
function __ZN8Hes_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Hes_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Hes_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$_0=0,label=0;
 $1=$in;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+252)|0);
 $6=((FUNCTION_TABLE_iiii[($4)&127]($in,$5,208))|0);
 $7=($6|0)==0;
 if ($7) {
  $12=((__ZL16check_hes_headerPKv($5))|0);
  $_0=$12;
  return (($_0)|0);
 } else {
  $9=($6|0)==17648;
  $10=($9?16:$6);
  $_0=$10;
  return (($_0)|0);
 }
  return 0;
}
function __ZNK8Hes_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+316)|0);
 __ZL15copy_hes_fieldsPKhP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZN8Hes_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_D2Ev($1);
 return;
}
function __ZL10copy_fieldPKhPc($in,$out){
 $in=($in)|0;
 $out=($out)|0;
 var $1=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$_=0,$len_0=0,$i_0=0,$12=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$i_1=0;
 var $23=0,$25=0,$26=0,$27=0,$28=0,$30=0,$_0=0,label=0;
 $1=($in|0)==0;
 if ($1) {
  $_0=0;
  return (($_0)|0);
 }
 $3=(($in+31)|0);
 $4=((HEAP8[($3)])|0);
 $5=(($4<<24)>>24)==0;
 if ($5) {
  $len_0=32;
 } else {
  $7=(($in+47)|0);
  $8=((HEAP8[($7)])|0);
  $9=(($8<<24)>>24)==0;
  $_=($9?48:32);
  $len_0=$_;
 }
 $i_0=0;
 while(1) {
  $12=($i_0|0)<($len_0|0);
  if (!($12)) {
   $i_1=$i_0;
   break;
  }
  $14=(($in+$i_0)|0);
  $15=((HEAP8[($14)])|0);
  $16=(($15<<24)>>24)==0;
  if ($16) {
   $i_1=$i_0;
   break;
  }
  $18=($15&255);
  $19=((($18)+(1))|0);
  $20=$19&255;
  $21=($20>>>0)<((33)>>>0);
  $22=((($i_0)+(1))|0);
  if ($21) {
   $_0=0;
   label = 2624;
   break;
  } else {
   $i_0=$22;
  }
 }
 if ((label|0) == 2624) {
  return (($_0)|0);
 }
 while(1) {
  $23=($i_1|0)<($len_0|0);
  if (!($23)) {
   break;
  }
  $25=(($in+$i_1)|0);
  $26=((HEAP8[($25)])|0);
  $27=(($26<<24)>>24)==0;
  $28=((($i_1)+(1))|0);
  if ($27) {
   $i_1=$28;
  } else {
   $_0=0;
   label = 2625;
   break;
  }
 }
 if ((label|0) == 2625) {
  return (($_0)|0);
 }
 __ZN8Gme_File11copy_field_EPcPKci($out,$in,$len_0);
 $30=(($in+$len_0)|0);
 $_0=$30;
 return (($_0)|0);
}
function __ZN8Rom_DataILi8192EED2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_D2Ev($1);
 return;
}
function __ZN8Rom_DataILi8192EEC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_C2Ev($1);
 return;
}
function __ZN7Kss_CpuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$i_011=0,$3=0,$p_010=0,$even_09=0,$4=0,$5=0,$6=0,$phitmp12=0,$phitmp13=0,$even_0_lcssa=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $phitmp=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,label=0;
 $1=(($this+520)|0);
 $2=(($this+516)|0);
 HEAP32[(($2)>>2)]=$1;
 $i_011=255;
 while(1) {
  $3=($i_011|0)==0;
  if ($3) {
   $even_0_lcssa=4;
  } else {
   $even_09=1;$p_010=$i_011;
   while(1) {
    $4=$p_010^$even_09;
    $5=$p_010>>1;
    $6=($5|0)==0;
    if ($6) {
     break;
    } else {
     $even_09=$4;$p_010=$5;
    }
   }
   $phitmp12=$4<<2;
   $phitmp13=$phitmp12&4;
   $even_0_lcssa=$phitmp13;
  }
  $8=$i_011&168;
  $9=$even_0_lcssa|$8;
  $10=(($9)&255);
  $11=(($this+$i_011)|0);
  HEAP8[($11)]=$10;
  $12=$9|1;
  $13=(($12)&255);
  $14=((($i_011)+(256))|0);
  $15=(($this+$14)|0);
  HEAP8[($15)]=$13;
  $phitmp=((($i_011)-(1))|0);
  $16=($phitmp|0)>-1;
  if ($16) {
   $i_011=$phitmp;
  } else {
   break;
  }
 }
 $18=(($this)|0);
 $19=((HEAP8[($18)])|0);
 $20=$19|64;
 HEAP8[($18)]=$20;
 $21=(($this+256)|0);
 $22=((HEAP8[($21)])|0);
 $23=$22|64;
 HEAP8[($21)]=$23;
 return;
}
function __ZN7Kss_Cpu5resetEPvPKv($this,$unmapped_write,$unmapped_read){
 $this=($this)|0;
 $unmapped_write=($unmapped_write)|0;
 $unmapped_read=($unmapped_read)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+520)|0);
 $2=(($this+516)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($this+596)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+592)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this+512)|0);
 HEAP32[(($5)>>2)]=0;
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,0,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,1,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,2,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,3,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,4,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,5,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,6,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,7,$unmapped_write,$unmapped_read);
 __ZN7Kss_Cpu8set_pageEiPvPKv($this,8,$unmapped_write,$unmapped_read);
 $6=(($this+600)|0);
 $7=$6;
 _memset((((($7)|0))|0), ((((0)|0))|0), ((((30)|0))|0));
 return;
}
function __ZN7Kss_Cpu8set_pageEiPvPKv($this,$i,$write,$read){
 $this=($this)|0;
 $i=($i)|0;
 $write=($write)|0;
 $read=($read)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+516)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36+($i<<2))|0);
 HEAP32[(($3)>>2)]=$write;
 $4=((HEAP32[(($1)>>2)])|0);
 $5=(($4+($i<<2))|0);
 HEAP32[(($5)>>2)]=$read;
 return;
}
function __ZN7Kss_Cpu7map_memEjjPvPKv($this,$addr,$size,$write,$read){
 $this=($this)|0;
 $addr=($addr)|0;
 $size=($size)|0;
 $write=($write)|0;
 $read=($read)|0;
 var $1=0,$2=0,$5=0,$6=0,$9=0,$10=0,$11=0,$_in=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;
 $1=$addr&8191;
 $2=($1|0)==0;
 if (!($2)) {
  ___assert_fail(((4264)|0),((7400)|0),((103)|0),((8976)|0));
 }
 $5=$size&8191;
 $6=($5|0)==0;
 if (!($6)) {
  ___assert_fail(((5072)|0),((7400)|0),((104)|0),((8976)|0));
 }
 $9=$addr>>>13;
 $10=$size>>>13;
 $11=($10|0)==0;
 if ($11) {
  return;
 } else {
  $_in=$10;
 }
 while(1) {
  $12=((($_in)-(1))|0);
  $13=$12<<13;
  $14=((($12)+($9))|0);
  $15=(($write+$13)|0);
  $16=(($read+$13)|0);
  __ZN7Kss_Cpu8set_pageEiPvPKv($this,$14,$15,$16);
  $17=($12|0)==0;
  if ($17) {
   break;
  } else {
   $_in=$12;
  }
 }
 return;
}
function __ZN7Kss_Cpu3runEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $s=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$ld$0$0=0,$10$0=0,$ld$1$1=0,$10$1=0,$st$2$0=0,$st$3$1=0,$11=0,$12=0,$13=0,$14=0;
 var $15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0;
 var $35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0;
 var $55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0;
 var $75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0;
 var $95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0;
 var $115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0;
 var $135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0;
 var $155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0;
 var $175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0;
 var $195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0;
 var $215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0;
 var $235=0,$236=0,$237=0,$238=0,$239=0,$pc_0=0,$241=0,$243=0,$s_time_0=0,$245=0,$flags_0=0,$iy_0=0,$ix_0=0,$sp_0=0,$pc_1=0,$s_time_1=0,$warning_0_off0=0,$246=0,$247=0,$248=0;
 var $249=0,$250=0,$_sum=0,$251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0,$260=0,$or_cond=0,$262=0,$263=0,$264=0,$265=0,$266=0,$267=0;
 var $268=0,$270=0,$271=0,$272=0,$273=0,$274=0,$276=0,$277=0,$278=0,$279=0,$280=0,$281=0,$282=0,$284=0,$286=0,$288=0,$289=0,$290=0,$291=0,$292=0;
 var $293=0,$294=0,$295=0,$297=0,$298=0,$299=0,$301=0,$302=0,$303=0,$305=0,$306=0,$307=0,$309=0,$310=0,$311=0,$313=0,$314=0,$315=0,$317=0,$318=0;
 var $319=0,$321=0,$322=0,$323=0,$325=0,$326=0,$327=0,$329=0,$330=0,$331=0,$332=0,$334=0,$335=0,$336=0,$337=0,$338=0,$339=0,$341=0,$342=0,$343=0;
 var $345=0,$346=0,$348=0,$350=0,$351=0,$353=0,$355=0,$356=0,$358=0,$360=0,$361=0,$363=0,$365=0,$366=0,$368=0,$370=0,$371=0,$373=0,$375=0,$376=0;
 var $378=0,$380=0,$381=0,$383=0,$385=0,$387=0,$388=0,$390=0,$391=0,$393=0,$395=0,$396=0,$398=0,$400=0,$401=0,$403=0,$405=0,$406=0,$408=0,$410=0;
 var $411=0,$413=0,$415=0,$416=0,$418=0,$420=0,$421=0,$423=0,$425=0,$426=0,$428=0,$s_time_2=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$437=0;
 var $439=0,$440=0,$442=0,$443=0,$445=0,$446=0,$448=0,$449=0,$451=0,$452=0,$454=0,$455=0,$457=0,$458=0,$460=0,$461=0,$463=0,$464=0,$465=0,$466=0;
 var $467=0,$468=0,$469=0,$470=0,$471=0,$473=0,$475=0,$477=0,$478=0,$479=0,$480=0,$482=0,$483=0,$484=0,$485=0,$486=0,$data_0=0,$pc_2=0,$s_time_3=0,$488=0;
 var $489=0,$490=0,$491=0,$492=0,$493=0,$494=0,$496=0,$497=0,$498=0,$499=0,$500=0,$501=0,$502=0,$503=0,$504=0,$505=0,$506=0,$507=0,$508=0,$509=0;
 var $510=0,$511=0,$513=0,$514=0,$515=0,$516=0,$517=0,$518=0,$519=0,$520=0,$521=0,$522=0,$523=0,$524=0,$526=0,$flags_1=0,$528=0,$529=0,$530=0,$531=0;
 var $532=0,$533=0,$534=0,$535=0,$536=0,$538=0,$flags_2=0,$540=0,$542=0,$flags_3=0,$544=0,$545=0,$546=0,$547=0,$548=0,$data_1=0,$opcode_0=0,$flags_4=0,$pc_3=0,$s_time_4=0;
 var $550=0,$551=0,$552=0,$553=0,$554=0,$555=0,$556=0,$557=0,$558=0,$result_0=0,$559=0,$560=0,$561=0,$562=0,$563=0,$564=0,$565=0,$566=0,$567=0,$568=0;
 var $569=0,$570=0,$571=0,$572=0,$573=0,$575=0,$576=0,$577=0,$578=0,$579=0,$580=0,$581=0,$582=0,$583=0,$585=0,$587=0,$588=0,$589=0,$590=0,$data_2=0;
 var $pc_4=0,$s_time_5=0,$592=0,$593=0,$594=0,$595=0,$596=0,$597=0,$598=0,$599=0,$600=0,$601=0,$602=0,$603=0,$_masked=0,$604=0,$605=0,$606=0,$607=0,$608=0;
 var $609=0,$610=0,$612=0,$614=0,$_sum665=0,$615=0,$616=0,$617=0,$618=0,$data_3=0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0,$626=0,$627=0,$628=0,$629=0;
 var $630=0,$631=0,$632=0,$633=0,$634=0,$636=0,$637=0,$638=0,$639=0,$_flags_0=0,$640=0,$641=0,$642=0,$643=0,$644=0,$646=0,$647=0,$649=0,$adjust_0=0,$651=0;
 var $652=0,$653=0,$adjust_1=0,$654=0,$655=0,$656=0,$657=0,$658=0,$659=0,$660=0,$661=0,$662=0,$663=0,$664=0,$665=0,$666=0,$668=0,$669=0,$670=0,$671=0;
 var $672=0,$673=0,$674=0,$675=0,$676=0,$677=0,$678=0,$679=0,$681=0,$682=0,$683=0,$684=0,$685=0,$686=0,$data_4=0,$iy_1=0,$ix_1=0,$pc_5=0,$s_time_6=0,$688=0;
 var $689=0,$690=0,$691=0,$692=0,$693=0,$694=0,$695=0,$696=0,$697=0,$698=0,$699=0,$701=0,$703=0,$704=0,$705=0,$706=0,$707=0,$708=0,$709=0,$710=0;
 var $711=0,$712=0,$713=0,$714=0,$716=0,$717=0,$718=0,$719=0,$720=0,$721=0,$data_5=0,$iy_2=0,$ix_2=0,$pc_6=0,$s_time_7=0,$723=0,$724=0,$725=0,$726=0,$727=0;
 var $728=0,$729=0,$730=0,$731=0,$732=0,$733=0,$734=0,$735=0,$737=0,$739=0,$740=0,$741=0,$742=0,$743=0,$745=0,$746=0,$748=0,$_sum664=0,$749=0,$750=0;
 var $751=0,$752=0,$754=0,$755=0,$757=0,$758=0,$759=0,$760=0,$761=0,$762=0,$763=0,$764=0,$765=0,$767=0,$769=0,$770=0,$771=0,$772=0,$data_6=0,$pc_7=0;
 var $s_time_8=0,$774=0,$775=0,$776=0,$777=0,$778=0,$779=0,$780=0,$781=0,$783=0,$784=0,$785=0,$786=0,$787=0,$788=0,$789=0,$790=0,$791=0,$793=0,$795=0;
 var $796=0,$797=0,$798=0,$data_7=0,$pc_8=0,$s_time_9=0,$800=0,$801=0,$802=0,$803=0,$804=0,$805=0,$806=0,$807=0,$809=0,$810=0,$811=0,$812=0,$813=0,$814=0;
 var $815=0,$816=0,$817=0,$819=0,$821=0,$822=0,$823=0,$824=0,$data_8=0,$pc_9=0,$s_time_10=0,$826=0,$827=0,$828=0,$829=0,$830=0,$831=0,$832=0,$833=0,$835=0;
 var $836=0,$837=0,$838=0,$839=0,$840=0,$842=0,$843=0,$844=0,$845=0,$846=0,$847=0,$848=0,$849=0,$851=0,$852=0,$853=0,$854=0,$856=0,$857=0,$858=0;
 var $860=0,$861=0,$862=0,$863=0,$864=0,$865=0,$866=0,$867=0,$868=0,$869=0,$870=0,$872=0,$873=0,$874=0,$875=0,$876=0,$877=0,$879=0,$880=0,$882=0;
 var $883=0,$884=0,$885=0,$886=0,$887=0,$888=0,$889=0,$890=0,$892=0,$893=0,$894=0,$895=0,$897=0,$898=0,$899=0,$900=0,$901=0,$902=0,$903=0,$904=0;
 var $905=0,$907=0,$908=0,$909=0,$910=0,$911=0,$912=0,$913=0,$915=0,$_sum663=0,$916=0,$917=0,$918=0,$919=0,$920=0,$921=0,$922=0,$923=0,$924=0,$925=0;
 var $927=0,$928=0,$930=0,$931=0,$932=0,$933=0,$934=0,$935=0,$936=0,$937=0,$938=0,$940=0,$941=0,$942=0,$943=0,$944=0,$945=0,$946=0,$947=0,$948=0;
 var $949=0,$950=0,$952=0,$953=0,$954=0,$955=0,$956=0,$957=0,$958=0,$959=0,$960=0,$961=0,$962=0,$964=0,$965=0,$966=0,$967=0,$968=0,$969=0,$970=0;
 var $971=0,$972=0,$973=0,$974=0,$976=0,$977=0,$978=0,$979=0,$980=0,$981=0,$982=0,$983=0,$985=0,$986=0,$987=0,$988=0,$989=0,$990=0,$991=0,$992=0;
 var $993=0,$995=0,$996=0,$997=0,$998=0,$999=0,$1000=0,$1002=0,$1003=0,$1004=0,$1005=0,$1006=0,$1007=0,$1008=0,$1009=0,$1010=0,$1012=0,$1013=0,$1014=0,$1015=0;
 var $1016=0,$1017=0,$1018=0,$1019=0,$1020=0,$1021=0,$1022=0,$1023=0,$1025=0,$1026=0,$1028=0,$1029=0,$1030=0,$1031=0,$1032=0,$1033=0,$1037=0,$1039=0,$1040=0,$1041=0;
 var $data_9=0,$pc_10=0,$s_time_11=0,$1043=0,$1044=0,$1045=0,$1046=0,$1047=0,$1048=0,$1049=0,$1050=0,$1051=0,$1052=0,$1053=0,$1054=0,$1055=0,$1056=0,$1057=0,$1059=0,$1060=0;
 var $1061=0,$1062=0,$1063=0,$1064=0,$1065=0,$1066=0,$1067=0,$1068=0,$1069=0,$1070=0,$1071=0,$1073=0,$1074=0,$1075=0,$data_10=0,$pc_11=0,$s_time_12=0,$1077=0,$1078=0,$1079=0;
 var $1080=0,$1081=0,$1082=0,$1083=0,$1084=0,$1085=0,$1086=0,$1087=0,$1088=0,$1089=0,$1091=0,$1092=0,$1093=0,$1094=0,$1095=0,$1096=0,$1097=0,$1098=0,$1099=0,$1100=0;
 var $1101=0,$1103=0,$1104=0,$1105=0,$data_11=0,$pc_12=0,$s_time_13=0,$1107=0,$1108=0,$1109=0,$1110=0,$1111=0,$1112=0,$1113=0,$1114=0,$1115=0,$1116=0,$1117=0,$1119=0,$1120=0;
 var $1121=0,$1122=0,$1123=0,$1124=0,$1125=0,$1126=0,$1127=0,$1129=0,$1130=0,$1131=0,$data_12=0,$pc_13=0,$s_time_14=0,$1133=0,$1134=0,$1135=0,$1136=0,$1137=0,$1138=0,$1139=0;
 var $1140=0,$1141=0,$1142=0,$1143=0,$1144=0,$1146=0,$1147=0,$1148=0,$1149=0,$1150=0,$1151=0,$1152=0,$1153=0,$1154=0,$1155=0,$1157=0,$1158=0,$1159=0,$data_13=0,$pc_14=0;
 var $s_time_15=0,$1161=0,$1162=0,$1163=0,$1164=0,$1165=0,$1166=0,$1167=0,$1168=0,$1169=0,$1170=0,$1171=0,$1172=0,$1173=0,$1174=0,$1175=0,$1176=0,$1178=0,$1179=0,$1180=0;
 var $1181=0,$1182=0,$1183=0,$1184=0,$1185=0,$1186=0,$1187=0,$1188=0,$1189=0,$1190=0,$1191=0,$1193=0,$1194=0,$1195=0,$data_14=0,$pc_15=0,$s_time_16=0,$1197=0,$1198=0,$1199=0;
 var $1200=0,$1201=0,$1202=0,$1203=0,$1204=0,$1205=0,$1206=0,$1207=0,$1208=0,$1209=0,$1210=0,$1211=0,$1212=0,$1214=0,$1215=0,$1216=0,$1217=0,$1218=0,$1219=0,$1220=0;
 var $1221=0,$1222=0,$1223=0,$1224=0,$1225=0,$1226=0,$1227=0,$1229=0,$1230=0,$1231=0,$data_15=0,$pc_16=0,$s_time_17=0,$1233=0,$1234=0,$1235=0,$1236=0,$1237=0,$1238=0,$1239=0;
 var $1240=0,$1241=0,$1242=0,$1243=0,$1244=0,$1245=0,$1246=0,$1247=0,$1249=0,$1250=0,$1251=0,$1252=0,$1253=0,$1254=0,$1255=0,$1256=0,$1257=0,$1258=0,$1259=0,$1260=0;
 var $1261=0,$1263=0,$1264=0,$1265=0,$data_16=0,$pc_17=0,$s_time_18=0,$1267=0,$1268=0,$1269=0,$1270=0,$1271=0,$1272=0,$1273=0,$1274=0,$1275=0,$1276=0,$1277=0,$1278=0,$1279=0;
 var $1281=0,$1282=0,$1283=0,$1284=0,$1285=0,$1286=0,$1287=0,$1288=0,$1289=0,$1290=0,$1291=0,$1293=0,$1294=0,$1295=0,$1296=0,$1297=0,$1298=0,$1299=0,$1300=0,$1301=0;
 var $1302=0,$1303=0,$1305=0,$1306=0,$1307=0,$1308=0,$1309=0,$1310=0,$1311=0,$1312=0,$temp45_0=0,$flags_6=0,$s_time_19=0,$1314=0,$1315=0,$1316=0,$1317=0,$1318=0,$1319=0,$1320=0;
 var $1321=0,$1322=0,$1323=0,$1324=0,$1326=0,$1327=0,$1328=0,$1329=0,$1330=0,$1331=0,$1332=0,$1333=0,$1334=0,$1335=0,$1336=0,$1337=0,$1338=0,$1339=0,$1340=0,$1341=0;
 var $1342=0,$temp46_0=0,$1343=0,$1344=0,$1346=0,$1347=0,$1348=0,$1349=0,$1350=0,$1351=0,$1352=0,$1353=0,$1354=0,$1355=0,$1357=0,$1358=0,$1359=0,$1360=0,$1361=0,$1362=0;
 var $1363=0,$1364=0,$1365=0,$1366=0,$1367=0,$1370=0,$1371=0,$1372=0,$1373=0,$1374=0,$1375=0,$1377=0,$1378=0,$1379=0,$1380=0,$1381=0,$1382=0,$temp47_0=0,$1384=0,$1385=0;
 var $1386=0,$1387=0,$1388=0,$1389=0,$sum48_0=0,$1390=0,$1391=0,$1392=0,$1393=0,$1394=0,$1395=0,$1396=0,$1397=0,$1398=0,$1399=0,$1400=0,$1401=0,$1402=0,$1403=0,$1404=0;
 var $1405=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0,$1412=0,$1414=0,$1415=0,$1416=0,$1417=0,$1418=0,$1419=0,$1420=0,$1421=0,$1422=0,$1423=0,$1424=0,$1425=0,$1426=0;
 var $1427=0,$1430=0,$1431=0,$1432=0,$1433=0,$1434=0,$1435=0,$1436=0,$1437=0,$1438=0,$1440=0,$1441=0,$1442=0,$1443=0,$1444=0,$temp50_0=0,$_sum662=0,$1446=0,$1447=0,$1448=0;
 var $1449=0,$1450=0,$1451=0,$1452=0,$1453=0,$_sum660=0,$1455=0,$1456=0,$1457=0,$1458=0,$1459=0,$1460=0,$1461=0,$1462=0,$1463=0,$1464=0,$1465=0,$_sum661=0,$1466=0,$1467=0;
 var $_sum659=0,$1469=0,$1470=0,$1471=0,$1472=0,$1473=0,$1474=0,$1475=0,$1476=0,$1477=0,$1479=0,$1480=0,$1481=0,$1482=0,$1483=0,$1484=0,$1485=0,$1486=0,$1487=0,$1488=0;
 var $1489=0,$1490=0,$1491=0,$1492=0,$1493=0,$1494=0,$1495=0,$1496=0,$1497=0,$1498=0,$1499=0,$1500=0,$1501=0,$1502=0,$1503=0,$1504=0,$1505=0,$1507=0,$1508=0,$1509=0;
 var $1510=0,$1511=0,$1512=0,$1513=0,$1514=0,$1515=0,$1516=0,$1517=0,$1518=0,$1519=0,$1520=0,$1521=0,$1522=0,$1523=0,$1524=0,$1525=0,$1526=0,$1527=0,$1528=0,$1529=0;
 var $1530=0,$1531=0,$1532=0,$1533=0,$1535=0,$1536=0,$1537=0,$inc_0=0,$1540=0,$1541=0,$1542=0,$1543=0,$1544=0,$1545=0,$1546=0,$1547=0,$1548=0,$1549=0,$1550=0,$1551=0;
 var $1552=0,$1553=0,$1554=0,$1555=0,$1556=0,$_masked658=0,$1557=0,$1558=0,$1559=0,$1560=0,$flags_7_v=0,$flags_7=0,$1561=0,$1562=0,$1563=0,$1564=0,$1565=0,$1566=0,$1567=0,$1568=0;
 var $1569=0,$1570=0,$1571=0,$1573=0,$1574=0,$1575=0,$1576=0,$or_cond666=0,$1577=0,$_pc_1669=0,$_670=0,$inc59_0=0,$1580=0,$1581=0,$1582=0,$1583=0,$1584=0,$1585=0,$1586=0,$1587=0;
 var $1588=0,$1589=0,$1590=0,$1591=0,$1592=0,$1593=0,$1594=0,$1595=0,$1596=0,$1597=0,$1598=0,$1599=0,$1600=0,$1601=0,$1602=0,$1603=0,$1604=0,$1605=0,$1606=0,$1608=0;
 var $1609=0,$1610=0,$_pc_1=0,$_=0,$inc62_0=0,$1613=0,$1614=0,$1615=0,$1616=0,$1617=0,$1618=0,$1619=0,$1620=0,$1621=0,$1622=0,$1623=0,$1624=0,$1625=0,$1626=0,$1627=0;
 var $1628=0,$1629=0,$1630=0,$1631=0,$1632=0,$1633=0,$1634=0,$or_cond667=0,$1635=0,$pc_18=0,$s_time_20=0,$1636=0,$1637=0,$1638=0,$1639=0,$inc65_0=0,$1642=0,$1643=0,$1644=0,$1645=0;
 var $1646=0,$1647=0,$1648=0,$1649=0,$1650=0,$1651=0,$1652=0,$1653=0,$1654=0,$1655=0,$1656=0,$1657=0,$1658=0,$1659=0,$1660=0,$1661=0,$or_cond668=0,$1662=0,$pc_19=0,$s_time_21=0;
 var $1664=0,$1666=0,$1668=0,$1670=0,$warning_1_off0=0,$1672=0,$1673=0,$1674=0,$1675=0,$1676=0,$1677=0,$1678=0,$1679=0,$1680=0,$1681=0,$1682=0,$1683=0,$1684=0,$1686=0,$ixy_0=0;
 var $1692=0,$1693=0,$1694=0,$1695=0,$1696=0,$1697=0,$1698=0,$1699=0,$1700=0,$1701=0,$1702=0,$1703=0,$1704=0,$1706=0,$flags_8=0,$1708=0,$1709=0,$1710=0,$1711=0,$1712=0;
 var $1713=0,$1714=0,$1715=0,$1716=0,$1717=0,$1718=0,$1720=0,$flags_9=0,$1722=0,$1724=0,$flags_10=0,$1726=0,$1729=0,$_sum657=0,$1730=0,$1731=0,$1732=0,$1733=0,$temp70_0=0,$1735=0;
 var $1736=0,$1737=0,$1738=0,$1739=0,$1740=0,$1741=0,$1742=0,$1743=0,$1744=0,$1745=0,$1746=0,$1747=0,$1749=0,$1750=0,$1751=0,$1752=0,$1753=0,$1754=0,$1755=0,$1756=0;
 var $1757=0,$1758=0,$1759=0,$1761=0,$1763=0,$1765=0,$1766=0,$1767=0,$1768=0,$1769=0,$1770=0,$1771=0,$1772=0,$1773=0,$1774=0,$1775=0,$1777=0,$1779=0,$1781=0,$1782=0;
 var $1783=0,$1784=0,$1785=0,$1786=0,$1787=0,$1788=0,$1789=0,$1790=0,$1791=0,$1793=0,$1795=0,$1797=0,$1798=0,$1799=0,$1800=0,$1801=0,$1802=0,$1803=0,$1804=0,$1805=0;
 var $1806=0,$1807=0,$1809=0,$1811=0,$1813=0,$1814=0,$1816=0,$1817=0,$1818=0,$1819=0,$1820=0,$1821=0,$data_17_in_in=0,$pc_20=0,$data_17_in=0,$data_17=0,$1823=0,$1824=0,$1825=0,$1826=0;
 var $1828=0,$1829=0,$1830=0,$1831=0,$1832=0,$1834=0,$1835=0,$1836=0,$1837=0,$1839=0,$1840=0,$1841=0,$1842=0,$1843=0,$1844=0,$1845=0,$1846=0,$1847=0,$1848=0,$1849=0;
 var $1850=0,$1851=0,$1853=0,$1855=0,$1857=0,$1858=0,$1859=0,$1860=0,$data269_0=0,$pc_21=0,$1862=0,$1863=0,$1864=0,$1866=0,$1868=0,$1870=0,$1871=0,$1872=0,$1873=0,$data269_1=0;
 var $pc_22=0,$1875=0,$1876=0,$ixy_1=0,$flags_11=0,$sp_1=0,$pc_23=0,$1878=0,$iy_0_ixy_1=0,$ixy_1_ix_0=0,$_sum656=0,$1881=0,$1882=0,$1883=0,$1884=0,$1885=0,$1886=0,$1887=0,$1888=0,$_sum655=0;
 var $1890=0,$1891=0,$1892=0,$_sum654=0,$1894=0,$1895=0,$1896=0,$1897=0,$1898=0,$1899=0,$1900=0,$1901=0,$1902=0,$1904=0,$1905=0,$1906=0,$1907=0,$1908=0,$1909=0,$1910=0;
 var $1911=0,$1912=0,$1913=0,$1914=0,$1915=0,$1917=0,$1918=0,$1919=0,$1920=0,$1921=0,$1922=0,$1923=0,$1924=0,$1925=0,$1926=0,$1927=0,$1928=0,$1929=0,$1930=0,$1931=0;
 var $1932=0,$1933=0,$1934=0,$1935=0,$1937=0,$1938=0,$1939=0,$1940=0,$1941=0,$1942=0,$1943=0,$1944=0,$1945=0,$1946=0,$1947=0,$1948=0,$1949=0,$1950=0,$temp76_0=0,$1952=0;
 var $1953=0,$1955=0,$1956=0,$1958=0,$1959=0,$1960=0,$1961=0,$1962=0,$1963=0,$1964=0,$1965=0,$1966=0,$1967=0,$1968=0,$1969=0,$1971=0,$1972=0,$1973=0,$1974=0,$1975=0;
 var $1976=0,$1977=0,$1978=0,$1979=0,$1980=0,$1981=0,$1982=0,$1984=0,$1985=0,$1986=0,$1988=0,$1989=0,$1990=0,$1991=0,$data_18=0,$ixy_2=0,$1993=0,$iy_0_ixy_2=0,$ixy_2_ix_0=0,$1995=0;
 var $1996=0,$1997=0,$1999=0,$2000=0,$2001=0,$2002=0,$data_19=0,$ixy_3=0,$2004=0,$iy_0_ixy_3=0,$ixy_3_ix_0=0,$2006=0,$2007=0,$2008=0,$2009=0,$2010=0,$2011=0,$2012=0,$2013=0,$2016=0;
 var $2017=0,$2018=0,$2019=0,$2020=0,$2021=0,$2022=0,$2023=0,$2024=0,$2028=0,$extract_t709=0,$extract_t712=0,$extract_t715=0,$extract_t718=0,$extract_t721=0,$2030=0,$extract_t=0,$extract_t711=0,$extract_t714=0,$extract_t717=0,$extract_t720=0;
 var $extract_t710=0,$extract_t713=0,$extract_t716=0,$extract_t719=0,$extract_t722=0,$pc_1695_off0=0,$sp_0690_off0=0,$ix_0685_off0=0,$iy_0680_off0=0,$flags_0675_off0=0,$s_time_22=0,$2032=0,$ld$4$0=0,$2033$0=0,$ld$5$1=0,$2033$1=0,$st$6$0=0,$st$7$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+88)|0;
 $s=((sp)|0);
 $1=(((sp)+(80))|0);
 __ZN7Kss_Cpu12set_end_timeEi($this,$end_time);
 $2=(($this+520)|0);
 $3=$s;
 $4=$2;
 (_memcpy((($3)|0), (($4)|0), 80)|0);
 $5=(($this+516)|0);
 HEAP32[(($5)>>2)]=$s;
 $6=$1;
 $7=(($this+608)|0);
 $8=$7;
 $9=$7;
 $ld$0$0=(($9)|0);
 $10$0=((((((HEAPU8[($ld$0$0)])|0))|(((HEAPU8[((($ld$0$0)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$0$0)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$0$0)+(3))|0)])|0)<<24))|0));
 $ld$1$1=(($9+4)|0);
 $10$1=((((((HEAPU8[($ld$1$1)])|0))|(((HEAPU8[((($ld$1$1)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$1$1)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$1$1)+(3))|0)])|0)<<24))|0));
 $st$2$0=(($1)|0);
 HEAP32[(($st$2$0)>>2)]=$10$0;
 $st$3$1=(($1+4)|0);
 HEAP32[(($st$3$1)>>2)]=$10$1;
 $11=(($s+76)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($this+600)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=($14&65535);
 $16=(($this+602)|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=($17&65535);
 $19=(($this+604)|0);
 $20=((HEAP16[(($19)>>1)])|0);
 $21=($20&65535);
 $22=(($this+606)|0);
 $23=((HEAP16[(($22)>>1)])|0);
 $24=($23&65535);
 $25=(($8+7)|0);
 $26=((HEAP8[($25)])|0);
 $27=($26&255);
 $28=(($this+616)|0);
 $29=$28;
 $30=(($this+622)|0);
 $31=$30;
 $32=(($6+6)|0);
 $33=(($29+7)|0);
 $34=(($s+72)|0);
 $35=(($6+6)|0);
 $36=(($6+4)|0);
 $37=(($6+6)|0);
 $38=(($6+6)|0);
 $39=(($6+1)|0);
 $40=$1;
 $41=(($40+4)|0);
 $42=(($6+6)|0);
 $43=((($1)-(24))|0);
 $44=$43;
 $45=(($6+6)|0);
 $46=((($1)-(24))|0);
 $47=$46;
 $48=$1;
 $49=(($48+4)|0);
 $50=(($6+6)|0);
 $51=$1;
 $52=$1;
 $53=(($52+4)|0);
 $54=(($6+6)|0);
 $55=((($1)-(184))|0);
 $56=$55;
 $57=$1;
 $58=(($57+4)|0);
 $59=$1;
 $60=(($6+6)|0);
 $61=$1;
 $62=(($61+4)|0);
 $63=$1;
 $64=$1;
 $65=(($64+4)|0);
 $66=$1;
 $67=$1;
 $68=$1;
 $69=$1;
 $70=(($69+4)|0);
 $71=(($6+6)|0);
 $72=((($1)-(160))|0);
 $73=$72;
 $74=$1;
 $75=(($74+4)|0);
 $76=(($6+6)|0);
 $77=((($1)-(176))|0);
 $78=$77;
 $79=$1;
 $80=(($79+4)|0);
 $81=(($6+6)|0);
 $82=((($1)-(168))|0);
 $83=$82;
 $84=$1;
 $85=(($84+4)|0);
 $86=((($1)-(112))|0);
 $87=$86;
 $88=$1;
 $89=$1;
 $90=$1;
 $91=(($90+4)|0);
 $92=$1;
 $93=(($92+4)|0);
 $94=((($1)-(8))|0);
 $95=$94;
 $96=$1;
 $97=$1;
 $98=(($97+4)|0);
 $99=(($6+6)|0);
 $100=$1;
 $101=(($100+4)|0);
 $102=$1;
 $103=(($6+6)|0);
 $104=$1;
 $105=(($6+6)|0);
 $106=$1;
 $107=(($106+4)|0);
 $108=(($6+6)|0);
 $109=(($6+6)|0);
 $110=(($6+6)|0);
 $111=(($6+6)|0);
 $112=(($6+6)|0);
 $113=(($6+6)|0);
 $114=(($6+6)|0);
 $115=(($s+72)|0);
 $116=(($6+6)|0);
 $117=$1;
 $118=(($117+4)|0);
 $119=$1;
 $120=(($119+4)|0);
 $121=(($119+2)|0);
 $122=(($this+616)|0);
 $123=$1;
 $124=$1;
 $125=(($this+618)|0);
 $126=(($123+2)|0);
 $127=(($this+620)|0);
 $128=(($123+4)|0);
 $129=(($this+624)|0);
 $130=(($this+625)|0);
 $131=(($this+624)|0);
 $132=(($this+625)|0);
 $133=$1;
 $134=(($133+4)|0);
 $135=$1;
 $136=$1;
 $137=(($136+4)|0);
 $138=((($1)-(16))|0);
 $139=$138;
 $140=$1;
 $141=(($140+4)|0);
 $142=((($1)-(32))|0);
 $143=$142;
 $144=$1;
 $145=(($144+4)|0);
 $146=((($1)-(48))|0);
 $147=$146;
 $148=$1;
 $149=(($148+4)|0);
 $150=((($1)-(8))|0);
 $151=$150;
 $152=$1;
 $153=(($152+4)|0);
 $154=((($1)-(24))|0);
 $155=$154;
 $156=$1;
 $157=(($156+4)|0);
 $158=((($1)-(40))|0);
 $159=$158;
 $160=$1;
 $161=(($160+4)|0);
 $162=((($1)-(56))|0);
 $163=$162;
 $164=$1;
 $165=(($164+4)|0);
 $166=$1;
 $167=$1;
 $168=(($167+4)|0);
 $169=$1;
 $170=$1;
 $171=$1;
 $172=(($171+4)|0);
 $173=$1;
 $174=(($s+72)|0);
 $175=$1;
 $176=((($1)-(8))|0);
 $177=$176;
 $178=(($6+7)|0);
 $179=(($s+72)|0);
 $180=$1;
 $181=((($1)-(8))|0);
 $182=$181;
 $183=((($1)-(8))|0);
 $184=$183;
 $185=$1;
 $186=$1;
 $187=(($186+4)|0);
 $188=(($6+6)|0);
 $189=$1;
 $190=(($189+4)|0);
 $191=(($6+6)|0);
 $192=(($6+6)|0);
 $193=$1;
 $194=(($193+4)|0);
 $195=(($6+6)|0);
 $196=$1;
 $197=$1;
 $198=(($197+4)|0);
 $199=(($197+2)|0);
 $200=(($6+6)|0);
 $201=$1;
 $202=$1;
 $203=(($202+4)|0);
 $204=(($6+1)|0);
 $205=(($s+72)|0);
 $206=$1;
 $207=$1;
 $208=(($207+4)|0);
 $209=(($s+72)|0);
 $210=$1;
 $211=(($6+1)|0);
 $212=(($6+6)|0);
 $213=(($this+627)|0);
 $214=(($6+6)|0);
 $215=(($this+626)|0);
 $216=(($this+627)|0);
 $217=(($6+6)|0);
 $218=(($6+6)|0);
 $219=(($this+625)|0);
 $220=(($this+626)|0);
 $221=(($6+6)|0);
 $222=(($this+625)|0);
 $223=(($this+624)|0);
 $224=(($this+628)|0);
 $225=(($this+628)|0);
 $226=(($this+628)|0);
 $227=$1;
 $228=((($1)-(112))|0);
 $229=$228;
 $230=((($1)-(8))|0);
 $231=$230;
 $232=((($1)-(8))|0);
 $233=$232;
 $234=((($1)-(8))|0);
 $235=$234;
 $236=((($1)-(96))|0);
 $237=$236;
 $238=((($1)-(104))|0);
 $239=$238;
 $warning_0_off0=0;$s_time_1=$12;$pc_1=$15;$sp_0=$18;$ix_0=$21;$iy_0=$24;$flags_0=$27;
 L1: while(1) {
  $246=$pc_1>>>13;
  $247=(($s+($246<<2))|0);
  $248=((HEAP32[(($247)>>2)])|0);
  $249=$pc_1&8191;
  $250=(($248+$249)|0);
  $_sum=((($249)+(1))|0);
  $251=(($248+$_sum)|0);
  $252=((HEAP8[($250)])|0);
  $253=($252&255);
  $254=((($pc_1)+(1))|0);
  $255=((10952+$253)|0);
  $256=((HEAP8[($255)])|0);
  $257=($256&255);
  $258=((($257)+($s_time_1))|0);
  $259=($258|0)<0;
  $260=($258|0)<($257|0);
  $or_cond=$259|$260;
  if (!($or_cond)) {
   label = 269;
   break;
  }
  $262=$254&8191;
  $263=$254>>>13;
  $264=(($s+($263<<2))|0);
  $265=((HEAP32[(($264)>>2)])|0);
  $266=(($265+$262)|0);
  $267=((HEAP8[($266)])|0);
  $268=($267&255);
  L4: do {
   switch (($253|0)) {
   case 0:case 64:case 73:case 82:case 91:case 100:case 109:case 127: {
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 8: {
    $270=((HEAP8[($31)])|0);
    $271=((HEAP8[($32)])|0);
    HEAP8[($31)]=$271;
    HEAP8[($32)]=$270;
    $272=((HEAP8[($33)])|0);
    $273=($272&255);
    $274=(($flags_0)&255);
    HEAP8[($33)]=$274;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$273;
    continue L1;
    break;
   }
   case 211: {
    $276=((($pc_1)+(2))|0);
    $277=((HEAP32[(($34)>>2)])|0);
    $278=((($277)+($258))|0);
    $279=((HEAP8[($35)])|0);
    $280=($279&255);
    $281=$280<<8;
    $282=$281|$268;
    __Z11kss_cpu_outP7Kss_Cpuiji($this,$278,$282,$280);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$276;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 46: {
    $284=((($pc_1)+(2))|0);
    HEAP8[($36)]=$267;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$284;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 62: {
    $286=((($pc_1)+(2))|0);
    HEAP8[($37)]=$267;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$286;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 58: {
    $288=((__Z8get_le16PKv($251))|0);
    $289=((($pc_1)+(3))|0);
    $290=$288&8191;
    $291=$288>>>13;
    $292=(($s+($291<<2))|0);
    $293=((HEAP32[(($292)>>2)])|0);
    $294=(($293+$290)|0);
    $295=((HEAP8[($294)])|0);
    HEAP8[($38)]=$295;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$289;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 32: {
    $297=((($pc_1)+(2))|0);
    $298=$flags_0&64;
    $299=($298|0)==0;
    if (!($299)) {
     $pc_0=$297;
     label = 2;
     break L4;
    }
    $301=(($267<<24)>>24);
    $302=((($301)+($297))|0);
    $303=$302&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$303;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 40: {
    $305=((($pc_1)+(2))|0);
    $306=$flags_0&64;
    $307=($306|0)==0;
    if ($307) {
     $pc_0=$305;
     label = 2;
     break L4;
    }
    $309=(($267<<24)>>24);
    $310=((($309)+($305))|0);
    $311=$310&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$311;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 48: {
    $313=((($pc_1)+(2))|0);
    $314=$flags_0&1;
    $315=($314|0)==0;
    if (!($315)) {
     $pc_0=$313;
     label = 2;
     break L4;
    }
    $317=(($267<<24)>>24);
    $318=((($317)+($313))|0);
    $319=$318&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$319;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 56: {
    $321=((($pc_1)+(2))|0);
    $322=$flags_0&1;
    $323=($322|0)==0;
    if ($323) {
     $pc_0=$321;
     label = 2;
     break L4;
    }
    $325=(($267<<24)>>24);
    $326=((($325)+($321))|0);
    $327=$326&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$327;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 24: {
    $329=(($267<<24)>>24);
    $330=((($pc_1)+(2))|0);
    $331=((($330)+($329))|0);
    $332=$331&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$332;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 16: {
    $334=((HEAP8[($39)])|0);
    $335=($334&255);
    $336=((($335)-(1))|0);
    $337=(($336)&255);
    HEAP8[($39)]=$337;
    $338=((($pc_1)+(2))|0);
    $339=($336|0)==0;
    if ($339) {
     $pc_0=$338;
     label = 2;
     break L4;
    }
    $341=(($267<<24)>>24);
    $342=((($341)+($338))|0);
    $343=$342&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$343;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 194: {
    $345=$flags_0&64;
    $346=($345|0)==0;
    if (!($346)) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $348=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$348;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 202: {
    $350=$flags_0&64;
    $351=($350|0)==0;
    if ($351) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $353=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$353;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 210: {
    $355=$flags_0&1;
    $356=($355|0)==0;
    if (!($356)) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $358=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$358;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 218: {
    $360=$flags_0&1;
    $361=($360|0)==0;
    if ($361) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $363=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$363;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 226: {
    $365=$flags_0&4;
    $366=($365|0)==0;
    if (!($366)) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $368=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$368;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 234: {
    $370=$flags_0&4;
    $371=($370|0)==0;
    if ($371) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $373=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$373;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 242: {
    $375=$flags_0&128;
    $376=($375|0)==0;
    if (!($376)) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $378=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$378;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 250: {
    $380=$flags_0&128;
    $381=($380|0)==0;
    if ($381) {
     $s_time_0=$258;
     label = 4;
     break L4;
    }
    $383=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$383;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 195: {
    $385=((__Z8get_le16PKv($251))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$385;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 233: {
    $387=((HEAP16[(($41)>>1)])|0);
    $388=($387&65535);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$388;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 192: {
    $390=$flags_0&64;
    $391=($390|0)==0;
    if ($391) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $393=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$393;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 200: {
    $395=$flags_0&64;
    $396=($395|0)==0;
    if (!($396)) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $398=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$398;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 208: {
    $400=$flags_0&1;
    $401=($400|0)==0;
    if ($401) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $403=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$403;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 216: {
    $405=$flags_0&1;
    $406=($405|0)==0;
    if (!($406)) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $408=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$408;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 224: {
    $410=$flags_0&4;
    $411=($410|0)==0;
    if ($411) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $413=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$413;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 232: {
    $415=$flags_0&4;
    $416=($415|0)==0;
    if (!($416)) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $418=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$418;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 240: {
    $420=$flags_0&128;
    $421=($420|0)==0;
    if ($421) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $423=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$423;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 248: {
    $425=$flags_0&128;
    $426=($425|0)==0;
    if (!($426)) {
     $s_time_2=$258;
     label = 57;
     break L4;
    }
    $428=((($258)-(6))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$428;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 201: {
    $s_time_2=$258;
    label = 57;
    break;
   }
   case 196: {
    $439=$flags_0&64;
    $440=($439|0)==0;
    if ($440) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 204: {
    $442=$flags_0&64;
    $443=($442|0)==0;
    if ($443) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 212: {
    $445=$flags_0&1;
    $446=($445|0)==0;
    if ($446) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 220: {
    $448=$flags_0&1;
    $449=($448|0)==0;
    if ($449) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 228: {
    $451=$flags_0&4;
    $452=($451|0)==0;
    if ($452) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 236: {
    $454=$flags_0&4;
    $455=($454|0)==0;
    if ($455) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 244: {
    $457=$flags_0&128;
    $458=($457|0)==0;
    if ($458) {
     label = 66;
    } else {
     label = 3;
    }
    break;
   }
   case 252: {
    $460=$flags_0&128;
    $461=($460|0)==0;
    if ($461) {
     label = 3;
    } else {
     label = 66;
    }
    break;
   }
   case 205: {
    label = 66;
    break;
   }
   case 255: {
    $473=($254>>>0)>((65535)>>>0);
    if ($473) {
     label = 267;
     break L1;
    } else {
     label = 68;
    }
    break;
   }
   case 199:case 207:case 215:case 223:case 231:case 239:case 247: {
    label = 68;
    break;
   }
   case 245: {
    $477=((HEAP8[($42)])|0);
    $478=($477&255);
    $479=$478<<8;
    $480=((($479)+($flags_0))|0);
    $s_time_3=$258;$pc_2=$254;$data_0=$480;
    label = 71;
    break;
   }
   case 197:case 213:case 229: {
    $482=$253>>>3;
    $483=(($44+$482)|0);
    $484=$483;
    $485=((HEAP16[(($484)>>1)])|0);
    $486=($485&65535);
    $s_time_3=$258;$pc_2=$254;$data_0=$486;
    label = 71;
    break;
   }
   case 241: {
    $496=$sp_0&8191;
    $497=$sp_0>>>13;
    $498=(($s+($497<<2))|0);
    $499=((HEAP32[(($498)>>2)])|0);
    $500=(($499+$496)|0);
    $501=((HEAP8[($500)])|0);
    $502=($501&255);
    $503=((($sp_0)+(1))|0);
    $504=$503&8191;
    $505=$503>>>13;
    $506=(($s+($505<<2))|0);
    $507=((HEAP32[(($506)>>2)])|0);
    $508=(($507+$504)|0);
    $509=((HEAP8[($508)])|0);
    HEAP8[($45)]=$509;
    $510=((($sp_0)+(2))|0);
    $511=$510&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$511;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$502;
    continue L1;
    break;
   }
   case 193:case 209:case 225: {
    $513=$sp_0&8191;
    $514=$sp_0>>>13;
    $515=(($s+($514<<2))|0);
    $516=((HEAP32[(($515)>>2)])|0);
    $517=(($516+$513)|0);
    $518=((__Z8get_le16PKv($517))|0);
    $519=(($518)&65535);
    $520=$253>>>3;
    $521=(($47+$520)|0);
    $522=$521;
    HEAP16[(($522)>>1)]=$519;
    $523=((($sp_0)+(2))|0);
    $524=$523&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$524;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 150:case 134: {
    $526=$flags_0&-2;
    $flags_1=$526;
    label = 75;
    break;
   }
   case 158:case 142: {
    $flags_1=$flags_0;
    label = 75;
    break;
   }
   case 214:case 198: {
    $538=$flags_0&-2;
    $flags_2=$538;
    label = 77;
    break;
   }
   case 222:case 206: {
    $flags_2=$flags_0;
    label = 77;
    break;
   }
   case 144:case 145:case 146:case 147:case 148:case 149:case 151:case 128:case 129:case 130:case 131:case 132:case 133:case 135: {
    $542=$flags_0&-2;
    $flags_3=$542;
    label = 79;
    break;
   }
   case 152:case 153:case 154:case 155:case 156:case 157:case 159:case 136:case 137:case 138:case 139:case 140:case 141:case 143: {
    $flags_3=$flags_0;
    label = 79;
    break;
   }
   case 190: {
    $575=((HEAP16[(($53)>>1)])|0);
    $576=($575&65535);
    $577=$576&8191;
    $578=$576>>>13;
    $579=(($s+($578<<2))|0);
    $580=((HEAP32[(($579)>>2)])|0);
    $581=(($580+$577)|0);
    $582=((HEAP8[($581)])|0);
    $583=($582&255);
    $s_time_5=$258;$pc_4=$254;$data_2=$583;
    label = 84;
    break;
   }
   case 254: {
    $585=((($pc_1)+(2))|0);
    $s_time_5=$258;$pc_4=$585;$data_2=$268;
    label = 84;
    break;
   }
   case 184:case 185:case 186:case 187:case 188:case 189:case 191: {
    $587=$253^1;
    $588=(($56+$587)|0);
    $589=((HEAP8[($588)])|0);
    $590=($589&255);
    $s_time_5=$258;$pc_4=$254;$data_2=$590;
    label = 84;
    break;
   }
   case 9:case 25:case 41: {
    $614=$253>>>3;
    $_sum665=((($614)-(1))|0);
    $615=(($59+$_sum665)|0);
    $616=$615;
    $617=((HEAP16[(($616)>>1)])|0);
    $618=($617&65535);
    $data_3=$618;
    label = 87;
    break;
   }
   case 57: {
    $data_3=$sp_0;
    label = 87;
    break;
   }
   case 39: {
    $636=((HEAP8[($60)])|0);
    $637=($636&255);
    $638=((($636&255))>>>0)>((153)>>>0);
    $639=($638&1);
    $_flags_0=$639|$flags_0;
    $640=$_flags_0&1;
    $641=(((-$640))|0);
    $642=$641&96;
    $643=$flags_0&16;
    $644=($643|0)==0;
    if ($644) {
     $646=$637&14;
     $647=($646>>>0)>((9)>>>0);
     if ($647) {
      label = 90;
     } else {
      $adjust_0=$642;
     }
    } else {
     label = 90;
    }
    if ((label|0) == 90) {
     label = 0;
     $649=$642|6;
     $adjust_0=$649;
    }
    $651=$flags_0&2;
    $652=($651|0)==0;
    $653=(((-$adjust_0))|0);
    $adjust_1=($652?$adjust_0:$653);
    $654=((($adjust_1)+($637))|0);
    $655=$_flags_0&3;
    $656=((HEAP8[($60)])|0);
    $657=($656&255);
    $658=$657^$654;
    $659=$658&16;
    $660=(($654)&255);
    $661=$654&255;
    $662=(($this+$661)|0);
    $663=((HEAP8[($662)])|0);
    $664=($663&255);
    $665=$664|$655;
    $666=$665|$659;
    HEAP8[($60)]=$660;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$666;
    continue L1;
    break;
   }
   case 52: {
    $668=((HEAP16[(($62)>>1)])|0);
    $669=($668&65535);
    $670=$669&8191;
    $671=$669>>>13;
    $672=(($s+($671<<2))|0);
    $673=((HEAP32[(($672)>>2)])|0);
    $674=(($673+$670)|0);
    $675=((HEAP8[($674)])|0);
    $676=($675&255);
    $677=((($676)+(1))|0);
    HEAP32[(($11)>>2)]=$258;
    $678=((HEAP16[(($62)>>1)])|0);
    $679=($678&65535);
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$679,$677);
    $s_time_6=$258;$pc_5=$254;$ix_1=$ix_0;$iy_1=$iy_0;$data_4=$677;
    label = 94;
    break;
   }
   case 4:case 12:case 20:case 28:case 36:case 44:case 60: {
    $681=$253>>>3;
    $682=$681^1;
    $683=(($63+$682)|0);
    $684=((HEAP8[($683)])|0);
    $685=((($684)+(1))&255);
    HEAP8[($683)]=$685;
    $686=($685&255);
    $s_time_6=$258;$pc_5=$254;$ix_1=$ix_0;$iy_1=$iy_0;$data_4=$686;
    label = 94;
    break;
   }
   case 53: {
    $703=((HEAP16[(($65)>>1)])|0);
    $704=($703&65535);
    $705=$704&8191;
    $706=$704>>>13;
    $707=(($s+($706<<2))|0);
    $708=((HEAP32[(($707)>>2)])|0);
    $709=(($708+$705)|0);
    $710=((HEAP8[($709)])|0);
    $711=($710&255);
    $712=((($711)-(1))|0);
    HEAP32[(($11)>>2)]=$258;
    $713=((HEAP16[(($65)>>1)])|0);
    $714=($713&65535);
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$714,$712);
    $s_time_7=$258;$pc_6=$254;$ix_2=$ix_0;$iy_2=$iy_0;$data_5=$712;
    label = 98;
    break;
   }
   case 5:case 13:case 21:case 29:case 37:case 45:case 61: {
    $716=$253>>>3;
    $717=$716^1;
    $718=(($66+$717)|0);
    $719=((HEAP8[($718)])|0);
    $720=((($719)-(1))&255);
    HEAP8[($718)]=$720;
    $721=($720&255);
    $s_time_7=$258;$pc_6=$254;$ix_2=$ix_0;$iy_2=$iy_0;$data_5=$721;
    label = 98;
    break;
   }
   case 3:case 19:case 35: {
    $739=$253>>>3;
    $740=(($67+$739)|0);
    $741=$740;
    $742=((HEAP16[(($741)>>1)])|0);
    $743=((($742)+(1))&65535);
    HEAP16[(($741)>>1)]=$743;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 51: {
    $745=((($sp_0)+(1))|0);
    $746=$745&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$746;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 11:case 27:case 43: {
    $748=$253>>>3;
    $_sum664=((($748)-(1))|0);
    $749=(($68+$_sum664)|0);
    $750=$749;
    $751=((HEAP16[(($750)>>1)])|0);
    $752=((($751)-(1))&65535);
    HEAP16[(($750)>>1)]=$752;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 59: {
    $754=((($sp_0)+(65535))|0);
    $755=$754&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$755;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 166: {
    $757=((HEAP16[(($70)>>1)])|0);
    $758=($757&65535);
    $759=$758&8191;
    $760=$758>>>13;
    $761=(($s+($760<<2))|0);
    $762=((HEAP32[(($761)>>2)])|0);
    $763=(($762+$759)|0);
    $764=((HEAP8[($763)])|0);
    $765=($764&255);
    $s_time_8=$258;$pc_7=$254;$data_6=$765;
    label = 107;
    break;
   }
   case 230: {
    $767=((($pc_1)+(2))|0);
    $s_time_8=$258;$pc_7=$767;$data_6=$268;
    label = 107;
    break;
   }
   case 160:case 161:case 162:case 163:case 164:case 165:case 167: {
    $769=$253^1;
    $770=(($73+$769)|0);
    $771=((HEAP8[($770)])|0);
    $772=($771&255);
    $s_time_8=$258;$pc_7=$254;$data_6=$772;
    label = 107;
    break;
   }
   case 182: {
    $783=((HEAP16[(($75)>>1)])|0);
    $784=($783&65535);
    $785=$784&8191;
    $786=$784>>>13;
    $787=(($s+($786<<2))|0);
    $788=((HEAP32[(($787)>>2)])|0);
    $789=(($788+$785)|0);
    $790=((HEAP8[($789)])|0);
    $791=($790&255);
    $s_time_9=$258;$pc_8=$254;$data_7=$791;
    label = 111;
    break;
   }
   case 246: {
    $793=((($pc_1)+(2))|0);
    $s_time_9=$258;$pc_8=$793;$data_7=$268;
    label = 111;
    break;
   }
   case 176:case 177:case 178:case 179:case 180:case 181:case 183: {
    $795=$253^1;
    $796=(($78+$795)|0);
    $797=((HEAP8[($796)])|0);
    $798=($797&255);
    $s_time_9=$258;$pc_8=$254;$data_7=$798;
    label = 111;
    break;
   }
   case 174: {
    $809=((HEAP16[(($80)>>1)])|0);
    $810=($809&65535);
    $811=$810&8191;
    $812=$810>>>13;
    $813=(($s+($812<<2))|0);
    $814=((HEAP32[(($813)>>2)])|0);
    $815=(($814+$811)|0);
    $816=((HEAP8[($815)])|0);
    $817=($816&255);
    $s_time_10=$258;$pc_9=$254;$data_8=$817;
    label = 115;
    break;
   }
   case 238: {
    $819=((($pc_1)+(2))|0);
    $s_time_10=$258;$pc_9=$819;$data_8=$268;
    label = 115;
    break;
   }
   case 168:case 169:case 170:case 171:case 172:case 173:case 175: {
    $821=$253^1;
    $822=(($83+$821)|0);
    $823=((HEAP8[($822)])|0);
    $824=($823&255);
    $s_time_10=$258;$pc_9=$254;$data_8=$824;
    label = 115;
    break;
   }
   case 112:case 113:case 114:case 115:case 116:case 117:case 119: {
    HEAP32[(($11)>>2)]=$258;
    $835=((HEAP16[(($85)>>1)])|0);
    $836=($835&65535);
    $837=$253^1;
    $838=(($87+$837)|0);
    $839=((HEAP8[($838)])|0);
    $840=($839&255);
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$836,$840);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 65:case 66:case 67:case 68:case 69:case 71:case 72:case 74:case 75:case 76:case 77:case 79:case 80:case 81:case 83:case 84:case 85:case 87:case 88:case 89:case 90:case 92:case 93:case 95:case 96:case 97:case 98:case 99:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 111:case 120:case 121:case 122:case 123:case 124:case 125: {
    $842=$253&7;
    $843=$842^1;
    $844=(($88+$843)|0);
    $845=((HEAP8[($844)])|0);
    $846=$253>>>3;
    $847=$846&7;
    $848=$847^1;
    $849=(($88+$848)|0);
    HEAP8[($849)]=$845;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 6:case 14:case 22:case 30:case 38: {
    $851=$253>>>3;
    $852=$851^1;
    $853=(($89+$852)|0);
    HEAP8[($853)]=$267;
    $854=((($pc_1)+(2))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$854;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 54: {
    $856=((($pc_1)+(2))|0);
    HEAP32[(($11)>>2)]=$258;
    $857=((HEAP16[(($91)>>1)])|0);
    $858=($857&65535);
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$858,$268);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$856;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 70:case 78:case 86:case 94:case 102:case 110:case 126: {
    $860=((HEAP16[(($93)>>1)])|0);
    $861=($860&65535);
    $862=$861&8191;
    $863=$861>>>13;
    $864=(($s+($863<<2))|0);
    $865=((HEAP32[(($864)>>2)])|0);
    $866=(($865+$862)|0);
    $867=((HEAP8[($866)])|0);
    $868=$253>>>3;
    $869=$868^1;
    $870=(($95+$869)|0);
    HEAP8[($870)]=$867;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 1:case 17:case 33: {
    $872=((__Z8get_le16PKv($251))|0);
    $873=(($872)&65535);
    $874=$253>>>3;
    $875=(($96+$874)|0);
    $876=$875;
    HEAP16[(($876)>>1)]=$873;
    $877=((($pc_1)+(3))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$877;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 49: {
    $879=((__Z8get_le16PKv($251))|0);
    $880=((($pc_1)+(3))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$880;$sp_0=$879;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 42: {
    $882=((__Z8get_le16PKv($251))|0);
    $883=((($pc_1)+(3))|0);
    $884=$882&8191;
    $885=$882>>>13;
    $886=(($s+($885<<2))|0);
    $887=((HEAP32[(($886)>>2)])|0);
    $888=(($887+$884)|0);
    $889=((__Z8get_le16PKv($888))|0);
    $890=(($889)&65535);
    HEAP16[(($98)>>1)]=$890;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$883;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 50: {
    $892=((__Z8get_le16PKv($251))|0);
    $893=((($pc_1)+(3))|0);
    HEAP32[(($11)>>2)]=$258;
    $894=((HEAP8[($99)])|0);
    $895=($894&255);
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$892,$895);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$893;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 34: {
    $897=((__Z8get_le16PKv($251))|0);
    $898=((($pc_1)+(3))|0);
    $899=$897&8191;
    $900=$897>>>13;
    $901=(($s+36+($900<<2))|0);
    $902=((HEAP32[(($901)>>2)])|0);
    $903=(($902+$899)|0);
    $904=((HEAP16[(($101)>>1)])|0);
    $905=($904&65535);
    __Z8set_le16Pvj($903,$905);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$898;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 2:case 18: {
    HEAP32[(($11)>>2)]=$258;
    $907=$253>>>3;
    $908=(($102+$907)|0);
    $909=$908;
    $910=((HEAP16[(($909)>>1)])|0);
    $911=($910&65535);
    $912=((HEAP8[($103)])|0);
    $913=($912&255);
    __Z13kss_cpu_writeP7Kss_Cpuji($this,$911,$913);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 10:case 26: {
    $915=$253>>>3;
    $_sum663=((($915)-(1))|0);
    $916=(($104+$_sum663)|0);
    $917=$916;
    $918=((HEAP16[(($917)>>1)])|0);
    $919=($918&65535);
    $920=$919&8191;
    $921=$919>>>13;
    $922=(($s+($921<<2))|0);
    $923=((HEAP32[(($922)>>2)])|0);
    $924=(($923+$920)|0);
    $925=((HEAP8[($924)])|0);
    HEAP8[($105)]=$925;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 249: {
    $927=((HEAP16[(($107)>>1)])|0);
    $928=($927&65535);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$928;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 7: {
    $930=((HEAP8[($108)])|0);
    $931=($930&255);
    $932=$931<<1;
    $933=$931>>>7;
    $934=$932|$933;
    $935=$flags_0&196;
    $936=$934&41;
    $937=$936|$935;
    $938=(($934)&255);
    HEAP8[($108)]=$938;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$937;
    continue L1;
    break;
   }
   case 15: {
    $940=((HEAP8[($109)])|0);
    $941=($940&255);
    $942=$flags_0&196;
    $943=$941&1;
    $944=$943|$942;
    $945=$941<<7;
    $946=$941>>>1;
    $947=$945|$946;
    $948=$946&40;
    $949=$944|$948;
    $950=(($947)&255);
    HEAP8[($109)]=$950;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$949;
    continue L1;
    break;
   }
   case 23: {
    $952=((HEAP8[($110)])|0);
    $953=($952&255);
    $954=$953<<1;
    $955=$flags_0&1;
    $956=$954|$955;
    $957=$flags_0&196;
    $958=$954&40;
    $959=$953>>>7;
    $960=$959|$957;
    $961=$960|$958;
    $962=(($956)&255);
    HEAP8[($110)]=$962;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$961;
    continue L1;
    break;
   }
   case 31: {
    $964=$flags_0<<7;
    $965=((HEAP8[($111)])|0);
    $966=($965&255);
    $967=$966>>>1;
    $968=$967|$964;
    $969=$flags_0&196;
    $970=$967&40;
    $971=$966&1;
    $972=$971|$969;
    $973=$972|$970;
    $974=(($968)&255);
    HEAP8[($111)]=$974;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$973;
    continue L1;
    break;
   }
   case 47: {
    $976=((HEAP8[($112)])|0);
    $977=($976&255);
    $978=$977^-1;
    $979=$flags_0&197;
    $980=$978&40;
    $981=$979|$980;
    $982=$981|18;
    $983=(($978)&255);
    HEAP8[($112)]=$983;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$982;
    continue L1;
    break;
   }
   case 63: {
    $985=$flags_0&197;
    $986=$flags_0<<4;
    $987=$986&16;
    $988=$987|$985;
    $989=((HEAP8[($113)])|0);
    $990=($989&255);
    $991=$990&40;
    $992=$988|$991;
    $993=$992^1;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$993;
    continue L1;
    break;
   }
   case 55: {
    $995=$flags_0&196;
    $996=((HEAP8[($114)])|0);
    $997=($996&255);
    $998=$997&40;
    $999=$995|$998;
    $1000=$999|1;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1000;
    continue L1;
    break;
   }
   case 219: {
    $1002=((($pc_1)+(2))|0);
    $1003=((HEAP32[(($115)>>2)])|0);
    $1004=((($1003)+($258))|0);
    $1005=((HEAP8[($116)])|0);
    $1006=($1005&255);
    $1007=$1006<<8;
    $1008=$1007|$268;
    $1009=((__Z10kss_cpu_inP7Kss_Cpuij($this,$1004,$1008))|0);
    $1010=(($1009)&255);
    HEAP8[($116)]=$1010;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1002;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 227: {
    $1012=$sp_0&8191;
    $1013=$sp_0>>>13;
    $1014=(($s+($1013<<2))|0);
    $1015=((HEAP32[(($1014)>>2)])|0);
    $1016=(($1015+$1012)|0);
    $1017=((__Z8get_le16PKv($1016))|0);
    $1018=(($s+36+($1013<<2))|0);
    $1019=((HEAP32[(($1018)>>2)])|0);
    $1020=(($1019+$1012)|0);
    $1021=((HEAP16[(($118)>>1)])|0);
    $1022=($1021&65535);
    __Z8set_le16Pvj($1020,$1022);
    $1023=(($1017)&65535);
    HEAP16[(($118)>>1)]=$1023;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 235: {
    $1025=((HEAP16[(($120)>>1)])|0);
    $1026=((HEAP16[(($121)>>1)])|0);
    HEAP16[(($120)>>1)]=$1026;
    HEAP16[(($121)>>1)]=$1025;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 217: {
    $1028=((HEAP16[(($122)>>1)])|0);
    $1029=((HEAP16[(($124)>>1)])|0);
    HEAP16[(($122)>>1)]=$1029;
    HEAP16[(($124)>>1)]=$1028;
    $1030=((HEAP16[(($125)>>1)])|0);
    $1031=((HEAP16[(($126)>>1)])|0);
    HEAP16[(($125)>>1)]=$1031;
    HEAP16[(($126)>>1)]=$1030;
    $1032=((HEAP16[(($127)>>1)])|0);
    $1033=((HEAP16[(($128)>>1)])|0);
    HEAP16[(($127)>>1)]=$1033;
    HEAP16[(($128)>>1)]=$1032;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 243: {
    HEAP8[($129)]=0;
    HEAP8[($130)]=0;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 251: {
    HEAP8[($131)]=1;
    HEAP8[($132)]=1;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
    break;
   }
   case 203: {
    $1037=((($pc_1)+(2))|0);
    switch (($268|0)) {
    case 6: {
     $1039=((($258)+(7))|0);
     $1040=((HEAP16[(($134)>>1)])|0);
     $1041=($1040&65535);
     $s_time_11=$1039;$pc_10=$1037;$data_9=$1041;
     label = 144;
     break L4;
     break;
    }
    case 0:case 1:case 2:case 3:case 4:case 5:case 7: {
     $1059=$268^1;
     $1060=(($135+$1059)|0);
     $1061=((HEAP8[($1060)])|0);
     $1062=($1061&255);
     $1063=$1061<<1;
     $1064=($1063&255);
     $1065=$1062>>>7;
     $1066=$1064|$1065;
     $1067=(($this+$1066)|0);
     $1068=((HEAP8[($1067)])|0);
     $1069=($1068&255);
     $1070=$1069|$1065;
     $1071=(($1066)&255);
     HEAP8[($1060)]=$1071;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1070;
     continue L1;
     break;
    }
    case 22: {
     $1073=((($258)+(7))|0);
     $1074=((HEAP16[(($137)>>1)])|0);
     $1075=($1074&65535);
     $s_time_12=$1073;$pc_11=$1037;$data_10=$1075;
     label = 147;
     break L4;
     break;
    }
    case 16:case 17:case 18:case 19:case 20:case 21:case 23: {
     $1091=$268^1;
     $1092=(($139+$1091)|0);
     $1093=((HEAP8[($1092)])|0);
     $1094=($1093&255);
     $1095=$1094<<1;
     $1096=$flags_0&1;
     $1097=$1095|$1096;
     $1098=(($this+$1097)|0);
     $1099=((HEAP8[($1098)])|0);
     $1100=($1099&255);
     $1101=(($1097)&255);
     HEAP8[($1092)]=$1101;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1100;
     continue L1;
     break;
    }
    case 38: {
     $1103=((($258)+(7))|0);
     $1104=((HEAP16[(($141)>>1)])|0);
     $1105=($1104&65535);
     $s_time_13=$1103;$pc_12=$1037;$data_11=$1105;
     label = 150;
     break L4;
     break;
    }
    case 32:case 33:case 34:case 35:case 36:case 37:case 39: {
     $1119=$268^1;
     $1120=(($143+$1119)|0);
     $1121=((HEAP8[($1120)])|0);
     $1122=($1121&255);
     $1123=$1122<<1;
     $1124=(($this+$1123)|0);
     $1125=((HEAP8[($1124)])|0);
     $1126=($1125&255);
     $1127=(($1123)&255);
     HEAP8[($1120)]=$1127;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1126;
     continue L1;
     break;
    }
    case 54: {
     $1129=((($258)+(7))|0);
     $1130=((HEAP16[(($145)>>1)])|0);
     $1131=($1130&65535);
     $s_time_14=$1129;$pc_13=$1037;$data_12=$1131;
     label = 153;
     break L4;
     break;
    }
    case 48:case 49:case 50:case 51:case 52:case 53:case 55: {
     $1146=$268^1;
     $1147=(($147+$1146)|0);
     $1148=((HEAP8[($1147)])|0);
     $1149=($1148&255);
     $1150=$1149<<1;
     $1151=$1150|1;
     $1152=(($this+$1151)|0);
     $1153=((HEAP8[($1152)])|0);
     $1154=($1153&255);
     $1155=(($1151)&255);
     HEAP8[($1147)]=$1155;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1154;
     continue L1;
     break;
    }
    case 14: {
     $1157=((($258)+(7))|0);
     $1158=((HEAP16[(($149)>>1)])|0);
     $1159=($1158&65535);
     $s_time_15=$1157;$pc_14=$1037;$data_13=$1159;
     label = 156;
     break L4;
     break;
    }
    case 8:case 9:case 10:case 11:case 12:case 13:case 15: {
     $1178=$268^1;
     $1179=(($151+$1178)|0);
     $1180=((HEAP8[($1179)])|0);
     $1181=($1180&255);
     $1182=$1181&1;
     $1183=$1180<<7;
     $1184=($1183&255);
     $1185=$1181>>>1;
     $1186=$1184|$1185;
     $1187=(($this+$1186)|0);
     $1188=((HEAP8[($1187)])|0);
     $1189=($1188&255);
     $1190=$1182|$1189;
     $1191=(($1186)&255);
     HEAP8[($1179)]=$1191;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1190;
     continue L1;
     break;
    }
    case 30: {
     $1193=((($258)+(7))|0);
     $1194=((HEAP16[(($153)>>1)])|0);
     $1195=($1194&65535);
     $s_time_16=$1193;$pc_15=$1037;$data_14=$1195;
     label = 159;
     break L4;
     break;
    }
    case 24:case 25:case 26:case 27:case 28:case 29:case 31: {
     $1214=$268^1;
     $1215=(($155+$1214)|0);
     $1216=((HEAP8[($1215)])|0);
     $1217=($1216&255);
     $1218=$1217&1;
     $1219=$flags_0<<7;
     $1220=$1219&128;
     $1221=$1217>>>1;
     $1222=$1221|$1220;
     $1223=(($this+$1222)|0);
     $1224=((HEAP8[($1223)])|0);
     $1225=($1224&255);
     $1226=$1225|$1218;
     $1227=(($1222)&255);
     HEAP8[($1215)]=$1227;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1226;
     continue L1;
     break;
    }
    case 46: {
     $1229=((HEAP16[(($157)>>1)])|0);
     $1230=($1229&65535);
     $1231=((($258)+(7))|0);
     $s_time_17=$1231;$pc_16=$1037;$data_15=$1230;
     label = 162;
     break L4;
     break;
    }
    case 40:case 41:case 42:case 43:case 44:case 45:case 47: {
     $1249=$268^1;
     $1250=(($159+$1249)|0);
     $1251=((HEAP8[($1250)])|0);
     $1252=($1251&255);
     $1253=$1252&1;
     $1254=$1252&128;
     $1255=$1252>>>1;
     $1256=$1254|$1255;
     $1257=(($this+$1256)|0);
     $1258=((HEAP8[($1257)])|0);
     $1259=($1258&255);
     $1260=$1253|$1259;
     $1261=(($1256)&255);
     HEAP8[($1250)]=$1261;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1260;
     continue L1;
     break;
    }
    case 62: {
     $1263=((($258)+(7))|0);
     $1264=((HEAP16[(($161)>>1)])|0);
     $1265=($1264&65535);
     $s_time_18=$1263;$pc_17=$1037;$data_16=$1265;
     label = 165;
     break L4;
     break;
    }
    case 56:case 57:case 58:case 59:case 60:case 61:case 63: {
     $1281=$268^1;
     $1282=(($163+$1281)|0);
     $1283=((HEAP8[($1282)])|0);
     $1284=($1283&255);
     $1285=$1284&1;
     $1286=$1284>>>1;
     $1287=(($this+$1286)|0);
     $1288=((HEAP8[($1287)])|0);
     $1289=($1288&255);
     $1290=$1285|$1289;
     $1291=(($1286)&255);
     HEAP8[($1282)]=$1291;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1290;
     continue L1;
     break;
    }
    case 70:case 78:case 86:case 94:case 102:case 110:case 118:case 126: {
     $1293=((($258)+(4))|0);
     $1294=((HEAP16[(($165)>>1)])|0);
     $1295=($1294&65535);
     $1296=$1295&8191;
     $1297=$1295>>>13;
     $1298=(($s+($1297<<2))|0);
     $1299=((HEAP32[(($1298)>>2)])|0);
     $1300=(($1299+$1296)|0);
     $1301=((HEAP8[($1300)])|0);
     $1302=($1301&255);
     $1303=$flags_0&1;
     $s_time_19=$1293;$flags_6=$1303;$temp45_0=$1302;
     break;
    }
    case 64:case 65:case 66:case 67:case 68:case 69:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 87:case 88:case 89:case 90:case 91:case 92:case 93:case 95:case 96:case 97:case 98:case 99:case 100:case 101:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 119:case 120:case 121:case 122:case 123:case 124:case 125:case 127: {
     $1305=$268&7;
     $1306=$1305^1;
     $1307=(($166+$1306)|0);
     $1308=((HEAP8[($1307)])|0);
     $1309=($1308&255);
     $1310=$flags_0&1;
     $1311=$1309&40;
     $1312=$1311|$1310;
     $s_time_19=$258;$flags_6=$1312;$temp45_0=$1309;
     break;
    }
    case 134:case 142:case 150:case 158:case 166:case 174:case 182:case 190:case 198:case 206:case 214:case 222:case 230:case 238:case 246:case 254: {
     $1326=((($258)+(7))|0);
     $1327=((HEAP16[(($168)>>1)])|0);
     $1328=($1327&65535);
     $1329=$1328&8191;
     $1330=$1328>>>13;
     $1331=(($s+($1330<<2))|0);
     $1332=((HEAP32[(($1331)>>2)])|0);
     $1333=(($1332+$1329)|0);
     $1334=((HEAP8[($1333)])|0);
     $1335=($1334&255);
     $1336=$268>>>3;
     $1337=$1336&7;
     $1338=1<<$1337;
     $1339=$1335|$1338;
     $1340=$268&64;
     $1341=($1340|0)==0;
     $1342=($1341?$1338:0);
     $temp46_0=$1339^$1342;
     HEAP32[(($11)>>2)]=$1326;
     $1343=((HEAP16[(($168)>>1)])|0);
     $1344=($1343&65535);
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1344,$temp46_0);
     $warning_0_off0=$warning_0_off0;$s_time_1=$1326;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 192:case 193:case 194:case 195:case 196:case 197:case 199:case 200:case 201:case 202:case 203:case 204:case 205:case 207:case 208:case 209:case 210:case 211:case 212:case 213:case 215:case 216:case 217:case 218:case 219:case 220:case 221:case 223:case 224:case 225:case 226:case 227:case 228:case 229:case 231:case 232:case 233:case 234:case 235:case 236:case 237:case 239:case 240:case 241:case 242:case 243:case 244:case 245:case 247:case 248:case 249:case 250:case 251:case 252:case 253:case 255: {
     $1346=$268>>>3;
     $1347=$1346&7;
     $1348=1<<$1347;
     $1349=$268&7;
     $1350=$1349^1;
     $1351=(($169+$1350)|0);
     $1352=((HEAP8[($1351)])|0);
     $1353=($1352&255);
     $1354=$1353|$1348;
     $1355=(($1354)&255);
     HEAP8[($1351)]=$1355;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 128:case 129:case 130:case 131:case 132:case 133:case 135:case 136:case 137:case 138:case 139:case 140:case 141:case 143:case 144:case 145:case 146:case 147:case 148:case 149:case 151:case 152:case 153:case 154:case 155:case 156:case 157:case 159:case 160:case 161:case 162:case 163:case 164:case 165:case 167:case 168:case 169:case 170:case 171:case 172:case 173:case 175:case 176:case 177:case 178:case 179:case 180:case 181:case 183:case 184:case 185:case 186:case 187:case 188:case 189:case 191: {
     $1357=$268>>>3;
     $1358=$1357&7;
     $1359=1<<$1358;
     $1360=$1359^255;
     $1361=$268&7;
     $1362=$1361^1;
     $1363=(($170+$1362)|0);
     $1364=((HEAP8[($1363)])|0);
     $1365=($1364&255);
     $1366=$1365&$1360;
     $1367=(($1366)&255);
     HEAP8[($1363)]=$1367;
     $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    default: {
     label = 173;
     break L1;
    }
    }
    $1314=$268>>>3;
    $1315=$1314&7;
    $1316=1<<$1315;
    $1317=$temp45_0&$1316;
    $1318=$1317&128;
    $1319=((($1317)+(32767))|0);
    $1320=$1319>>>8;
    $1321=$1320&68;
    $1322=$flags_6|$1318;
    $1323=$1322|$1321;
    $1324=$1323|16;
    $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_19;$pc_1=$1037;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1324;
    continue L1;
    break;
   }
   case 237: {
    $1370=((($pc_1)+(2))|0);
    $1371=((18144+$268)|0);
    $1372=((HEAP8[($1371)])|0);
    $1373=($1372&255);
    $1374=$1373>>>4;
    $1375=((($1374)+($258))|0);
    switch (($268|0)) {
    case 66:case 82:case 98:case 74:case 90:case 106: {
     $1377=$268>>>3;
     $1378=$1377&6;
     $1379=(($173+$1378)|0);
     $1380=$1379;
     $1381=((HEAP16[(($1380)>>1)])|0);
     $1382=($1381&65535);
     $temp47_0=$1382;
     label = 176;
     break;
    }
    case 114:case 122: {
     $temp47_0=$sp_0;
     label = 176;
     break;
    }
    case 64:case 72:case 80:case 88:case 96:case 104:case 112:case 120: {
     $1414=((HEAP32[(($174)>>2)])|0);
     $1415=((($1414)+($1375))|0);
     $1416=((HEAP16[(($175)>>1)])|0);
     $1417=($1416&65535);
     $1418=((__Z10kss_cpu_inP7Kss_Cpuij($this,$1415,$1417))|0);
     $1419=(($1418)&255);
     $1420=$268>>>3;
     $1421=$1420^1;
     $1422=(($177+$1421)|0);
     HEAP8[($1422)]=$1419;
     $1423=$flags_0&1;
     $1424=(($this+$1418)|0);
     $1425=((HEAP8[($1424)])|0);
     $1426=($1425&255);
     $1427=$1426|$1423;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1427;
     continue L1;
     break;
    }
    case 113: {
     HEAP8[($178)]=0;
     label = 180;
     break;
    }
    case 65:case 73:case 81:case 89:case 97:case 105:case 121: {
     label = 180;
     break;
    }
    case 67:case 83: {
     $1440=$268>>>3;
     $1441=(($184+$1440)|0);
     $1442=$1441;
     $1443=((HEAP16[(($1442)>>1)])|0);
     $1444=($1443&65535);
     $temp50_0=$1444;
     label = 182;
     break;
    }
    case 115: {
     $temp50_0=$sp_0;
     label = 182;
     break;
    }
    case 75:case 91: {
     $_sum660=((($249)+(2))|0);
     $1455=(($248+$_sum660)|0);
     $1456=((__Z8get_le16PKv($1455))|0);
     $1457=((($pc_1)+(4))|0);
     $1458=$1456&8191;
     $1459=$1456>>>13;
     $1460=(($s+($1459<<2))|0);
     $1461=((HEAP32[(($1460)>>2)])|0);
     $1462=(($1461+$1458)|0);
     $1463=((__Z8get_le16PKv($1462))|0);
     $1464=(($1463)&65535);
     $1465=$268>>>3;
     $_sum661=((($1465)-(9))|0);
     $1466=(($185+$_sum661)|0);
     $1467=$1466;
     HEAP16[(($1467)>>1)]=$1464;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1457;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 123: {
     $_sum659=((($249)+(2))|0);
     $1469=(($248+$_sum659)|0);
     $1470=((__Z8get_le16PKv($1469))|0);
     $1471=((($pc_1)+(4))|0);
     $1472=$1470&8191;
     $1473=$1470>>>13;
     $1474=(($s+($1473<<2))|0);
     $1475=((HEAP32[(($1474)>>2)])|0);
     $1476=(($1475+$1472)|0);
     $1477=((__Z8get_le16PKv($1476))|0);
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1471;$sp_0=$1477;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 103: {
     $1479=((HEAP16[(($187)>>1)])|0);
     $1480=($1479&65535);
     $1481=$1480&8191;
     $1482=$1480>>>13;
     $1483=(($s+($1482<<2))|0);
     $1484=((HEAP32[(($1483)>>2)])|0);
     $1485=(($1484+$1481)|0);
     $1486=((HEAP8[($1485)])|0);
     $1487=($1486&255);
     HEAP32[(($11)>>2)]=$1375;
     $1488=((HEAP16[(($187)>>1)])|0);
     $1489=($1488&65535);
     $1490=((HEAP8[($188)])|0);
     $1491=($1490&255);
     $1492=$1491<<4;
     $1493=$1487>>>4;
     $1494=$1492|$1493;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1489,$1494);
     $1495=((HEAP8[($188)])|0);
     $1496=($1495&255);
     $1497=$1496&240;
     $1498=$1487&15;
     $1499=$1497|$1498;
     $1500=$flags_0&1;
     $1501=(($this+$1499)|0);
     $1502=((HEAP8[($1501)])|0);
     $1503=($1502&255);
     $1504=$1503|$1500;
     $1505=(($1499)&255);
     HEAP8[($188)]=$1505;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1504;
     continue L1;
     break;
    }
    case 111: {
     $1507=((HEAP16[(($190)>>1)])|0);
     $1508=($1507&65535);
     $1509=$1508&8191;
     $1510=$1508>>>13;
     $1511=(($s+($1510<<2))|0);
     $1512=((HEAP32[(($1511)>>2)])|0);
     $1513=(($1512+$1509)|0);
     $1514=((HEAP8[($1513)])|0);
     $1515=($1514&255);
     HEAP32[(($11)>>2)]=$1375;
     $1516=((HEAP16[(($190)>>1)])|0);
     $1517=($1516&65535);
     $1518=$1515<<4;
     $1519=((HEAP8[($191)])|0);
     $1520=($1519&255);
     $1521=$1520&15;
     $1522=$1521|$1518;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1517,$1522);
     $1523=((HEAP8[($191)])|0);
     $1524=($1523&255);
     $1525=$1524&240;
     $1526=$1515>>>4;
     $1527=$1525|$1526;
     $1528=$flags_0&1;
     $1529=(($this+$1527)|0);
     $1530=((HEAP8[($1529)])|0);
     $1531=($1530&255);
     $1532=$1531|$1528;
     $1533=(($1527)&255);
     HEAP8[($191)]=$1533;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1532;
     continue L1;
     break;
    }
    case 68:case 76:case 84:case 92:case 100:case 108:case 116:case 124: {
     $1535=$flags_0&-2;
     $1536=((HEAP8[($192)])|0);
     $1537=($1536&255);
     HEAP8[($192)]=0;
     $s_time_4=$1375;$pc_3=$1370;$flags_4=$1535;$opcode_0=16;$data_1=$1537;
     label = 80;
     break L4;
     break;
    }
    case 161:case 177: {
     $inc_0=1;
     label = 189;
     break;
    }
    case 169:case 185: {
     $inc_0=-1;
     label = 189;
     break;
    }
    case 160:case 176: {
     $inc59_0=1;
     label = 192;
     break;
    }
    case 168:case 184: {
     $inc59_0=-1;
     label = 192;
     break;
    }
    case 163:case 179: {
     $inc62_0=1;
     label = 195;
     break;
    }
    case 171:case 187: {
     $inc62_0=-1;
     label = 195;
     break;
    }
    case 162:case 178: {
     $inc65_0=1;
     label = 197;
     break;
    }
    case 170:case 186: {
     $inc65_0=-1;
     label = 197;
     break;
    }
    case 71: {
     $1664=((HEAP8[($212)])|0);
     HEAP8[($213)]=$1664;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 79: {
     $1666=((HEAP8[($214)])|0);
     HEAP8[($215)]=$1666;
     $warning_0_off0=1;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 87: {
     $1668=((HEAP8[($216)])|0);
     HEAP8[($217)]=$1668;
     $warning_1_off0=$warning_0_off0;
     label = 202;
     break;
    }
    case 95: {
     $1670=((HEAP8[($220)])|0);
     HEAP8[($221)]=$1670;
     $warning_1_off0=1;
     label = 202;
     break;
    }
    case 69:case 77:case 85:case 93:case 101:case 109:case 117:case 125: {
     $1686=((HEAP8[($222)])|0);
     HEAP8[($223)]=$1686;
     $s_time_2=$1375;
     label = 57;
     break L4;
     break;
    }
    case 70:case 78:case 102:case 110: {
     HEAP8[($224)]=0;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 86:case 118: {
     HEAP8[($225)]=1;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 94:case 126: {
     HEAP8[($226)]=2;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    default: {
     $warning_0_off0=1;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
    }
    }
    if ((label|0) == 176) {
     label = 0;
     $1384=$flags_0&1;
     $1385=((($temp47_0)+($1384))|0);
     $1386=$268>>>2;
     $1387=$1386&2;
     $1388=($1387|0)==0;
     $1389=(((-$1385))|0);
     $sum48_0=($1388?$1389:$1385);
     $1390=((HEAP16[(($172)>>1)])|0);
     $1391=($1390&65535);
     $1392=((($sum48_0)+($1391))|0);
     $1393=$1391^$temp47_0;
     $1394=$1393^$1392;
     $1395=$1392>>>16;
     $1396=$1395&1;
     $1397=$1394>>>8;
     $1398=$1397&16;
     $1399=$1392>>>8;
     $1400=$1399&168;
     $1401=((($1394)+(32768))|0);
     $1402=$1401>>>14;
     $1403=$1402&4;
     $1404=$1396|$1387;
     $1405=$1404|$1400;
     $1406=$1405|$1398;
     $1407=$1406|$1403;
     $1408=$1407^2;
     $1409=(($1392)&65535);
     HEAP16[(($172)>>1)]=$1409;
     $1410=(($1409<<16)>>16)==0;
     if (!($1410)) {
      $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1408;
      continue L1;
     }
     $1412=$1408|64;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1412;
     continue L1;
    }
    else if ((label|0) == 180) {
     label = 0;
     $1430=((HEAP32[(($179)>>2)])|0);
     $1431=((($1430)+($1375))|0);
     $1432=((HEAP16[(($180)>>1)])|0);
     $1433=($1432&65535);
     $1434=$268>>>3;
     $1435=$1434^1;
     $1436=(($182+$1435)|0);
     $1437=((HEAP8[($1436)])|0);
     $1438=($1437&255);
     __Z11kss_cpu_outP7Kss_Cpuiji($this,$1431,$1433,$1438);
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
    }
    else if ((label|0) == 182) {
     label = 0;
     $_sum662=((($249)+(2))|0);
     $1446=(($248+$_sum662)|0);
     $1447=((__Z8get_le16PKv($1446))|0);
     $1448=((($pc_1)+(4))|0);
     $1449=$1447&8191;
     $1450=$1447>>>13;
     $1451=(($s+36+($1450<<2))|0);
     $1452=((HEAP32[(($1451)>>2)])|0);
     $1453=(($1452+$1449)|0);
     __Z8set_le16Pvj($1453,$temp50_0);
     $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1448;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
    }
    else if ((label|0) == 189) {
     label = 0;
     $1540=((HEAP16[(($194)>>1)])|0);
     $1541=($1540&65535);
     $1542=((($1540)+($inc_0))&65535);
     HEAP16[(($194)>>1)]=$1542;
     $1543=$1541&8191;
     $1544=$1541>>>13;
     $1545=(($s+($1544<<2))|0);
     $1546=((HEAP32[(($1545)>>2)])|0);
     $1547=(($1546+$1543)|0);
     $1548=((HEAP8[($1547)])|0);
     $1549=($1548&255);
     $1550=((HEAP8[($195)])|0);
     $1551=($1550&255);
     $1552=((($1551)-($1549))|0);
     $1553=$flags_0&1;
     $1554=$1550^$1548;
     $1555=($1554&255);
     $1556=$1555&16;
     $_masked658=$1552&144;
     $1557=$1556^$_masked658;
     $1558=$1557|$1553;
     $1559=(($1552)&255);
     $1560=(($1559<<24)>>24)==0;
     $flags_7_v=($1560?66:2);
     $flags_7=$1558|$flags_7_v;
     $1561=$1557>>>4;
     $1562=$1561&1;
     $1563=((($1552)-($1562))|0);
     $1564=$1563&8;
     $1565=$flags_7|$1564;
     $1566=$1563<<4;
     $1567=$1566&32;
     $1568=$1565|$1567;
     $1569=((HEAP16[(($196)>>1)])|0);
     $1570=((($1569)-(1))&65535);
     HEAP16[(($196)>>1)]=$1570;
     $1571=(($1570<<16)>>16)==0;
     if ($1571) {
      $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1568;
      continue L1;
     }
     $1573=$1568|4;
     $1574=$flags_7_v&64;
     $1575=($1574|0)!=0;
     $1576=((($267&255))>>>0)<((176)>>>0);
     $or_cond666=$1575|$1576;
     $1577=((($1375)+(5))|0);
     $_pc_1669=($or_cond666?$1370:$pc_1);
     $_670=($or_cond666?$1375:$1577);
     $warning_0_off0=$warning_0_off0;$s_time_1=$_670;$pc_1=$_pc_1669;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1573;
     continue L1;
    }
    else if ((label|0) == 192) {
     label = 0;
     $1580=((HEAP16[(($198)>>1)])|0);
     $1581=($1580&65535);
     $1582=((($1581)+($inc59_0))|0);
     $1583=(($1582)&65535);
     HEAP16[(($198)>>1)]=$1583;
     $1584=$1581&8191;
     $1585=$1581>>>13;
     $1586=(($s+($1585<<2))|0);
     $1587=((HEAP32[(($1586)>>2)])|0);
     $1588=(($1587+$1584)|0);
     $1589=((HEAP8[($1588)])|0);
     $1590=($1589&255);
     $1591=((HEAP16[(($199)>>1)])|0);
     $1592=($1591&65535);
     $1593=((($1592)+($inc59_0))|0);
     $1594=(($1593)&65535);
     HEAP16[(($199)>>1)]=$1594;
     HEAP32[(($11)>>2)]=$1375;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1592,$1590);
     $1595=((HEAP8[($200)])|0);
     $1596=($1595&255);
     $1597=((($1596)+($1590))|0);
     $1598=$flags_0&193;
     $1599=$1597&8;
     $1600=$1599|$1598;
     $1601=$1597<<4;
     $1602=$1601&32;
     $1603=$1600|$1602;
     $1604=((HEAP16[(($201)>>1)])|0);
     $1605=((($1604)-(1))&65535);
     HEAP16[(($201)>>1)]=$1605;
     $1606=(($1605<<16)>>16)==0;
     if ($1606) {
      $warning_0_off0=$warning_0_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1603;
      continue L1;
     }
     $1608=$1603|4;
     $1609=((($267&255))>>>0)<((176)>>>0);
     $1610=((($1375)+(5))|0);
     $_pc_1=($1609?$1370:$pc_1);
     $_=($1609?$1375:$1610);
     $warning_0_off0=$warning_0_off0;$s_time_1=$_;$pc_1=$_pc_1;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1608;
     continue L1;
    }
    else if ((label|0) == 195) {
     label = 0;
     $1613=((HEAP16[(($203)>>1)])|0);
     $1614=($1613&65535);
     $1615=((($1613)+($inc62_0))&65535);
     HEAP16[(($203)>>1)]=$1615;
     $1616=$1614&8191;
     $1617=$1614>>>13;
     $1618=(($s+($1617<<2))|0);
     $1619=((HEAP32[(($1618)>>2)])|0);
     $1620=(($1619+$1616)|0);
     $1621=((HEAP8[($1620)])|0);
     $1622=($1621&255);
     $1623=((HEAP8[($204)])|0);
     $1624=((($1623)-(1))&255);
     HEAP8[($204)]=$1624;
     $1625=($1624&255);
     $1626=$1622>>>6;
     $1627=$1626&2;
     $1628=(($this+$1625)|0);
     $1629=((HEAP8[($1628)])|0);
     $1630=($1629&255);
     $1631=$1630&251;
     $1632=$1631|$1627;
     $1633=(($1624<<24)>>24)!=0;
     $1634=((($267&255))>>>0)>((175)>>>0);
     $or_cond667=$1633&$1634;
     $1635=((($1375)+(5))|0);
     $pc_18=($or_cond667?$pc_1:$1370);
     $s_time_20=($or_cond667?$1635:$1375);
     $1636=((HEAP32[(($205)>>2)])|0);
     $1637=((($s_time_20)+($1636))|0);
     $1638=((HEAP16[(($206)>>1)])|0);
     $1639=($1638&65535);
     __Z11kss_cpu_outP7Kss_Cpuiji($this,$1637,$1639,$1622);
     $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_20;$pc_1=$pc_18;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1632;
     continue L1;
    }
    else if ((label|0) == 197) {
     label = 0;
     $1642=((HEAP16[(($208)>>1)])|0);
     $1643=($1642&65535);
     $1644=((($1642)+($inc65_0))&65535);
     HEAP16[(($208)>>1)]=$1644;
     $1645=((HEAP32[(($209)>>2)])|0);
     $1646=((($1645)+($1375))|0);
     $1647=((HEAP16[(($210)>>1)])|0);
     $1648=($1647&65535);
     $1649=((__Z10kss_cpu_inP7Kss_Cpuij($this,$1646,$1648))|0);
     $1650=((HEAP8[($211)])|0);
     $1651=((($1650)-(1))&255);
     HEAP8[($211)]=$1651;
     $1652=($1651&255);
     $1653=$1649>>>6;
     $1654=$1653&2;
     $1655=(($this+$1652)|0);
     $1656=((HEAP8[($1655)])|0);
     $1657=($1656&255);
     $1658=$1657&251;
     $1659=$1658|$1654;
     $1660=(($1651<<24)>>24)!=0;
     $1661=((($267&255))>>>0)>((175)>>>0);
     $or_cond668=$1660&$1661;
     $1662=((($1375)+(5))|0);
     $pc_19=($or_cond668?$pc_1:$1370);
     $s_time_21=($or_cond668?$1662:$1375);
     HEAP32[(($11)>>2)]=$s_time_21;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1643,$1649);
     $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_21;$pc_1=$pc_19;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1659;
     continue L1;
    }
    else if ((label|0) == 202) {
     label = 0;
     $1672=$flags_0&1;
     $1673=((HEAP8[($218)])|0);
     $1674=($1673&255);
     $1675=(($this+$1674)|0);
     $1676=((HEAP8[($1675)])|0);
     $1677=($1676&255);
     $1678=$1677&251;
     $1679=$1678|$1672;
     $1680=((HEAP8[($219)])|0);
     $1681=($1680&255);
     $1682=$1681<<2;
     $1683=$1682&4;
     $1684=$1679|$1683;
     $warning_0_off0=$warning_1_off0;$s_time_1=$1375;$pc_1=$1370;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1684;
     continue L1;
    }
    break;
   }
   case 253: {
    $ixy_0=$iy_0;
    label = 208;
    break;
   }
   case 221: {
    $ixy_0=$ix_0;
    label = 208;
    break;
   }
   case 118: {
    label = 268;
    break L1;
    break;
   }
   default: {
    label = 266;
    break L1;
   }
   }
  } while(0);
  L184: do {
   if ((label|0) == 2) {
    label = 0;
    $241=((($258)-(5))|0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$241;$pc_1=$pc_0;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
   }
   else if ((label|0) == 3) {
    label = 0;
    $243=((($258)-(7))|0);
    $s_time_0=$243;
    label = 4;
   }
   else if ((label|0) == 57) {
    label = 0;
    $430=$sp_0&8191;
    $431=$sp_0>>>13;
    $432=(($s+($431<<2))|0);
    $433=((HEAP32[(($432)>>2)])|0);
    $434=(($433+$430)|0);
    $435=((__Z8get_le16PKv($434))|0);
    $436=((($sp_0)+(2))|0);
    $437=$436&65535;
    $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_2;$pc_1=$435;$sp_0=$437;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
   }
   else if ((label|0) == 66) {
    label = 0;
    $463=((($pc_1)+(3))|0);
    $464=((__Z8get_le16PKv($251))|0);
    $465=((($sp_0)+(65534))|0);
    $466=$465&65535;
    $467=$465&8191;
    $468=$466>>>13;
    $469=(($s+36+($468<<2))|0);
    $470=((HEAP32[(($469)>>2)])|0);
    $471=(($470+$467)|0);
    __Z8set_le16Pvj($471,$463);
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$464;$sp_0=$466;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
    continue L1;
   }
   else if ((label|0) == 68) {
    label = 0;
    $475=$253&56;
    $s_time_3=$258;$pc_2=$475;$data_0=$254;
    label = 71;
   }
   else if ((label|0) == 75) {
    label = 0;
    $528=((HEAP16[(($49)>>1)])|0);
    $529=($528&65535);
    $530=$529&8191;
    $531=$529>>>13;
    $532=(($s+($531<<2))|0);
    $533=((HEAP32[(($532)>>2)])|0);
    $534=(($533+$530)|0);
    $535=((HEAP8[($534)])|0);
    $536=($535&255);
    $s_time_4=$258;$pc_3=$254;$flags_4=$flags_1;$opcode_0=$253;$data_1=$536;
    label = 80;
   }
   else if ((label|0) == 77) {
    label = 0;
    $540=((($pc_1)+(2))|0);
    $s_time_4=$258;$pc_3=$540;$flags_4=$flags_2;$opcode_0=$253;$data_1=$268;
    label = 80;
   }
   else if ((label|0) == 79) {
    label = 0;
    $544=$253&7;
    $545=$544^1;
    $546=(($51+$545)|0);
    $547=((HEAP8[($546)])|0);
    $548=($547&255);
    $s_time_4=$258;$pc_3=$254;$flags_4=$flags_3;$opcode_0=$253;$data_1=$548;
    label = 80;
   }
   else if ((label|0) == 87) {
    label = 0;
    $620=((HEAP16[(($58)>>1)])|0);
    $621=($620&65535);
    $622=((($621)+($data_3))|0);
    $623=$621^$data_3;
    $624=(($622)&65535);
    HEAP16[(($58)>>1)]=$624;
    $625=$flags_0&196;
    $626=$622>>>16;
    $627=$626|$625;
    $628=$622>>>8;
    $629=$628&40;
    $630=$627|$629;
    $631=$623^$622;
    $632=$631>>>8;
    $633=$632&16;
    $634=$630|$633;
    $warning_0_off0=$warning_0_off0;$s_time_1=$258;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$634;
    continue L1;
   }
   else if ((label|0) == 208) {
    label = 0;
    $1692=((($pc_1)+(2))|0);
    $1693=$1692&8191;
    $1694=$1692>>>13;
    $1695=(($s+($1694<<2))|0);
    $1696=((HEAP32[(($1695)>>2)])|0);
    $1697=(($1696+$1693)|0);
    $1698=((HEAP8[($1697)])|0);
    $1699=($1698&255);
    $1700=((18144+$268)|0);
    $1701=((HEAP8[($1700)])|0);
    $1702=($1701&255);
    $1703=$1702&15;
    $1704=((($1703)+($258))|0);
    switch (($268|0)) {
    case 100:case 109: {
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1692;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 229: {
     $s_time_3=$1704;$pc_2=$1692;$data_0=$ixy_0;
     label = 71;
     break L184;
     break;
    }
    case 150:case 134: {
     $1706=$flags_0&-2;
     $flags_8=$1706;
     label = 210;
     break;
    }
    case 158:case 142: {
     $flags_8=$flags_0;
     label = 210;
     break;
    }
    case 148:case 132: {
     $1720=$flags_0&-2;
     $flags_9=$1720;
     label = 212;
     break;
    }
    case 156:case 140: {
     $flags_9=$flags_0;
     label = 212;
     break;
    }
    case 149:case 133: {
     $1724=$flags_0&-2;
     $flags_10=$1724;
     label = 214;
     break;
    }
    case 157:case 141: {
     $flags_10=$flags_0;
     label = 214;
     break;
    }
    case 41: {
     $temp70_0=$ixy_0;
     label = 217;
     break;
    }
    case 9:case 25: {
     $1729=$268>>>3;
     $_sum657=((($1729)-(1))|0);
     $1730=(($227+$_sum657)|0);
     $1731=$1730;
     $1732=((HEAP16[(($1731)>>1)])|0);
     $1733=($1732&65535);
     $temp70_0=$1733;
     label = 217;
     break;
    }
    case 57: {
     $temp70_0=$sp_0;
     label = 217;
     break;
    }
    case 166: {
     $1749=((($pc_1)+(3))|0);
     $1750=(($1698<<24)>>24);
     $1751=((($1750)+($ixy_0))|0);
     $1752=$1751&8191;
     $1753=$1751>>>13;
     $1754=$1753&7;
     $1755=(($s+($1754<<2))|0);
     $1756=((HEAP32[(($1755)>>2)])|0);
     $1757=(($1756+$1752)|0);
     $1758=((HEAP8[($1757)])|0);
     $1759=($1758&255);
     $s_time_8=$1704;$pc_7=$1749;$data_6=$1759;
     label = 107;
     break L184;
     break;
    }
    case 164: {
     $1761=$ixy_0>>>8;
     $s_time_8=$1704;$pc_7=$1692;$data_6=$1761;
     label = 107;
     break L184;
     break;
    }
    case 165: {
     $1763=$ixy_0&255;
     $s_time_8=$1704;$pc_7=$1692;$data_6=$1763;
     label = 107;
     break L184;
     break;
    }
    case 182: {
     $1765=((($pc_1)+(3))|0);
     $1766=(($1698<<24)>>24);
     $1767=((($1766)+($ixy_0))|0);
     $1768=$1767&8191;
     $1769=$1767>>>13;
     $1770=$1769&7;
     $1771=(($s+($1770<<2))|0);
     $1772=((HEAP32[(($1771)>>2)])|0);
     $1773=(($1772+$1768)|0);
     $1774=((HEAP8[($1773)])|0);
     $1775=($1774&255);
     $s_time_9=$1704;$pc_8=$1765;$data_7=$1775;
     label = 111;
     break L184;
     break;
    }
    case 180: {
     $1777=$ixy_0>>>8;
     $s_time_9=$1704;$pc_8=$1692;$data_7=$1777;
     label = 111;
     break L184;
     break;
    }
    case 181: {
     $1779=$ixy_0&255;
     $s_time_9=$1704;$pc_8=$1692;$data_7=$1779;
     label = 111;
     break L184;
     break;
    }
    case 174: {
     $1781=((($pc_1)+(3))|0);
     $1782=(($1698<<24)>>24);
     $1783=((($1782)+($ixy_0))|0);
     $1784=$1783&8191;
     $1785=$1783>>>13;
     $1786=$1785&7;
     $1787=(($s+($1786<<2))|0);
     $1788=((HEAP32[(($1787)>>2)])|0);
     $1789=(($1788+$1784)|0);
     $1790=((HEAP8[($1789)])|0);
     $1791=($1790&255);
     $s_time_10=$1704;$pc_9=$1781;$data_8=$1791;
     label = 115;
     break L184;
     break;
    }
    case 172: {
     $1793=$ixy_0>>>8;
     $s_time_10=$1704;$pc_9=$1692;$data_8=$1793;
     label = 115;
     break L184;
     break;
    }
    case 173: {
     $1795=$ixy_0&255;
     $s_time_10=$1704;$pc_9=$1692;$data_8=$1795;
     label = 115;
     break L184;
     break;
    }
    case 190: {
     $1797=((($pc_1)+(3))|0);
     $1798=(($1698<<24)>>24);
     $1799=((($1798)+($ixy_0))|0);
     $1800=$1799&8191;
     $1801=$1799>>>13;
     $1802=$1801&7;
     $1803=(($s+($1802<<2))|0);
     $1804=((HEAP32[(($1803)>>2)])|0);
     $1805=(($1804+$1800)|0);
     $1806=((HEAP8[($1805)])|0);
     $1807=($1806&255);
     $s_time_5=$1704;$pc_4=$1797;$data_2=$1807;
     label = 84;
     break L184;
     break;
    }
    case 188: {
     $1809=$ixy_0>>>8;
     $s_time_5=$1704;$pc_4=$1692;$data_2=$1809;
     label = 84;
     break L184;
     break;
    }
    case 189: {
     $1811=$ixy_0&255;
     $s_time_5=$1704;$pc_4=$1692;$data_2=$1811;
     label = 84;
     break L184;
     break;
    }
    case 112:case 113:case 114:case 115:case 116:case 117:case 119: {
     $1813=$268^1;
     $1814=(($229+$1813)|0);
     $pc_20=$1692;$data_17_in_in=$1814;
     label = 232;
     break;
    }
    case 54: {
     $1816=((($pc_1)+(3))|0);
     $1817=$1816&8191;
     $1818=$1816>>>13;
     $1819=(($s+($1818<<2))|0);
     $1820=((HEAP32[(($1819)>>2)])|0);
     $1821=(($1820+$1817)|0);
     $pc_20=$1816;$data_17_in_in=$1821;
     label = 232;
     break;
    }
    case 68:case 76:case 84:case 92:case 124: {
     $1828=$ixy_0>>>8;
     $1829=(($1828)&255);
     $1830=$268>>>3;
     $1831=$1830^1;
     $1832=(($231+$1831)|0);
     HEAP8[($1832)]=$1829;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1692;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 69:case 77:case 85:case 93:case 125: {
     $1834=(($ixy_0)&255);
     $1835=$268>>>3;
     $1836=$1835^1;
     $1837=(($233+$1836)|0);
     HEAP8[($1837)]=$1834;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1692;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 70:case 78:case 86:case 94:case 102:case 110:case 126: {
     $1839=((($pc_1)+(3))|0);
     $1840=(($1698<<24)>>24);
     $1841=((($1840)+($ixy_0))|0);
     $1842=$1841&8191;
     $1843=$1841>>>13;
     $1844=$1843&7;
     $1845=(($s+($1844<<2))|0);
     $1846=((HEAP32[(($1845)>>2)])|0);
     $1847=(($1846+$1842)|0);
     $1848=((HEAP8[($1847)])|0);
     $1849=$268>>>3;
     $1850=$1849^1;
     $1851=(($235+$1850)|0);
     HEAP8[($1851)]=$1848;
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1839;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 38: {
     $1853=((($pc_1)+(3))|0);
     $pc_21=$1853;$data269_0=$1699;
     label = 239;
     break;
    }
    case 101: {
     $1855=$ixy_0&255;
     $pc_21=$1692;$data269_0=$1855;
     label = 239;
     break;
    }
    case 96:case 97:case 98:case 99:case 103: {
     $1857=$268^1;
     $1858=(($237+$1857)|0);
     $1859=((HEAP8[($1858)])|0);
     $1860=($1859&255);
     $pc_21=$1692;$data269_0=$1860;
     label = 239;
     break;
    }
    case 46: {
     $1866=((($pc_1)+(3))|0);
     $pc_22=$1866;$data269_1=$1699;
     label = 243;
     break;
    }
    case 108: {
     $1868=$ixy_0>>>8;
     $pc_22=$1692;$data269_1=$1868;
     label = 243;
     break;
    }
    case 104:case 105:case 106:case 107:case 111: {
     $1870=$268^1;
     $1871=(($239+$1870)|0);
     $1872=((HEAP8[($1871)])|0);
     $1873=($1872&255);
     $pc_22=$1692;$data269_1=$1873;
     label = 243;
     break;
    }
    case 249: {
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1692;$sp_0=$ixy_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 34: {
     $_sum656=((($249)+(2))|0);
     $1881=(($248+$_sum656)|0);
     $1882=((__Z8get_le16PKv($1881))|0);
     $1883=((($pc_1)+(4))|0);
     $1884=$1882&8191;
     $1885=$1882>>>13;
     $1886=(($s+36+($1885<<2))|0);
     $1887=((HEAP32[(($1886)>>2)])|0);
     $1888=(($1887+$1884)|0);
     __Z8set_le16Pvj($1888,$ixy_0);
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1883;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 33: {
     $_sum655=((($249)+(2))|0);
     $1890=(($248+$_sum655)|0);
     $1891=((__Z8get_le16PKv($1890))|0);
     $1892=((($pc_1)+(4))|0);
     $pc_23=$1892;$sp_1=$sp_0;$flags_11=$flags_0;$ixy_1=$1891;
     break;
    }
    case 42: {
     $_sum654=((($249)+(2))|0);
     $1894=(($248+$_sum654)|0);
     $1895=((__Z8get_le16PKv($1894))|0);
     $1896=$1895&8191;
     $1897=$1895>>>13;
     $1898=(($s+($1897<<2))|0);
     $1899=((HEAP32[(($1898)>>2)])|0);
     $1900=(($1899+$1896)|0);
     $1901=((__Z8get_le16PKv($1900))|0);
     $1902=((($pc_1)+(4))|0);
     $pc_23=$1902;$sp_1=$sp_0;$flags_11=$flags_0;$ixy_1=$1901;
     break;
    }
    case 203: {
     $1904=(($1698<<24)>>24);
     $1905=((($1904)+($ixy_0))|0);
     $1906=$1905&65535;
     $1907=((($pc_1)+(3))|0);
     $1908=$1907&8191;
     $1909=$1907>>>13;
     $1910=(($s+($1909<<2))|0);
     $1911=((HEAP32[(($1910)>>2)])|0);
     $1912=(($1911+$1908)|0);
     $1913=((HEAP8[($1912)])|0);
     $1914=($1913&255);
     $1915=((($pc_1)+(4))|0);
     switch (($1914|0)) {
     case 6: {
      $s_time_11=$1704;$pc_10=$1915;$data_9=$1906;
      label = 144;
      break L184;
      break;
     }
     case 22: {
      $s_time_12=$1704;$pc_11=$1915;$data_10=$1906;
      label = 147;
      break L184;
      break;
     }
     case 38: {
      $s_time_13=$1704;$pc_12=$1915;$data_11=$1906;
      label = 150;
      break L184;
      break;
     }
     case 54: {
      $s_time_14=$1704;$pc_13=$1915;$data_12=$1906;
      label = 153;
      break L184;
      break;
     }
     case 14: {
      $s_time_15=$1704;$pc_14=$1915;$data_13=$1906;
      label = 156;
      break L184;
      break;
     }
     case 30: {
      $s_time_16=$1704;$pc_15=$1915;$data_14=$1906;
      label = 159;
      break L184;
      break;
     }
     case 46: {
      $s_time_17=$1704;$pc_16=$1915;$data_15=$1906;
      label = 162;
      break L184;
      break;
     }
     case 62: {
      $s_time_18=$1704;$pc_17=$1915;$data_16=$1906;
      label = 165;
      break L184;
      break;
     }
     case 70:case 78:case 86:case 94:case 102:case 110:case 118:case 126: {
      $1917=$1905&8191;
      $1918=$1906>>>13;
      $1919=(($s+($1918<<2))|0);
      $1920=((HEAP32[(($1919)>>2)])|0);
      $1921=(($1920+$1917)|0);
      $1922=((HEAP8[($1921)])|0);
      $1923=($1922&255);
      $1924=$1914>>>3;
      $1925=$1924&7;
      $1926=1<<$1925;
      $1927=$1923&$1926;
      $1928=$flags_0&1;
      $1929=$1927&128;
      $1930=((($1927)+(32767))|0);
      $1931=$1930>>>8;
      $1932=$1931&68;
      $1933=$1928|$1929;
      $1934=$1933|$1932;
      $1935=$1934|16;
      $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1915;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1935;
      continue L1;
      break;
     }
     case 134:case 142:case 150:case 158:case 166:case 174:case 182:case 190:case 198:case 206:case 214:case 222:case 230:case 238:case 246:case 254: {
      $1937=$1905&8191;
      $1938=$1906>>>13;
      $1939=(($s+($1938<<2))|0);
      $1940=((HEAP32[(($1939)>>2)])|0);
      $1941=(($1940+$1937)|0);
      $1942=((HEAP8[($1941)])|0);
      $1943=($1942&255);
      $1944=$1914>>>3;
      $1945=$1944&7;
      $1946=1<<$1945;
      $1947=$1943|$1946;
      $1948=$1914&64;
      $1949=($1948|0)==0;
      $1950=($1949?$1946:0);
      $temp76_0=$1947^$1950;
      HEAP32[(($11)>>2)]=$1704;
      __Z13kss_cpu_writeP7Kss_Cpuji($this,$1906,$temp76_0);
      $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1915;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
      continue L1;
      break;
     }
     default: {
      $warning_0_off0=1;$s_time_1=$1704;$pc_1=$1915;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
      continue L1;
     }
     }
     break;
    }
    case 35: {
     $1952=((($ixy_0)+(1))|0);
     $1953=$1952&65535;
     $pc_23=$1692;$sp_1=$sp_0;$flags_11=$flags_0;$ixy_1=$1953;
     break;
    }
    case 43: {
     $1955=((($ixy_0)+(65535))|0);
     $1956=$1955&65535;
     $pc_23=$1692;$sp_1=$sp_0;$flags_11=$flags_0;$ixy_1=$1956;
     break;
    }
    case 52: {
     $1958=(($1698<<24)>>24);
     $1959=((($1958)+($ixy_0))|0);
     $1960=$1959&65535;
     $1961=((($pc_1)+(3))|0);
     $1962=$1959&8191;
     $1963=$1960>>>13;
     $1964=(($s+($1963<<2))|0);
     $1965=((HEAP32[(($1964)>>2)])|0);
     $1966=(($1965+$1962)|0);
     $1967=((HEAP8[($1966)])|0);
     $1968=($1967&255);
     $1969=((($1968)+(1))|0);
     HEAP32[(($11)>>2)]=$1704;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1960,$1969);
     $s_time_6=$1704;$pc_5=$1961;$ix_1=$ix_0;$iy_1=$iy_0;$data_4=$1969;
     label = 94;
     break L184;
     break;
    }
    case 53: {
     $1971=(($1698<<24)>>24);
     $1972=((($1971)+($ixy_0))|0);
     $1973=$1972&65535;
     $1974=((($pc_1)+(3))|0);
     $1975=$1972&8191;
     $1976=$1973>>>13;
     $1977=(($s+($1976<<2))|0);
     $1978=((HEAP32[(($1977)>>2)])|0);
     $1979=(($1978+$1975)|0);
     $1980=((HEAP8[($1979)])|0);
     $1981=($1980&255);
     $1982=((($1981)-(1))|0);
     HEAP32[(($11)>>2)]=$1704;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1973,$1982);
     $s_time_7=$1704;$pc_6=$1974;$ix_2=$ix_0;$iy_2=$iy_0;$data_5=$1982;
     label = 98;
     break L184;
     break;
    }
    case 36: {
     $1984=((($ixy_0)+(256))|0);
     $1985=$1984&65535;
     $1986=$1985>>>8;
     $ixy_2=$1985;$data_18=$1986;
     label = 258;
     break;
    }
    case 44: {
     $1988=((($ixy_0)+(1))|0);
     $1989=$1988&255;
     $1990=$ixy_0&65280;
     $1991=$1989|$1990;
     $ixy_2=$1991;$data_18=$1989;
     label = 258;
     break;
    }
    case 37: {
     $1995=((($ixy_0)+(65280))|0);
     $1996=$1995&65535;
     $1997=$1996>>>8;
     $ixy_3=$1996;$data_19=$1997;
     label = 261;
     break;
    }
    case 45: {
     $1999=((($ixy_0)+(255))|0);
     $2000=$1999&255;
     $2001=$ixy_0&65280;
     $2002=$2000|$2001;
     $ixy_3=$2002;$data_19=$2000;
     label = 261;
     break;
    }
    case 225: {
     $2006=$sp_0&8191;
     $2007=$sp_0>>>13;
     $2008=(($s+($2007<<2))|0);
     $2009=((HEAP32[(($2008)>>2)])|0);
     $2010=(($2009+$2006)|0);
     $2011=((__Z8get_le16PKv($2010))|0);
     $2012=((($sp_0)+(2))|0);
     $2013=$2012&65535;
     $pc_23=$1692;$sp_1=$2013;$flags_11=$flags_0;$ixy_1=$2011;
     break;
    }
    case 233: {
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$ixy_0;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
     break;
    }
    case 227: {
     $2016=$sp_0&8191;
     $2017=$sp_0>>>13;
     $2018=(($s+($2017<<2))|0);
     $2019=((HEAP32[(($2018)>>2)])|0);
     $2020=(($2019+$2016)|0);
     $2021=((__Z8get_le16PKv($2020))|0);
     $2022=(($s+36+($2017<<2))|0);
     $2023=((HEAP32[(($2022)>>2)])|0);
     $2024=(($2023+$2016)|0);
     __Z8set_le16Pvj($2024,$ixy_0);
     $pc_23=$1692;$sp_1=$sp_0;$flags_11=$flags_0;$ixy_1=$2021;
     break;
    }
    default: {
     $warning_0_off0=1;$s_time_1=$1704;$pc_1=$254;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
    }
    }
    if ((label|0) == 210) {
     label = 0;
     $1708=((($pc_1)+(3))|0);
     $1709=(($1698<<24)>>24);
     $1710=((($1709)+($ixy_0))|0);
     $1711=$1710&8191;
     $1712=$1710>>>13;
     $1713=$1712&7;
     $1714=(($s+($1713<<2))|0);
     $1715=((HEAP32[(($1714)>>2)])|0);
     $1716=(($1715+$1711)|0);
     $1717=((HEAP8[($1716)])|0);
     $1718=($1717&255);
     $s_time_4=$1704;$pc_3=$1708;$flags_4=$flags_8;$opcode_0=$268;$data_1=$1718;
     label = 80;
     break;
    }
    else if ((label|0) == 212) {
     label = 0;
     $1722=$ixy_0>>>8;
     $s_time_4=$1704;$pc_3=$1692;$flags_4=$flags_9;$opcode_0=$268;$data_1=$1722;
     label = 80;
     break;
    }
    else if ((label|0) == 214) {
     label = 0;
     $1726=$ixy_0&255;
     $s_time_4=$1704;$pc_3=$1692;$flags_4=$flags_10;$opcode_0=$268;$data_1=$1726;
     label = 80;
     break;
    }
    else if ((label|0) == 217) {
     label = 0;
     $1735=((($temp70_0)+($ixy_0))|0);
     $1736=$temp70_0^$ixy_0;
     $1737=$1735&65535;
     $1738=$flags_0&196;
     $1739=$1735>>>16;
     $1740=$1739|$1738;
     $1741=$1735>>>8;
     $1742=$1741&40;
     $1743=$1740|$1742;
     $1744=$1736^$1735;
     $1745=$1744>>>8;
     $1746=$1745&16;
     $1747=$1743|$1746;
     $pc_23=$1692;$sp_1=$sp_0;$flags_11=$1747;$ixy_1=$1737;
    }
    else if ((label|0) == 232) {
     label = 0;
     $data_17_in=((HEAP8[($data_17_in_in)])|0);
     $data_17=($data_17_in&255);
     $1823=((($pc_20)+(1))|0);
     HEAP32[(($11)>>2)]=$1704;
     $1824=(($1698<<24)>>24);
     $1825=((($1824)+($ixy_0))|0);
     $1826=$1825&65535;
     __Z13kss_cpu_writeP7Kss_Cpuji($this,$1826,$data_17);
     $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$1823;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
     continue L1;
    }
    else if ((label|0) == 239) {
     label = 0;
     $1862=$ixy_0&255;
     $1863=$data269_0<<8;
     $1864=$1863|$1862;
     $pc_23=$pc_21;$sp_1=$sp_0;$flags_11=$flags_0;$ixy_1=$1864;
    }
    else if ((label|0) == 243) {
     label = 0;
     $1875=$ixy_0&65280;
     $1876=$data269_1|$1875;
     $pc_23=$pc_22;$sp_1=$sp_0;$flags_11=$flags_0;$ixy_1=$1876;
    }
    else if ((label|0) == 258) {
     label = 0;
     $1993=(($252<<24)>>24)==-35;
     $iy_0_ixy_2=($1993?$iy_0:$ixy_2);
     $ixy_2_ix_0=($1993?$ixy_2:$ix_0);
     $s_time_6=$1704;$pc_5=$1692;$ix_1=$ixy_2_ix_0;$iy_1=$iy_0_ixy_2;$data_4=$data_18;
     label = 94;
     break;
    }
    else if ((label|0) == 261) {
     label = 0;
     $2004=(($252<<24)>>24)==-35;
     $iy_0_ixy_3=($2004?$iy_0:$ixy_3);
     $ixy_3_ix_0=($2004?$ixy_3:$ix_0);
     $s_time_7=$1704;$pc_6=$1692;$ix_2=$ixy_3_ix_0;$iy_2=$iy_0_ixy_3;$data_5=$data_19;
     label = 98;
     break;
    }
    $1878=(($252<<24)>>24)==-35;
    $iy_0_ixy_1=($1878?$iy_0:$ixy_1);
    $ixy_1_ix_0=($1878?$ixy_1:$ix_0);
    $warning_0_off0=$warning_0_off0;$s_time_1=$1704;$pc_1=$pc_23;$sp_0=$sp_1;$ix_0=$ixy_1_ix_0;$iy_0=$iy_0_ixy_1;$flags_0=$flags_11;
    continue L1;
   }
  } while(0);
  if ((label|0) == 4) {
   label = 0;
   $245=((($pc_1)+(3))|0);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_0;$pc_1=$245;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
   continue;
  }
  else if ((label|0) == 71) {
   label = 0;
   $488=((($sp_0)+(65534))|0);
   $489=$488&65535;
   $490=$488&8191;
   $491=$489>>>13;
   $492=(($s+36+($491<<2))|0);
   $493=((HEAP32[(($492)>>2)])|0);
   $494=(($493+$490)|0);
   __Z8set_le16Pvj($494,$data_0);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_3;$pc_1=$pc_2;$sp_0=$489;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$flags_0;
   continue;
  }
  else if ((label|0) == 80) {
   label = 0;
   $550=$flags_4&1;
   $551=((($550)+($data_1))|0);
   $552=((HEAP8[($50)])|0);
   $553=($552&255);
   $554=$553^$data_1;
   $555=$opcode_0>>>3;
   $556=$555&2;
   $557=($556|0)==0;
   $558=(((-$551))|0);
   $result_0=($557?$551:$558);
   $559=((($553)+($result_0))|0);
   $560=$554^$559;
   $561=$560&16;
   $562=((($560)+(128))|0);
   $563=$562>>>6;
   $564=$563&4;
   $565=$559&511;
   $566=(($this+$565)|0);
   $567=((HEAP8[($566)])|0);
   $568=($567&255);
   $569=$568&251;
   $570=$569|$556;
   $571=$570|$561;
   $572=$571|$564;
   $573=(($559)&255);
   HEAP8[($50)]=$573;
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_4;$pc_1=$pc_3;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$572;
   continue;
  }
  else if ((label|0) == 84) {
   label = 0;
   $592=((HEAP8[($54)])|0);
   $593=($592&255);
   $594=((($593)-($data_2))|0);
   $595=$data_2&40;
   $596=$594>>>8;
   $597=$596&1;
   $598=$593^$data_2;
   $599=$594^$593;
   $600=$599&$598;
   $601=$600>>>5;
   $602=$601&4;
   $603=$598&16;
   $_masked=$594&144;
   $604=$603^$_masked;
   $605=$597|$595;
   $606=$605|$604;
   $607=$606|$602;
   $608=$607|2;
   $609=(($594)&255);
   $610=(($609<<24)>>24)==0;
   if (!($610)) {
    $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_5;$pc_1=$pc_4;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$608;
    continue;
   }
   $612=$607|66;
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_5;$pc_1=$pc_4;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$612;
   continue;
  }
  else if ((label|0) == 94) {
   label = 0;
   $688=$flags_0&1;
   $689=$data_4&15;
   $690=((($689)+(31))|0);
   $691=$690&16;
   $692=$691|$688;
   $693=$data_4&255;
   $694=(($this+$693)|0);
   $695=((HEAP8[($694)])|0);
   $696=($695&255);
   $697=$696&251;
   $698=$692|$697;
   $699=($data_4|0)==128;
   if (!($699)) {
    $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_6;$pc_1=$pc_5;$sp_0=$sp_0;$ix_0=$ix_1;$iy_0=$iy_1;$flags_0=$698;
    continue;
   }
   $701=$698|4;
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_6;$pc_1=$pc_5;$sp_0=$sp_0;$ix_0=$ix_1;$iy_0=$iy_1;$flags_0=$701;
   continue;
  }
  else if ((label|0) == 98) {
   label = 0;
   $723=$flags_0&1;
   $724=$data_5&15;
   $725=((($724)+(1))|0);
   $726=$725&16;
   $727=$726|$723;
   $728=$data_5&255;
   $729=(($this+$728)|0);
   $730=((HEAP8[($729)])|0);
   $731=($730&255);
   $732=$731&249;
   $733=$727|$732;
   $734=$733|2;
   $735=($data_5|0)==127;
   if (!($735)) {
    $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_7;$pc_1=$pc_6;$sp_0=$sp_0;$ix_0=$ix_2;$iy_0=$iy_2;$flags_0=$734;
    continue;
   }
   $737=$733|6;
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_7;$pc_1=$pc_6;$sp_0=$sp_0;$ix_0=$ix_2;$iy_0=$iy_2;$flags_0=$737;
   continue;
  }
  else if ((label|0) == 107) {
   label = 0;
   $774=((HEAP8[($71)])|0);
   $775=($774&255);
   $776=$775&$data_6;
   $777=(($776)&255);
   HEAP8[($71)]=$777;
   $778=(($this+$776)|0);
   $779=((HEAP8[($778)])|0);
   $780=($779&255);
   $781=$780|16;
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_8;$pc_1=$pc_7;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$781;
   continue;
  }
  else if ((label|0) == 111) {
   label = 0;
   $800=((HEAP8[($76)])|0);
   $801=($800&255);
   $802=$801|$data_7;
   $803=(($802)&255);
   HEAP8[($76)]=$803;
   $804=$802&255;
   $805=(($this+$804)|0);
   $806=((HEAP8[($805)])|0);
   $807=($806&255);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_9;$pc_1=$pc_8;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$807;
   continue;
  }
  else if ((label|0) == 115) {
   label = 0;
   $826=((HEAP8[($81)])|0);
   $827=($826&255);
   $828=$827^$data_8;
   $829=(($828)&255);
   HEAP8[($81)]=$829;
   $830=$828&255;
   $831=(($this+$830)|0);
   $832=((HEAP8[($831)])|0);
   $833=($832&255);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_10;$pc_1=$pc_9;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$833;
   continue;
  }
  else if ((label|0) == 144) {
   label = 0;
   $1043=$data_9&8191;
   $1044=$data_9>>>13;
   $1045=(($s+($1044<<2))|0);
   $1046=((HEAP32[(($1045)>>2)])|0);
   $1047=(($1046+$1043)|0);
   $1048=((HEAP8[($1047)])|0);
   $1049=($1048&255);
   $1050=$1048<<1;
   $1051=($1050&255);
   $1052=$1049>>>7;
   $1053=$1051|$1052;
   $1054=(($this+$1053)|0);
   $1055=((HEAP8[($1054)])|0);
   $1056=($1055&255);
   $1057=$1056|$1052;
   HEAP32[(($11)>>2)]=$s_time_11;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_9,$1053);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_11;$pc_1=$pc_10;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1057;
   continue;
  }
  else if ((label|0) == 147) {
   label = 0;
   $1077=$data_10&8191;
   $1078=$data_10>>>13;
   $1079=(($s+($1078<<2))|0);
   $1080=((HEAP32[(($1079)>>2)])|0);
   $1081=(($1080+$1077)|0);
   $1082=((HEAP8[($1081)])|0);
   $1083=($1082&255);
   $1084=$1083<<1;
   $1085=$flags_0&1;
   $1086=$1084|$1085;
   $1087=(($this+$1086)|0);
   $1088=((HEAP8[($1087)])|0);
   $1089=($1088&255);
   HEAP32[(($11)>>2)]=$s_time_12;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_10,$1086);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_12;$pc_1=$pc_11;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1089;
   continue;
  }
  else if ((label|0) == 150) {
   label = 0;
   $1107=$data_11&8191;
   $1108=$data_11>>>13;
   $1109=(($s+($1108<<2))|0);
   $1110=((HEAP32[(($1109)>>2)])|0);
   $1111=(($1110+$1107)|0);
   $1112=((HEAP8[($1111)])|0);
   $1113=($1112&255);
   $1114=$1113<<1;
   $1115=(($this+$1114)|0);
   $1116=((HEAP8[($1115)])|0);
   $1117=($1116&255);
   HEAP32[(($11)>>2)]=$s_time_13;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_11,$1114);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_13;$pc_1=$pc_12;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1117;
   continue;
  }
  else if ((label|0) == 153) {
   label = 0;
   $1133=$data_12&8191;
   $1134=$data_12>>>13;
   $1135=(($s+($1134<<2))|0);
   $1136=((HEAP32[(($1135)>>2)])|0);
   $1137=(($1136+$1133)|0);
   $1138=((HEAP8[($1137)])|0);
   $1139=($1138&255);
   $1140=$1139<<1;
   $1141=$1140|1;
   $1142=(($this+$1141)|0);
   $1143=((HEAP8[($1142)])|0);
   $1144=($1143&255);
   HEAP32[(($11)>>2)]=$s_time_14;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_12,$1141);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_14;$pc_1=$pc_13;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1144;
   continue;
  }
  else if ((label|0) == 156) {
   label = 0;
   $1161=$data_13&8191;
   $1162=$data_13>>>13;
   $1163=(($s+($1162<<2))|0);
   $1164=((HEAP32[(($1163)>>2)])|0);
   $1165=(($1164+$1161)|0);
   $1166=((HEAP8[($1165)])|0);
   $1167=($1166&255);
   $1168=$1167&1;
   $1169=$1166<<7;
   $1170=($1169&255);
   $1171=$1167>>>1;
   $1172=$1170|$1171;
   $1173=(($this+$1172)|0);
   $1174=((HEAP8[($1173)])|0);
   $1175=($1174&255);
   $1176=$1168|$1175;
   HEAP32[(($11)>>2)]=$s_time_15;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_13,$1172);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_15;$pc_1=$pc_14;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1176;
   continue;
  }
  else if ((label|0) == 159) {
   label = 0;
   $1197=$data_14&8191;
   $1198=$data_14>>>13;
   $1199=(($s+($1198<<2))|0);
   $1200=((HEAP32[(($1199)>>2)])|0);
   $1201=(($1200+$1197)|0);
   $1202=((HEAP8[($1201)])|0);
   $1203=($1202&255);
   $1204=$1203&1;
   $1205=$flags_0<<7;
   $1206=$1205&128;
   $1207=$1203>>>1;
   $1208=$1207|$1206;
   $1209=(($this+$1208)|0);
   $1210=((HEAP8[($1209)])|0);
   $1211=($1210&255);
   $1212=$1211|$1204;
   HEAP32[(($11)>>2)]=$s_time_16;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_14,$1208);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_16;$pc_1=$pc_15;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1212;
   continue;
  }
  else if ((label|0) == 162) {
   label = 0;
   $1233=$data_15&8191;
   $1234=$data_15>>>13;
   $1235=(($s+($1234<<2))|0);
   $1236=((HEAP32[(($1235)>>2)])|0);
   $1237=(($1236+$1233)|0);
   $1238=((HEAP8[($1237)])|0);
   $1239=($1238&255);
   $1240=$1239&1;
   $1241=$1239&128;
   $1242=$1239>>>1;
   $1243=$1241|$1242;
   $1244=(($this+$1243)|0);
   $1245=((HEAP8[($1244)])|0);
   $1246=($1245&255);
   $1247=$1240|$1246;
   HEAP32[(($11)>>2)]=$s_time_17;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_15,$1243);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_17;$pc_1=$pc_16;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1247;
   continue;
  }
  else if ((label|0) == 165) {
   label = 0;
   $1267=$data_16&8191;
   $1268=$data_16>>>13;
   $1269=(($s+($1268<<2))|0);
   $1270=((HEAP32[(($1269)>>2)])|0);
   $1271=(($1270+$1267)|0);
   $1272=((HEAP8[($1271)])|0);
   $1273=($1272&255);
   $1274=$1273&1;
   $1275=$1273>>>1;
   $1276=(($this+$1275)|0);
   $1277=((HEAP8[($1276)])|0);
   $1278=($1277&255);
   $1279=$1274|$1278;
   HEAP32[(($11)>>2)]=$s_time_18;
   __Z13kss_cpu_writeP7Kss_Cpuji($this,$data_16,$1275);
   $warning_0_off0=$warning_0_off0;$s_time_1=$s_time_18;$pc_1=$pc_17;$sp_0=$sp_0;$ix_0=$ix_0;$iy_0=$iy_0;$flags_0=$1279;
   continue;
  }
 }
 if ((label|0) == 173) {
  ___assert_fail(((3704)|0),((7400)|0),((1058)|0),((8984)|0));
  return ((0)|0);
 }
 else if ((label|0) == 266) {
  ___assert_fail(((3704)|0),((7400)|0),((1685)|0),((8984)|0));
  return ((0)|0);
 }
 else if ((label|0) == 267) {
  $2028=((($258)-(11))|0);
  $extract_t709=(($pc_1)&65535);
  $extract_t712=(($sp_0)&65535);
  $extract_t715=(($ix_0)&65535);
  $extract_t718=(($iy_0)&65535);
  $extract_t721=(($flags_0)&255);
  $s_time_22=$2028;$flags_0675_off0=$extract_t721;$iy_0680_off0=$extract_t718;$ix_0685_off0=$extract_t715;$sp_0690_off0=$extract_t712;$pc_1695_off0=$extract_t709;
  HEAP32[(($11)>>2)]=$s_time_22;
  $2032=(($6+7)|0);
  HEAP8[($2032)]=$flags_0675_off0;
  HEAP16[(($19)>>1)]=$ix_0685_off0;
  HEAP16[(($22)>>1)]=$iy_0680_off0;
  HEAP16[(($16)>>1)]=$sp_0690_off0;
  HEAP16[(($13)>>1)]=$pc_1695_off0;
  $ld$4$0=(($1)|0);
  $2033$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($1+4)|0);
  $2033$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($9)|0);
  tempBigInt=$2033$0;HEAP8[($st$6$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(3))|0)]=tempBigInt&0xff;
  $st$7$1=(($9+4)|0);
  tempBigInt=$2033$1;HEAP8[($st$7$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(3))|0)]=tempBigInt&0xff;
  (_memcpy((($4)|0), (($3)|0), 80)|0);
  HEAP32[(($5)>>2)]=$2;
  STACKTOP=sp;return (($warning_0_off0)|0);
 }
 else if ((label|0) == 268) {
  $2030=$258&3;
  $extract_t=(($pc_1)&65535);
  $extract_t711=(($sp_0)&65535);
  $extract_t714=(($ix_0)&65535);
  $extract_t717=(($iy_0)&65535);
  $extract_t720=(($flags_0)&255);
  $s_time_22=$2030;$flags_0675_off0=$extract_t720;$iy_0680_off0=$extract_t717;$ix_0685_off0=$extract_t714;$sp_0690_off0=$extract_t711;$pc_1695_off0=$extract_t;
  HEAP32[(($11)>>2)]=$s_time_22;
  $2032=(($6+7)|0);
  HEAP8[($2032)]=$flags_0675_off0;
  HEAP16[(($19)>>1)]=$ix_0685_off0;
  HEAP16[(($22)>>1)]=$iy_0680_off0;
  HEAP16[(($16)>>1)]=$sp_0690_off0;
  HEAP16[(($13)>>1)]=$pc_1695_off0;
  $ld$4$0=(($1)|0);
  $2033$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($1+4)|0);
  $2033$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($9)|0);
  tempBigInt=$2033$0;HEAP8[($st$6$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(3))|0)]=tempBigInt&0xff;
  $st$7$1=(($9+4)|0);
  tempBigInt=$2033$1;HEAP8[($st$7$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(3))|0)]=tempBigInt&0xff;
  (_memcpy((($4)|0), (($3)|0), 80)|0);
  HEAP32[(($5)>>2)]=$2;
  STACKTOP=sp;return (($warning_0_off0)|0);
 }
 else if ((label|0) == 269) {
  $extract_t710=(($pc_1)&65535);
  $extract_t713=(($sp_0)&65535);
  $extract_t716=(($ix_0)&65535);
  $extract_t719=(($iy_0)&65535);
  $extract_t722=(($flags_0)&255);
  $s_time_22=$s_time_1;$flags_0675_off0=$extract_t722;$iy_0680_off0=$extract_t719;$ix_0685_off0=$extract_t716;$sp_0690_off0=$extract_t713;$pc_1695_off0=$extract_t710;
  HEAP32[(($11)>>2)]=$s_time_22;
  $2032=(($6+7)|0);
  HEAP8[($2032)]=$flags_0675_off0;
  HEAP16[(($19)>>1)]=$ix_0685_off0;
  HEAP16[(($22)>>1)]=$iy_0680_off0;
  HEAP16[(($16)>>1)]=$sp_0690_off0;
  HEAP16[(($13)>>1)]=$pc_1695_off0;
  $ld$4$0=(($1)|0);
  $2033$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($1+4)|0);
  $2033$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($9)|0);
  tempBigInt=$2033$0;HEAP8[($st$6$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$0)+(3))|0)]=tempBigInt&0xff;
  $st$7$1=(($9+4)|0);
  tempBigInt=$2033$1;HEAP8[($st$7$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$7$1)+(3))|0)]=tempBigInt&0xff;
  (_memcpy((($4)|0), (($3)|0), 80)|0);
  HEAP32[(($5)>>2)]=$2;
  STACKTOP=sp;return (($warning_0_off0)|0);
 }
  return 0;
}
function __ZN7Kss_Cpu12set_end_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+516)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+72)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)-($t))|0);
 HEAP32[(($3)>>2)]=$t;
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($6+76)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($5)+($8))|0);
 HEAP32[(($7)>>2)]=$9;
 return;
}
function __ZN7Kss_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15$0=0,$15$1=0,$18$0=0,$18$1=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 __ZN7Kss_CpuC2Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuC2Ev($3);
 $4=$this;
 HEAP32[(($4)>>2)]=13608;
 $5=(($this+904)|0);
 __ZN8Rom_DataILi8192EEC1Ev($5);
 $6=(($this+66784)|0);
 __ZN6Ay_ApuC2Ev($6);
 $8=(($this+68080)|0);
 __ZN7Scc_ApuC1Ev($8);
 $10=(($this+68872)|0);
 HEAP32[(($10)>>2)]=0;
 $11=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($11,200);
 $12=$this;
 __ZN9Music_Emu21set_silence_lookaheadEi($12,6);
 __ZN9Music_Emu15set_voice_namesEPKPKc($12,10896);
 __ZN11Classic_Emu15set_voice_typesEPKi($3,10864);
 $13=(($this+68876)|0);
 _memset((((($13)|0))|0), ((((-1)|0))|0), ((((256)|0))|0));
 return;
}
function __ZN7Scc_ApuC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN7Scc_ApuC2Ev($this);
 return;
}
function __ZN7Kss_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Kss_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Kss_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$11=0,$12=0,$10$0=0,$10$1=0,$15$0=0,$15$1=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=13608;
 $2=$this;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 FUNCTION_TABLE_vi[($5)&255]($this);
 $7=(($this+904)|0);
 __ZN8Rom_DataILi8192EED1Ev($7);
 $8=(($this)|0);
 __ZN11Classic_EmuD2Ev($8);
 return;
}
function __ZN7Kss_Emu6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$6=0,$8=0,$11=0,$10$0=0,$10$1=0,label=0;
 $1=(($this+68872)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  __ZN7Sms_ApuD2Ev($2);
  $6=$2;
  __ZdlPv($6);
 }
 HEAP32[(($1)>>2)]=0;
 $8=$this;
 __ZN9Music_Emu6unloadEv($8);
 return;
}
function __ZNK7Kss_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+928)|0);
 __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($h,$out){
 $h=($h)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$_=0,$system_0=0,$10=0,label=0;
 $1=(($h+15)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3&2;
 $5=($4|0)==0;
 if ($5) {
  $system_0=1024;
 } else {
  $7=$3&4;
  $8=($7|0)==0;
  $_=($8?4072:4008);
  $system_0=$_;
 }
 $10=(($out+16)|0);
 __ZN8Gme_File11copy_field_EPcPKc($10,$system_0);
 return;
}
function __ZL11new_kss_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(77328))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Kss_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL12new_kss_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(272))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Kss_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Kss_Emu11update_gainEv($this){
 $this=($this)|0;
 var $1=0,$2=.0,$3=.0,$4=0,$5=0,$6=0,$7=0,$9=.0,$g_0=.0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 $1=$this;
 $2=(+(__ZNK9Music_Emu4gainEv($1)));
 $3=($2)*((1.4));
 $4=(($this+960)|0);
 $5=((HEAP8[($4)])|0);
 $6=$5&1;
 $7=(($6<<24)>>24)==0;
 if ($7) {
  $g_0=$3;
 } else {
  $9=($3)*((1.5));
  $g_0=$9;
 }
 $11=(($this+66784)|0);
 __ZN6Ay_Apu6volumeEd($11,$g_0);
 $12=(($this+68080)|0);
 __ZN7Scc_Apu6volumeEd($12,$g_0);
 $13=(($this+68872)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)==0;
 if ($15) {
  return;
 }
 __ZN7Sms_Apu6volumeEd($14,$g_0);
 return;
}
function __ZN7Scc_Apu6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=.0,label=0;
 $1=(($this+232)|0);
 $2=($v)*((0.00000262451171875));
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($1,$2);
 return;
}
function __ZN7Kss_Emu5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$17=0,$19=0,$20=0,$21=0,$23=0,$24=0,$26=0,$27=0;
 var $28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$37=0,$38=0,$39=0,$40=0,$42=0,$44=0,$45=0,$46=0,$47=0,$50=0,$51=0,$52=0,$54=0;
 var $55=0,$56=0,$58=0,$59=0,$61=0,$65=0,$66=0,$67=0,$_0=0,$63$0=0,$63$1=0,label=0;
 $1=(($this+928)|0);
 _memset((((($1)|0))|0), ((((0)|0))|0), ((((32)|0))|0));
 $2=(($this+904)|0);
 $3=((__ZN8Rom_DataILi8192EE4loadER11Data_ReaderiPvi($2,$in,16,$1,0))|0);
 $4=($3|0)==0;
 if (!($4)) {
  $_0=$3;
  return (($_0)|0);
 }
 $6=((__ZL16check_kss_headerPKv($1))|0);
 $7=($6|0)==0;
 if (!($7)) {
  $_0=$6;
  return (($_0)|0);
 }
 $9=(($this+931)|0);
 $10=((HEAP8[($9)])|0);
 $11=(($10<<24)>>24)==67;
 do {
  if ($11) {
   $13=(($this+942)|0);
   $14=((HEAP8[($13)])|0);
   $15=(($14<<24)>>24)==0;
   if (!($15)) {
    HEAP8[($13)]=0;
    $17=$this;
    __ZN8Gme_File11set_warningEPKc($17,8168);
   }
   $19=(($this+943)|0);
   $20=((HEAP8[($19)])|0);
   $21=((($20&255))>>>0)<((16)>>>0);
   if ($21) {
    break;
   }
   $23=$20&15;
   HEAP8[($19)]=$23;
   $24=$this;
   __ZN8Gme_File11set_warningEPKc($24,8168);
  } else {
   $26=(($this+944)|0);
   $27=((__ZNK8Rom_DataILi8192EE5beginEv($2))|0);
   $28=(($this+942)|0);
   $29=((HEAP8[($28)])|0);
   $30=($29&255);
   $31=((__Z3minIiET_S0_S0_(16,$30))|0);
   (_memcpy((($26)|0), (($27)|0), $31)|0);
   $32=((HEAP8[($28)])|0);
   $33=((($32&255))>>>0)>((16)>>>0);
   if (!($33)) {
    break;
   }
   $35=$this;
   __ZN8Gme_File11set_warningEPKc($35,8168);
  }
 } while(0);
 $37=(($this+943)|0);
 $38=((HEAP8[($37)])|0);
 $39=$38&9;
 $40=(($39<<24)>>24)==0;
 if (!($40)) {
  $42=$this;
  __ZN8Gme_File11set_warningEPKc($42,7848);
 }
 $44=(($this+964)|0);
 HEAP32[(($44)>>2)]=49152;
 $45=((HEAP8[($37)])|0);
 $46=$45&4;
 $47=(($46<<24)>>24)==0;
 if (!($47)) {
  HEAP32[(($44)>>2)]=0;
 }
 $50=((HEAP8[($37)])|0);
 $51=$50&2;
 $52=(($51<<24)>>24)==0;
 do {
  if (!($52)) {
   $54=(($this+68872)|0);
   $55=((HEAP32[(($54)>>2)])|0);
   $56=($55|0)==0;
   if (!($56)) {
    break;
   }
   $58=((__Znwj(1600))|0);
   $59=$58;
   __ZN7Sms_ApuC2Ev($59);
   HEAP32[(($54)>>2)]=$59;
   $61=($58|0)==0;
   if ($61) {
    $_0=7496;
   } else {
    break;
   }
   return (($_0)|0);
  }
 } while(0);
 $65=$this;
 __ZN9Music_Emu15set_voice_countEi($65,8);
 $66=(($this)|0);
 $67=((__ZN11Classic_Emu12setup_bufferEl($66,3579545))|0);
 $_0=$67;
 return (($_0)|0);
}
function __ZL16check_kss_headerPKv($header){
 $header=($header)|0;
 var $1=0,$2=0,$4=0,$5=0,$_0=0,label=0;
 $1=((_memcmp((($header)|0),((4360)|0),((4)|0)))|0);
 $2=($1|0)==0;
 do {
  if (!($2)) {
   $4=((_memcmp((($header)|0),((4216)|0),((4)|0)))|0);
   $5=($4|0)==0;
   if ($5) {
    break;
   } else {
    $_0=16;
   }
   return (($_0)|0);
  }
 } while(0);
 $_0=0;
 return (($_0)|0);
}
function __ZN7Kss_Emu9update_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+66784)|0);
 __ZN6Ay_Apu9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+68080)|0);
 __ZN7Scc_Apu9treble_eqERK9blip_eq_t($2,$eq);
 $3=(($this+68872)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  return;
 }
 __ZN7Sms_Apu9treble_eqERK9blip_eq_t($4,$eq);
 return;
}
function __ZN7Scc_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+232)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Kss_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right){
 $this=($this)|0;
 $i=($i)|0;
 $center=($center)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$2=0,$4=0,$6=0,$8=0,$9=0,$10=0,$11=0,$or_cond=0,label=0;
 $1=((($i)-(3))|0);
 $2=($1|0)>-1;
 if ($2) {
  $4=(($this+68080)|0);
  __ZN7Scc_Apu10osc_outputEiP11Blip_Buffer($4,$1,$center);
 } else {
  $6=(($this+66784)|0);
  __ZN6Ay_Apu10osc_outputEiP11Blip_Buffer($6,$i,$center);
 }
 $8=(($this+68872)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)!=0;
 $11=($i|0)<4;
 $or_cond=$10&$11;
 if (!($or_cond)) {
  return;
 }
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($9,$i,$center,$left,$right);
 return;
}
function __ZN7Scc_Apu10osc_outputEiP11Blip_Buffer($this,$index,$b){
 $this=($this)|0;
 $index=($index)|0;
 $b=($b)|0;
 var $1=0,$4=0,label=0;
 $1=($index>>>0)<((5)>>>0);
 if ($1) {
  $4=(($this+($index<<4)+12)|0);
  HEAP32[(($4)>>2)]=$b;
  return;
 } else {
  ___assert_fail(((4504)|0),((5432)|0),((66)|0),((9240)|0));
 }
}
function __ZN7Kss_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$3=0,$4=0,$5=.0,$6=.0,$7=0,$8=0,label=0;
 $1=(($this+943)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&64;
 $4=(($3<<24)>>24)!=0;
 $5=($4?(71590.0):(59659.0));
 $6=($5)/($t);
 $7=(~~($6));
 $8=(($this+976)|0);
 HEAP32[(($8)>>2)]=$7;
 return;
}
function __ZN7Kss_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$sum=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((__ZN11Classic_Emu12start_track_Ei($1,$track))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this+988)|0);
 _memset((((($5)|0))|0), ((((-55)|0))|0), ((((16384)|0))|0));
 $6=(($this+17372)|0);
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((49408)|0))|0));
 $7=(($this+989)|0);
 (_memcpy((($7)|0), ((10936)|0), 13)|0);
 $8=(($this+1135)|0);
 HEAP8[($8)]=((HEAP8[(10928)])|0);HEAP8[((($8)+(1))|0)]=((HEAP8[(10929)])|0);HEAP8[((($8)+(2))|0)]=((HEAP8[(10930)])|0);HEAP8[((($8)+(3))|0)]=((HEAP8[(10931)])|0);HEAP8[((($8)+(4))|0)]=((HEAP8[(10932)])|0);HEAP8[((($8)+(5))|0)]=((HEAP8[(10933)])|0);
 $9=(($this+932)|0);
 $10=((__Z8get_le16PKv($9))|0);
 $11=(($this+934)|0);
 $12=((__Z8get_le16PKv($11))|0);
 $13=(($this+904)|0);
 $14=((__ZNK8Rom_DataILi8192EE9file_sizeEv($13))|0);
 $15=((__Z3minIlET_S0_S0_($12,$14))|0);
 $16=(((65536)-($10))|0);
 $17=((__Z3minIlET_S0_S0_($15,$16))|0);
 $18=($17|0)==($12|0);
 if (!($18)) {
  $20=$this;
  __ZN8Gme_File11set_warningEPKc($20,7152);
 }
 $22=(($this+988+$10)|0);
 $23=((__ZNK8Rom_DataILi8192EE5beginEv($13))|0);
 $24=(($this+942)|0);
 $25=((HEAP8[($24)])|0);
 $26=($25&255);
 $27=(($23+$26)|0);
 (_memcpy((($22)|0), (($27)|0), $17)|0);
 $28=((HEAP8[($24)])|0);
 $29=($28&255);
 $sum=((($29)+($17))|0);
 $30=(((-$sum))|0);
 __ZN8Rom_DataILi8192EE8set_addrEl($13,$30);
 $31=((__ZNK7Kss_Emu9bank_sizeEv($this))|0);
 $32=((__ZNK8Rom_DataILi8192EE9file_sizeEv($13))|0);
 $33=$17^-1;
 $34=((($31)+($33))|0);
 $35=((($34)+($32))|0);
 $36=(((($35|0))/(($31|0)))&-1);
 $37=(($this+941)|0);
 $38=((HEAP8[($37)])|0);
 $39=($38&255);
 $40=$39&127;
 $41=(($this+972)|0);
 HEAP32[(($41)>>2)]=$40;
 $42=($40|0)>($36|0);
 if ($42) {
  HEAP32[(($41)>>2)]=$36;
  $44=$this;
  __ZN8Gme_File11set_warningEPKc($44,6824);
 }
 $46=(($this+66523)|0);
 HEAP8[($46)]=-1;
 $47=(($this+272)|0);
 $48=$47;
 $49=(($this+69132)|0);
 $50=(($this+68876)|0);
 __ZN7Kss_Cpu5resetEPvPKv($48,$49,$50);
 __ZN7Kss_Cpu7map_memEjjPvPKv($48,0,65536,$5,$5);
 $51=(($this+66784)|0);
 __ZN6Ay_Apu5resetEv($51);
 $52=(($this+68080)|0);
 __ZN7Scc_Apu5resetEv($52);
 $53=(($this+68872)|0);
 $54=((HEAP32[(($53)>>2)])|0);
 $55=($54|0)==0;
 if (!($55)) {
  __ZN7Sms_Apu5resetEji($54,0,0);
 }
 $58=(($this+872)|0);
 $59=(($this+874)|0);
 $60=$59;
 HEAP16[(($60)>>1)]=-3201;
 $61=(($this+63323)|0);
 HEAP8[($61)]=-1;
 $62=((HEAP16[(($60)>>1)])|0);
 $63=((($62)-(1))&65535);
 HEAP16[(($60)>>1)]=$63;
 $64=($63&65535);
 $65=(($this+988+$64)|0);
 HEAP8[($65)]=-1;
 $66=(($track)&255);
 $67=(($this+886)|0);
 HEAP8[($67)]=$66;
 $68=(($this+936)|0);
 $69=((__Z8get_le16PKv($68))|0);
 $70=(($69)&65535);
 $71=$58;
 HEAP16[(($71)>>1)]=$70;
 $72=(($this+976)|0);
 $73=((HEAP32[(($72)>>2)])|0);
 $74=(($this+980)|0);
 HEAP32[(($74)>>2)]=$73;
 $75=(($this+960)|0);
 HEAP8[($75)]=0;
 $76=(($this+961)|0);
 HEAP8[($76)]=0;
 __ZN7Kss_Emu11update_gainEv($this);
 $77=(($this+984)|0);
 HEAP32[(($77)>>2)]=0;
 $_0=0;
 return (($_0)|0);
}
function __Z3minIlET_S0_S0_($x,$y){
 $x=($x)|0;
 $y=($y)|0;
 var $1=0,$x_y=0,label=0;
 $1=($x|0)<($y|0);
 $x_y=($1?$x:$y);
 return (($x_y)|0);
}
function __ZNK7Kss_Emu9bank_sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+941)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3>>>7;
 $5=16384>>>($4>>>0);
 return (($5)|0);
}
function __ZN7Scc_Apu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 $1=(($this+80)|0);
 HEAP32[(($1)>>2)]=0;
 $2=$this;
 _memset((((($2)|0))|0), ((((0)|0))|0), ((((12)|0))|0));
 $3=(($this+16)|0);
 $4=$3;
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((12)|0))|0));
 $5=(($this+32)|0);
 $6=$5;
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((12)|0))|0));
 $7=(($this+48)|0);
 $8=$7;
 _memset((((($8)|0))|0), ((((0)|0))|0), ((((12)|0))|0));
 $9=(($this+64)|0);
 $10=$9;
 _memset((((($10)|0))|0), ((((0)|0))|0), ((((12)|0))|0));
 $11=(($this+84)|0);
 _memset((((($11)|0))|0), ((((0)|0))|0), ((((144)|0))|0));
 return;
}
function __ZN7Kss_Emu8set_bankEii($this,$logical,$physical){
 $this=($this)|0;
 $logical=($logical)|0;
 $physical=($physical)|0;
 var $1=0,$2=0,$3=0,$or_cond=0,$addr_0=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$offset_014=0,$23=0,$24=0,$25=0,$26=0,$27=0,label=0;
 $1=((__ZNK7Kss_Emu9bank_sizeEv($this))|0);
 $2=($logical|0)!=0;
 $3=($1|0)==8192;
 $or_cond=$2&$3;
 $addr_0=($or_cond?40960:32768);
 $4=(($this+940)|0);
 $5=((HEAP8[($4)])|0);
 $6=($5&255);
 $7=((($physical)-($6))|0);
 $8=(($this+972)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($7>>>0)<($9>>>0);
 if (!($10)) {
  $12=(($this+988+$addr_0)|0);
  $13=(($this+272)|0);
  $14=$13;
  __ZN7Kss_Cpu7map_memEjjPvPKv($14,$addr_0,$1,$12,$12);
  return;
 }
 $16=(Math_imul($7,$1)|0);
 $17=($1|0)==0;
 if ($17) {
  return;
 }
 $18=(($this+272)|0);
 $19=$18;
 $20=(($this+69132)|0);
 $21=(($this+904)|0);
 $offset_014=0;
 while(1) {
  $23=((($offset_014)+($addr_0))|0);
  $24=((($offset_014)+($16))|0);
  $25=((__ZN8Rom_DataILi8192EE7at_addrEi($21,$24))|0);
  __ZN7Kss_Cpu7map_memEjjPvPKv($19,$23,8192,$20,$25);
  $26=((($offset_014)+(8192))|0);
  $27=($26>>>0)<($1>>>0);
  if ($27) {
   $offset_014=$26;
  } else {
   break;
  }
 }
 return;
}
function __ZN7Kss_Emu9cpu_writeEji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;
 $1=$data&255;
 if (((($addr|0))|0)==((36864)|0)) {
  __ZN7Kss_Emu8set_bankEii($this,0,$1);
  return;
 } else if (((($addr|0))|0)==((45056)|0)) {
  __ZN7Kss_Emu8set_bankEii($this,1,$1);
  return;
 } else {
  $5=$addr&57343;
  $6=$5^38912;
  $7=($6>>>0)<((144)>>>0);
  if (!($7)) {
   return;
  }
  $9=(($this+960)|0);
  HEAP8[($9)]=1;
  $10=(($this+68080)|0);
  $11=(($this+272)|0);
  $12=$11;
  $13=((__ZNK7Kss_Cpu4timeEv($12))|0);
  __ZN7Scc_Apu5writeEiii($10,$13,$6,$1);
  return;
 }
}
function __ZN7Scc_Apu5writeEiii($this,$time,$addr,$data){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$4=0,$5=0,label=0;
 $1=($addr>>>0)<((144)>>>0);
 if ($1) {
  __ZN7Scc_Apu9run_untilEi($this,$time);
  $4=(($data)&255);
  $5=(($this+84+$addr)|0);
  HEAP8[($5)]=$4;
  return;
 } else {
  ___assert_fail(((4984)|0),((5432)|0),((72)|0),((8856)|0));
 }
}
function __ZNK7Kss_Cpu4timeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+516)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+76)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+72)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)+($4))|0);
 return (($7)|0);
}
function __Z13kss_cpu_writeP7Kss_Cpuji($cpu,$addr,$data){
 $cpu=($cpu)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,label=0;
 $1=(($data)&255);
 $2=((__ZN7Kss_Cpu5writeEj($cpu,$addr))|0);
 HEAP8[($2)]=$1;
 $3=(($cpu+692)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5&$addr;
 $7=($6|0)==32768;
 if (!($7)) {
  return;
 }
 $9=((($cpu)-(272))|0);
 $10=$9;
 __ZN7Kss_Emu9cpu_writeEji($10,$addr,$data);
 return;
}
function __ZN7Kss_Cpu5writeEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=$addr>>>13;
 $2=(($this+516)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+36+($1<<2))|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$addr&8191;
 $7=(($5+$6)|0);
 return (($7)|0);
}
function __Z11kss_cpu_outP7Kss_Cpuiji($cpu,$time,$addr,$data){
 $cpu=($cpu)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$25=0,$26=0;
 var $27=0,$28=0,$31=0,$32=0,label=0;
 $1=$data&255;
 $2=$addr&255;
 switch (($2|0)) {
 case 160: {
  $4=$data&15;
  $5=(($cpu+712)|0);
  $6=$5;
  HEAP32[(($6)>>2)]=$4;
  return;
  break;
 }
 case 161: {
  $8=(($cpu+66512)|0);
  $9=$8;
  $10=(($cpu+712)|0);
  $11=$10;
  $12=((HEAP32[(($11)>>2)])|0);
  __ZN6Ay_Apu5writeEiii($9,$time,$12,$1);
  return;
  break;
 }
 case 6: {
  $14=(($cpu+68600)|0);
  $15=$14;
  $16=((HEAP32[(($15)>>2)])|0);
  $17=($16|0)==0;
  if ($17) {
   return;
  }
  $19=(($cpu+671)|0);
  $20=((HEAP8[($19)])|0);
  $21=$20&4;
  $22=(($21<<24)>>24)==0;
  if ($22) {
   return;
  }
  __ZN7Sms_Apu14write_ggstereoEii($16,$time,$1);
  return;
  break;
 }
 case 126:case 127: {
  $25=(($cpu+68600)|0);
  $26=$25;
  $27=((HEAP32[(($26)>>2)])|0);
  $28=($27|0)==0;
  if ($28) {
   return;
  }
  __ZN7Sms_Apu10write_dataEii($27,$time,$1);
  return;
  break;
 }
 case 254: {
  $31=((($cpu)-(272))|0);
  $32=$31;
  __ZN7Kss_Emu8set_bankEii($32,0,$1);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __Z10kss_cpu_inP7Kss_Cpuij($0,$1,$addr){
 $0=($0)|0;
 $1=($1)|0;
 $addr=($addr)|0;
 var label=0;
 return ((0)|0);
}
function __ZN7Kss_Emu10run_clocksERii($this,$duration,$0){
 $this=($this)|0;
 $duration=($duration)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$_lcssa10=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$69=0;
 var label=0;
 $2=(($this+272)|0);
 $3=$2;
 $4=((__ZNK7Kss_Cpu4timeEv($3))|0);
 $5=((HEAP32[(($duration)>>2)])|0);
 $6=($4|0)<($5|0);
 if ($6) {
  $7=(($this+980)|0);
  $8=(($this+872)|0);
  $9=$8;
  $10=(($this+976)|0);
  $11=(($this+961)|0);
  $12=(($this+960)|0);
  $13=(($this+874)|0);
  $14=$13;
  $15=(($this+938)|0);
  $17=$5;
  while(1) {
   $18=((HEAP32[(($7)>>2)])|0);
   $19=((__Z3minIiET_S0_S0_($17,$18))|0);
   $20=((__ZN7Kss_Cpu3runEi($3,$19))|0);
   $21=((HEAP16[(($9)>>1)])|0);
   $22=(($21<<16)>>16)==-1;
   if ($22) {
    __ZN7Kss_Cpu8set_timeEi($3,$19);
   }
   $25=((__ZNK7Kss_Cpu4timeEv($3))|0);
   $26=((HEAP32[(($7)>>2)])|0);
   $27=($25|0)<($26|0);
   do {
    if (!($27)) {
     $29=((HEAP32[(($10)>>2)])|0);
     $30=((($29)+($26))|0);
     HEAP32[(($7)>>2)]=$30;
     $31=((HEAP16[(($9)>>1)])|0);
     $32=(($31<<16)>>16)==-1;
     if (!($32)) {
      break;
     }
     $37=((HEAP8[($11)])|0);
     $38=$37&1;
     $39=(($38<<24)>>24)==0;
     do {
      if ($39) {
       HEAP8[($11)]=1;
       $41=((HEAP8[($12)])|0);
       $42=$41&1;
       $43=(($42<<24)>>24)==0;
       if ($43) {
        break;
       }
       __ZN7Kss_Emu11update_gainEv($this);
      }
     } while(0);
     $46=((HEAP16[(($14)>>1)])|0);
     $47=((($46)-(1))&65535);
     HEAP16[(($14)>>1)]=$47;
     $48=($47&65535);
     $49=(($this+988+$48)|0);
     HEAP8[($49)]=-1;
     $50=((HEAP16[(($14)>>1)])|0);
     $51=((($50)-(1))&65535);
     HEAP16[(($14)>>1)]=$51;
     $52=($51&65535);
     $53=(($this+988+$52)|0);
     HEAP8[($53)]=-1;
     $54=((__Z8get_le16PKv($15))|0);
     $55=(($54)&65535);
     HEAP16[(($9)>>1)]=$55;
    }
   } while(0);
   $33=((__ZNK7Kss_Cpu4timeEv($3))|0);
   $34=((HEAP32[(($duration)>>2)])|0);
   $35=($33|0)<($34|0);
   if ($35) {
    $17=$34;
   } else {
    $_lcssa10=$33;
    break;
   }
  }
 } else {
  $_lcssa10=$4;
 }
 HEAP32[(($duration)>>2)]=$_lcssa10;
 $56=(($this+980)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=((($57)-($_lcssa10))|0);
 HEAP32[(($56)>>2)]=$58;
 $59=((HEAP32[(($duration)>>2)])|0);
 $60=(((-$59))|0);
 __ZN7Kss_Cpu11adjust_timeEi($3,$60);
 $61=(($this+66784)|0);
 $62=((HEAP32[(($duration)>>2)])|0);
 __ZN6Ay_Apu9end_frameEi($61,$62);
 $63=(($this+68080)|0);
 $64=((HEAP32[(($duration)>>2)])|0);
 __ZN7Scc_Apu9end_frameEi($63,$64);
 $65=(($this+68872)|0);
 $66=((HEAP32[(($65)>>2)])|0);
 $67=($66|0)==0;
 if ($67) {
  return ((0)|0);
 }
 $69=((HEAP32[(($duration)>>2)])|0);
 __ZN7Sms_Apu9end_frameEi($66,$69);
 return ((0)|0);
}
function __ZN7Kss_Cpu8set_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+516)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+72)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($t)-($4))|0);
 $6=(($2+76)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}
function __ZN7Kss_Cpu11adjust_timeEi($this,$delta){
 $this=($this)|0;
 $delta=($delta)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+516)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+76)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)+($delta))|0);
 HEAP32[(($3)>>2)]=$5;
 return;
}
function __ZN7Scc_Apu9end_frameEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+80)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($end_time|0);
 if ($3) {
  __ZN7Scc_Apu9run_untilEi($this,$end_time);
 }
 $6=((HEAP32[(($1)>>2)])|0);
 $7=((($6)-($end_time))|0);
 HEAP32[(($1)>>2)]=$7;
 $8=($7|0)>-1;
 if ($8) {
  return;
 } else {
  ___assert_fail(((5616)|0),((5432)|0),((82)|0),((8840)|0));
 }
}
function __ZN8Kss_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Kss_FileC2Ev($this);
 return;
}
function __ZN8Kss_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12800;
 $3=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($3,200);
 return;
}
function __ZN8Kss_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Kss_FileD2Ev($this);
 return;
}
function __ZN8Kss_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Kss_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Kss_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$_0=0,label=0;
 $1=$in;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+252)|0);
 $6=((FUNCTION_TABLE_iiii[($4)&127]($in,$5,16))|0);
 $7=($6|0)==0;
 if ($7) {
  $12=((__ZL16check_kss_headerPKv($5))|0);
  $_0=$12;
  return (($_0)|0);
 } else {
  $9=($6|0)==17648;
  $10=($9?16:$6);
  $_0=$10;
  return (($_0)|0);
 }
  return 0;
}
function __ZNK8Kss_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+252)|0);
 __ZL15copy_kss_fieldsRKN7Kss_Emu8header_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZN8Kss_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_D2Ev($1);
 return;
}
function __ZN7Scc_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+232)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
 __ZN7Scc_Apu6outputEP11Blip_Buffer($this,0);
 return;
}
function __ZN7Scc_Apu6outputEP11Blip_Buffer($this,$buf){
 $this=($this)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+12)|0);
 HEAP32[(($1)>>2)]=$buf;
 $2=(($this+28)|0);
 HEAP32[(($2)>>2)]=$buf;
 $3=(($this+44)|0);
 HEAP32[(($3)>>2)]=$buf;
 $4=(($this+60)|0);
 HEAP32[(($4)>>2)]=$buf;
 $5=(($this+76)|0);
 HEAP32[(($5)>>2)]=$buf;
 return;
}
function __ZN7Scc_Apu9run_untilEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$index_059=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$volume_0=0,$42=0,$43=0;
 var $_sum=0,$_sum_pn=0,$44=0,$45=0,$wave_0_sum57=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$61=0,$63=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$wave_0_sum56=0,$75=0,$76=0,$77=0,$time_0=0,$phase_0_in_in=0,$last_wave_0=0,$phase_0_in=0,$phase_0=0,$wave_0_sum55=0,$79=0;
 var $80=0,$81=0,$82=0,$84=0,$85=0,$last_wave_1=0,$87=0,$88=0,$90=0,$91=0,$92=0,$time_1=0,$94=0,$96=0,$97=0,$99=0,label=0;
 $1=(($this+227)|0);
 $2=(($this+80)|0);
 $3=(($this+232)|0);
 $4=(($this+232)|0);
 $5=(($this+80)|0);
 $index_059=0;
 while(1) {
  $7=(($this+($index_059<<4)+12)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=($8|0)==0;
  if (!($9)) {
   __ZN11Blip_Buffer12set_modifiedEv($8);
   $11=$index_059<<1;
   $12=((($11)+(128))|0);
   $13=((($11)+(129))|0);
   $14=(($this+84+$13)|0);
   $15=((HEAP8[($14)])|0);
   $16=($15&255);
   $17=$16<<8;
   $18=$17&3840;
   $19=(($this+84+$12)|0);
   $20=((HEAP8[($19)])|0);
   $21=($20&255);
   $22=$18|$21;
   $23=((($22)+(1))|0);
   $24=((HEAP8[($1)])|0);
   $25=($24&255);
   $26=1<<$index_059;
   $27=$25&$26;
   $28=($27|0)==0;
   do {
    if ($28) {
     $volume_0=0;
    } else {
     $30=((__ZNK11Blip_Buffer10clock_rateEv($8))|0);
     $31=((($30)+(524288))|0);
     $32=$31>>>18;
     $33=($23>>>0)>($32>>>0);
     if (!($33)) {
      $volume_0=0;
      break;
     }
     $35=((($index_059)+(138))|0);
     $36=(($this+84+$35)|0);
     $37=((HEAP8[($36)])|0);
     $38=($37&255);
     $39=$38<<3;
     $40=$39&120;
     $volume_0=$40;
    }
   } while(0);
   $42=$index_059<<5;
   $43=($index_059|0)==4;
   $_sum=((($42)-(32))|0);
   $_sum_pn=($43?$_sum:$42);
   $44=(($this+($index_059<<4)+4)|0);
   $45=((HEAP32[(($44)>>2)])|0);
   $wave_0_sum57=((($45)+($_sum_pn))|0);
   $46=(($this+84+$wave_0_sum57)|0);
   $47=((HEAP8[($46)])|0);
   $48=(($47<<24)>>24);
   $49=(Math_imul($48,$volume_0)|0);
   $50=(($this+($index_059<<4)+8)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=($49|0)==($51|0);
   if (!($52)) {
    $54=((($49)-($51))|0);
    HEAP32[(($50)>>2)]=$49;
    $55=((HEAP32[(($5)>>2)])|0);
    __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($4,$55,$54,$8);
   }
   $57=((HEAP32[(($2)>>2)])|0);
   $58=(($this+($index_059<<4))|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=((($59)+($57))|0);
   $61=($60|0)<($end_time|0);
   do {
    if ($61) {
     $63=($volume_0|0)==0;
     if ($63) {
      $65=((($22)+($end_time))|0);
      $66=((($65)-($60))|0);
      $67=(((($66|0))/(($23|0)))&-1);
      $68=((HEAP32[(($44)>>2)])|0);
      $69=((($68)+($67))|0);
      $70=$69&31;
      HEAP32[(($44)>>2)]=$70;
      $71=(Math_imul($67,$23)|0);
      $72=((($71)+($60))|0);
      $time_1=$72;
      break;
     }
     $74=((HEAP32[(($44)>>2)])|0);
     $wave_0_sum56=((($74)+($_sum_pn))|0);
     $75=(($this+84+$wave_0_sum56)|0);
     $76=((HEAP8[($75)])|0);
     $77=(($76<<24)>>24);
     $last_wave_0=$77;$phase_0_in_in=$74;$time_0=$60;
     while(1) {
      $phase_0_in=((($phase_0_in_in)+(1))|0);
      $phase_0=$phase_0_in&31;
      $wave_0_sum55=$phase_0|$_sum_pn;
      $79=(($this+84+$wave_0_sum55)|0);
      $80=((HEAP8[($79)])|0);
      $81=(($80<<24)>>24);
      $82=($81|0)==($last_wave_0|0);
      if ($82) {
       $last_wave_1=$last_wave_0;
      } else {
       $84=((($81)-($last_wave_0))|0);
       $85=(Math_imul($84,$volume_0)|0);
       __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($3,$time_0,$85,$8);
       $last_wave_1=$81;
      }
      $87=((($time_0)+($23))|0);
      $88=($87|0)<($end_time|0);
      if ($88) {
       $last_wave_0=$last_wave_1;$phase_0_in_in=$phase_0;$time_0=$87;
      } else {
       break;
      }
     }
     HEAP32[(($44)>>2)]=$phase_0;
     $90=((HEAP8[($79)])|0);
     $91=(($90<<24)>>24);
     $92=(Math_imul($91,$volume_0)|0);
     HEAP32[(($50)>>2)]=$92;
     $time_1=$87;
    } else {
     $time_1=$60;
    }
   } while(0);
   $94=((($time_1)-($end_time))|0);
   HEAP32[(($58)>>2)]=$94;
  }
  $96=((($index_059)+(1))|0);
  $97=($96|0)<5;
  if ($97) {
   $index_059=$96;
  } else {
   break;
  }
 }
 $99=(($this+80)|0);
 HEAP32[(($99)>>2)]=$end_time;
 return;
}
function __ZN13blargg_vectorIcE6resizeEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$or_cond=0,$7=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_realloc($2,$n))|0);
 $4=($3|0)!=0;
 $5=($n|0)==0;
 $or_cond=$4|$5;
 if (!($or_cond)) {
  $_0=2976;
  return (($_0)|0);
 }
 HEAP32[(($1)>>2)]=$3;
 $7=(($this+4)|0);
 HEAP32[(($7)>>2)]=$n;
 $_0=0;
 return (($_0)|0);
}
function __Z13from_hex_chari($h){
 $h=($h)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$_0=0,label=0;
 $1=((($h)-(48))|0);
 $2=($1>>>0)>((9)>>>0);
 if (!($2)) {
  $_0=$1;
  return (($_0)|0);
 }
 $4=((($h)+(191))|0);
 $5=$4&223;
 $6=((($5)+(10))|0);
 $_0=$6;
 return (($_0)|0);
}
function __ZN12Multi_BufferC2Ei($this,$spf){
 $this=($this)|0;
 $spf=($spf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=14664;
 $2=(($this+16)|0);
 HEAP32[(($2)>>2)]=$spf;
 $3=(($this+12)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this+4)|0);
 HEAP32[(($5)>>2)]=1;
 return;
}
function __ZN12Multi_Buffer17set_channel_countEi($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return ((0)|0);
}
function __ZN13Stereo_BufferC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$_lcssa=0,$8=0,$9=0,$10=0,$12=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$7$0=0,$7$1=0,$14$0=0,$14$1=0,label=0;
 $1=(($this)|0);
 __ZN12Multi_BufferC2Ei($1,2);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=14480;
 $3=(($this+20)|0);
 __ZN11Blip_BufferC2Ev($3);
 $5=(($this+64)|0);
 __ZN11Blip_BufferC2Ev($5);
 $16=(($this+108)|0);
 __ZN11Blip_BufferC2Ev($16);
 $18=(($this+152)|0);
 HEAP32[(($18)>>2)]=$3;
 $19=(($this+64)|0);
 $20=(($this+156)|0);
 HEAP32[(($20)>>2)]=$19;
 $21=(($this+108)|0);
 $22=(($this+160)|0);
 HEAP32[(($22)>>2)]=$21;
 return;
}
function __ZN13Stereo_BufferD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN13Stereo_BufferD2Ev($this);
 $2=$this;
 __ZN12Multi_BufferdlEPv($2);
 return;
}
function __ZN13Stereo_BufferD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$_lcssa=0,$8=0,$9=0,$10=0,$12=0,$16=0,$7$0=0,$7$1=0,$14$0=0,$14$1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=14480;
 $2=(($this+20)|0);
 $3=(($this+108)|0);
 __ZN11Blip_BufferD2Ev($3);
 $5=(($this+64)|0);
 __ZN11Blip_BufferD2Ev($5);
 $16=(($this+20)|0);
 __ZN11Blip_BufferD2Ev($16);
 return;
}
function __ZN13Stereo_Buffer15set_sample_rateEli($this,$rate,$msec){
 $this=($this)|0;
 $rate=($rate)|0;
 $msec=($msec)|0;
 var $i_0=0,$2=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_0=0,label=0;
 $i_0=0;
 while(1) {
  $2=($i_0|0)<3;
  if (!($2)) {
   break;
  }
  $4=(($this+20+((($i_0)*(44))&-1))|0);
  $5=((__ZN11Blip_Buffer15set_sample_rateEli($4,$rate,$msec))|0);
  $6=($5|0)==0;
  $7=((($i_0)+(1))|0);
  if ($6) {
   $i_0=$7;
  } else {
   $_0=$5;
   label = 521;
   break;
  }
 }
 if ((label|0) == 521) {
  return (($_0)|0);
 }
 $9=(($this)|0);
 $10=(($this+20)|0);
 $11=((__ZNK11Blip_Buffer11sample_rateEv($10))|0);
 $12=((__ZNK11Blip_Buffer6lengthEv($10))|0);
 $13=((__ZN12Multi_Buffer15set_sample_rateEli($9,$11,$12))|0);
 $_0=0;
 return (($_0)|0);
}
function __ZN13Stereo_Buffer10clock_rateEl($this,$rate){
 $this=($this)|0;
 $rate=($rate)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+20)|0);
 __ZN11Blip_Buffer10clock_rateEl($1,$rate);
 $2=(($this+64)|0);
 __ZN11Blip_Buffer10clock_rateEl($2,$rate);
 $3=(($this+108)|0);
 __ZN11Blip_Buffer10clock_rateEl($3,$rate);
 return;
}
function __ZN13Stereo_Buffer9bass_freqEi($this,$bass){
 $this=($this)|0;
 $bass=($bass)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+20)|0);
 __ZN11Blip_Buffer9bass_freqEi($1,$bass);
 $2=(($this+64)|0);
 __ZN11Blip_Buffer9bass_freqEi($2,$bass);
 $3=(($this+108)|0);
 __ZN11Blip_Buffer9bass_freqEi($3,$bass);
 return;
}
function __ZN13Stereo_Buffer5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+164)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+168)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+20)|0);
 __ZN11Blip_Buffer5clearEi($3,1);
 $4=(($this+64)|0);
 __ZN11Blip_Buffer5clearEi($4,1);
 $5=(($this+108)|0);
 __ZN11Blip_Buffer5clearEi($5,1);
 return;
}
function __ZN13Stereo_Buffer9end_frameEi($this,$clock_count){
 $this=($this)|0;
 $clock_count=($clock_count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 $1=(($this+164)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+20)|0);
 $3=((__ZN11Blip_Buffer14clear_modifiedEv($2))|0);
 $4=((HEAP32[(($1)>>2)])|0);
 $5=$4|$3;
 HEAP32[(($1)>>2)]=$5;
 __ZN11Blip_Buffer9end_frameEi($2,$clock_count);
 $6=(($this+64)|0);
 $7=((__ZN11Blip_Buffer14clear_modifiedEv($6))|0);
 $8=$7<<1;
 $9=((HEAP32[(($1)>>2)])|0);
 $10=$9|$8;
 HEAP32[(($1)>>2)]=$10;
 __ZN11Blip_Buffer9end_frameEi($6,$clock_count);
 $11=(($this+108)|0);
 $12=((__ZN11Blip_Buffer14clear_modifiedEv($11))|0);
 $13=$12<<2;
 $14=((HEAP32[(($1)>>2)])|0);
 $15=$14|$13;
 HEAP32[(($1)>>2)]=$15;
 __ZN11Blip_Buffer9end_frameEi($11,$clock_count);
 return;
}
function __ZN13Stereo_Buffer12read_samplesEPsl($this,$out,$count){
 $this=($this)|0;
 $out=($out)|0;
 $count=($count)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,$_=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$21=0,$22=0,$24=0,$25=0;
 var $27=0,$28=0,$30=0,$31=0,$33=0,$35=0,label=0;
 $1=$count&1;
 $2=($1|0)==0;
 if (!($2)) {
  ___assert_fail(((3720)|0),((7176)|0),((108)|0),((9312)|0));
  return ((0)|0);
 }
 $5=$count>>>1;
 $6=(($this+20)|0);
 $7=((__ZNK11Blip_Buffer13samples_availEv($6))|0);
 $8=($5|0)>($7|0);
 $_=($8?$7:$5);
 $9=($_|0)==0;
 if ($9) {
  $35=$_<<1;
  return (($35)|0);
 }
 $11=(($this+164)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($this+168)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=$14|$12;
 $16=($15|0)<2;
 do {
  if ($16) {
   __ZN13Stereo_Buffer8mix_monoEPsi($this,$out,$_);
   __ZN11Blip_Buffer14remove_samplesEl($6,$_);
   $18=(($this+64)|0);
   __ZN11Blip_Buffer14remove_silenceEl($18,$_);
   $19=(($this+108)|0);
   __ZN11Blip_Buffer14remove_silenceEl($19,$_);
  } else {
   $21=$15&1;
   $22=($21|0)==0;
   if ($22) {
    __ZN13Stereo_Buffer20mix_stereo_no_centerEPsi($this,$out,$_);
    __ZN11Blip_Buffer14remove_silenceEl($6,$_);
    $27=(($this+64)|0);
    __ZN11Blip_Buffer14remove_samplesEl($27,$_);
    $28=(($this+108)|0);
    __ZN11Blip_Buffer14remove_samplesEl($28,$_);
    break;
   } else {
    __ZN13Stereo_Buffer10mix_stereoEPsi($this,$out,$_);
    __ZN11Blip_Buffer14remove_samplesEl($6,$_);
    $24=(($this+64)|0);
    __ZN11Blip_Buffer14remove_samplesEl($24,$_);
    $25=(($this+108)|0);
    __ZN11Blip_Buffer14remove_samplesEl($25,$_);
    break;
   }
  }
 } while(0);
 $30=((__ZNK11Blip_Buffer13samples_availEv($6))|0);
 $31=($30|0)==0;
 if (!($31)) {
  $35=$_<<1;
  return (($35)|0);
 }
 $33=((HEAP32[(($11)>>2)])|0);
 HEAP32[(($13)>>2)]=$33;
 HEAP32[(($11)>>2)]=0;
 $35=$_<<1;
 return (($35)|0);
}
function __ZN13Stereo_Buffer8mix_monoEPsi($this,$out_,$count){
 $this=($this)|0;
 $out_=($out_)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$center_reader_accum_016=0,$center_reader_buf_015=0,$_014=0,$out_013=0,$9=0,$sext=0,$10=0,$11=0,$extract_t12=0,$13=0,$14=0,$extract_t=0,$s_0_off0=0;
 var $16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$center_reader_accum_0_lcssa=0,label=0;
 $1=(($this+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($count|0)==0;
 if ($5) {
  $center_reader_accum_0_lcssa=$4;
  HEAP32[(($3)>>2)]=$center_reader_accum_0_lcssa;
  return;
 }
 $6=(($this+28)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $out_013=$out_;$_014=$count;$center_reader_buf_015=$7;$center_reader_accum_016=$4;
 while(1) {
  $9=$center_reader_accum_016>>14;
  $sext=$9<<16;
  $10=$sext>>16;
  $11=($10|0)==($9|0);
  $extract_t12=(($9)&65535);
  if ($11) {
   $s_0_off0=$extract_t12;
  } else {
   $13=$center_reader_accum_016>>31;
   $14=(((32767)-($13))|0);
   $extract_t=(($14)&65535);
   $s_0_off0=$extract_t;
  }
  $16=(($center_reader_buf_015+4)|0);
  $17=((HEAP32[(($center_reader_buf_015)>>2)])|0);
  $18=$center_reader_accum_016>>($2|0);
  $19=((($center_reader_accum_016)-($18))|0);
  $20=((($19)+($17))|0);
  HEAP16[(($out_013)>>1)]=$s_0_off0;
  $21=(($out_013+2)|0);
  HEAP16[(($21)>>1)]=$s_0_off0;
  $22=(($out_013+4)|0);
  $23=((($_014)-(1))|0);
  $24=($23|0)==0;
  if ($24) {
   $center_reader_accum_0_lcssa=$20;
   break;
  } else {
   $out_013=$22;$_014=$23;$center_reader_buf_015=$16;$center_reader_accum_016=$20;
  }
 }
 HEAP32[(($3)>>2)]=$center_reader_accum_0_lcssa;
 return;
}
function __ZN13Stereo_Buffer10mix_stereoEPsi($this,$out_,$count){
 $this=($this)|0;
 $out_=($out_)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$_036=0,$center_reader_accum_035=0,$center_reader_buf_034=0,$right_reader_accum_033=0,$right_reader_buf_032=0;
 var $left_reader_accum_031=0,$left_reader_buf_030=0,$out_029=0,$17=0,$18=0,$19=0,$20=0,$21=0,$sext=0,$22=0,$23=0,$extract_t23=0,$25=0,$26=0,$extract_t=0,$l_0_off0=0,$28=0,$29=0,$30=0,$31=0;
 var $32=0,$sext24=0,$33=0,$34=0,$extract_t26=0,$36=0,$37=0,$extract_t25=0,$r_0_off0=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$center_reader_accum_0_lcssa=0,$right_reader_accum_0_lcssa=0,$left_reader_accum_0_lcssa=0,label=0;
 $1=(($this+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+80)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+124)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+36)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($count|0)==0;
 if ($9) {
  $left_reader_accum_0_lcssa=$4;$right_reader_accum_0_lcssa=$6;$center_reader_accum_0_lcssa=$8;
  HEAP32[(($7)>>2)]=$center_reader_accum_0_lcssa;
  HEAP32[(($5)>>2)]=$right_reader_accum_0_lcssa;
  HEAP32[(($3)>>2)]=$left_reader_accum_0_lcssa;
  return;
 }
 $10=(($this+28)|0);
 $11=(($this+116)|0);
 $12=(($this+72)|0);
 $13=((HEAP32[(($10)>>2)])|0);
 $14=((HEAP32[(($11)>>2)])|0);
 $15=((HEAP32[(($12)>>2)])|0);
 $out_029=$out_;$left_reader_buf_030=$15;$left_reader_accum_031=$4;$right_reader_buf_032=$14;$right_reader_accum_033=$6;$center_reader_buf_034=$13;$center_reader_accum_035=$8;$_036=$count;
 while(1) {
  $17=$center_reader_accum_035>>14;
  $18=$left_reader_accum_031>>14;
  $19=((($17)+($18))|0);
  $20=$right_reader_accum_033>>14;
  $21=((($17)+($20))|0);
  $sext=$19<<16;
  $22=$sext>>16;
  $23=($22|0)==($19|0);
  $extract_t23=(($19)&65535);
  if ($23) {
   $l_0_off0=$extract_t23;
  } else {
   $25=$19>>24;
   $26=(((32767)-($25))|0);
   $extract_t=(($26)&65535);
   $l_0_off0=$extract_t;
  }
  $28=(($center_reader_buf_034+4)|0);
  $29=((HEAP32[(($center_reader_buf_034)>>2)])|0);
  $30=$center_reader_accum_035>>($2|0);
  $31=((($center_reader_accum_035)-($30))|0);
  $32=((($31)+($29))|0);
  $sext24=$21<<16;
  $33=$sext24>>16;
  $34=($33|0)==($21|0);
  $extract_t26=(($21)&65535);
  if ($34) {
   $r_0_off0=$extract_t26;
  } else {
   $36=$21>>24;
   $37=(((32767)-($36))|0);
   $extract_t25=(($37)&65535);
   $r_0_off0=$extract_t25;
  }
  $39=(($left_reader_buf_030+4)|0);
  $40=((HEAP32[(($left_reader_buf_030)>>2)])|0);
  $41=$left_reader_accum_031>>($2|0);
  $42=((($left_reader_accum_031)-($41))|0);
  $43=((($42)+($40))|0);
  $44=(($right_reader_buf_032+4)|0);
  $45=((HEAP32[(($right_reader_buf_032)>>2)])|0);
  $46=$right_reader_accum_033>>($2|0);
  $47=((($right_reader_accum_033)-($46))|0);
  $48=((($47)+($45))|0);
  HEAP16[(($out_029)>>1)]=$l_0_off0;
  $49=(($out_029+2)|0);
  HEAP16[(($49)>>1)]=$r_0_off0;
  $50=(($out_029+4)|0);
  $51=((($_036)-(1))|0);
  $52=($51|0)==0;
  if ($52) {
   $left_reader_accum_0_lcssa=$43;$right_reader_accum_0_lcssa=$48;$center_reader_accum_0_lcssa=$32;
   break;
  } else {
   $out_029=$50;$left_reader_buf_030=$39;$left_reader_accum_031=$43;$right_reader_buf_032=$44;$right_reader_accum_033=$48;$center_reader_buf_034=$28;$center_reader_accum_035=$32;$_036=$51;
  }
 }
 HEAP32[(($7)>>2)]=$center_reader_accum_0_lcssa;
 HEAP32[(($5)>>2)]=$right_reader_accum_0_lcssa;
 HEAP32[(($3)>>2)]=$left_reader_accum_0_lcssa;
 return;
}
function __ZN13Stereo_Buffer20mix_stereo_no_centerEPsi($this,$out_,$count){
 $this=($this)|0;
 $out_=($out_)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$right_reader_accum_029=0,$right_reader_buf_028=0,$left_reader_accum_027=0,$left_reader_buf_026=0,$_025=0,$out_024=0,$13=0,$sext=0,$14=0;
 var $15=0,$extract_t19=0,$17=0,$18=0,$extract_t=0,$l_0_off0=0,$20=0,$sext20=0,$21=0,$22=0,$extract_t22=0,$24=0,$25=0,$extract_t21=0,$r_0_off0=0,$27=0,$28=0,$29=0,$30=0,$31=0;
 var $32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$right_reader_accum_0_lcssa=0,$left_reader_accum_0_lcssa=0,label=0;
 $1=(($this+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+80)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+124)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($count|0)==0;
 if ($7) {
  $left_reader_accum_0_lcssa=$4;$right_reader_accum_0_lcssa=$6;
  HEAP32[(($5)>>2)]=$right_reader_accum_0_lcssa;
  HEAP32[(($3)>>2)]=$left_reader_accum_0_lcssa;
  return;
 }
 $8=(($this+116)|0);
 $9=(($this+72)|0);
 $10=((HEAP32[(($8)>>2)])|0);
 $11=((HEAP32[(($9)>>2)])|0);
 $out_024=$out_;$_025=$count;$left_reader_buf_026=$11;$left_reader_accum_027=$4;$right_reader_buf_028=$10;$right_reader_accum_029=$6;
 while(1) {
  $13=$left_reader_accum_027>>14;
  $sext=$13<<16;
  $14=$sext>>16;
  $15=($14|0)==($13|0);
  $extract_t19=(($13)&65535);
  if ($15) {
   $l_0_off0=$extract_t19;
  } else {
   $17=$left_reader_accum_027>>31;
   $18=(((32767)-($17))|0);
   $extract_t=(($18)&65535);
   $l_0_off0=$extract_t;
  }
  $20=$right_reader_accum_029>>14;
  $sext20=$20<<16;
  $21=$sext20>>16;
  $22=($21|0)==($20|0);
  $extract_t22=(($20)&65535);
  if ($22) {
   $r_0_off0=$extract_t22;
  } else {
   $24=$right_reader_accum_029>>31;
   $25=(((32767)-($24))|0);
   $extract_t21=(($25)&65535);
   $r_0_off0=$extract_t21;
  }
  $27=(($left_reader_buf_026+4)|0);
  $28=((HEAP32[(($left_reader_buf_026)>>2)])|0);
  $29=$left_reader_accum_027>>($2|0);
  $30=((($left_reader_accum_027)-($29))|0);
  $31=((($30)+($28))|0);
  $32=(($right_reader_buf_028+4)|0);
  $33=((HEAP32[(($right_reader_buf_028)>>2)])|0);
  $34=$right_reader_accum_029>>($2|0);
  $35=((($right_reader_accum_029)-($34))|0);
  $36=((($35)+($33))|0);
  HEAP16[(($out_024)>>1)]=$l_0_off0;
  $37=(($out_024+2)|0);
  HEAP16[(($37)>>1)]=$r_0_off0;
  $38=(($out_024+4)|0);
  $39=((($_025)-(1))|0);
  $40=($39|0)==0;
  if ($40) {
   $left_reader_accum_0_lcssa=$31;$right_reader_accum_0_lcssa=$36;
   break;
  } else {
   $out_024=$38;$_025=$39;$left_reader_buf_026=$27;$left_reader_accum_027=$31;$right_reader_buf_028=$32;$right_reader_accum_029=$36;
  }
 }
 HEAP32[(($5)>>2)]=$right_reader_accum_0_lcssa;
 HEAP32[(($3)>>2)]=$left_reader_accum_0_lcssa;
 return;
}
function __ZN12Multi_BufferD1Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN12Multi_BufferD0Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN12Multi_BufferdlEPv($1);
 return;
}
function __ZN13Stereo_Buffer7channelEii($agg_result,$this,$0,$1){
 $agg_result=($agg_result)|0;
 $this=($this)|0;
 $0=($0)|0;
 $1=($1)|0;
 var $3=0,$4=0,$5=0,label=0;
 $3=(($this+152)|0);
 $4=$agg_result;
 $5=$3;
 HEAP32[(($4)>>2)]=((HEAP32[(($5)>>2)])|0);HEAP32[((($4)+(4))>>2)]=((HEAP32[((($5)+(4))>>2)])|0);HEAP32[((($4)+(8))>>2)]=((HEAP32[((($5)+(8))>>2)])|0);
 return;
}
function __ZNK13Stereo_Buffer13samples_availEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+20)|0);
 $2=((__ZNK11Blip_Buffer13samples_availEv($1))|0);
 $3=$2<<1;
 return (($3)|0);
}
function __ZN9Music_Emu16clear_track_varsEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this+196)|0);
 HEAP32[(($1)>>2)]=-1;
 $2=(($this+200)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+204)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+208)|0);
 HEAP8[($4)]=1;
 $5=(($this+209)|0);
 HEAP8[($5)]=1;
 $6=(($this+212)|0);
 HEAP32[(($6)>>2)]=1073741824;
 $7=(($this+216)|0);
 HEAP32[(($7)>>2)]=1;
 $8=(($this+228)|0);
 HEAP32[(($8)>>2)]=0;
 $9=(($this+232)|0);
 HEAP32[(($9)>>2)]=0;
 $10=(($this+236)|0);
 HEAP32[(($10)>>2)]=0;
 $11=(($this)|0);
 $12=((__ZN8Gme_File7warningEv($11))|0);
 return;
}
function __ZN8Gme_File7warningEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 HEAP32[(($1)>>2)]=0;
 return (($2)|0);
}
function __ZN9Music_Emu6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+168)|0);
 HEAP32[(($1)>>2)]=0;
 __ZN9Music_Emu16clear_track_varsEv($this);
 $2=(($this)|0);
 __ZN8Gme_File6unloadEv($2);
 return;
}
function __ZN9Music_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$16$0=0,$16$1=0,$19$0=0,$19$1=0,label=0;
 $1=(($this)|0);
 __ZN8Gme_FileC2Ev($1);
 $2=(($this)|0);
 HEAP32[(($2)>>2)]=12176;
 $3=(($this+240)|0);
 __ZN13blargg_vectorIsEC1Ev($3);
 $4=(($this+248)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this+192)|0);
 HEAP32[(($5)>>2)]=0;
 $6=(($this+172)|0);
 HEAP32[(($6)>>2)]=0;
 $7=(($this+176)|0);
 HEAPF64[(($7)>>3)]=1.0;
 $8=(($this+184)|0);
 HEAPF64[(($8)>>3)]=1.0;
 $9=(($this+160)|0);
 HEAP32[(($9)>>2)]=2;
 $10=(($this+220)|0);
 HEAP32[(($10)>>2)]=3;
 $11=(($this+224)|0);
 HEAP8[($11)]=0;
 $12=(($this+144)|0);
 HEAPF64[(($12)>>3)]=-1.0;
 $13=(($this+152)|0);
 HEAP32[(($13)>>2)]=60;
 __ZN9Music_Emu15set_voice_namesEPKPKc($this,9808);
 __ZN9Music_Emu6unloadEv($this);
 return;
}
function __ZN9Music_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN9Music_EmuD2Ev($this);
 $2=$this;
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN9Music_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$15=0,$16=0,$14$0=0,$14$1=0,$19$0=0,$19$1=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=12176;
 $2=(($this+248)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($3|0)==0;
 if (!($4)) {
  $6=$3;
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+4)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  FUNCTION_TABLE_vi[($9)&255]($3);
 }
 $11=(($this+240)|0);
 __ZN13blargg_vectorIsED1Ev($11);
 $12=(($this)|0);
 __ZN8Gme_FileD2Ev($12);
 return;
}
function __ZN9Music_Emu15set_sample_rateEl($this,$rate){
 $this=($this)|0;
 $rate=($rate)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$16=0,$_0=0,label=0;
 $1=((__ZNK9Music_Emu11sample_rateEv($this))|0);
 $2=($1|0)==0;
 if (!($2)) {
  ___assert_fail(((1008)|0),((480)|0),((79)|0),((8656)|0));
  return ((0)|0);
 }
 $5=$this;
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((FUNCTION_TABLE_iii[($8)&127]($this,$rate))|0);
 $10=($9|0)==0;
 if (!($10)) {
  $_0=$9;
  return (($_0)|0);
 }
 $12=(($this+240)|0);
 $13=((__ZN13blargg_vectorIsE6resizeEj($12,2048))|0);
 $14=($13|0)==0;
 if (!($14)) {
  $_0=$13;
  return (($_0)|0);
 }
 $16=(($this+192)|0);
 HEAP32[(($16)>>2)]=$rate;
 $_0=0;
 return (($_0)|0);
}
function __ZN9Music_Emu8pre_loadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$5=0,label=0;
 $1=((__ZNK9Music_Emu11sample_rateEv($this))|0);
 $2=($1|0)==0;
 if ($2) {
  ___assert_fail(((8152)|0),((480)|0),((88)|0),((8616)|0));
 } else {
  $5=(($this)|0);
  __ZN8Gme_File8pre_loadEv($5);
  return;
 }
}
function __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+144)|0);
 $2=$1;
 $3=$eq;
 HEAP32[(($2)>>2)]=((HEAP32[(($3)>>2)])|0);HEAP32[((($2)+(4))>>2)]=((HEAP32[((($3)+(4))>>2)])|0);HEAP32[((($2)+(8))>>2)]=((HEAP32[((($3)+(8))>>2)])|0);HEAP32[((($2)+(12))>>2)]=((HEAP32[((($3)+(12))>>2)])|0);
 $4=$this;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+44)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 FUNCTION_TABLE_vii[($7)&63]($this,$eq);
 return;
}
function __ZN9Music_Emu11mute_voicesEi($this,$mask){
 $this=($this)|0;
 $mask=($mask)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=((__ZNK9Music_Emu11sample_rateEv($this))|0);
 $2=($1|0)==0;
 if ($2) {
  ___assert_fail(((8152)|0),((480)|0),((110)|0),((8672)|0));
 } else {
  $5=(($this+172)|0);
  HEAP32[(($5)>>2)]=$mask;
  $6=$this;
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+48)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  FUNCTION_TABLE_vii[($9)&63]($this,$mask);
  return;
 }
}
function __ZN9Music_Emu9set_tempoEd($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$5=0,$_0=.0,$6=0,$_1=.0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 $1=((__ZNK9Music_Emu11sample_rateEv($this))|0);
 $2=($1|0)==0;
 if ($2) {
  ___assert_fail(((8152)|0),((480)|0),((117)|0),((8584)|0));
 } else {
  $5=$t<(0.02);
  $_0=($5?(0.02):$t);
  $6=$_0>(4.0);
  $_1=($6?(4.0):$_0);
  $7=(($this+176)|0);
  HEAPF64[(($7)>>3)]=$_1;
  $8=$this;
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9+52)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  FUNCTION_TABLE_vid[($11)&31]($this,$_1);
  return;
 }
}
function __ZN9Music_Emu10post_load_Ev($this){
 $this=($this)|0;
 var $1=0,$2=.0,label=0;
 $1=(($this+176)|0);
 $2=(+(HEAPF64[(($1)>>3)]));
 __ZN9Music_Emu9set_tempoEd($this,$2);
 __ZN9Music_Emu13remute_voicesEv($this);
 return;
}
function __ZN9Music_Emu11start_trackEi($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $remapped=0,$1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$42=0,$43=0,$45=0,$47=0;
 var $_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $remapped=((sp)|0);
 __ZN9Music_Emu16clear_track_varsEv($this);
 HEAP32[(($remapped)>>2)]=$track;
 $1=(($this)|0);
 $2=((__ZNK8Gme_File12remap_track_EPi($1,$remapped))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  STACKTOP=sp;return (($_0)|0);
 }
 $5=(($this+196)|0);
 HEAP32[(($5)>>2)]=$track;
 $6=$this;
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+56)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=((HEAP32[(($remapped)>>2)])|0);
 $11=((FUNCTION_TABLE_iii[($9)&127]($this,$10))|0);
 $12=($11|0)==0;
 if (!($12)) {
  $_0=$11;
  STACKTOP=sp;return (($_0)|0);
 }
 $14=(($this+208)|0);
 HEAP8[($14)]=0;
 $15=(($this+209)|0);
 HEAP8[($15)]=0;
 $16=(($this+224)|0);
 $17=((HEAP8[($16)])|0);
 $18=$17&1;
 $19=(($18<<24)>>24)==0;
 if ($19) {
  $21=(($this+160)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=$22<<1;
  $24=((__ZNK9Music_Emu11sample_rateEv($this))|0);
  $25=(Math_imul($23,$24)|0);
  $26=(($this+204)|0);
  $27=(($this+236)|0);
  while(1) {
   $29=((HEAP32[(($26)>>2)])|0);
   $30=($29|0)<($25|0);
   if (!($30)) {
    break;
   }
   __ZN9Music_Emu8fill_bufEv($this);
   $32=((HEAP32[(($27)>>2)])|0);
   $33=((HEAP8[($14)])|0);
   $34=$33&1;
   $35=($34&255);
   $36=$35|$32;
   $37=($36|0)==0;
   if (!($37)) {
    break;
   }
  }
  $39=(($this+236)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  HEAP32[(($26)>>2)]=$40;
  $41=(($this+200)|0);
  HEAP32[(($41)>>2)]=0;
  $42=(($this+228)|0);
  HEAP32[(($42)>>2)]=0;
  $43=(($this+232)|0);
  HEAP32[(($43)>>2)]=0;
 }
 $45=((__ZNK9Music_Emu11track_endedEv($this))|0);
 if (!($45)) {
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $47=((__ZN8Gme_File7warningEv($1))|0);
 $_0=$47;
 STACKTOP=sp;return (($_0)|0);
}
function __ZN9Music_Emu8fill_bufEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,label=0;
 $1=(($this+236)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  ___assert_fail(((7136)|0),((480)|0),((314)|0),((8632)|0));
 }
 $6=(($this+208)|0);
 $7=((HEAP8[($6)])|0);
 $8=$7&1;
 $9=(($8<<24)>>24)==0;
 do {
  if ($9) {
   $11=(($this+240)|0);
   $12=((__ZNK13blargg_vectorIsE5beginEv($11))|0);
   __ZN9Music_Emu8emu_playElPs($this,2048,$12);
   $13=((__ZNK13blargg_vectorIsE5beginEv($11))|0);
   $14=((__ZL13count_silencePsl($13,2048))|0);
   $15=($14|0)<2048;
   if (!($15)) {
    break;
   }
   $17=(($this+204)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=((($18)-($14))|0);
   $20=(($this+228)|0);
   HEAP32[(($20)>>2)]=$19;
   HEAP32[(($1)>>2)]=2048;
   return;
  }
 } while(0);
 $22=(($this+232)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=((($23)+(2048))|0);
 HEAP32[(($22)>>2)]=$24;
 return;
}
function __ZN9Music_Emu18end_track_if_errorEPKc($this,$err){
 $this=($this)|0;
 $err=($err)|0;
 var $1=0,$3=0,$4=0,label=0;
 $1=($err|0)==0;
 if ($1) {
  return;
 }
 $3=(($this+208)|0);
 HEAP8[($3)]=1;
 $4=(($this)|0);
 __ZN8Gme_File11set_warningEPKc($4,$err);
 return;
}
function __ZNK9Music_Emu13current_trackEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+196)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN9Music_Emu5skip_El($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$_014=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$_1_ph=0,$22=0;
 var $23=0,$24=0,$_1=0,$26=0,$28=0,$29=0,$30=0,$32=0,$_1_=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$_0=0,label=0;
 $1=($count|0)>30000;
 do {
  if ($1) {
   $3=(($this+172)|0);
   $4=((HEAP32[(($3)>>2)])|0);
   __ZN9Music_Emu11mute_voicesEi($this,-1);
   $5=(($this+208)|0);
   $6=$this;
   $7=(($this+240)|0);
   $_014=$count;
   while(1) {
    $9=($_014|0)>15000;
    if (!($9)) {
     label = 644;
     break;
    }
    $11=((HEAP8[($5)])|0);
    $12=$11&1;
    $13=(($12<<24)>>24)==0;
    if (!($13)) {
     label = 644;
     break;
    }
    $15=((HEAP32[(($6)>>2)])|0);
    $16=(($15+60)|0);
    $17=((HEAP32[(($16)>>2)])|0);
    $18=((__ZNK13blargg_vectorIsE5beginEv($7))|0);
    $19=((FUNCTION_TABLE_iiii[($17)&127]($this,2048,$18))|0);
    $20=($19|0)==0;
    $21=((($_014)-(2048))|0);
    if ($20) {
     $_014=$21;
    } else {
     $_0=$19;
     label = 650;
     break;
    }
   }
   if ((label|0) == 644) {
    __ZN9Music_Emu11mute_voicesEi($this,$4);
    $_1_ph=$_014;
    break;
   }
   else if ((label|0) == 650) {
    return (($_0)|0);
   }
  } else {
   $_1_ph=$count;
  }
 } while(0);
 $22=(($this+208)|0);
 $23=$this;
 $24=(($this+240)|0);
 $_1=$_1_ph;
 while(1) {
  $26=($_1|0)==0;
  if ($26) {
   $_0=0;
   label = 651;
   break;
  }
  $28=((HEAP8[($22)])|0);
  $29=$28&1;
  $30=(($29<<24)>>24)==0;
  if (!($30)) {
   $_0=0;
   label = 652;
   break;
  }
  $32=($_1|0)<2048;
  $_1_=($32?$_1:2048);
  $33=((($_1)-($_1_))|0);
  $34=((HEAP32[(($23)>>2)])|0);
  $35=(($34+60)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=((__ZNK13blargg_vectorIsE5beginEv($24))|0);
  $38=((FUNCTION_TABLE_iiii[($36)&127]($this,$_1_,$37))|0);
  $39=($38|0)==0;
  if ($39) {
   $_1=$33;
  } else {
   $_0=$38;
   label = 653;
   break;
  }
 }
 if ((label|0) == 651) {
  return (($_0)|0);
 }
 else if ((label|0) == 652) {
  return (($_0)|0);
 }
 else if ((label|0) == 653) {
  return (($_0)|0);
 }
  return 0;
}
function __ZN9Music_Emu11handle_fadeElPs($this,$out_count,$out){
 $this=($this)|0;
 $out_count=($out_count)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$i_014=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$18=0,$19=0,$20=0,$21=0,$count_013=0;
 var $io_012=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,label=0;
 $1=($out_count|0)>0;
 if (!($1)) {
  return;
 }
 $2=(($this+200)|0);
 $3=(($this+212)|0);
 $4=(($this+216)|0);
 $5=(($this+208)|0);
 $6=(($this+209)|0);
 $i_014=0;
 while(1) {
  $8=((HEAP32[(($2)>>2)])|0);
  $9=((($8)+($i_014))|0);
  $10=((HEAP32[(($3)>>2)])|0);
  $11=((($9)-($10))|0);
  $12=(((($11|0))/(512))&-1);
  $13=((HEAP32[(($4)>>2)])|0);
  $14=((__ZL7int_logiii($12,$13))|0);
  $15=($14|0)<64;
  if ($15) {
   HEAP8[($5)]=1;
   HEAP8[($6)]=1;
  }
  $18=((($out_count)-($i_014))|0);
  $19=((__Z3minIlET_S0_S0_(512,$18))|0);
  $20=($19|0)==0;
  if (!($20)) {
   $21=(($out+($i_014<<1))|0);
   $io_012=$21;$count_013=$19;
   while(1) {
    $23=((HEAP16[(($io_012)>>1)])|0);
    $24=(($23<<16)>>16);
    $25=(Math_imul($24,$14)|0);
    $26=$25>>>14;
    $27=(($26)&65535);
    HEAP16[(($io_012)>>1)]=$27;
    $28=(($io_012+2)|0);
    $29=((($count_013)-(1))|0);
    $30=($29|0)==0;
    if ($30) {
     break;
    } else {
     $io_012=$28;$count_013=$29;
    }
   }
  }
  $31=((($i_014)+(512))|0);
  $32=($31|0)<($out_count|0);
  if ($32) {
   $i_014=$31;
  } else {
   break;
  }
 }
 return;
}
function __ZL7int_logiii($x,$step){
 $x=($x)|0;
 $step=($step)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(((($x|0))/(($step|0)))&-1);
 $2=(Math_imul($1,$step)|0);
 $3=((($x)-($2))|0);
 $4=$3<<14;
 $5=(((($4|0))/(($step|0)))&-1);
 $6=(((16384)-($5))|0);
 $7=$5>>1;
 $8=((($6)+($7))|0);
 $9=$8>>($1|0);
 return (($9)|0);
}
function __ZN9Music_Emu8emu_playElPs($this,$count,$out){
 $this=($this)|0;
 $count=($count)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,label=0;
 $1=(($this+204)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+($count))|0);
 HEAP32[(($1)>>2)]=$3;
 $4=(($this+196)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)>-1;
 do {
  if ($6) {
   $8=(($this+208)|0);
   $9=((HEAP8[($8)])|0);
   $10=$9&1;
   $11=(($10<<24)>>24)==0;
   if (!($11)) {
    break;
   }
   $13=$this;
   $14=((HEAP32[(($13)>>2)])|0);
   $15=(($14+60)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=((FUNCTION_TABLE_iiii[($16)&127]($this,$count,$out))|0);
   __ZN9Music_Emu18end_track_if_errorEPKc($this,$17);
   return;
  }
 } while(0);
 $19=$out;
 $20=$count<<1;
 _memset((((($19)|0))|0), ((((0)|0))|0), (((($20)|0))|0));
 return;
}
function __ZL13count_silencePsl($begin,$size){
 $begin=($begin)|0;
 $size=($size)|0;
 var $1=0,$2=0,$p_0=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;
 $1=((HEAP16[(($begin)>>1)])|0);
 HEAP16[(($begin)>>1)]=16;
 $2=(($begin+($size<<1))|0);
 $p_0=$2;
 while(1) {
  $4=((($p_0)-(2))|0);
  $5=((HEAP16[(($4)>>1)])|0);
  $6=(($5<<16)>>16);
  $7=((($6)+(8))|0);
  $8=($7>>>0)<((17)>>>0);
  if ($8) {
   $p_0=$4;
  } else {
   break;
  }
 }
 HEAP16[(($begin)>>1)]=$1;
 $10=$4;
 $11=$begin;
 $12=((($10)-($11))|0);
 $13=$12>>1;
 $14=((($size)-($13))|0);
 return (($14)|0);
}
function __ZN9Music_Emu4playElPs($this,$out_count,$out){
 $this=($this)|0;
 $out_count=($out_count)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$13=0,$14=0,$17=0,$18=0,$19=0,$20=0,$21=0,$24=0,$25=0,$26=0,$28=0,$29=0;
 var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$49=0,$50=0,$51=0;
 var $52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$63=0,$64=0,$pos_0=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0,$73=0;
 var $74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$pos_1=0,$84=0,$85=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0;
 var $95=0,$96=0,$98=0,$99=0,$100=0,$101=0,$103=0,$104=0,$106=0,$107=0,$108=0,$110=0,$111=0,$112=0,$113=0,$114=0,$117=0,$118=0,$119=0,$120=0;
 var $123=0,$124=0,$125=0,label=0;
 $1=(($this+209)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 if (!($4)) {
  $6=$out;
  $7=$out_count<<1;
  _memset((((($6)|0))|0), ((((0)|0))|0), (((($7)|0))|0));
  $123=(($this+200)|0);
  $124=((HEAP32[(($123)>>2)])|0);
  $125=((($124)+($out_count))|0);
  HEAP32[(($123)>>2)]=$125;
  return ((0)|0);
 }
 $9=((__ZNK9Music_Emu13current_trackEv($this))|0);
 $10=($9|0)>-1;
 if (!($10)) {
  ___assert_fail(((7472)|0),((480)|0),((337)|0),((8648)|0));
  return ((0)|0);
 }
 $13=$out_count&1;
 $14=($13|0)==0;
 if (!($14)) {
  ___assert_fail(((6760)|0),((480)|0),((338)|0),((8648)|0));
  return ((0)|0);
 }
 $17=(($this+204)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($this+200)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($18|0)<($20|0);
 if ($21) {
  ___assert_fail(((6384)|0),((480)|0),((340)|0),((8648)|0));
  return ((0)|0);
 }
 $24=(($this+232)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)==0;
 do {
  if ($26) {
   $pos_0=0;
  } else {
   $28=(($this+220)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=((($20)+($out_count))|0);
   $31=(($this+228)|0);
   $32=((HEAP32[(($31)>>2)])|0);
   $33=((($30)-($32))|0);
   $34=(Math_imul($33,$29)|0);
   $35=((($34)+($32))|0);
   $36=(($this+236)|0);
   $37=((HEAP32[(($17)>>2)])|0);
   $38=($37|0)<($35|0);
   L744: do {
    if ($38) {
     $39=(($this+208)|0);
     while(1) {
      $41=((HEAP32[(($36)>>2)])|0);
      $42=((HEAP8[($39)])|0);
      $43=$42&1;
      $44=($43&255);
      $45=$44|$41;
      $46=($45|0)==0;
      if (!($46)) {
       break L744;
      }
      __ZN9Music_Emu8fill_bufEv($this);
      $48=((HEAP32[(($17)>>2)])|0);
      $49=($48|0)<($35|0);
      if (!($49)) {
       break;
      }
     }
    }
   } while(0);
   $50=((HEAP32[(($24)>>2)])|0);
   $51=((__Z3minIlET_S0_S0_($50,$out_count))|0);
   $52=$out;
   $53=$51<<1;
   _memset((((($52)|0))|0), ((((0)|0))|0), (((($53)|0))|0));
   $54=((HEAP32[(($24)>>2)])|0);
   $55=((($54)-($51))|0);
   HEAP32[(($24)>>2)]=$55;
   $56=((HEAP32[(($17)>>2)])|0);
   $57=((HEAP32[(($31)>>2)])|0);
   $58=((($56)-($57))|0);
   $59=((__ZNK9Music_Emu11sample_rateEv($this))|0);
   $60=((($59)*(12))&-1);
   $61=($58|0)>($60|0);
   if (!($61)) {
    $pos_0=$51;
    break;
   }
   $63=(($this+208)|0);
   HEAP8[($63)]=1;
   HEAP8[($1)]=1;
   HEAP32[(($24)>>2)]=0;
   $64=(($this+236)|0);
   HEAP32[(($64)>>2)]=0;
   $pos_0=$51;
  }
 } while(0);
 $66=(($this+236)|0);
 $67=((HEAP32[(($66)>>2)])|0);
 $68=($67|0)==0;
 if ($68) {
  $pos_1=$pos_0;
 } else {
  $70=((($out_count)-($pos_0))|0);
  $71=((__Z3minIlET_S0_S0_($67,$70))|0);
  $72=(($out+($pos_0<<1))|0);
  $73=$72;
  $74=(($this+240)|0);
  $75=((__ZNK13blargg_vectorIsE5beginEv($74))|0);
  $76=(((2048)-($67))|0);
  $77=(($75+($76<<1))|0);
  $78=$77;
  $79=$71<<1;
  (_memcpy((($73)|0), (($78)|0), $79)|0);
  $80=((HEAP32[(($66)>>2)])|0);
  $81=((($80)-($71))|0);
  HEAP32[(($66)>>2)]=$81;
  $82=((($71)+($pos_0))|0);
  $pos_1=$82;
 }
 $84=((($out_count)-($pos_1))|0);
 $85=($pos_1|0)==($out_count|0);
 do {
  if (!($85)) {
   $87=(($out+($pos_1<<1))|0);
   __ZN9Music_Emu8emu_playElPs($this,$84,$87);
   $88=(($this+208)|0);
   $89=((HEAP8[($88)])|0);
   $90=((HEAP8[($1)])|0);
   $91=$90|$89;
   $92=$91&1;
   HEAP8[($1)]=$92;
   $93=(($this+224)|0);
   $94=((HEAP8[($93)])|0);
   $95=$94&1;
   $96=(($95<<24)>>24)==0;
   if (!($96)) {
    $98=((HEAP32[(($19)>>2)])|0);
    $99=(($this+212)|0);
    $100=((HEAP32[(($99)>>2)])|0);
    $101=($98|0)>($100|0);
    if (!($101)) {
     break;
    }
   }
   $103=((__ZL13count_silencePsl($87,$84))|0);
   $104=($103|0)<($84|0);
   if ($104) {
    $106=((HEAP32[(($17)>>2)])|0);
    $107=((($106)-($103))|0);
    $108=(($this+228)|0);
    HEAP32[(($108)>>2)]=$107;
   }
   $110=((HEAP32[(($17)>>2)])|0);
   $111=(($this+228)|0);
   $112=((HEAP32[(($111)>>2)])|0);
   $113=((($110)-($112))|0);
   $114=($113|0)>2047;
   if (!($114)) {
    break;
   }
   __ZN9Music_Emu8fill_bufEv($this);
  }
 } while(0);
 $117=((HEAP32[(($19)>>2)])|0);
 $118=(($this+212)|0);
 $119=((HEAP32[(($118)>>2)])|0);
 $120=($117|0)>($119|0);
 if (!($120)) {
  $123=(($this+200)|0);
  $124=((HEAP32[(($123)>>2)])|0);
  $125=((($124)+($out_count))|0);
  HEAP32[(($123)>>2)]=$125;
  return ((0)|0);
 }
 __ZN9Music_Emu11handle_fadeElPs($this,$out_count,$out);
 $123=(($this+200)|0);
 $124=((HEAP32[(($123)>>2)])|0);
 $125=((($124)+($out_count))|0);
 HEAP32[(($123)>>2)]=$125;
 return ((0)|0);
}
function __ZN9Gme_Info_16set_sample_rate_El($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return ((0)|0);
}
function __ZN9Gme_Info_8pre_loadEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN8Gme_File8pre_loadEv($1);
 return;
}
function __ZN9Gme_Info_10post_load_Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN8Gme_File10post_load_Ev($1);
 return;
}
function __ZN9Gme_Info_14set_equalizer_ERK15gme_equalizer_t($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return;
}
function __ZN9Gme_Info_12mute_voices_Ei($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return;
}
function __ZN9Gme_Info_10set_tempo_Ed($this,$0){
 $this=($this)|0;
 $0=+($0);
 var label=0;
 return;
}
function __ZN9Gme_Info_12start_track_Ei($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return ((6104)|0);
}
function __ZN9Gme_Info_5play_ElPs($this,$0,$1){
 $this=($this)|0;
 $0=($0)|0;
 $1=($1)|0;
 var label=0;
 return ((6104)|0);
}
function __ZN9Gme_Info_D1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN9Gme_Info_D2Ev($this);
 return;
}
function __ZN9Gme_Info_D0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN9Gme_Info_D1Ev($this);
 $2=$this;
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Nes_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var label=0;
 $1=(($this+20)|0);
 $2=(($this+1992)|0);
 __ZN10Nes_SquareC1EPK10Blip_SynthILi12ELi1EE($1,$2);
 $3=(($this+64)|0);
 __ZN10Nes_SquareC1EPK10Blip_SynthILi12ELi1EE($3,$2);
 $4=(($this+112)|0);
 __ZN9Nes_NoiseC1Ev($4);
 $5=(($this+712)|0);
 __ZN12Nes_TriangleC1Ev($5);
 $6=(($this+1304)|0);
 __ZN7Nes_DmcC1Ev($6);
 __ZN10Blip_SynthILi12ELi1EEC1Ev($2);
 $7=(($this+1936)|0);
 HEAPF64[(($7)>>3)]=1.0;
 $8=(($this+1372)|0);
 HEAP32[(($8)>>2)]=$this;
 $9=(($this+1364)|0);
 HEAP32[(($9)>>2)]=0;
 $10=(($this+1984)|0);
 HEAP32[(($10)>>2)]=0;
 $11=(($1)|0);
 $12=(($this)|0);
 HEAP32[(($12)>>2)]=$11;
 $13=(($3)|0);
 $14=(($this+4)|0);
 HEAP32[(($14)>>2)]=$13;
 $15=(($5)|0);
 $16=(($this+8)|0);
 HEAP32[(($16)>>2)]=$15;
 $17=(($4)|0);
 $18=(($this+12)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($6)|0);
 $20=(($this+16)|0);
 HEAP32[(($20)>>2)]=$19;
 __ZN7Nes_Apu6outputEP11Blip_Buffer($this,0);
 __ZN7Nes_Apu6volumeEd($this,1.0);
 __ZN7Nes_Apu5resetEbi($this,0,0);
 return;
}
function __ZN10Nes_SquareC1EPK10Blip_SynthILi12ELi1EE($this,$s){
 $this=($this)|0;
 $s=($s)|0;
 var label=0;
 __ZN10Nes_SquareC2EPK10Blip_SynthILi12ELi1EE($this,$s);
 return;
}
function __ZN9Nes_NoiseC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN9Nes_NoiseC2Ev($this);
 return;
}
function __ZN12Nes_TriangleC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN12Nes_TriangleC2Ev($this);
 return;
}
function __ZN7Nes_DmcC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN7Nes_DmcC2Ev($this);
 return;
}
function __ZN7Nes_Apu6outputEP11Blip_Buffer($this,$buffer){
 $this=($this)|0;
 $buffer=($buffer)|0;
 var label=0;
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,0,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,1,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,2,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,3,$buffer);
 __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,4,$buffer);
 return;
}
function __ZN7Nes_Apu6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=0,$3=.0,$4=0,$5=.0,$6=0,$7=.0,$8=0,$9=.0,label=0;
 $1=(($this+1363)|0);
 HEAP8[($1)]=0;
 $2=(($this+1992)|0);
 $3=($v)*((0.00752));
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($2,$3);
 $4=(($this+744)|0);
 $5=($v)*((0.00851));
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($4,$5);
 $6=(($this+152)|0);
 $7=($v)*((0.00494));
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($6,$7);
 $8=(($this+1376)|0);
 $9=($v)*((0.00335));
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($8,$9);
 return;
}
function __ZN7Nes_Apu5resetEbi($this,$pal_mode,$initial_dmc_dac){
 $this=($this)|0;
 $pal_mode=($pal_mode)|0;
 $initial_dmc_dac=($initial_dmc_dac)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=.0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$addr_07=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$31=0,$32=0,$33=0,$35=0,label=0;
 $1=(($this+1304)|0);
 $2=(($this+1362)|0);
 $3=($pal_mode&1);
 HEAP8[($2)]=$3;
 $4=(($this+1936)|0);
 $5=(+(HEAPF64[(($4)>>3)]));
 __ZN7Nes_Apu9set_tempoEd($this,$5);
 $6=(($this+20)|0);
 __ZN10Nes_Square5resetEv($6);
 $7=(($this+64)|0);
 __ZN10Nes_Square5resetEv($7);
 $8=(($this+712)|0);
 __ZN12Nes_Triangle5resetEv($8);
 $9=(($this+112)|0);
 __ZN9Nes_Noise5resetEv($9);
 __ZN7Nes_Dmc5resetEv($1);
 $10=(($this+1944)|0);
 HEAP32[(($10)>>2)]=0;
 $11=(($this+1948)|0);
 HEAP32[(($11)>>2)]=0;
 $12=(($this+1972)|0);
 HEAP32[(($12)>>2)]=0;
 $13=(($this+1980)|0);
 HEAP8[($13)]=0;
 $14=(($this+1952)|0);
 HEAP32[(($14)>>2)]=1073741824;
 $15=(($this+1964)|0);
 HEAP32[(($15)>>2)]=1;
 __ZN7Nes_Apu14write_registerEiji($this,0,16407,0);
 __ZN7Nes_Apu14write_registerEiji($this,0,16405,0);
 $addr_07=16384;
 while(1) {
  $17=$addr_07&3;
  $18=($17|0)!=0;
  $19=($18?0:16);
  __ZN7Nes_Apu14write_registerEiji($this,0,$addr_07,$19);
  $20=((($addr_07)+(1))|0);
  $21=($20>>>0)<((16404)>>>0);
  if ($21) {
   $addr_07=$20;
  } else {
   break;
  }
 }
 $23=(($this+1352)|0);
 HEAP32[(($23)>>2)]=$initial_dmc_dac;
 $24=(($this+1363)|0);
 $25=((HEAP8[($24)])|0);
 $26=$25&1;
 $27=(($26<<24)>>24)==0;
 if ($27) {
  $29=(($this+732)|0);
  HEAP32[(($29)>>2)]=15;
 }
 $31=((HEAP8[($24)])|0);
 $32=$31&1;
 $33=(($32<<24)>>24)==0;
 if (!($33)) {
  return;
 }
 $35=(($this+1324)|0);
 HEAP32[(($35)>>2)]=$initial_dmc_dac;
 return;
}
function __ZN7Nes_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+1992)|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+744)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
 $3=(($this+152)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($3,$eq);
 $4=(($this+1376)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($4,$eq);
 return;
}
function __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($this,$osc,$buf){
 $this=($this)|0;
 $osc=($osc)|0;
 $buf=($buf)|0;
 var $1=0,$4=0,$5=0,$6=0,label=0;
 $1=($osc>>>0)<((5)>>>0);
 if ($1) {
  $4=(($this+($osc<<2))|0);
  $5=((HEAP32[(($4)>>2)])|0);
  $6=(($5+8)|0);
  HEAP32[(($6)>>2)]=$buf;
  return;
 } else {
  ___assert_fail(((416)|0),((8112)|0),((143)|0),((8960)|0));
 }
}
function __ZN7Nes_Apu9set_tempoEd($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=.0,$11=.0,$12=0,$13=0,$storemerge=0,label=0;
 $1=(($this+1936)|0);
 HEAPF64[(($1)>>3)]=$t;
 $2=(($this+1362)|0);
 $3=((HEAP8[($2)])|0);
 $4=$3&1;
 $5=(($4<<24)>>24)!=0;
 $6=($5?8314:7458);
 $7=(($this+1960)|0);
 $8=$t!=(1.0);
 if (!($8)) {
  $storemerge=$6;
  HEAP32[(($7)>>2)]=$storemerge;
  return;
 }
 $10=(+((($6|0))|0));
 $11=($10)/($t);
 $12=(~~($11));
 $13=$12&-2;
 $storemerge=$13;
 HEAP32[(($7)>>2)]=$storemerge;
 return;
}
function __ZN10Nes_Square5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+36)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this)|0);
 __ZN12Nes_Envelope5resetEv($2);
 return;
}
function __ZN12Nes_Triangle5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+28)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+24)|0);
 HEAP32[(($2)>>2)]=1;
 $3=(($this)|0);
 __ZN7Nes_Osc5resetEv($3);
 return;
}
function __ZN9Nes_Noise5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+32)|0);
 HEAP32[(($1)>>2)]=16384;
 $2=(($this)|0);
 __ZN12Nes_Envelope5resetEv($2);
 return;
}
function __ZN7Nes_Apu14write_registerEiji($this,$time,$addr,$data){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$4=0,$7=0,$8=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0;
 var $31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$40=0,$42=0,$43=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$extract_t=0;
 var $59=0,$60=0,$_lobit=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0;
 var $79=0,$81=0,$82=0,$83=0,$84=0,$85=0,$89=0,$90=0,$91=0,$92=0,$93=0,$95=0,$96=0,$97=0,$98=0,$99=0,$101=0,$102=0,$103=0,$104=0;
 var $105=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,label=0;
 $1=($addr>>>0)>((32)>>>0);
 if (!($1)) {
  ___assert_fail(((2352)|0),((7048)|0),((285)|0),((8928)|0));
 }
 $4=($data>>>0)<((256)>>>0);
 if (!($4)) {
  ___assert_fail(((1800)|0),((7048)|0),((286)|0),((8928)|0));
 }
 $7=((($addr)-(16384))|0);
 $8=($7>>>0)>((23)>>>0);
 if ($8) {
  return;
 }
 __ZN7Nes_Apu10run_until_Ei($this,$time);
 $10=($addr>>>0)<((16404)>>>0);
 if ($10) {
  $12=$7>>>2;
  $13=(($this+($12<<2))|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$addr&3;
  $16=(($data)&255);
  $17=(($14+$15)|0);
  HEAP8[($17)]=$16;
  $18=(($14+4+$15)|0);
  HEAP8[($18)]=1;
  $19=($12|0)==4;
  if ($19) {
   $21=(($this+1304)|0);
   __ZN7Nes_Dmc14write_registerEii($21,$15,$data);
   return;
  }
  $23=($15|0)==3;
  if (!($23)) {
   return;
  }
  $25=(($this+1972)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=1<<$12;
  $28=$26&$27;
  $29=($28|0)==0;
  if (!($29)) {
   $31=$data>>>3;
   $32=$31&31;
   $33=((18112+$32)|0);
   $34=((HEAP8[($33)])|0);
   $35=($34&255);
   $36=(($14+12)|0);
   HEAP32[(($36)>>2)]=$35;
  }
  $38=($7>>>0)<((8)>>>0);
  if (!($38)) {
   return;
  }
  $40=(($14+32)|0);
  HEAP32[(($40)>>2)]=7;
  return;
 }
 if (((($addr|0))|0)==((16405)|0)) {
  $42=$data&16;
  $43=($42|0)==0;
  if ($43) {
   $45=(($this+16)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=(($46+12)|0);
   HEAP32[(($47)>>2)]=0;
  }
  $48=$data&8;
  $49=($48|0)==0;
  if ($49) {
   $89=(($this+12)|0);
   $90=((HEAP32[(($89)>>2)])|0);
   $91=(($90+12)|0);
   HEAP32[(($91)>>2)]=0;
  }
  $92=$data&4;
  $93=($92|0)==0;
  if ($93) {
   $95=(($this+8)|0);
   $96=((HEAP32[(($95)>>2)])|0);
   $97=(($96+12)|0);
   HEAP32[(($97)>>2)]=0;
  }
  $98=$data&2;
  $99=($98|0)==0;
  if ($99) {
   $101=(($this+4)|0);
   $102=((HEAP32[(($101)>>2)])|0);
   $103=(($102+12)|0);
   HEAP32[(($103)>>2)]=0;
  }
  $104=$data&1;
  $105=($104|0)==0;
  if ($105) {
   $107=(($this)|0);
   $108=((HEAP32[(($107)>>2)])|0);
   $109=(($108+12)|0);
   HEAP32[(($109)>>2)]=0;
  }
  $110=(($this+1304)|0);
  $111=(($this+1361)|0);
  $112=((HEAP8[($111)])|0);
  HEAP8[($111)]=0;
  $113=(($this+1972)|0);
  $114=((HEAP32[(($113)>>2)])|0);
  HEAP32[(($113)>>2)]=$data;
  $115=$data&16;
  $116=($115|0)==0;
  do {
   if ($116) {
    $50=(($this+1356)|0);
    HEAP32[(($50)>>2)]=1073741824;
   } else {
    $52=$114&16;
    $53=($52|0)==0;
    $54=$112&1;
    $extract_t=(($54<<24)>>24)==0;
    if ($53) {
     __ZN7Nes_Dmc5startEv($110);
    }
    if (!($extract_t)) {
     break;
    }
    return;
   }
  } while(0);
  __ZN7Nes_Apu11irq_changedEv($this);
  return;
 } else if (((($addr|0))|0)==((16407)|0)) {
  $59=(($this+1976)|0);
  HEAP32[(($59)>>2)]=$data;
  $60=$data&64;
  $_lobit=$60>>>6;
  $61=$_lobit^1;
  $62=(($this+1980)|0);
  $63=((HEAP8[($62)])|0);
  $64=($63&255);
  $65=$64&$61;
  $66=(($65)&255);
  HEAP8[($62)]=$66;
  $67=(($this+1956)|0);
  HEAP32[(($67)>>2)]=1073741824;
  $68=(($this+1964)|0);
  $69=((HEAP32[(($68)>>2)])|0);
  $70=$69&1;
  HEAP32[(($68)>>2)]=$70;
  $71=(($this+1968)|0);
  HEAP32[(($71)>>2)]=0;
  $72=$data&128;
  $73=($72|0)==0;
  do {
   if ($73) {
    $75=($60|0)==0;
    HEAP32[(($71)>>2)]=1;
    $76=(($this+1960)|0);
    $77=((HEAP32[(($76)>>2)])|0);
    $78=((HEAP32[(($68)>>2)])|0);
    $79=((($78)+($77))|0);
    HEAP32[(($68)>>2)]=$79;
    if (!($75)) {
     break;
    }
    $81=((HEAP32[(($76)>>2)])|0);
    $82=((($81)*(3))&-1);
    $83=((($time)+(1))|0);
    $84=((($83)+($79))|0);
    $85=((($84)+($82))|0);
    HEAP32[(($67)>>2)]=$85;
   }
  } while(0);
  __ZN7Nes_Apu11irq_changedEv($this);
  return;
 } else {
  return;
 }
}
function __ZN7Nes_Apu11irq_changedEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$_=0,$new_irq_0=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $23=0,$24=0,label=0;
 $1=(($this+1356)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+1361)|0);
 $4=((HEAP8[($3)])|0);
 $5=(($this+1980)|0);
 $6=((HEAP8[($5)])|0);
 $7=$6|$4;
 $8=$7&1;
 $9=(($8<<24)>>24)==0;
 if ($9) {
  $11=(($this+1956)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($2|0)>($12|0);
  $_=($13?$12:$2);
  $new_irq_0=$_;
 } else {
  $new_irq_0=0;
 }
 $15=(($this+1952)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($new_irq_0|0)==($16|0);
 if ($17) {
  return;
 }
 HEAP32[(($15)>>2)]=$new_irq_0;
 $19=(($this+1984)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($20|0)==0;
 if ($21) {
  return;
 }
 $23=(($this+1988)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 FUNCTION_TABLE_vi[($20)&255]($24);
 return;
}
function __ZN7Nes_Apu10run_until_Ei($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$end_time_=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$47=0,$48=0,$49=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$64=0,$65=0,$67=0,$68=0,$70=0,$71=0;
 var $72=0,$74=0,$75=0,$77=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,$_neg=0,$85=0,$86=0,$87=0,label=0;
 $1=(($this+1944)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($end_time|0);
 if ($3) {
  ___assert_fail(((4920)|0),((7048)|0),((150)|0),((8944)|0));
 }
 $6=($2|0)==($end_time|0);
 if ($6) {
  return;
 }
 $8=(($this+1948)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)<($end_time|0);
 if ($10) {
  HEAP32[(($8)>>2)]=$end_time;
  $12=(($this+1304)|0);
  __ZN7Nes_Dmc3runEii($12,$9,$end_time);
 }
 $13=(($this+1964)|0);
 $14=(($this+20)|0);
 $15=(($this+64)|0);
 $16=(($this+712)|0);
 $17=(($this+112)|0);
 $18=(($this+1960)|0);
 $19=(($this+1968)|0);
 $20=(($14)|0);
 $21=(($15)|0);
 $22=(($17)|0);
 $23=(($this+1976)|0);
 $24=(($this+1956)|0);
 $25=(($this+1980)|0);
 $26=(($14)|0);
 $27=(($15)|0);
 $28=(($17)|0);
 $29=(($16)|0);
 $30=(($this+1362)|0);
 $31=(($this+1362)|0);
 $32=(($this+1976)|0);
 $33=(($this+1362)|0);
 while(1) {
  $35=((HEAP32[(($1)>>2)])|0);
  $36=((HEAP32[(($13)>>2)])|0);
  $37=((($36)+($35))|0);
  $38=($37|0)>($end_time|0);
  $end_time_=($38?$end_time:$37);
  $39=((($36)+($35))|0);
  $40=((($39)-($end_time_))|0);
  HEAP32[(($13)>>2)]=$40;
  $41=((HEAP32[(($1)>>2)])|0);
  __ZN10Nes_Square3runEii($14,$41,$end_time_);
  $42=((HEAP32[(($1)>>2)])|0);
  __ZN10Nes_Square3runEii($15,$42,$end_time_);
  $43=((HEAP32[(($1)>>2)])|0);
  __ZN12Nes_Triangle3runEii($16,$43,$end_time_);
  $44=((HEAP32[(($1)>>2)])|0);
  __ZN9Nes_Noise3runEii($17,$44,$end_time_);
  HEAP32[(($1)>>2)]=$end_time_;
  $45=($end_time_|0)==($end_time|0);
  if ($45) {
   break;
  }
  $47=((HEAP32[(($18)>>2)])|0);
  HEAP32[(($13)>>2)]=$47;
  $48=((HEAP32[(($19)>>2)])|0);
  $49=((($48)+(1))|0);
  HEAP32[(($19)>>2)]=$49;
  do {
   if (((($48|0))|0)==((0)|0)) {
    $51=((HEAP32[(($23)>>2)])|0);
    $52=$51&192;
    $53=($52|0)==0;
    if (!($53)) {
     label = 809;
     break;
    }
    $55=((HEAP32[(($18)>>2)])|0);
    $56=$55<<2;
    $57=((($end_time_)+(2))|0);
    $58=((($57)+($56))|0);
    HEAP32[(($24)>>2)]=$58;
    HEAP8[($25)]=1;
    label = 809;
   } else if (((($48|0))|0)==((2)|0)) {
    label = 809;
   } else if (((($48|0))|0)==((1)|0)) {
    $70=((HEAP8[($31)])|0);
    $71=$70&1;
    $72=(($71<<24)>>24)==0;
    if (!($72)) {
     break;
    }
    $74=((HEAP32[(($13)>>2)])|0);
    $75=((($74)-(2))|0);
    HEAP32[(($13)>>2)]=$75;
   } else if (((($48|0))|0)==((3)|0)) {
    HEAP32[(($19)>>2)]=0;
    $77=((HEAP32[(($32)>>2)])|0);
    $78=$77&128;
    $79=($78|0)==0;
    if ($79) {
     break;
    }
    $81=((HEAP32[(($18)>>2)])|0);
    $82=((HEAP8[($33)])|0);
    $83=$82&1;
    $84=(($83<<24)>>24)!=0;
    $_neg=($84?-2:-6);
    $85=((HEAP32[(($13)>>2)])|0);
    $86=((($85)+($81))|0);
    $87=((($86)+($_neg))|0);
    HEAP32[(($13)>>2)]=$87;
   }
  } while(0);
  do {
   if ((label|0) == 809) {
    label = 0;
    __ZN7Nes_Osc12clock_lengthEi($26,32);
    __ZN7Nes_Osc12clock_lengthEi($27,32);
    __ZN7Nes_Osc12clock_lengthEi($28,32);
    __ZN7Nes_Osc12clock_lengthEi($29,128);
    __ZN10Nes_Square11clock_sweepEi($14,-1);
    __ZN10Nes_Square11clock_sweepEi($15,0);
    $60=((HEAP8[($30)])|0);
    $61=$60&1;
    $62=(($61<<24)>>24)==0;
    if ($62) {
     break;
    }
    $64=((HEAP32[(($19)>>2)])|0);
    $65=($64|0)==3;
    if (!($65)) {
     break;
    }
    $67=((HEAP32[(($13)>>2)])|0);
    $68=((($67)-(2))|0);
    HEAP32[(($13)>>2)]=$68;
   }
  } while(0);
  __ZN12Nes_Triangle20clock_linear_counterEv($16);
  __ZN12Nes_Envelope14clock_envelopeEv($20);
  __ZN12Nes_Envelope14clock_envelopeEv($21);
  __ZN12Nes_Envelope14clock_envelopeEv($22);
 }
 return;
}
function __ZN7Nes_Apu9end_frameEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0;
 var $27=0,$28=0,$29=0,$30=0,$33=0,$34=0,$35=0,$37=0,$39=0,$40=0,$41=0,$43=0,$45=0,$46=0,$47=0,$49=0,$50=0,label=0;
 $1=(($this+1944)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($end_time|0);
 if ($3) {
  __ZN7Nes_Apu10run_until_Ei($this,$end_time);
 }
 $6=(($this+1363)|0);
 $7=((HEAP8[($6)])|0);
 $8=$7&1;
 $9=(($8<<24)>>24)==0;
 if (!($9)) {
  $11=(($this+1304)|0);
  $12=(($this+20)|0);
  $13=((HEAP32[(($1)>>2)])|0);
  __Z12zero_apu_oscI10Nes_SquareEvPT_i($12,$13);
  $14=(($this+64)|0);
  $15=((HEAP32[(($1)>>2)])|0);
  __Z12zero_apu_oscI10Nes_SquareEvPT_i($14,$15);
  $16=(($this+712)|0);
  $17=((HEAP32[(($1)>>2)])|0);
  __Z12zero_apu_oscI12Nes_TriangleEvPT_i($16,$17);
  $18=(($this+112)|0);
  $19=((HEAP32[(($1)>>2)])|0);
  __Z12zero_apu_oscI9Nes_NoiseEvPT_i($18,$19);
  $20=((HEAP32[(($1)>>2)])|0);
  __Z12zero_apu_oscI7Nes_DmcEvPT_i($11,$20);
 }
 $22=((HEAP32[(($1)>>2)])|0);
 $23=((($22)-($end_time))|0);
 HEAP32[(($1)>>2)]=$23;
 $24=($23|0)>-1;
 if (!($24)) {
  ___assert_fail(((3648)|0),((7048)|0),((254)|0),((8912)|0));
 }
 $27=(($this+1948)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((($28)-($end_time))|0);
 HEAP32[(($27)>>2)]=$29;
 $30=($29|0)>-1;
 if (!($30)) {
  ___assert_fail(((2928)|0),((7048)|0),((257)|0),((8912)|0));
 }
 $33=(($this+1956)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=($34|0)==1073741824;
 if (!($35)) {
  $37=((($34)-($end_time))|0);
  HEAP32[(($33)>>2)]=$37;
 }
 $39=(($this+1356)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=($40|0)==1073741824;
 if (!($41)) {
  $43=((($40)-($end_time))|0);
  HEAP32[(($39)>>2)]=$43;
 }
 $45=(($this+1952)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=($46|0)==1073741824;
 if ($47) {
  return;
 }
 $49=((($46)-($end_time))|0);
 HEAP32[(($45)>>2)]=$49;
 $50=($49|0)<0;
 if (!($50)) {
  return;
 }
 HEAP32[(($45)>>2)]=0;
 return;
}
function __Z12zero_apu_oscI10Nes_SquareEvPT_i($osc,$time){
 $osc=($osc)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$or_cond=0,$8=0,$9=0,$10=0,label=0;
 $1=(($osc+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($osc+20)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($3)>>2)]=0;
 $5=($2|0)==0;
 $6=($4|0)==0;
 $or_cond=$5|$6;
 if ($or_cond) {
  return;
 }
 $8=(($osc+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(((-$4))|0);
 __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($9,$time,$10,$2);
 return;
}
function __Z12zero_apu_oscI12Nes_TriangleEvPT_i($osc,$time){
 $osc=($osc)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$or_cond=0,$8=0,$9=0,label=0;
 $1=(($osc+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($osc+20)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($3)>>2)]=0;
 $5=($2|0)==0;
 $6=($4|0)==0;
 $or_cond=$5|$6;
 if ($or_cond) {
  return;
 }
 $8=(($osc+32)|0);
 $9=(((-$4))|0);
 __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($8,$time,$9,$2);
 return;
}
function __Z12zero_apu_oscI9Nes_NoiseEvPT_i($osc,$time){
 $osc=($osc)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$or_cond=0,$8=0,$9=0,label=0;
 $1=(($osc+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($osc+20)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($3)>>2)]=0;
 $5=($2|0)==0;
 $6=($4|0)==0;
 $or_cond=$5|$6;
 if ($or_cond) {
  return;
 }
 $8=(($osc+40)|0);
 $9=(((-$4))|0);
 __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($8,$time,$9,$2);
 return;
}
function __Z12zero_apu_oscI7Nes_DmcEvPT_i($osc,$time){
 $osc=($osc)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$or_cond=0,$8=0,$9=0,label=0;
 $1=(($osc+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($osc+20)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($3)>>2)]=0;
 $5=($2|0)==0;
 $6=($4|0)==0;
 $or_cond=$5|$6;
 if ($or_cond) {
  return;
 }
 $8=(($osc+72)|0);
 $9=(((-$4))|0);
 __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($8,$time,$9,$2);
 return;
}
function __ZN7Nes_Apu11read_statusEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$not_=0,$17=0,$result_1=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$result_1_=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$result_1_2=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$result_1_2_=0;
 var $36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$result_1_4=0,$42=0,$43=0,$44=0,$46=0,$result_2=0,label=0;
 $1=((($time)-(1))|0);
 __ZN7Nes_Apu10run_until_Ei($this,$1);
 $2=(($this+1361)|0);
 $3=((HEAP8[($2)])|0);
 $4=$3&1;
 $5=($4&255);
 $6=$5<<7;
 $7=(($this+1980)|0);
 $8=((HEAP8[($7)])|0);
 $9=$8&1;
 $10=($9&255);
 $11=$10<<6;
 $12=$11|$6;
 $13=(($this)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+12)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $not_=($16|0)!=0;
 $17=($not_&1);
 $result_1=$12|$17;
 $18=(($this+4)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+12)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($21|0)==0;
 $23=$result_1|2;
 $result_1_=($22?$result_1:$23);
 $24=(($this+8)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+12)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($27|0)==0;
 $29=$result_1_|4;
 $result_1_2=($28?$result_1_:$29);
 $30=(($this+12)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($31+12)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=($33|0)==0;
 $35=$result_1_2|8;
 $result_1_2_=($34?$result_1_2:$35);
 $36=(($this+16)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=(($37+12)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=($39|0)==0;
 $41=$result_1_2_|16;
 $result_1_4=($40?$result_1_2_:$41);
 __ZN7Nes_Apu10run_until_Ei($this,$time);
 $42=((HEAP8[($7)])|0);
 $43=$42&1;
 $44=(($43<<24)>>24)==0;
 if ($44) {
  $result_2=$result_1_4;
  return (($result_2)|0);
 }
 $46=$result_1_4|64;
 HEAP8[($7)]=0;
 __ZN7Nes_Apu11irq_changedEv($this);
 $result_2=$46;
 return (($result_2)|0);
}
function __ZN12Nes_Envelope5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+28)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this)|0);
 __ZN7Nes_Osc5resetEv($3);
 return;
}
function __ZN7Nes_Osc5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+16)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+20)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZN7Nes_DmcC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+72)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
 return;
}
function __ZN12Nes_TriangleC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+32)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
 return;
}
function __ZN9Nes_NoiseC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+40)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
 return;
}
function __ZN10Nes_SquareC2EPK10Blip_SynthILi12ELi1EE($this,$s){
 $this=($this)|0;
 $s=($s)|0;
 var $1=0,label=0;
 $1=(($this+40)|0);
 HEAP32[(($1)>>2)]=$s;
 return;
}
function __ZN7Nsf_Emu8cpu_readEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$_sum=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$22=0,$23=0;
 var $24=0,$26=0,$27=0,$28=0,$30=0,$32=0,$_0=0,label=0;
 $1=$addr&2047;
 $2=(($this+272)|0);
 $3=$2;
 $_sum=((($1)+(272))|0);
 $4=(($this+$_sum)|0);
 $5=((HEAP8[($4)])|0);
 $6=($5&255);
 $7=$addr&57344;
 $8=($7|0)==0;
 if ($8) {
  $_0=$6;
  return (($_0)|0);
 }
 $10=((__ZN7Nes_Cpu8get_codeEj($3,$addr))|0);
 $11=((HEAP8[($10)])|0);
 $12=($11&255);
 $13=($addr>>>0)>((32767)>>>0);
 if ($13) {
  $_0=$12;
  return (($_0)|0);
 }
 $15=$addr&8191;
 $16=(($this+5512+$15)|0);
 $17=((HEAP8[($16)])|0);
 $18=($17&255);
 $19=($addr>>>0)>((24575)>>>0);
 if ($19) {
  $_0=$18;
  return (($_0)|0);
 }
 if (((($addr|0))|0)==((16405)|0)) {
  $22=(($this+2576)|0);
  $23=((__ZNK7Nes_Cpu4timeEv($3))|0);
  $24=((__ZN7Nes_Apu11read_statusEi($22,$23))|0);
  $_0=$24;
  return (($_0)|0);
 } else if (((($addr|0))|0)==((18432)|0)) {
  label = 875;
 }
 do {
  if ((label|0) == 875) {
   $26=(($this+2564)|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=($27|0)==0;
   if ($28) {
    break;
   }
   $30=((__ZN13Nes_Namco_Apu9read_dataEv($27))|0);
   $_0=$30;
   return (($_0)|0);
  }
 } while(0);
 $32=$addr>>>8;
 $_0=$32;
 return (($_0)|0);
}
function __ZN7Nes_Cpu8get_codeEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=$addr>>>11;
 $2=(($this+2056)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+($1<<2))|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$addr&2047;
 $7=(($5+$6)|0);
 return (($7)|0);
}
function __ZNK7Nes_Cpu4timeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+2056)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+136)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+132)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)+($4))|0);
 return (($7)|0);
}
function __ZN13Nes_Namco_Apu9read_dataEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=((__ZN13Nes_Namco_Apu6accessEv($this))|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 return (($3)|0);
}
function __ZN7Nsf_Emu9cpu_writeEji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$_sum=0,$12=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$25=0,$26=0;
 var $27=0,$28=0,$29=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,label=0;
 $1=$addr^24576;
 $2=($1>>>0)<((8192)>>>0);
 if ($2) {
  $4=(($data)&255);
  $5=(($this+5512+$1)|0);
  HEAP8[($5)]=$4;
  return;
 }
 $7=$addr&57344;
 $8=($7|0)==0;
 if ($8) {
  $10=$addr&2047;
  $11=(($data)&255);
  $_sum=((($10)+(272))|0);
  $12=(($this+$_sum)|0);
  HEAP8[($12)]=$11;
  return;
 }
 $14=((($addr)-(16384))|0);
 $15=($14>>>0)<((24)>>>0);
 if ($15) {
  $17=(($this+2576)|0);
  $18=(($this+272)|0);
  $19=$18;
  $20=((__ZNK7Nes_Cpu4timeEv($19))|0);
  __ZN7Nes_Apu14write_registerEiji($17,$20,$addr,$data);
  return;
 }
 $22=((($addr)-(24568))|0);
 $23=($22>>>0)<((8)>>>0);
 if (!($23)) {
  __ZN7Nsf_Emu14cpu_write_miscEji($this,$addr,$data);
  return;
 }
 $25=(($this+2540)|0);
 $26=$data<<12;
 $27=((__ZNK8Rom_DataILi4096EE9mask_addrEi($25,$26))|0);
 $28=((__ZNK8Rom_DataILi4096EE4sizeEv($25))|0);
 $29=($27|0)<($28|0);
 if (!($29)) {
  $31=$this;
  __ZN8Gme_File11set_warningEPKc($31,3184);
 }
 $33=(($this+272)|0);
 $34=$33;
 $35=$addr<<12;
 $36=((($35)-(100597760))|0);
 $37=((__ZN8Rom_DataILi4096EE7at_addrEi($25,$27))|0);
 __ZN7Nes_Cpu8map_codeEjjPKvb($34,$36,4096,$37,0);
 return;
}
function __ZNK8Rom_DataILi4096EE9mask_addrEi($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&$addr;
 return (($3)|0);
}
function __ZNK8Rom_DataILi4096EE4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN7Nes_Cpu8map_codeEjjPKvb($this,$start,$size,$data,$mirror){
 $this=($this)|0;
 $start=($start)|0;
 $size=($size)|0;
 $data=($data)|0;
 $mirror=($mirror)|0;
 var $1=0,$2=0,$5=0,$6=0,$9=0,$10=0,$13=0,$14=0,$15=0,$n_013=0,$page_012=0,$_011=0,$17=0,$18=0,$_0_=0,$19=0,$20=0,label=0;
 $1=$start&2047;
 $2=($1|0)==0;
 if (!($2)) {
  ___assert_fail(((7000)|0),((4848)|0),((92)|0),((8896)|0));
 }
 $5=$size&2047;
 $6=($5|0)==0;
 if (!($6)) {
  ___assert_fail(((3624)|0),((4848)|0),((93)|0),((8896)|0));
 }
 $9=((($size)+($start))|0);
 $10=($9>>>0)<((65537)>>>0);
 if (!($10)) {
  ___assert_fail(((2904)|0),((4848)|0),((94)|0),((8896)|0));
 }
 $13=$size>>>11;
 $14=($13|0)==0;
 if ($14) {
  return;
 }
 $15=$start>>>11;
 $_011=$data;$page_012=$15;$n_013=$13;
 while(1) {
  $17=((($page_012)+(1))|0);
  __ZN7Nes_Cpu13set_code_pageEiPKv($this,$page_012,$_011);
  $18=(($_011+2048)|0);
  $_0_=($mirror?$_011:$18);
  $19=((($n_013)-(1))|0);
  $20=($19|0)==0;
  if ($20) {
   break;
  } else {
   $_011=$_0_;$page_012=$17;$n_013=$19;
  }
 }
 return;
}
function __ZN8Rom_DataILi4096EE7at_addrEi($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$_=0,$9=0,label=0;
 $1=((__ZNK8Rom_DataILi4096EE9mask_addrEi($this,$addr))|0);
 $2=(($this+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($1)-($3))|0);
 $5=(($this)|0);
 $6=((__ZNK13blargg_vectorIhE4sizeEv($5))|0);
 $7=((($6)-(4104))|0);
 $8=($4>>>0)>($7>>>0);
 $_=($8?0:$4);
 $9=((__ZNK13blargg_vectorIhEixEj($5,$_))|0);
 return (($9)|0);
}
function __ZN7Nes_Cpu5resetEPKv($this,$unmapped_page){
 $this=($this)|0;
 $unmapped_page=($unmapped_page)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this+2060)|0);
 $2=(($this+2056)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($this+2053)|0);
 HEAP8[($3)]=4;
 $4=(($this+2054)|0);
 HEAP8[($4)]=-1;
 $5=(($this+2048)|0);
 $6=(($this+2196)|0);
 HEAP32[(($6)>>2)]=0;
 $7=(($this+2192)|0);
 HEAP32[(($7)>>2)]=0;
 $8=(($this+2200)|0);
 $9=$5;
 _memset((((($9)|0))|0), ((((0)|0))|0), ((((5)|0))|0));
 HEAP32[(($8)>>2)]=1073741824;
 $10=(($this+2204)|0);
 HEAP32[(($10)>>2)]=1073741824;
 $11=(($this+2208)|0);
 HEAP32[(($11)>>2)]=0;
 __ZN7Nes_Cpu13set_code_pageEiPKv($this,32,$unmapped_page);
 __ZN7Nes_Cpu8map_codeEjjPKvb($this,8192,57344,$unmapped_page,1);
 $12=(($this)|0);
 __ZN7Nes_Cpu8map_codeEjjPKvb($this,0,8192,$12,1);
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Nes_Cpu13set_code_pageEiPKv($this,$i,$p){
 $this=($this)|0;
 $i=($i)|0;
 $p=($p)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+2056)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+($i<<2))|0);
 HEAP32[(($3)>>2)]=$p;
 return;
}
function __ZN7Nes_Cpu3runEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $s=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0;
 var $pc_0=0,$81=0,$nz_0=0,$c_0=0,$status_0=0,$sp_0=0,$y_0=0,$x_0=0,$a_0=0,$pc_1=0,$s_time_0=0,$82=0,$83=0,$84=0,$85=0,$86=0,$_sum=0,$87=0,$88=0,$89=0;
 var $90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$or_cond=0,$98=0,$99=0,$extract_t=0,$101=0,$extract_t597=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0;
 var $111=0,$112=0,$113=0,$115=0,$116=0,$117=0,$118=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0;
 var $134=0,$135=0,$136=0,$137=0,$138=0,$140=0,$142=0,$143=0,$145=0,$146=0,$147=0,$148=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$158=0;
 var $159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0;
 var $180=0,$181=0,$182=0,$183=0,$185=0,$186=0,$data_0=0,$188=0,$189=0,$190=0,$x_0_pn621=0,$data_1=0,$193=0,$194=0,$data_2=0,$s_time_1=0,$196=0,$_sum620=0,$197=0,$198=0;
 var $199=0,$200=0,$201=0,$data_3=0,$pc_2=0,$s_time_2=0,$203=0,$204=0,$data_4=0,$pc_3=0,$s_time_3=0,$206=0,$207=0,$208=0,$209=0,$211=0,$212=0,$213=0,$214=0,$216=0;
 var $217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$224=0,$225=0,$226=0,$227=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0,$237=0,$238=0,$data_5=0;
 var $240=0,$241=0,$242=0,$244=0,$245=0,$249=0,$250=0,$251=0,$252=0,$254=0,$255=0,$256=0,$257=0,$258=0,$259=0,$260=0,$261=0,$262=0,$263=0,$264=0;
 var $265=0,$266=0,$268=0,$269=0,$270=0,$271=0,$273=0,$274=0,$276=0,$277=0,$278=0,$280=0,$281=0,$283=0,$284=0,$285=0,$286=0,$288=0,$289=0,$addr10_0=0;
 var $pc_4=0,$291=0,$293=0,$294=0,$295=0,$296=0,$297=0,$298=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$306=0,$307=0,$308=0,$309=0,$310=0,$311=0;
 var $312=0,$313=0,$314=0,$315=0,$316=0,$317=0,$318=0,$320=0,$322=0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=0,$329=0,$330=0,$331=0,$332=0,$333=0;
 var $334=0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$349=0,$350=0,$351=0,$352=0,$353=0,$354=0;
 var $355=0,$356=0,$357=0,$358=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$376=0;
 var $377=0,$378=0,$379=0,$380=0,$381=0,$382=0,$383=0,$384=0,$385=0,$386=0,$387=0,$388=0,$389=0,$390=0,$addr13_0=0,$pc_5=0,$s_time_4=0,$392=0,$393=0,$395=0;
 var $396=0,$397=0,$398=0,$400=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=0,$408=0,$409=0,$410=0,$411=0,$413=0,$414=0,$415=0,$416=0,$417=0,$418=0;
 var $419=0,$421=0,$422=0,$423=0,$424=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$434=0,$435=0,$436=0,$437=0,$439=0,$440=0,$441=0,$442=0;
 var $443=0,$444=0,$445=0,$447=0,$448=0,$data_6=0,$450=0,$451=0,$452=0,$454=0,$455=0,$data_7=0,$457=0,$458=0,$459=0,$461=0,$462=0,$data_8=0,$464=0,$465=0;
 var $466=0,$data_9=0,$468=0,$470=0,$471=0,$data_10=0,$473=0,$474=0,$475=0,$data_11=0,$477=0,$479=0,$480=0,$481=0,$data_12=0,$s_time_5=0,$_sum619=0,$483=0,$484=0,$485=0;
 var $486=0,$487=0,$488=0,$489=0,$490=0,$492=0,$493=0,$494=0,$data_13=0,$s_time_6=0,$_sum618=0,$496=0,$497=0,$498=0,$499=0,$500=0,$501=0,$502=0,$503=0,$temp25_0=0;
 var $506=0,$507=0,$508=0,$510=0,$511=0,$513=0,$515=0,$516=0,$517=0,$518=0,$520=0,$521=0,$522=0,$data_14=0,$pc_6=0,$s_time_7=0,$524=0,$525=0,$526=0,$527=0;
 var $529=0,$530=0,$531=0,$532=0,$534=0,$535=0,$536=0,$data_15=0,$pc_7=0,$s_time_8=0,$538=0,$539=0,$540=0,$541=0,$543=0,$544=0,$545=0,$546=0,$547=0,$548=0;
 var $549=0,$550=0,$551=0,$552=0,$553=0,$554=0,$556=0,$557=0,$558=0,$559=0,$560=0,$561=0,$562=0,$563=0,$564=0,$565=0,$566=0,$567=0,$568=0,$570=0;
 var $571=0,$data_16=0,$573=0,$574=0,$575=0,$x_0_pn617=0,$data_17=0,$578=0,$579=0,$data_18=0,$s_time_9=0,$581=0,$_sum616=0,$582=0,$583=0,$584=0,$585=0,$586=0,$data_19=0,$pc_8=0;
 var $s_time_10=0,$588=0,$589=0,$data_20=0,$pc_9=0,$s_time_11=0,$591=0,$592=0,$594=0,$595=0,$596=0,$597=0,$598=0,$599=0,$600=0,$601=0,$602=0,$603=0,$604=0,$605=0;
 var $607=0,$608=0,$609=0,$610=0,$611=0,$612=0,$613=0,$614=0,$615=0,$616=0,$617=0,$618=0,$619=0,$621=0,$622=0,$data_21=0,$624=0,$625=0,$626=0,$x_0_pn615=0;
 var $data_22=0,$629=0,$630=0,$data_23=0,$s_time_12=0,$632=0,$_sum614=0,$633=0,$634=0,$635=0,$636=0,$637=0,$data_24=0,$pc_10=0,$s_time_13=0,$639=0,$640=0,$data_25=0,$pc_11=0,$s_time_14=0;
 var $642=0,$643=0,$645=0,$646=0,$647=0,$648=0,$649=0,$650=0,$651=0,$652=0,$653=0,$654=0,$655=0,$656=0,$658=0,$659=0,$660=0,$661=0,$662=0,$663=0;
 var $664=0,$665=0,$666=0,$667=0,$668=0,$669=0,$670=0,$672=0,$673=0,$data_26=0,$675=0,$676=0,$677=0,$x_0_pn613=0,$data_27=0,$680=0,$681=0,$data_28=0,$s_time_15=0,$683=0;
 var $_sum612=0,$684=0,$685=0,$686=0,$687=0,$688=0,$data_29=0,$pc_12=0,$s_time_16=0,$690=0,$691=0,$data_30=0,$pc_13=0,$s_time_17=0,$693=0,$694=0,$696=0,$697=0,$698=0,$699=0;
 var $700=0,$701=0,$702=0,$703=0,$704=0,$705=0,$_=0,$707=0,$708=0,$709=0,$710=0,$711=0,$712=0,$713=0,$714=0,$715=0,$717=0,$719=0,$720=0,$721=0;
 var $722=0,$723=0,$724=0,$725=0,$726=0,$727=0,$728=0,$729=0,$730=0,$732=0,$733=0,$734=0,$735=0,$736=0,$737=0,$738=0,$739=0,$740=0,$741=0,$742=0;
 var $743=0,$744=0,$746=0,$747=0,$data_31=0,$749=0,$750=0,$751=0,$x_0_pn611=0,$data_32=0,$754=0,$755=0,$data_33=0,$s_time_18=0,$757=0,$_sum610=0,$758=0,$759=0,$760=0,$761=0;
 var $762=0,$data_34=0,$pc_14=0,$s_time_19=0,$764=0,$765=0,$data_35=0,$pc_15=0,$s_time_20=0,$767=0,$769=0,$770=0,$771=0,$772=0,$773=0,$774=0,$775=0,$776=0,$777=0,$778=0;
 var $779=0,$780=0,$782=0,$783=0,$784=0,$785=0,$786=0,$787=0,$788=0,$789=0,$790=0,$791=0,$792=0,$793=0,$794=0,$796=0,$797=0,$data_36=0,$799=0,$800=0;
 var $801=0,$x_0_pn=0,$data_37=0,$804=0,$805=0,$data_38=0,$s_time_21=0,$807=0,$_sum609=0,$808=0,$809=0,$810=0,$811=0,$812=0,$data_39=0,$pc_16=0,$s_time_22=0,$814=0,$815=0,$data_40=0;
 var $pc_17=0,$s_time_23=0,$817=0,$818=0,$819=0,$820=0,$sext=0,$821=0,$822=0,$823=0,$824=0,$825=0,$826=0,$827=0,$828=0,$829=0,$830=0,$c_1=0,$833=0,$834=0;
 var $835=0,$836=0,$837=0,$839=0,$840=0,$842=0,$843=0,$844=0,$845=0,$846=0,$848=0,$data_41=0,$data_42=0,$c_2=0,$_sum607=0,$851=0,$852=0,$853=0,$854=0,$855=0;
 var $856=0,$857=0,$858=0,$859=0,$860=0,$861=0,$863=0,$865=0,$data_43=0,$data_44=0,$c_3=0,$_sum608=0,$868=0,$869=0,$870=0,$871=0,$872=0,$873=0,$874=0,$875=0;
 var $876=0,$877=0,$data_45=0,$nz_1=0,$c_4=0,$879=0,$880=0,$881=0,$883=0,$885=0,$886=0,$888=0,$889=0,$data_46=0,$data_47=0,$c_5=0,$892=0,$893=0,$894=0,$895=0;
 var $896=0,$897=0,$898=0,$899=0,$901=0,$902=0,$904=0,$905=0,$data_48=0,$data_49=0,$c_6=0,$908=0,$909=0,$910=0,$911=0,$912=0,$913=0,$914=0,$916=0,$917=0;
 var $919=0,$920=0,$922=0,$923=0,$925=0,$926=0,$data_51=0,$data_52=0,$nz_2=0,$929=0,$930=0,$931=0,$932=0,$data_53=0,$nz_3=0,$c_7=0,$934=0,$935=0,$936=0,$938=0;
 var $939=0,$941=0,$943=0,$944=0,$946=0,$data_56=0,$nz_4=0,$948=0,$949=0,$950=0,$951=0,$952=0,$956=0,$957=0,$959=0,$960=0,$962=0,$963=0,$964=0,$965=0;
 var $967=0,$968=0,$969=0,$970=0,$971=0,$973=0,$974=0,$975=0,$976=0,$977=0,$978=0,$979=0,$980=0,$981=0,$982=0,$983=0,$984=0,$985=0,$986=0,$987=0;
 var $988=0,$989=0,$990=0,$991=0,$992=0,$993=0,$994=0,$995=0,$996=0,$997=0,$999=0,$1000=0,$1001=0,$1002=0,$1003=0,$1005=0,$1006=0,$1008=0,$1010=0,$1011=0;
 var $1012=0,$1013=0,$1014=0,$1015=0,$1016=0,$1017=0,$1018=0,$1019=0,$1020=0,$1021=0,$1022=0,$1024=0,$1025=0,$1027=0,$1028=0,$1029=0,$1030=0,$1031=0,$1032=0,$1033=0;
 var $1034=0,$1035=0,$1036=0,$1037=0,$temp45_0=0,$1038=0,$1039=0,$1040=0,$1041=0,$1042=0,$1044=0,$1045=0,$1046=0,$1047=0,$1048=0,$1049=0,$1050=0,$1051=0,$1052=0,$1053=0;
 var $1054=0,$1055=0,$1056=0,$1057=0,$1058=0,$1059=0,$1060=0,$1064=0,$1066=0,$1068=0,$1070=0,$1071=0,$1073=0,$nz_5=0,$c_8=0,$status_1=0,$sp_1=0,$1075=0,$1076=0,$1077=0;
 var $1078=0,$1079=0,$1081=0,$1082=0,$1084=0,$1085=0,$1087=0,$1089=0,$1090=0,$1092=0,$nz_6=0,$c_9=0,$status_2=0,$sp_2=0,$1094=0,$1095=0,$1096=0,$1097=0,$1098=0,$1100=0;
 var $1101=0,$1102=0,$s_time_24=0,$1104=0,$pc_19=0,$s_time_25=0,$1106=0,$1108=0,$extract_t596=0,$1110=0,$1112=0,$c_10=0,$1114=0,$1115=0,$1116=0,$1117=0,$1118=0,$1119=0,$1120=0,$1121=0;
 var $1122=0,$1123=0,$1124=0,$1125=0,$_622=0,$1126=0,$1127=0,$1128=0,$_mask=0,$1129=0,$1131=0,$1132=0,$1133=0,$data_57623=0,$1135=0,$1136=0,$1137=0,$1139=0,$extract_t600=0,$extract=0;
 var $extract_t602=0,$1140=0,$1141=0,$1142=0,$1143=0,$1144=0,$1145=0,$1146=0,$1147=0,$1148=0,$1149=0,$1150=0,$1151=0,$1152=0,$1153=0,$1154=0,$1155=0,$1156=0,$1157=0,$1158=0;
 var $1159=0,$1160=0,$1161=0,$1162=0,$temp49_0=0,$1163=0,$extract_t605=0,$1164=0,$1165=0,$1166=0,$1167=0,$1168=0,$1169=0,$1170=0,$1172=0,$pc_21_off0=0,$s_time_27=0,$1174=0,$1175=0,$1176=0;
 var $1177=0,$1178=0,$1179=0,$1180=0,$1181=0,$1182=0,$1183=0,$1184=0,$1185=0,$1186=0,$1187=0,$1188=0,$extract_t598=0,$1190=0,$extract_t599=0,$temp51_0_off0=0,$1192=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+144)|0;
 $s=((sp)|0);
 __ZN7Nes_Cpu12set_end_timeEi($this,$end_time);
 $1=(($this+2060)|0);
 $2=$s;
 $3=$1;
 (_memcpy((($2)|0), (($3)|0), 140)|0);
 $4=(($this+2056)|0);
 HEAP32[(($4)>>2)]=$s;
 $5=(($s+136)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+2048)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($this+2050)|0);
 $11=((HEAP8[($10)])|0);
 $12=($11&255);
 $13=(($this+2051)|0);
 $14=((HEAP8[($13)])|0);
 $15=($14&255);
 $16=(($this+2052)|0);
 $17=((HEAP8[($16)])|0);
 $18=($17&255);
 $19=(($this+2054)|0);
 $20=((HEAP8[($19)])|0);
 $21=($20&255);
 $22=((($21)+(1))|0);
 $23=$22|256;
 $24=(($this+2053)|0);
 $25=((HEAP8[($24)])|0);
 $26=($25&255);
 $27=$26&76;
 $28=$26<<8;
 $29=$26&2;
 $30=$29|$28;
 $31=$30^2;
 $32=(($this+2208)|0);
 $33=((($this)-(272))|0);
 $34=$33;
 $35=((($this)-(272))|0);
 $36=$35;
 $37=((($this)-(272))|0);
 $38=$37;
 $39=((($this)-(272))|0);
 $40=$39;
 $41=((($this)-(272))|0);
 $42=$41;
 $43=((($this)-(272))|0);
 $44=$43;
 $45=((($this)-(272))|0);
 $46=$45;
 $47=((($this)-(272))|0);
 $48=$47;
 $49=((($this)-(272))|0);
 $50=$49;
 $51=((($this)-(272))|0);
 $52=$51;
 $53=((($this)-(272))|0);
 $54=$53;
 $55=((($this)-(272))|0);
 $56=$55;
 $57=((($this)-(272))|0);
 $58=$57;
 $59=((($this)-(272))|0);
 $60=$59;
 $61=((($this)-(272))|0);
 $62=$61;
 $63=((($this)-(272))|0);
 $64=$63;
 $65=((($this)-(272))|0);
 $66=$65;
 $67=((($this)-(272))|0);
 $68=$67;
 $69=((($this)-(272))|0);
 $70=$69;
 $71=(($s+132)|0);
 $72=(($this+2200)|0);
 $73=(($s+132)|0);
 $74=(($this+2200)|0);
 $75=(($s+132)|0);
 $76=(($this+2204)|0);
 $77=(($s+124)|0);
 $78=(($s+132)|0);
 $79=(($this+2204)|0);
 $s_time_0=$6;$pc_1=$9;$a_0=$12;$x_0=$15;$y_0=$18;$sp_0=$23;$status_0=$27;$c_0=$28;$nz_0=$31;
 L1030: while(1) {
  $82=$pc_1>>>11;
  $83=(($s+($82<<2))|0);
  $84=((HEAP32[(($83)>>2)])|0);
  $85=$pc_1&2047;
  $86=(($84+$85)|0);
  $_sum=((($85)+(1))|0);
  $87=(($84+$_sum)|0);
  $88=((HEAP8[($86)])|0);
  $89=($88&255);
  $90=((($pc_1)+(1))|0);
  $91=((10600+$89)|0);
  $92=((HEAP8[($91)])|0);
  $93=($92&255);
  $94=((($93)+($s_time_0))|0);
  $95=($94|0)<0;
  $96=($94|0)<($93|0);
  $or_cond=$95|$96;
  if (!($or_cond)) {
   HEAP32[(($5)>>2)]=$s_time_0;
   $101=($s_time_0|0)<0;
   $extract_t597=(($pc_1)&65535);
   if ($101) {
    $s_time_0=$s_time_0;$pc_1=$pc_1;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue;
   } else {
    $s_time_27=$s_time_0;$pc_21_off0=$extract_t597;
    break;
   }
  }
  $98=((HEAP8[($87)])|0);
  $99=($98&255);
  $extract_t=(($90)&65535);
  L1035: do {
   switch (($89|0)) {
   case 234:case 26:case 58:case 90:case 122:case 218:case 250: {
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 181: {
    $103=((($99)+($x_0))|0);
    $104=$103&255;
    $105=(($this+$104)|0);
    $106=((HEAP8[($105)])|0);
    $107=($106&255);
    $108=((($pc_1)+(2))|0);
    $s_time_0=$94;$pc_1=$108;$a_0=$107;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$107;
    continue L1030;
    break;
   }
   case 165: {
    $110=(($this+$99)|0);
    $111=((HEAP8[($110)])|0);
    $112=($111&255);
    $113=((($pc_1)+(2))|0);
    $s_time_0=$94;$pc_1=$113;$a_0=$112;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$112;
    continue L1030;
    break;
   }
   case 208: {
    $115=(($98<<24)>>24);
    $116=((($pc_1)+(2))|0);
    $117=(($nz_0)&255);
    $118=(($117<<24)>>24)==0;
    if ($118) {
     $pc_0=$116;
     label = 923;
     break L1035;
    }
    $120=$116&255;
    $121=((($115)+($120))|0);
    $122=((($115)+($116))|0);
    $123=$122&65535;
    $124=$121>>>8;
    $125=$124&1;
    $126=((($125)+($94))|0);
    $s_time_0=$126;$pc_1=$123;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 32: {
    $128=((($pc_1)+(2))|0);
    $129=((__Z8get_le16PKv($87))|0);
    $130=$128>>>8;
    $131=(($130)&255);
    $132=((($sp_0)-(1))|0);
    $133=$132|256;
    $134=(($this+$133)|0);
    HEAP8[($134)]=$131;
    $135=((($sp_0)-(2))|0);
    $136=$135|256;
    $137=(($128)&255);
    $138=(($this+$136)|0);
    HEAP8[($138)]=$137;
    $s_time_0=$94;$pc_1=$129;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$136;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 76: {
    $140=((__Z8get_le16PKv($87))|0);
    $s_time_0=$94;$pc_1=$140;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 232: {
    $142=((($x_0)+(1))|0);
    $143=$142&255;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$143;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$142;
    continue L1030;
    break;
   }
   case 16: {
    $145=(($98<<24)>>24);
    $146=((($pc_1)+(2))|0);
    $147=$nz_0&32896;
    $148=($147|0)==0;
    if (!($148)) {
     $pc_0=$146;
     label = 923;
     break L1035;
    }
    $150=$146&255;
    $151=((($145)+($150))|0);
    $152=((($145)+($146))|0);
    $153=$152&65535;
    $154=$151>>>8;
    $155=$154&1;
    $156=((($155)+($94))|0);
    $s_time_0=$156;$pc_1=$153;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 193: {
    $158=((($99)+($x_0))|0);
    $159=((($158)+(1))|0);
    $160=$159&255;
    $161=(($this+$160)|0);
    $162=((HEAP8[($161)])|0);
    $163=($162&255);
    $164=$163<<8;
    $165=$158&255;
    $166=(($this+$165)|0);
    $167=((HEAP8[($166)])|0);
    $168=($167&255);
    $169=$164|$168;
    $s_time_2=$94;$pc_2=$90;$data_3=$169;
    label = 943;
    break;
   }
   case 209: {
    $171=(($this+$99)|0);
    $172=((HEAP8[($171)])|0);
    $173=($172&255);
    $174=((($173)+($y_0))|0);
    $175=((($98)+(1))&255);
    $176=($175&255);
    $177=(($this+$176)|0);
    $178=((HEAP8[($177)])|0);
    $179=($178&255);
    $180=$179<<8;
    $181=((($180)+($174))|0);
    $182=$174>>>8;
    $183=((($182)+($94))|0);
    $s_time_2=$183;$pc_2=$90;$data_3=$181;
    label = 943;
    break;
   }
   case 213: {
    $185=((($99)+($x_0))|0);
    $186=$185&255;
    $data_0=$186;
    label = 939;
    break;
   }
   case 197: {
    $data_0=$99;
    label = 939;
    break;
   }
   case 221: {
    $x_0_pn621=$x_0;
    label = 941;
    break;
   }
   case 217: {
    $x_0_pn621=$y_0;
    label = 941;
    break;
   }
   case 205: {
    $s_time_1=$94;$data_2=$99;
    label = 942;
    break;
   }
   case 201: {
    $s_time_3=$94;$pc_3=$90;$data_4=$99;
    label = 944;
    break;
   }
   case 48: {
    $211=(($98<<24)>>24);
    $212=((($pc_1)+(2))|0);
    $213=$nz_0&32896;
    $214=($213|0)==0;
    if ($214) {
     $pc_0=$212;
     label = 923;
     break L1035;
    }
    $216=$212&255;
    $217=((($211)+($216))|0);
    $218=((($211)+($212))|0);
    $219=$218&65535;
    $220=$217>>>8;
    $221=$220&1;
    $222=((($221)+($94))|0);
    $s_time_0=$222;$pc_1=$219;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 240: {
    $224=(($98<<24)>>24);
    $225=((($pc_1)+(2))|0);
    $226=(($nz_0)&255);
    $227=(($226<<24)>>24)==0;
    if (!($227)) {
     $pc_0=$225;
     label = 923;
     break L1035;
    }
    $229=$225&255;
    $230=((($224)+($229))|0);
    $231=((($224)+($225))|0);
    $232=$231&65535;
    $233=$230>>>8;
    $234=$233&1;
    $235=((($234)+($94))|0);
    $s_time_0=$235;$pc_1=$232;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 149: {
    $237=((($99)+($x_0))|0);
    $238=$237&255;
    $data_5=$238;
    label = 950;
    break;
   }
   case 133: {
    $data_5=$99;
    label = 950;
    break;
   }
   case 200: {
    $244=((($y_0)+(1))|0);
    $245=$244&255;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$245;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$244;
    continue L1030;
    break;
   }
   case 168: {
    $s_time_0=$94;$pc_1=$90;$y_0=$a_0;$nz_0=$a_0;$a_0=$a_0;$x_0=$x_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L1030;
    break;
   }
   case 152: {
    $s_time_0=$94;$pc_1=$90;$a_0=$y_0;$x_0=$x_0;$nz_0=$y_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L1030;
    break;
   }
   case 173: {
    $249=((__Z8get_le16PKv($87))|0);
    $250=((($pc_1)+(3))|0);
    HEAP32[(($5)>>2)]=$94;
    $251=((__ZN7Nsf_Emu8cpu_readEj($36,$249))|0);
    $252=((HEAP32[(($5)>>2)])|0);
    $s_time_0=$252;$pc_1=$250;$a_0=$251;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$251;
    continue L1030;
    break;
   }
   case 96: {
    $254=(($this+$sp_0)|0);
    $255=((HEAP8[($254)])|0);
    $256=($255&255);
    $257=((($256)+(1))|0);
    $258=((($sp_0)-(255))|0);
    $259=$258|256;
    $260=(($this+$259)|0);
    $261=((HEAP8[($260)])|0);
    $262=($261&255);
    $263=$262<<8;
    $264=((($257)+($263))|0);
    $265=((($sp_0)-(254))|0);
    $266=$265|256;
    $s_time_0=$94;$pc_1=$264;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$266;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 153: {
    $268=((__Z8get_le16PKv($87))|0);
    $269=((($268)+($y_0))|0);
    $270=((($pc_1)+(3))|0);
    $271=($269>>>0)<((2048)>>>0);
    if (!($271)) {
     $pc_4=$270;$addr10_0=$269;
     label = 962;
     break L1035;
    }
    $273=(($a_0)&255);
    $274=(($this+$269)|0);
    HEAP8[($274)]=$273;
    $s_time_0=$94;$pc_1=$270;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 141: {
    $276=((__Z8get_le16PKv($87))|0);
    $277=((($pc_1)+(3))|0);
    $278=($276>>>0)<((2048)>>>0);
    if (!($278)) {
     $pc_4=$277;$addr10_0=$276;
     label = 962;
     break L1035;
    }
    $280=(($a_0)&255);
    $281=(($this+$276)|0);
    HEAP8[($281)]=$280;
    $s_time_0=$94;$pc_1=$277;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 157: {
    $283=((__Z8get_le16PKv($87))|0);
    $284=((($283)+($x_0))|0);
    $285=((($pc_1)+(3))|0);
    $286=($284>>>0)<((2048)>>>0);
    if (!($286)) {
     $pc_4=$285;$addr10_0=$284;
     label = 962;
     break L1035;
    }
    $288=(($a_0)&255);
    $289=(($this+$284)|0);
    HEAP8[($289)]=$288;
    $s_time_0=$94;$pc_1=$285;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 145: {
    $293=(($this+$99)|0);
    $294=((HEAP8[($293)])|0);
    $295=($294&255);
    $296=((($295)+($y_0))|0);
    $297=((($98)+(1))&255);
    $298=($297&255);
    $299=(($this+$298)|0);
    $300=((HEAP8[($299)])|0);
    $301=($300&255);
    $302=$301<<8;
    $303=((($296)+($302))|0);
    $304=((($pc_1)+(2))|0);
    $pc_4=$304;$addr10_0=$303;
    label = 962;
    break;
   }
   case 129: {
    $306=((($99)+($x_0))|0);
    $307=((($306)+(1))|0);
    $308=$307&255;
    $309=(($this+$308)|0);
    $310=((HEAP8[($309)])|0);
    $311=($310&255);
    $312=$311<<8;
    $313=$306&255;
    $314=(($this+$313)|0);
    $315=((HEAP8[($314)])|0);
    $316=($315&255);
    $317=$312|$316;
    $318=((($pc_1)+(2))|0);
    $pc_4=$318;$addr10_0=$317;
    label = 962;
    break;
   }
   case 169: {
    $320=((($pc_1)+(2))|0);
    $s_time_0=$94;$pc_1=$320;$a_0=$99;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$99;
    continue L1030;
    break;
   }
   case 161: {
    $322=((($99)+($x_0))|0);
    $323=((($322)+(1))|0);
    $324=$323&255;
    $325=(($this+$324)|0);
    $326=((HEAP8[($325)])|0);
    $327=($326&255);
    $328=$327<<8;
    $329=$322&255;
    $330=(($this+$329)|0);
    $331=((HEAP8[($330)])|0);
    $332=($331&255);
    $333=$328|$332;
    $334=((($pc_1)+(2))|0);
    $s_time_4=$94;$pc_5=$334;$addr13_0=$333;
    label = 970;
    break;
   }
   case 177: {
    $336=(($this+$99)|0);
    $337=((HEAP8[($336)])|0);
    $338=($337&255);
    $339=((($338)+($y_0))|0);
    $340=$339>>>8;
    $341=((($340)+($94))|0);
    $342=((($98)+(1))&255);
    $343=($342&255);
    $344=(($this+$343)|0);
    $345=((HEAP8[($344)])|0);
    $346=($345&255);
    $347=$346<<8;
    $348=((($347)+($339))|0);
    $349=((($pc_1)+(2))|0);
    $350=$348&2047;
    $351=$348>>>11;
    $352=(($s+($351<<2))|0);
    $353=((HEAP32[(($352)>>2)])|0);
    $354=(($353+$350)|0);
    $355=((HEAP8[($354)])|0);
    $356=($355&255);
    $357=$348^32768;
    $358=($357>>>0)<((40960)>>>0);
    if ($358) {
     $s_time_0=$341;$pc_1=$349;$a_0=$356;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$356;
     continue L1030;
    } else {
     $s_time_4=$341;$pc_5=$349;$addr13_0=$348;
     label = 970;
    }
    break;
   }
   case 185: {
    $360=((($99)+($y_0))|0);
    $361=$360>>>8;
    $362=((($361)+($94))|0);
    $363=((__Z8get_le16PKv($87))|0);
    $364=((($363)+($y_0))|0);
    $365=((($pc_1)+(3))|0);
    $366=$364&2047;
    $367=$364>>>11;
    $368=(($s+($367<<2))|0);
    $369=((HEAP32[(($368)>>2)])|0);
    $370=(($369+$366)|0);
    $371=((HEAP8[($370)])|0);
    $372=($371&255);
    $373=$364^32768;
    $374=($373>>>0)<((40960)>>>0);
    if ($374) {
     $s_time_0=$362;$pc_1=$365;$a_0=$372;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$372;
     continue L1030;
    } else {
     $s_time_4=$362;$pc_5=$365;$addr13_0=$364;
     label = 970;
    }
    break;
   }
   case 189: {
    $376=((($99)+($x_0))|0);
    $377=$376>>>8;
    $378=((($377)+($94))|0);
    $379=((__Z8get_le16PKv($87))|0);
    $380=((($379)+($x_0))|0);
    $381=((($pc_1)+(3))|0);
    $382=$380&2047;
    $383=$380>>>11;
    $384=(($s+($383<<2))|0);
    $385=((HEAP32[(($384)>>2)])|0);
    $386=(($385+$382)|0);
    $387=((HEAP8[($386)])|0);
    $388=($387&255);
    $389=$380^32768;
    $390=($389>>>0)<((40960)>>>0);
    if ($390) {
     $s_time_0=$378;$pc_1=$381;$a_0=$388;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$388;
     continue L1030;
    } else {
     $s_time_4=$378;$pc_5=$381;$addr13_0=$380;
     label = 970;
    }
    break;
   }
   case 80: {
    $395=(($98<<24)>>24);
    $396=((($pc_1)+(2))|0);
    $397=$status_0&64;
    $398=($397|0)==0;
    if (!($398)) {
     $pc_0=$396;
     label = 923;
     break L1035;
    }
    $400=$396&255;
    $401=((($395)+($400))|0);
    $402=((($395)+($396))|0);
    $403=$402&65535;
    $404=$401>>>8;
    $405=$404&1;
    $406=((($405)+($94))|0);
    $s_time_0=$406;$pc_1=$403;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 112: {
    $408=(($98<<24)>>24);
    $409=((($pc_1)+(2))|0);
    $410=$status_0&64;
    $411=($410|0)==0;
    if ($411) {
     $pc_0=$409;
     label = 923;
     break L1035;
    }
    $413=$409&255;
    $414=((($408)+($413))|0);
    $415=((($408)+($409))|0);
    $416=$415&65535;
    $417=$414>>>8;
    $418=$417&1;
    $419=((($418)+($94))|0);
    $s_time_0=$419;$pc_1=$416;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 176: {
    $421=(($98<<24)>>24);
    $422=((($pc_1)+(2))|0);
    $423=$c_0&256;
    $424=($423|0)==0;
    if ($424) {
     $pc_0=$422;
     label = 923;
     break L1035;
    }
    $426=$422&255;
    $427=((($421)+($426))|0);
    $428=((($421)+($422))|0);
    $429=$428&65535;
    $430=$427>>>8;
    $431=$430&1;
    $432=((($431)+($94))|0);
    $s_time_0=$432;$pc_1=$429;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 144: {
    $434=(($98<<24)>>24);
    $435=((($pc_1)+(2))|0);
    $436=$c_0&256;
    $437=($436|0)==0;
    if (!($437)) {
     $pc_0=$435;
     label = 923;
     break L1035;
    }
    $439=$435&255;
    $440=((($434)+($439))|0);
    $441=((($434)+($435))|0);
    $442=$441&65535;
    $443=$440>>>8;
    $444=$443&1;
    $445=((($444)+($94))|0);
    $s_time_0=$445;$pc_1=$442;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 148: {
    $447=((($99)+($x_0))|0);
    $448=$447&255;
    $data_6=$448;
    label = 980;
    break;
   }
   case 132: {
    $data_6=$99;
    label = 980;
    break;
   }
   case 150: {
    $454=((($99)+($y_0))|0);
    $455=$454&255;
    $data_7=$455;
    label = 982;
    break;
   }
   case 134: {
    $data_7=$99;
    label = 982;
    break;
   }
   case 182: {
    $461=((($99)+($y_0))|0);
    $462=$461&255;
    $data_8=$462;
    label = 984;
    break;
   }
   case 166: {
    $data_8=$99;
    label = 984;
    break;
   }
   case 162: {
    $data_9=$99;
    label = 985;
    break;
   }
   case 180: {
    $470=((($99)+($x_0))|0);
    $471=$470&255;
    $data_10=$471;
    label = 987;
    break;
   }
   case 164: {
    $data_10=$99;
    label = 987;
    break;
   }
   case 160: {
    $data_11=$99;
    label = 988;
    break;
   }
   case 188: {
    $479=((($99)+($x_0))|0);
    $480=$479>>>8;
    $481=((($480)+($94))|0);
    $s_time_5=$481;$data_12=$479;
    label = 990;
    break;
   }
   case 172: {
    $s_time_5=$94;$data_12=$99;
    label = 990;
    break;
   }
   case 190: {
    $492=((($99)+($y_0))|0);
    $493=$492>>>8;
    $494=((($493)+($94))|0);
    $s_time_6=$494;$data_13=$492;
    label = 992;
    break;
   }
   case 174: {
    $s_time_6=$94;$data_13=$99;
    label = 992;
    break;
   }
   case 142: {
    $temp25_0=$x_0;
    label = 994;
    break;
   }
   case 140: {
    $temp25_0=$y_0;
    label = 994;
    break;
   }
   case 236: {
    $515=((__Z8get_le16PKv($87))|0);
    $516=((($pc_1)+(2))|0);
    HEAP32[(($5)>>2)]=$94;
    $517=((__ZN7Nsf_Emu8cpu_readEj($48,$515))|0);
    $518=((HEAP32[(($5)>>2)])|0);
    $s_time_7=$518;$pc_6=$516;$data_14=$517;
    label = 999;
    break;
   }
   case 228: {
    $520=(($this+$99)|0);
    $521=((HEAP8[($520)])|0);
    $522=($521&255);
    $s_time_7=$94;$pc_6=$90;$data_14=$522;
    label = 999;
    break;
   }
   case 224: {
    $s_time_7=$94;$pc_6=$90;$data_14=$99;
    label = 999;
    break;
   }
   case 204: {
    $529=((__Z8get_le16PKv($87))|0);
    $530=((($pc_1)+(2))|0);
    HEAP32[(($5)>>2)]=$94;
    $531=((__ZN7Nsf_Emu8cpu_readEj($50,$529))|0);
    $532=((HEAP32[(($5)>>2)])|0);
    $s_time_8=$532;$pc_7=$530;$data_15=$531;
    label = 1002;
    break;
   }
   case 196: {
    $534=(($this+$99)|0);
    $535=((HEAP8[($534)])|0);
    $536=($535&255);
    $s_time_8=$94;$pc_7=$90;$data_15=$536;
    label = 1002;
    break;
   }
   case 192: {
    $s_time_8=$94;$pc_7=$90;$data_15=$99;
    label = 1002;
    break;
   }
   case 33: {
    $543=((($99)+($x_0))|0);
    $544=((($543)+(1))|0);
    $545=$544&255;
    $546=(($this+$545)|0);
    $547=((HEAP8[($546)])|0);
    $548=($547&255);
    $549=$548<<8;
    $550=$543&255;
    $551=(($this+$550)|0);
    $552=((HEAP8[($551)])|0);
    $553=($552&255);
    $554=$549|$553;
    $s_time_10=$94;$pc_8=$90;$data_19=$554;
    label = 1010;
    break;
   }
   case 49: {
    $556=(($this+$99)|0);
    $557=((HEAP8[($556)])|0);
    $558=($557&255);
    $559=((($558)+($y_0))|0);
    $560=((($98)+(1))&255);
    $561=($560&255);
    $562=(($this+$561)|0);
    $563=((HEAP8[($562)])|0);
    $564=($563&255);
    $565=$564<<8;
    $566=((($565)+($559))|0);
    $567=$559>>>8;
    $568=((($567)+($94))|0);
    $s_time_10=$568;$pc_8=$90;$data_19=$566;
    label = 1010;
    break;
   }
   case 53: {
    $570=((($99)+($x_0))|0);
    $571=$570&255;
    $data_16=$571;
    label = 1006;
    break;
   }
   case 37: {
    $data_16=$99;
    label = 1006;
    break;
   }
   case 61: {
    $x_0_pn617=$x_0;
    label = 1008;
    break;
   }
   case 57: {
    $x_0_pn617=$y_0;
    label = 1008;
    break;
   }
   case 45: {
    $s_time_9=$94;$data_18=$99;
    label = 1009;
    break;
   }
   case 41: {
    $s_time_11=$94;$pc_9=$90;$data_20=$99;
    label = 1011;
    break;
   }
   case 65: {
    $594=((($99)+($x_0))|0);
    $595=((($594)+(1))|0);
    $596=$595&255;
    $597=(($this+$596)|0);
    $598=((HEAP8[($597)])|0);
    $599=($598&255);
    $600=$599<<8;
    $601=$594&255;
    $602=(($this+$601)|0);
    $603=((HEAP8[($602)])|0);
    $604=($603&255);
    $605=$600|$604;
    $s_time_13=$94;$pc_10=$90;$data_24=$605;
    label = 1019;
    break;
   }
   case 81: {
    $607=(($this+$99)|0);
    $608=((HEAP8[($607)])|0);
    $609=($608&255);
    $610=((($609)+($y_0))|0);
    $611=((($98)+(1))&255);
    $612=($611&255);
    $613=(($this+$612)|0);
    $614=((HEAP8[($613)])|0);
    $615=($614&255);
    $616=$615<<8;
    $617=((($616)+($610))|0);
    $618=$610>>>8;
    $619=((($618)+($94))|0);
    $s_time_13=$619;$pc_10=$90;$data_24=$617;
    label = 1019;
    break;
   }
   case 85: {
    $621=((($99)+($x_0))|0);
    $622=$621&255;
    $data_21=$622;
    label = 1015;
    break;
   }
   case 69: {
    $data_21=$99;
    label = 1015;
    break;
   }
   case 93: {
    $x_0_pn615=$x_0;
    label = 1017;
    break;
   }
   case 89: {
    $x_0_pn615=$y_0;
    label = 1017;
    break;
   }
   case 77: {
    $s_time_12=$94;$data_23=$99;
    label = 1018;
    break;
   }
   case 73: {
    $s_time_14=$94;$pc_11=$90;$data_25=$99;
    label = 1020;
    break;
   }
   case 1: {
    $645=((($99)+($x_0))|0);
    $646=((($645)+(1))|0);
    $647=$646&255;
    $648=(($this+$647)|0);
    $649=((HEAP8[($648)])|0);
    $650=($649&255);
    $651=$650<<8;
    $652=$645&255;
    $653=(($this+$652)|0);
    $654=((HEAP8[($653)])|0);
    $655=($654&255);
    $656=$651|$655;
    $s_time_16=$94;$pc_12=$90;$data_29=$656;
    label = 1028;
    break;
   }
   case 17: {
    $658=(($this+$99)|0);
    $659=((HEAP8[($658)])|0);
    $660=($659&255);
    $661=((($660)+($y_0))|0);
    $662=((($98)+(1))&255);
    $663=($662&255);
    $664=(($this+$663)|0);
    $665=((HEAP8[($664)])|0);
    $666=($665&255);
    $667=$666<<8;
    $668=((($667)+($661))|0);
    $669=$661>>>8;
    $670=((($669)+($94))|0);
    $s_time_16=$670;$pc_12=$90;$data_29=$668;
    label = 1028;
    break;
   }
   case 21: {
    $672=((($99)+($x_0))|0);
    $673=$672&255;
    $data_26=$673;
    label = 1024;
    break;
   }
   case 5: {
    $data_26=$99;
    label = 1024;
    break;
   }
   case 29: {
    $x_0_pn613=$x_0;
    label = 1026;
    break;
   }
   case 25: {
    $x_0_pn613=$y_0;
    label = 1026;
    break;
   }
   case 13: {
    $s_time_15=$94;$data_28=$99;
    label = 1027;
    break;
   }
   case 9: {
    $s_time_17=$94;$pc_13=$90;$data_30=$99;
    label = 1029;
    break;
   }
   case 44: {
    $696=((__Z8get_le16PKv($87))|0);
    $697=((($pc_1)+(3))|0);
    $698=$status_0&-65;
    HEAP32[(($5)>>2)]=$94;
    $699=((__ZN7Nsf_Emu8cpu_readEj($58,$696))|0);
    $700=((HEAP32[(($5)>>2)])|0);
    $701=$699&64;
    $702=$701|$698;
    $703=$699&$a_0;
    $704=($703|0)==0;
    $705=$699<<8;
    $_=($704?$705:$699);
    $s_time_0=$700;$pc_1=$697;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$702;$c_0=$c_0;$nz_0=$_;
    continue L1030;
    break;
   }
   case 36: {
    $707=(($this+$99)|0);
    $708=((HEAP8[($707)])|0);
    $709=($708&255);
    $710=((($pc_1)+(2))|0);
    $711=$status_0&-65;
    $712=$709&64;
    $713=$712|$711;
    $714=$709&$a_0;
    $715=($714|0)==0;
    if (!($715)) {
     $s_time_0=$94;$pc_1=$710;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$713;$c_0=$c_0;$nz_0=$709;
     continue L1030;
    }
    $717=$709<<8;
    $s_time_0=$94;$pc_1=$710;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$713;$c_0=$c_0;$nz_0=$717;
    continue L1030;
    break;
   }
   case 225: {
    $719=((($99)+($x_0))|0);
    $720=((($719)+(1))|0);
    $721=$720&255;
    $722=(($this+$721)|0);
    $723=((HEAP8[($722)])|0);
    $724=($723&255);
    $725=$724<<8;
    $726=$719&255;
    $727=(($this+$726)|0);
    $728=((HEAP8[($727)])|0);
    $729=($728&255);
    $730=$725|$729;
    $s_time_19=$94;$pc_14=$90;$data_34=$730;
    label = 1040;
    break;
   }
   case 241: {
    $732=(($this+$99)|0);
    $733=((HEAP8[($732)])|0);
    $734=($733&255);
    $735=((($734)+($y_0))|0);
    $736=((($98)+(1))&255);
    $737=($736&255);
    $738=(($this+$737)|0);
    $739=((HEAP8[($738)])|0);
    $740=($739&255);
    $741=$740<<8;
    $742=((($741)+($735))|0);
    $743=$735>>>8;
    $744=((($743)+($94))|0);
    $s_time_19=$744;$pc_14=$90;$data_34=$742;
    label = 1040;
    break;
   }
   case 245: {
    $746=((($99)+($x_0))|0);
    $747=$746&255;
    $data_31=$747;
    label = 1036;
    break;
   }
   case 229: {
    $data_31=$99;
    label = 1036;
    break;
   }
   case 253: {
    $x_0_pn611=$x_0;
    label = 1038;
    break;
   }
   case 249: {
    $x_0_pn611=$y_0;
    label = 1038;
    break;
   }
   case 237: {
    $s_time_18=$94;$data_33=$99;
    label = 1039;
    break;
   }
   case 233:case 235: {
    $s_time_20=$94;$pc_15=$90;$data_35=$99;
    label = 1041;
    break;
   }
   case 97: {
    $769=((($99)+($x_0))|0);
    $770=((($769)+(1))|0);
    $771=$770&255;
    $772=(($this+$771)|0);
    $773=((HEAP8[($772)])|0);
    $774=($773&255);
    $775=$774<<8;
    $776=$769&255;
    $777=(($this+$776)|0);
    $778=((HEAP8[($777)])|0);
    $779=($778&255);
    $780=$775|$779;
    $s_time_22=$94;$pc_16=$90;$data_39=$780;
    label = 1049;
    break;
   }
   case 113: {
    $782=(($this+$99)|0);
    $783=((HEAP8[($782)])|0);
    $784=($783&255);
    $785=((($784)+($y_0))|0);
    $786=((($98)+(1))&255);
    $787=($786&255);
    $788=(($this+$787)|0);
    $789=((HEAP8[($788)])|0);
    $790=($789&255);
    $791=$790<<8;
    $792=((($791)+($785))|0);
    $793=$785>>>8;
    $794=((($793)+($94))|0);
    $s_time_22=$794;$pc_16=$90;$data_39=$792;
    label = 1049;
    break;
   }
   case 117: {
    $796=((($99)+($x_0))|0);
    $797=$796&255;
    $data_36=$797;
    label = 1045;
    break;
   }
   case 101: {
    $data_36=$99;
    label = 1045;
    break;
   }
   case 125: {
    $x_0_pn=$x_0;
    label = 1047;
    break;
   }
   case 121: {
    $x_0_pn=$y_0;
    label = 1047;
    break;
   }
   case 109: {
    $s_time_21=$94;$data_38=$99;
    label = 1048;
    break;
   }
   case 105: {
    $s_time_23=$94;$pc_17=$90;$data_40=$99;
    break;
   }
   case 74: {
    $c_1=0;
    label = 1052;
    break;
   }
   case 106: {
    $c_1=$c_0;
    label = 1052;
    break;
   }
   case 10: {
    $839=$a_0<<1;
    $840=$839&254;
    $s_time_0=$94;$pc_1=$90;$a_0=$840;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$839;$nz_0=$839;
    continue L1030;
    break;
   }
   case 42: {
    $842=$a_0<<1;
    $843=$c_0>>>8;
    $844=$843&1;
    $845=$842|$844;
    $846=$845&255;
    $s_time_0=$94;$pc_1=$90;$a_0=$846;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$842;$nz_0=$845;
    continue L1030;
    break;
   }
   case 94: {
    $848=((($99)+($x_0))|0);
    $data_41=$848;
    label = 1056;
    break;
   }
   case 78: {
    $data_41=$99;
    label = 1056;
    break;
   }
   case 110: {
    $c_2=$c_0;$data_42=$99;
    label = 1057;
    break;
   }
   case 62: {
    $863=((($99)+($x_0))|0);
    $c_3=$c_0;$data_44=$863;
    label = 1061;
    break;
   }
   case 30: {
    $865=((($99)+($x_0))|0);
    $data_43=$865;
    label = 1060;
    break;
   }
   case 14: {
    $data_43=$99;
    label = 1060;
    break;
   }
   case 46: {
    $c_3=$c_0;$data_44=$99;
    label = 1061;
    break;
   }
   case 126: {
    $883=((($99)+($x_0))|0);
    $c_2=$c_0;$data_42=$883;
    label = 1057;
    break;
   }
   case 118: {
    $885=((($99)+($x_0))|0);
    $886=$885&255;
    $c_5=$c_0;$data_47=$886;
    label = 1067;
    break;
   }
   case 86: {
    $888=((($99)+($x_0))|0);
    $889=$888&255;
    $data_46=$889;
    label = 1066;
    break;
   }
   case 70: {
    $data_46=$99;
    label = 1066;
    break;
   }
   case 102: {
    $c_5=$c_0;$data_47=$99;
    label = 1067;
    break;
   }
   case 54: {
    $901=((($99)+($x_0))|0);
    $902=$901&255;
    $c_6=$c_0;$data_49=$902;
    label = 1071;
    break;
   }
   case 22: {
    $904=((($99)+($x_0))|0);
    $905=$904&255;
    $data_48=$905;
    label = 1070;
    break;
   }
   case 6: {
    $data_48=$99;
    label = 1070;
    break;
   }
   case 38: {
    $c_6=$c_0;$data_49=$99;
    label = 1071;
    break;
   }
   case 202: {
    $916=((($x_0)-(1))|0);
    $917=$916&255;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$917;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$916;
    continue L1030;
    break;
   }
   case 136: {
    $919=((($y_0)-(1))|0);
    $920=$919&255;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$920;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$919;
    continue L1030;
    break;
   }
   case 246: {
    $922=((($99)+($x_0))|0);
    $923=$922&255;
    $nz_2=1;$data_52=$923;
    label = 1077;
    break;
   }
   case 214: {
    $925=((($99)+($x_0))|0);
    $926=$925&255;
    $data_51=$926;
    label = 1076;
    break;
   }
   case 198: {
    $data_51=$99;
    label = 1076;
    break;
   }
   case 230: {
    $nz_2=1;$data_52=$99;
    label = 1077;
    break;
   }
   case 254: {
    $938=((__Z8get_le16PKv($87))|0);
    $939=((($938)+($x_0))|0);
    $nz_4=1;$data_56=$939;
    label = 1083;
    break;
   }
   case 238: {
    $941=((__Z8get_le16PKv($87))|0);
    $nz_4=1;$data_56=$941;
    label = 1083;
    break;
   }
   case 222: {
    $943=((__Z8get_le16PKv($87))|0);
    $944=((($943)+($x_0))|0);
    $nz_4=-1;$data_56=$944;
    label = 1083;
    break;
   }
   case 206: {
    $946=((__Z8get_le16PKv($87))|0);
    $nz_4=-1;$data_56=$946;
    label = 1083;
    break;
   }
   case 170: {
    $s_time_0=$94;$pc_1=$90;$x_0=$a_0;$nz_0=$a_0;$a_0=$a_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L1030;
    break;
   }
   case 138: {
    $s_time_0=$94;$pc_1=$90;$a_0=$x_0;$nz_0=$x_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L1030;
    break;
   }
   case 154: {
    $956=((($x_0)+(1))|0);
    $957=$956|256;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$957;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 186: {
    $959=((($sp_0)+(255))|0);
    $960=$959&255;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$960;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$960;
    continue L1030;
    break;
   }
   case 72: {
    $962=((($sp_0)-(1))|0);
    $963=$962|256;
    $964=(($a_0)&255);
    $965=(($this+$963)|0);
    HEAP8[($965)]=$964;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$963;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 104: {
    $967=(($this+$sp_0)|0);
    $968=((HEAP8[($967)])|0);
    $969=($968&255);
    $970=((($sp_0)-(255))|0);
    $971=$970|256;
    $s_time_0=$94;$pc_1=$90;$a_0=$969;$x_0=$x_0;$y_0=$y_0;$sp_0=$971;$status_0=$status_0;$c_0=$c_0;$nz_0=$969;
    continue L1030;
    break;
   }
   case 64: {
    $973=(($this+$sp_0)|0);
    $974=((HEAP8[($973)])|0);
    $975=($974&255);
    $976=((($sp_0)-(255))|0);
    $977=$976|256;
    $978=(($this+$977)|0);
    $979=((HEAP8[($978)])|0);
    $980=($979&255);
    $981=((($sp_0)-(254))|0);
    $982=$981|256;
    $983=(($this+$982)|0);
    $984=((HEAP8[($983)])|0);
    $985=($984&255);
    $986=$985<<8;
    $987=$986|$980;
    $988=((($sp_0)-(253))|0);
    $989=$988|256;
    $990=$975&76;
    $991=$975<<8;
    $992=$975&2;
    $993=$992|$991;
    $994=$993^2;
    $995=$975^$status_0;
    $996=$995&4;
    $997=($996|0)==0;
    if ($997) {
     $s_time_0=$94;$pc_1=$987;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$989;$status_0=$990;$c_0=$991;$nz_0=$994;
     continue L1030;
    }
    $999=(($990)&255);
    HEAP8[($24)]=$999;
    $1000=((HEAP32[(($71)>>2)])|0);
    $1001=((HEAP32[(($72)>>2)])|0);
    $1002=((($1000)-($1001))|0);
    $1003=($1002|0)<1;
    if ($1003) {
     $s_time_0=$94;$pc_1=$987;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$989;$status_0=$990;$c_0=$991;$nz_0=$994;
     continue L1030;
    }
    $1005=$975&4;
    $1006=($1005|0)==0;
    if (!($1006)) {
     $s_time_0=$94;$pc_1=$987;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$989;$status_0=$990;$c_0=$991;$nz_0=$994;
     continue L1030;
    }
    $1008=((($1002)+($94))|0);
    HEAP32[(($71)>>2)]=$1001;
    $s_time_0=$1008;$pc_1=$987;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$989;$status_0=$990;$c_0=$991;$nz_0=$994;
    continue L1030;
    break;
   }
   case 40: {
    $1010=(($this+$sp_0)|0);
    $1011=((HEAP8[($1010)])|0);
    $1012=($1011&255);
    $1013=((($sp_0)-(255))|0);
    $1014=$1013|256;
    $1015=$1012^$status_0;
    $1016=$1012&76;
    $1017=$1012<<8;
    $1018=$1012&2;
    $1019=$1018|$1017;
    $1020=$1019^2;
    $1021=$1015&4;
    $1022=($1021|0)==0;
    if ($1022) {
     $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1014;$status_0=$1016;$c_0=$1017;$nz_0=$1020;
     continue L1030;
    }
    $1024=$1012&4;
    $1025=($1024|0)==0;
    if ($1025) {
     $sp_1=$1014;$status_1=$1016;$c_8=$1017;$nz_5=$1020;
     label = 1105;
    } else {
     $sp_2=$1014;$status_2=$1016;$c_9=$1017;$nz_6=$1020;
     label = 1111;
    }
    break;
   }
   case 8: {
    $1027=$status_0&76;
    $1028=$nz_0>>>8;
    $1029=$1028|$nz_0;
    $1030=$1029&128;
    $1031=$1027|$1030;
    $1032=$c_0>>>8;
    $1033=$1032&1;
    $1034=$1031|$1033;
    $1035=$nz_0&255;
    $1036=($1035|0)==0;
    $1037=$1034|2;
    $temp45_0=($1036?$1037:$1034);
    $1038=((($sp_0)-(1))|0);
    $1039=$1038|256;
    $1040=$temp45_0|48;
    $1041=(($1040)&255);
    $1042=(($this+$1039)|0);
    HEAP8[($1042)]=$1041;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1039;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 108: {
    $1044=((__Z8get_le16PKv($87))|0);
    $1045=$1044>>>11;
    $1046=(($s+($1045<<2))|0);
    $1047=((HEAP32[(($1046)>>2)])|0);
    $1048=$1044&2047;
    $1049=(($1047+$1048)|0);
    $1050=((HEAP8[($1049)])|0);
    $1051=($1050&255);
    $1052=$1044&1792;
    $1053=((($1044)+(1))|0);
    $1054=$1053&255;
    $1055=$1054|$1052;
    $1056=(($1047+$1055)|0);
    $1057=((HEAP8[($1056)])|0);
    $1058=($1057&255);
    $1059=$1058<<8;
    $1060=$1059|$1051;
    $s_time_0=$94;$pc_1=$1060;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 56: {
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=-1;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 24: {
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 184: {
    $1064=$status_0&-65;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1064;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 216: {
    $1066=$status_0&-9;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1066;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 248: {
    $1068=$status_0|8;
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1068;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 88: {
    $1070=$status_0&4;
    $1071=($1070|0)==0;
    if ($1071) {
     $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L1030;
    }
    $1073=$status_0&-5;
    $sp_1=$sp_0;$status_1=$1073;$c_8=$c_0;$nz_5=$nz_0;
    label = 1105;
    break;
   }
   case 120: {
    $1089=$status_0&4;
    $1090=($1089|0)==0;
    if (!($1090)) {
     $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L1030;
    }
    $1092=$status_0|4;
    $sp_2=$sp_0;$status_2=$1092;$c_9=$c_0;$nz_6=$nz_0;
    label = 1111;
    break;
   }
   case 28:case 60:case 92:case 124:case 220:case 252: {
    $1100=((($99)+($x_0))|0);
    $1101=$1100>>>8;
    $1102=((($1101)+($94))|0);
    $s_time_24=$1102;
    label = 1113;
    break;
   }
   case 12: {
    $s_time_24=$94;
    label = 1113;
    break;
   }
   case 116:case 4:case 20:case 52:case 68:case 84:case 100:case 128:case 130:case 137:case 194:case 212:case 226:case 244: {
    $s_time_25=$94;$pc_19=$90;
    label = 1114;
    break;
   }
   case 242: {
    $1108=($pc_1>>>0)>((65535)>>>0);
    $extract_t596=(($pc_1)&65535);
    if (!($1108)) {
     $s_time_27=$94;$pc_21_off0=$extract_t596;
     break L1030;
    }
    $1110=$pc_1&65535;
    $s_time_0=$94;$pc_1=$1110;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 255: {
    $1112=$c_0|1;
    $c_10=$1112;
    label = 1118;
    break;
   }
   case 0: {
    $1139=((($pc_1)+(2))|0);
    $extract_t600=(($1139)&255);
    $extract=$1139>>>8;
    $extract_t602=(($extract)&255);
    $1140=((($94)+(7))|0);
    $1141=((($sp_0)-(1))|0);
    $1142=$1141|256;
    $1143=(($this+$1142)|0);
    HEAP8[($1143)]=$extract_t602;
    $1144=((($sp_0)-(2))|0);
    $1145=$1144|256;
    $1146=(($this+$1145)|0);
    HEAP8[($1146)]=$extract_t600;
    $1147=((HEAP32[(($77)>>2)])|0);
    $1148=(($1147+2046)|0);
    $1149=((__Z8get_le16PKv($1148))|0);
    $1150=((($sp_0)-(3))|0);
    $1151=$1150|256;
    $1152=$status_0&76;
    $1153=$nz_0>>>8;
    $1154=$1153|$nz_0;
    $1155=$1154&128;
    $1156=$1152|$1155;
    $1157=$c_0>>>8;
    $1158=$1157&1;
    $1159=$1156|$1158;
    $1160=$nz_0&255;
    $1161=($1160|0)==0;
    $1162=$1159|2;
    $temp49_0=($1161?$1162:$1159);
    $1163=$temp49_0|48;
    $extract_t605=(($1163)&255);
    $1164=(($this+$1151)|0);
    HEAP8[($1164)]=$extract_t605;
    $1165=$status_0|4;
    $1166=(($1165)&255);
    HEAP8[($24)]=$1166;
    $1167=((HEAP32[(($78)>>2)])|0);
    $1168=((HEAP32[(($79)>>2)])|0);
    $1169=((($1167)-($1168))|0);
    $1170=($1169|0)>-1;
    if ($1170) {
     $s_time_0=$1140;$pc_1=$1149;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1151;$status_0=$1165;$c_0=$c_0;$nz_0=$nz_0;
     continue L1030;
    }
    $1172=((($1169)+($1140))|0);
    HEAP32[(($78)>>2)]=$1168;
    $s_time_0=$1172;$pc_1=$1149;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1151;$status_0=$1165;$c_0=$c_0;$nz_0=$nz_0;
    continue L1030;
    break;
   }
   case 2:case 18:case 34:case 50:case 66:case 82:case 98:case 114:case 146:case 178:case 210: {
    $s_time_27=$94;$pc_21_off0=$extract_t;
    break L1030;
    break;
   }
   default: {
    $c_10=$c_0;
    label = 1118;
   }
   }
  } while(0);
  if ((label|0) == 923) {
   label = 0;
   $81=((($94)-(1))|0);
   $s_time_0=$81;$pc_1=$pc_0;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 939) {
   label = 0;
   $188=(($this+$data_0)|0);
   $189=((HEAP8[($188)])|0);
   $190=($189&255);
   $s_time_3=$94;$pc_3=$90;$data_4=$190;
   label = 944;
  }
  else if ((label|0) == 941) {
   label = 0;
   $data_1=((($x_0_pn621)+($99))|0);
   $193=$data_1>>>8;
   $194=((($193)+($94))|0);
   $s_time_1=$194;$data_2=$data_1;
   label = 942;
  }
  else if ((label|0) == 950) {
   label = 0;
   $240=((($pc_1)+(2))|0);
   $241=(($a_0)&255);
   $242=(($this+$data_5)|0);
   HEAP8[($242)]=$241;
   $s_time_0=$94;$pc_1=$240;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 962) {
   label = 0;
   HEAP32[(($5)>>2)]=$94;
   __ZN7Nsf_Emu9cpu_writeEji($38,$addr10_0,$a_0);
   $291=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$291;$pc_1=$pc_4;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 970) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_4;
   $392=((__ZN7Nsf_Emu8cpu_readEj($40,$addr13_0))|0);
   $393=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$393;$pc_1=$pc_5;$a_0=$392;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$392;
   continue;
  }
  else if ((label|0) == 980) {
   label = 0;
   $450=((($pc_1)+(2))|0);
   $451=(($y_0)&255);
   $452=(($this+$data_6)|0);
   HEAP8[($452)]=$451;
   $s_time_0=$94;$pc_1=$450;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 982) {
   label = 0;
   $457=((($pc_1)+(2))|0);
   $458=(($x_0)&255);
   $459=(($this+$data_7)|0);
   HEAP8[($459)]=$458;
   $s_time_0=$94;$pc_1=$457;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 984) {
   label = 0;
   $464=(($this+$data_8)|0);
   $465=((HEAP8[($464)])|0);
   $466=($465&255);
   $data_9=$466;
   label = 985;
  }
  else if ((label|0) == 987) {
   label = 0;
   $473=(($this+$data_10)|0);
   $474=((HEAP8[($473)])|0);
   $475=($474&255);
   $data_11=$475;
   label = 988;
  }
  else if ((label|0) == 990) {
   label = 0;
   $_sum619=((($85)+(2))|0);
   $483=(($84+$_sum619)|0);
   $484=((HEAP8[($483)])|0);
   $485=($484&255);
   $486=$485<<8;
   $487=((($486)+($data_12))|0);
   $488=((($pc_1)+(3))|0);
   HEAP32[(($5)>>2)]=$s_time_5;
   $489=((__ZN7Nsf_Emu8cpu_readEj($42,$487))|0);
   $490=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$490;$pc_1=$488;$a_0=$a_0;$x_0=$x_0;$y_0=$489;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$489;
   continue;
  }
  else if ((label|0) == 992) {
   label = 0;
   $_sum618=((($85)+(2))|0);
   $496=(($84+$_sum618)|0);
   $497=((HEAP8[($496)])|0);
   $498=($497&255);
   $499=$498<<8;
   $500=((($499)+($data_13))|0);
   $501=((($pc_1)+(3))|0);
   HEAP32[(($5)>>2)]=$s_time_6;
   $502=((__ZN7Nsf_Emu8cpu_readEj($44,$500))|0);
   $503=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$503;$pc_1=$501;$a_0=$a_0;$x_0=$502;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$502;
   continue;
  }
  else if ((label|0) == 994) {
   label = 0;
   $506=((__Z8get_le16PKv($87))|0);
   $507=((($pc_1)+(3))|0);
   $508=($506>>>0)<((2048)>>>0);
   if ($508) {
    $510=(($temp25_0)&255);
    $511=(($this+$506)|0);
    HEAP8[($511)]=$510;
    $s_time_0=$94;$pc_1=$507;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue;
   } else {
    HEAP32[(($5)>>2)]=$94;
    __ZN7Nsf_Emu9cpu_writeEji($46,$506,$temp25_0);
    $513=((HEAP32[(($5)>>2)])|0);
    $s_time_0=$513;$pc_1=$507;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue;
   }
  }
  else if ((label|0) == 999) {
   label = 0;
   $524=((($x_0)-($data_14))|0);
   $525=((($pc_6)+(1))|0);
   $526=$524^-1;
   $527=$524&255;
   $s_time_0=$s_time_7;$pc_1=$525;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$526;$nz_0=$527;
   continue;
  }
  else if ((label|0) == 1002) {
   label = 0;
   $538=((($y_0)-($data_15))|0);
   $539=((($pc_7)+(1))|0);
   $540=$538^-1;
   $541=$538&255;
   $s_time_0=$s_time_8;$pc_1=$539;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$540;$nz_0=$541;
   continue;
  }
  else if ((label|0) == 1006) {
   label = 0;
   $573=(($this+$data_16)|0);
   $574=((HEAP8[($573)])|0);
   $575=($574&255);
   $s_time_11=$94;$pc_9=$90;$data_20=$575;
   label = 1011;
  }
  else if ((label|0) == 1008) {
   label = 0;
   $data_17=((($x_0_pn617)+($99))|0);
   $578=$data_17>>>8;
   $579=((($578)+($94))|0);
   $s_time_9=$579;$data_18=$data_17;
   label = 1009;
  }
  else if ((label|0) == 1015) {
   label = 0;
   $624=(($this+$data_21)|0);
   $625=((HEAP8[($624)])|0);
   $626=($625&255);
   $s_time_14=$94;$pc_11=$90;$data_25=$626;
   label = 1020;
  }
  else if ((label|0) == 1017) {
   label = 0;
   $data_22=((($x_0_pn615)+($99))|0);
   $629=$data_22>>>8;
   $630=((($629)+($94))|0);
   $s_time_12=$630;$data_23=$data_22;
   label = 1018;
  }
  else if ((label|0) == 1024) {
   label = 0;
   $675=(($this+$data_26)|0);
   $676=((HEAP8[($675)])|0);
   $677=($676&255);
   $s_time_17=$94;$pc_13=$90;$data_30=$677;
   label = 1029;
  }
  else if ((label|0) == 1026) {
   label = 0;
   $data_27=((($x_0_pn613)+($99))|0);
   $680=$data_27>>>8;
   $681=((($680)+($94))|0);
   $s_time_15=$681;$data_28=$data_27;
   label = 1027;
  }
  else if ((label|0) == 1036) {
   label = 0;
   $749=(($this+$data_31)|0);
   $750=((HEAP8[($749)])|0);
   $751=($750&255);
   $s_time_20=$94;$pc_15=$90;$data_35=$751;
   label = 1041;
  }
  else if ((label|0) == 1038) {
   label = 0;
   $data_32=((($x_0_pn611)+($99))|0);
   $754=$data_32>>>8;
   $755=((($754)+($94))|0);
   $s_time_18=$755;$data_33=$data_32;
   label = 1039;
  }
  else if ((label|0) == 1045) {
   label = 0;
   $799=(($this+$data_36)|0);
   $800=((HEAP8[($799)])|0);
   $801=($800&255);
   $s_time_23=$94;$pc_17=$90;$data_40=$801;
  }
  else if ((label|0) == 1047) {
   label = 0;
   $data_37=((($x_0_pn)+($99))|0);
   $804=$data_37>>>8;
   $805=((($804)+($94))|0);
   $s_time_21=$805;$data_38=$data_37;
   label = 1048;
  }
  else if ((label|0) == 1052) {
   label = 0;
   $833=$c_1>>>1;
   $834=$833&128;
   $835=$a_0<<8;
   $836=$a_0>>>1;
   $837=$834|$836;
   $s_time_0=$94;$pc_1=$90;$a_0=$837;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$835;$nz_0=$837;
   continue;
  }
  else if ((label|0) == 1056) {
   label = 0;
   $c_2=0;$data_42=$data_41;
   label = 1057;
  }
  else if ((label|0) == 1060) {
   label = 0;
   $c_3=0;$data_44=$data_43;
   label = 1061;
  }
  else if ((label|0) == 1066) {
   label = 0;
   $c_5=0;$data_47=$data_46;
   label = 1067;
  }
  else if ((label|0) == 1070) {
   label = 0;
   $c_6=0;$data_49=$data_48;
   label = 1071;
  }
  else if ((label|0) == 1076) {
   label = 0;
   $nz_2=-1;$data_52=$data_51;
   label = 1077;
  }
  else if ((label|0) == 1083) {
   label = 0;
   HEAP32[(($5)>>2)]=$94;
   $948=((__ZN7Nsf_Emu8cpu_readEj($70,$data_56))|0);
   $949=((($948)+($nz_4))|0);
   $950=((($pc_1)+(3))|0);
   $951=$949&255;
   __ZN7Nsf_Emu9cpu_writeEji($70,$data_56,$951);
   $952=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$952;$pc_1=$950;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$949;
   continue;
  }
  else if ((label|0) == 1105) {
   label = 0;
   $1075=(($status_1)&255);
   HEAP8[($24)]=$1075;
   $1076=((HEAP32[(($73)>>2)])|0);
   $1077=((HEAP32[(($74)>>2)])|0);
   $1078=((($1076)-($1077))|0);
   $1079=($1078|0)<1;
   if ($1079) {
    $s_time_0=$94;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
    continue;
   }
   HEAP32[(($73)>>2)]=$1077;
   $1081=((($1078)+($94))|0);
   $1082=($1081|0)<0;
   if ($1082) {
    $s_time_0=$1081;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
    continue;
   }
   $1084=((($1081)+(1))|0);
   $1085=($1078|0)<($1084|0);
   if ($1085) {
    $s_time_0=$1081;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
    continue;
   }
   $1087=((($1084)+($1077))|0);
   HEAP32[(($73)>>2)]=$1087;
   $s_time_0=-1;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
   continue;
  }
  else if ((label|0) == 1111) {
   label = 0;
   $1094=(($status_2)&255);
   HEAP8[($24)]=$1094;
   $1095=((HEAP32[(($75)>>2)])|0);
   $1096=((HEAP32[(($76)>>2)])|0);
   HEAP32[(($75)>>2)]=$1096;
   $1097=((($1095)+($94))|0);
   $1098=((($1097)-($1096))|0);
   $s_time_0=$1098;$pc_1=$90;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_2;$status_0=$status_2;$c_0=$c_9;$nz_0=$nz_6;
   continue;
  }
  else if ((label|0) == 1113) {
   label = 0;
   $1104=((($pc_1)+(2))|0);
   $s_time_25=$s_time_24;$pc_19=$1104;
   label = 1114;
  }
  else if ((label|0) == 1118) {
   label = 0;
   $1114=((HEAP8[($86)])|0);
   $1115=($1114&255);
   $1116=$1115>>>2;
   $1117=$1116&7;
   $1118=((10856+$1117)|0);
   $1119=((HEAP8[($1118)])|0);
   $1120=($1119&255);
   $1121=$1115<<1;
   $1122=$1121&6;
   $1123=$1120>>>($1122>>>0);
   $1124=$1123&3;
   $1125=(($1114<<24)>>24)==-100;
   $_622=($1125?2:$1124);
   $1126=((($_622)+($90))|0);
   $1127=((HEAP32[(($32)>>2)])|0);
   $1128=((($1127)+(1))|0);
   HEAP32[(($32)>>2)]=$1128;
   $_mask=$1115&240;
   $1129=($_mask|0)==176;
   if (!($1129)) {
    $s_time_0=$94;$pc_1=$1126;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_10;$nz_0=$nz_0;
    continue;
   }
   if ((((($1114<<24)>>24))|0)==((-73)|0)) {
    $s_time_0=$94;$pc_1=$1126;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_10;$nz_0=$nz_0;
    continue;
   } else if ((((($1114<<24)>>24))|0)==((-77)|0)) {
    $1131=(($this+$99)|0);
    $1132=((HEAP8[($1131)])|0);
    $1133=($1132&255);
    $data_57623=$1133;
   } else {
    $data_57623=$99;
   }
   $1135=((($data_57623)+($y_0))|0);
   $1136=$1135>>>8;
   $1137=((($1136)+($94))|0);
   $s_time_0=$1137;$pc_1=$1126;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_10;$nz_0=$nz_0;
   continue;
  }
  if ((label|0) == 942) {
   label = 0;
   $196=((($pc_1)+(2))|0);
   $_sum620=((($85)+(2))|0);
   $197=(($84+$_sum620)|0);
   $198=((HEAP8[($197)])|0);
   $199=($198&255);
   $200=$199<<8;
   $201=((($200)+($data_2))|0);
   $s_time_2=$s_time_1;$pc_2=$196;$data_3=$201;
   label = 943;
  }
  else if ((label|0) == 985) {
   label = 0;
   $468=((($pc_1)+(2))|0);
   $s_time_0=$94;$pc_1=$468;$a_0=$a_0;$x_0=$data_9;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$data_9;
   continue;
  }
  else if ((label|0) == 988) {
   label = 0;
   $477=((($pc_1)+(2))|0);
   $s_time_0=$94;$pc_1=$477;$a_0=$a_0;$x_0=$x_0;$y_0=$data_11;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$data_11;
   continue;
  }
  else if ((label|0) == 1009) {
   label = 0;
   $581=((($pc_1)+(2))|0);
   $_sum616=((($85)+(2))|0);
   $582=(($84+$_sum616)|0);
   $583=((HEAP8[($582)])|0);
   $584=($583&255);
   $585=$584<<8;
   $586=((($585)+($data_18))|0);
   $s_time_10=$s_time_9;$pc_8=$581;$data_19=$586;
   label = 1010;
  }
  else if ((label|0) == 1018) {
   label = 0;
   $632=((($pc_1)+(2))|0);
   $_sum614=((($85)+(2))|0);
   $633=(($84+$_sum614)|0);
   $634=((HEAP8[($633)])|0);
   $635=($634&255);
   $636=$635<<8;
   $637=((($636)+($data_23))|0);
   $s_time_13=$s_time_12;$pc_10=$632;$data_24=$637;
   label = 1019;
  }
  else if ((label|0) == 1027) {
   label = 0;
   $683=((($pc_1)+(2))|0);
   $_sum612=((($85)+(2))|0);
   $684=(($84+$_sum612)|0);
   $685=((HEAP8[($684)])|0);
   $686=($685&255);
   $687=$686<<8;
   $688=((($687)+($data_28))|0);
   $s_time_16=$s_time_15;$pc_12=$683;$data_29=$688;
   label = 1028;
  }
  else if ((label|0) == 1039) {
   label = 0;
   $757=((($pc_1)+(2))|0);
   $_sum610=((($85)+(2))|0);
   $758=(($84+$_sum610)|0);
   $759=((HEAP8[($758)])|0);
   $760=($759&255);
   $761=$760<<8;
   $762=((($761)+($data_33))|0);
   $s_time_19=$s_time_18;$pc_14=$757;$data_34=$762;
   label = 1040;
  }
  else if ((label|0) == 1048) {
   label = 0;
   $807=((($pc_1)+(2))|0);
   $_sum609=((($85)+(2))|0);
   $808=(($84+$_sum609)|0);
   $809=((HEAP8[($808)])|0);
   $810=($809&255);
   $811=$810<<8;
   $812=((($811)+($data_38))|0);
   $s_time_22=$s_time_21;$pc_16=$807;$data_39=$812;
   label = 1049;
  }
  else if ((label|0) == 1057) {
   label = 0;
   $_sum607=((($85)+(2))|0);
   $851=(($84+$_sum607)|0);
   $852=((HEAP8[($851)])|0);
   $853=($852&255);
   $854=$853<<8;
   $855=((($854)+($data_42))|0);
   HEAP32[(($5)>>2)]=$94;
   $856=((__ZN7Nsf_Emu8cpu_readEj($64,$855))|0);
   $857=$c_2>>>1;
   $858=$857&128;
   $859=$856>>1;
   $860=$859|$858;
   $861=$856<<8;
   $c_4=$861;$nz_1=$860;$data_45=$855;
   label = 1062;
  }
  else if ((label|0) == 1061) {
   label = 0;
   $_sum608=((($85)+(2))|0);
   $868=(($84+$_sum608)|0);
   $869=((HEAP8[($868)])|0);
   $870=($869&255);
   $871=$870<<8;
   $872=((($871)+($data_44))|0);
   $873=$c_3>>>8;
   $874=$873&1;
   HEAP32[(($5)>>2)]=$94;
   $875=((__ZN7Nsf_Emu8cpu_readEj($68,$872))|0);
   $876=$875<<1;
   $877=$876|$874;
   $c_4=$876;$nz_1=$877;$data_45=$872;
   label = 1062;
  }
  else if ((label|0) == 1067) {
   label = 0;
   $892=(($this+$data_47)|0);
   $893=((HEAP8[($892)])|0);
   $894=($893&255);
   $895=$c_5>>>1;
   $896=$895&128;
   $897=$894>>>1;
   $898=$897|$896;
   $899=$894<<8;
   $c_7=$899;$nz_3=$898;$data_53=$data_47;
   label = 1078;
  }
  else if ((label|0) == 1071) {
   label = 0;
   $908=$c_6>>>8;
   $909=$908&1;
   $910=(($this+$data_49)|0);
   $911=((HEAP8[($910)])|0);
   $912=($911&255);
   $913=$912<<1;
   $914=$913|$909;
   $c_7=$913;$nz_3=$914;$data_53=$data_49;
   label = 1078;
  }
  else if ((label|0) == 1077) {
   label = 0;
   $929=(($this+$data_52)|0);
   $930=((HEAP8[($929)])|0);
   $931=($930&255);
   $932=((($931)+($nz_2))|0);
   $c_7=$c_0;$nz_3=$932;$data_53=$data_52;
   label = 1078;
  }
  else if ((label|0) == 1114) {
   label = 0;
   $1106=((($pc_19)+(1))|0);
   $s_time_0=$s_time_25;$pc_1=$1106;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  if ((label|0) == 943) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_2;
   $203=((__ZN7Nsf_Emu8cpu_readEj($34,$data_3))|0);
   $204=((HEAP32[(($5)>>2)])|0);
   $s_time_3=$204;$pc_3=$pc_2;$data_4=$203;
   label = 944;
  }
  else if ((label|0) == 1010) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_10;
   $588=((__ZN7Nsf_Emu8cpu_readEj($52,$data_19))|0);
   $589=((HEAP32[(($5)>>2)])|0);
   $s_time_11=$589;$pc_9=$pc_8;$data_20=$588;
   label = 1011;
  }
  else if ((label|0) == 1019) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_13;
   $639=((__ZN7Nsf_Emu8cpu_readEj($54,$data_24))|0);
   $640=((HEAP32[(($5)>>2)])|0);
   $s_time_14=$640;$pc_11=$pc_10;$data_25=$639;
   label = 1020;
  }
  else if ((label|0) == 1028) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_16;
   $690=((__ZN7Nsf_Emu8cpu_readEj($56,$data_29))|0);
   $691=((HEAP32[(($5)>>2)])|0);
   $s_time_17=$691;$pc_13=$pc_12;$data_30=$690;
   label = 1029;
  }
  else if ((label|0) == 1040) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_19;
   $764=((__ZN7Nsf_Emu8cpu_readEj($60,$data_34))|0);
   $765=((HEAP32[(($5)>>2)])|0);
   $s_time_20=$765;$pc_15=$pc_14;$data_35=$764;
   label = 1041;
  }
  else if ((label|0) == 1049) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_22;
   $814=((__ZN7Nsf_Emu8cpu_readEj($62,$data_39))|0);
   $815=((HEAP32[(($5)>>2)])|0);
   $s_time_23=$815;$pc_17=$pc_16;$data_40=$814;
  }
  else if ((label|0) == 1062) {
   label = 0;
   $879=((($pc_1)+(3))|0);
   $880=$nz_1&255;
   __ZN7Nsf_Emu9cpu_writeEji($66,$data_45,$880);
   $881=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$881;$pc_1=$879;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_4;$nz_0=$nz_1;
   continue;
  }
  else if ((label|0) == 1078) {
   label = 0;
   $934=((($pc_1)+(2))|0);
   $935=(($nz_3)&255);
   $936=(($this+$data_53)|0);
   HEAP8[($936)]=$935;
   $s_time_0=$94;$pc_1=$934;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_7;$nz_0=$nz_3;
   continue;
  }
  if ((label|0) == 944) {
   label = 0;
   $206=((($a_0)-($data_4))|0);
   $207=((($pc_3)+(1))|0);
   $208=$206^-1;
   $209=$206&255;
   $s_time_0=$s_time_3;$pc_1=$207;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$208;$nz_0=$209;
   continue;
  }
  else if ((label|0) == 1011) {
   label = 0;
   $591=$data_20&$a_0;
   $592=((($pc_9)+(1))|0);
   $s_time_0=$s_time_11;$pc_1=$592;$a_0=$591;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$591;
   continue;
  }
  else if ((label|0) == 1020) {
   label = 0;
   $642=$data_25^$a_0;
   $643=((($pc_11)+(1))|0);
   $s_time_0=$s_time_14;$pc_1=$643;$a_0=$642;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$642;
   continue;
  }
  else if ((label|0) == 1029) {
   label = 0;
   $693=$data_30|$a_0;
   $694=((($pc_13)+(1))|0);
   $s_time_0=$s_time_17;$pc_1=$694;$a_0=$693;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$693;
   continue;
  }
  else if ((label|0) == 1041) {
   label = 0;
   $767=$data_35^255;
   $s_time_23=$s_time_20;$pc_17=$pc_15;$data_40=$767;
  }
  $817=$c_0>>>8;
  $818=$817&1;
  $819=$a_0^128;
  $820=((($819)+($818))|0);
  $sext=$data_40<<24;
  $821=$sext>>24;
  $822=((($820)+($821))|0);
  $823=$status_0&-65;
  $824=$822>>>2;
  $825=$824&64;
  $826=$825|$823;
  $827=((($a_0)+($818))|0);
  $828=((($827)+($data_40))|0);
  $829=((($pc_17)+(1))|0);
  $830=$828&255;
  $s_time_0=$s_time_23;$pc_1=$829;$a_0=$830;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$826;$c_0=$828;$nz_0=$828;
 }
 HEAP32[(($5)>>2)]=$s_time_27;
 HEAP16[(($7)>>1)]=$pc_21_off0;
 $1174=((($sp_0)+(255))|0);
 $1175=(($1174)&255);
 HEAP8[($19)]=$1175;
 $1176=(($a_0)&255);
 HEAP8[($10)]=$1176;
 $1177=(($x_0)&255);
 HEAP8[($13)]=$1177;
 $1178=(($y_0)&255);
 HEAP8[($16)]=$1178;
 $1179=$status_0&76;
 $1180=$nz_0>>>8;
 $1181=$1180|$nz_0;
 $1182=$1181&128;
 $1183=$1179|$1182;
 $1184=$c_0>>>8;
 $1185=$1184&1;
 $1186=$1183|$1185;
 $1187=$nz_0&255;
 $1188=($1187|0)==0;
 $extract_t598=(($1186)&255);
 if (!($1188)) {
  $temp51_0_off0=$extract_t598;
  HEAP8[($24)]=$temp51_0_off0;
  (_memcpy((($3)|0), (($2)|0), 140)|0);
  HEAP32[(($4)>>2)]=$1;
  $1192=($s_time_27|0)<0;
  STACKTOP=sp;return (($1192)|0);
 }
 $1190=$1186|2;
 $extract_t599=(($1190)&255);
 $temp51_0_off0=$extract_t599;
 HEAP8[($24)]=$temp51_0_off0;
 (_memcpy((($3)|0), (($2)|0), 140)|0);
 HEAP32[(($4)>>2)]=$1;
 $1192=($s_time_27|0)<0;
 STACKTOP=sp;return (($1192)|0);
}
function __ZN7Nes_Cpu12set_end_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+2204)|0);
 HEAP32[(($1)>>2)]=$t;
 $2=(($this+2200)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((__ZN7Nes_Cpu15update_end_timeEii($this,$t,$3))|0);
 $5=(($this+2056)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+136)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)+($4))|0);
 HEAP32[(($7)>>2)]=$9;
 return;
}
function __ZN7Nes_Cpu15update_end_timeEii($this,$t,$irq){
 $this=($this)|0;
 $t=($t)|0;
 $irq=($irq)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$irq_t=0,$_0=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=($irq|0)<($t|0);
 if ($1) {
  $3=(($this+2053)|0);
  $4=((HEAP8[($3)])|0);
  $5=$4&4;
  $6=(($5<<24)>>24)==0;
  $irq_t=($6?$irq:$t);
  $_0=$irq_t;
 } else {
  $_0=$t;
 }
 $8=(($this+2056)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+132)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((($11)-($_0))|0);
 HEAP32[(($10)>>2)]=$_0;
 return (($12)|0);
}
function __ZN13Nes_Namco_Apu6accessEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,label=0;
 $1=(($this+100)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&127;
 $4=$2&128;
 $5=($4|0)==0;
 if (!($5)) {
  $7=((($3)+(1))|0);
  $8=$7|128;
  HEAP32[(($1)>>2)]=$8;
 }
 $10=(($this+104+$3)|0);
 return (($10)|0);
}
function __ZN12Nes_Fme7_Apu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+48)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+28)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+44)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this)|0);
 _memset((((($5)|0))|0), ((((0)|0))|0), ((((24)|0))|0));
 return;
}
function __ZN12Nes_Fme7_Apu9run_untilEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$index_049=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$_=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $43=0,$_47=0,$period_0=0,$volume_1=0,$45=0,$46=0,$47=0,$_volume_1=0,$48=0,$49=0,$50=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0;
 var $63=0,$64=0,$time_0=0,$delta1_0=0,$66=0,$67=0,$68=0,$70=0,$71=0,$delta1_0_lobit=0,$72=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0;
 var $83=0,$time_1=0,$85=0,$86=0,$88=0,$89=0,label=0;
 $1=(($this+48)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($end_time|0);
 if ($3) {
  ___assert_fail(((3064)|0),((6944)|0),((43)|0),((9456)|0));
 }
 $4=(($this+7)|0);
 $5=((($end_time)-(1))|0);
 $6=(($this+56)|0);
 $7=(($this+56)|0);
 $index_049=0;
 while(1) {
  $10=((($index_049)+(8))|0);
  $11=(($this+$10)|0);
  $12=((HEAP8[($11)])|0);
  $13=($12&255);
  $14=(($this+24+($index_049<<3))|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=($15|0)==0;
  if (!($16)) {
   $18=$13&15;
   $19=((17632+$18)|0);
   $20=((HEAP8[($19)])|0);
   $21=((HEAP8[($4)])|0);
   $22=($20&255);
   $23=($21&255);
   $24=$23>>>($index_049>>>0);
   __ZN11Blip_Buffer12set_modifiedEv($15);
   $25=$24&1;
   $26=$13&16;
   $27=$25|$26;
   $28=($27|0)==0;
   $_=($28?$22:0);
   $29=$index_049<<1;
   $30=$29|1;
   $31=(($this+$30)|0);
   $32=((HEAP8[($31)])|0);
   $33=($32&255);
   $34=$33<<12;
   $35=$34&61440;
   $36=(($this+$29)|0);
   $37=((HEAP8[($36)])|0);
   $38=($37&255);
   $39=$38<<4;
   $40=$35|$39;
   $41=($40>>>0)<((50)>>>0);
   if ($41) {
    $43=($40|0)==0;
    $_47=($43?16:$40);
    $volume_1=0;$period_0=$_47;
   } else {
    $volume_1=$_;$period_0=$40;
   }
   $45=(($this+14+$index_049)|0);
   $46=((HEAP8[($45)])|0);
   $47=(($46<<24)>>24)==0;
   $_volume_1=($47?0:$volume_1);
   $48=(($this+24+($index_049<<3)+4)|0);
   $49=((HEAP32[(($48)>>2)])|0);
   $50=($_volume_1|0)==($49|0);
   if (!($50)) {
    $52=((($_volume_1)-($49))|0);
    HEAP32[(($48)>>2)]=$_volume_1;
    $53=((HEAP32[(($1)>>2)])|0);
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($7,$53,$52,$15);
   }
   $55=((HEAP32[(($1)>>2)])|0);
   $56=(($this+18+($index_049<<1))|0);
   $57=((HEAP16[(($56)>>1)])|0);
   $58=($57&65535);
   $59=((($58)+($55))|0);
   $60=($59|0)<($end_time|0);
   do {
    if ($60) {
     $62=($volume_1|0)==0;
     if ($62) {
      $74=((($5)+($period_0))|0);
      $75=((($74)-($59))|0);
      $76=(((($75>>>0))/(($period_0>>>0)))&-1);
      $77=$76&1;
      $78=((HEAP8[($45)])|0);
      $79=($78&255);
      $80=$79^$77;
      $81=(($80)&255);
      HEAP8[($45)]=$81;
      $82=(Math_imul($76,$period_0)|0);
      $83=((($82)+($59))|0);
      $time_1=$83;
      break;
     }
     $63=$_volume_1<<1;
     $64=((($63)-($volume_1))|0);
     $delta1_0=$64;$time_0=$59;
     while(1) {
      $66=(((-$delta1_0))|0);
      __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($6,$time_0,$66,$15);
      $67=((($time_0)+($period_0))|0);
      $68=($67|0)<($end_time|0);
      if ($68) {
       $delta1_0=$66;$time_0=$67;
      } else {
       break;
      }
     }
     $70=((($volume_1)-($delta1_0))|0);
     $71=$70>>1;
     HEAP32[(($48)>>2)]=$71;
     $delta1_0_lobit=$delta1_0>>>31;
     $72=(($delta1_0_lobit)&255);
     HEAP8[($45)]=$72;
     $time_1=$67;
    } else {
     $time_1=$59;
    }
   } while(0);
   $85=((($time_1)-($end_time))|0);
   $86=(($85)&65535);
   HEAP16[(($56)>>1)]=$86;
  }
  $88=((($index_049)+(1))|0);
  $89=($88|0)<3;
  if ($89) {
   $index_049=$88;
  } else {
   break;
  }
 }
 HEAP32[(($1)>>2)]=$end_time;
 return;
}
function __ZN13Nes_Namco_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+232)|0);
 __ZN10Blip_SynthILi12ELi15EEC1Ev($1);
 __ZN13Nes_Namco_Apu6outputEP11Blip_Buffer($this,0);
 __ZN13Nes_Namco_Apu6volumeEd($this,1.0);
 __ZN13Nes_Namco_Apu5resetEv($this);
 return;
}
function __ZN10Blip_SynthILi12ELi15EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN10Blip_SynthILi12ELi15EEC2Ev($this);
 return;
}
function __ZN13Nes_Namco_Apu6outputEP11Blip_Buffer($this,$buf){
 $this=($this)|0;
 $buf=($buf)|0;
 var label=0;
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,3,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,4,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,5,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,6,$buf);
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,7,$buf);
 return;
}
function __ZN13Nes_Namco_Apu6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=.0,label=0;
 $1=(($this+232)|0);
 $2=($v)*((0.0125));
 __ZN10Blip_SynthILi12ELi15EE6volumeEd($1,$2);
 return;
}
function __ZN13Nes_Namco_Apu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$$etemp$0$0=0,$$etemp$0$1=0,$st$1$0=0,$st$2$1=0,$14=0,$$etemp$3$0=0,$$etemp$3$1=0;
 var $st$4$0=0,$st$5$1=0,$15=0,$$etemp$6$0=0,$$etemp$6$1=0,$st$7$0=0,$st$8$1=0,$16=0,$$etemp$9$0=0,$$etemp$9$1=0,$st$10$0=0,$st$11$1=0,$17=0,$$etemp$12$0=0,$$etemp$12$1=0,$st$13$0=0,$st$14$1=0,$18=0,$$etemp$15$0=0,$$etemp$15$1=0;
 var $st$16$0=0,$st$17$1=0,$19=0,$$etemp$18$0=0,$$etemp$18$1=0,$st$19$0=0,$st$20$1=0,label=0;
 $1=(($this+96)|0);
 $2=$1;
 _memset((((($2)|0))|0), ((((0)|0))|0), ((((136)|0))|0));
 $3=(($this)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+8)|0);
 $5=(($this+20)|0);
 $6=(($this+32)|0);
 $7=(($this+44)|0);
 $8=(($this+56)|0);
 $9=(($this+68)|0);
 $10=(($this+80)|0);
 $11=(($this+92)|0);
 HEAP16[(($11)>>1)]=0;
 $12=(($this+94)|0);
 HEAP16[(($12)>>1)]=0;
 $13=$4;
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($13)|0);
 tempBigInt=$$etemp$0$0;HEAP16[(($st$1$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$1$0)+(2))>>1)]=tempBigInt>>16;
 $st$2$1=(($13+4)|0);
 tempBigInt=$$etemp$0$1;HEAP16[(($st$2$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$2$1)+(2))>>1)]=tempBigInt>>16;
 $14=$5;
 $$etemp$3$0=0;
 $$etemp$3$1=0;
 $st$4$0=(($14)|0);
 tempBigInt=$$etemp$3$0;HEAP16[(($st$4$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$4$0)+(2))>>1)]=tempBigInt>>16;
 $st$5$1=(($14+4)|0);
 tempBigInt=$$etemp$3$1;HEAP16[(($st$5$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$5$1)+(2))>>1)]=tempBigInt>>16;
 $15=$6;
 $$etemp$6$0=0;
 $$etemp$6$1=0;
 $st$7$0=(($15)|0);
 tempBigInt=$$etemp$6$0;HEAP16[(($st$7$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$7$0)+(2))>>1)]=tempBigInt>>16;
 $st$8$1=(($15+4)|0);
 tempBigInt=$$etemp$6$1;HEAP16[(($st$8$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$8$1)+(2))>>1)]=tempBigInt>>16;
 $16=$7;
 $$etemp$9$0=0;
 $$etemp$9$1=0;
 $st$10$0=(($16)|0);
 tempBigInt=$$etemp$9$0;HEAP16[(($st$10$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$10$0)+(2))>>1)]=tempBigInt>>16;
 $st$11$1=(($16+4)|0);
 tempBigInt=$$etemp$9$1;HEAP16[(($st$11$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$11$1)+(2))>>1)]=tempBigInt>>16;
 $17=$8;
 $$etemp$12$0=0;
 $$etemp$12$1=0;
 $st$13$0=(($17)|0);
 tempBigInt=$$etemp$12$0;HEAP16[(($st$13$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$13$0)+(2))>>1)]=tempBigInt>>16;
 $st$14$1=(($17+4)|0);
 tempBigInt=$$etemp$12$1;HEAP16[(($st$14$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$14$1)+(2))>>1)]=tempBigInt>>16;
 $18=$9;
 $$etemp$15$0=0;
 $$etemp$15$1=0;
 $st$16$0=(($18)|0);
 tempBigInt=$$etemp$15$0;HEAP16[(($st$16$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$16$0)+(2))>>1)]=tempBigInt>>16;
 $st$17$1=(($18+4)|0);
 tempBigInt=$$etemp$15$1;HEAP16[(($st$17$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$17$1)+(2))>>1)]=tempBigInt>>16;
 $19=$10;
 $$etemp$18$0=0;
 $$etemp$18$1=0;
 $st$19$0=(($19)|0);
 tempBigInt=$$etemp$18$0;HEAP16[(($st$19$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$19$0)+(2))>>1)]=tempBigInt>>16;
 $st$20$1=(($19+4)|0);
 tempBigInt=$$etemp$18$1;HEAP16[(($st$20$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$20$1)+(2))>>1)]=tempBigInt>>16;
 return;
}
function __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf){
 $this=($this)|0;
 $i=($i)|0;
 $buf=($buf)|0;
 var $1=0,$4=0,label=0;
 $1=($i>>>0)<((8)>>>0);
 if ($1) {
  $4=(($this+((($i)*(12))&-1)+4)|0);
  HEAP32[(($4)>>2)]=$buf;
  return;
 } else {
  ___assert_fail(((2872)|0),((2312)|0),((92)|0),((9360)|0));
 }
}
function __ZN13Nes_Namco_Apu9end_frameEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$10=0,label=0;
 $1=(($this+96)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($time|0);
 if ($3) {
  __ZN13Nes_Namco_Apu9run_untilEi($this,$time);
 }
 $6=((HEAP32[(($1)>>2)])|0);
 $7=($6|0)<($time|0);
 if ($7) {
  ___assert_fail(((3024)|0),((6864)|0),((72)|0),((9328)|0));
 } else {
  $10=((($6)-($time))|0);
  HEAP32[(($1)>>2)]=$10;
  return;
 }
}
function __ZN13Nes_Namco_Apu9run_untilEi($this,$nes_end_time){
 $this=($this)|0;
 $nes_end_time=($nes_end_time)|0;
 var $0=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_046=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$_sum=0,$26=0,$27=0,$28=0,$29=0,$30=0,$_sum43=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$_sum44=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$_sum45=0;
 var $61=0,$last_amp_0=0,$wave_pos_0=0,$time_0=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$last_amp_1=0;
 var $80=0,$81=0,$_=0,$82=0,$84=0,$85=0,$time_1=0,$87=0,$89=0,$90=0,$91=0,label=0;
 $0=(($this+231)|0);
 $1=((HEAP8[($0)])|0);
 $2=($1&255);
 $3=$2>>>4;
 $4=$3&7;
 $5=((($4)+(1))|0);
 $6=$4^7;
 $7=(($this+96)|0);
 $8=$5<<6;
 $9=(($this+232)|0);
 $i_046=$6;
 while(1) {
  $11=(($this+((($i_046)*(12))&-1)+4)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==0;
  do {
   if (!($13)) {
    __ZN11Blip_Buffer12set_modifiedEv($12);
    $15=((HEAP32[(($7)>>2)])|0);
    $16=((__ZNK11Blip_Buffer14resampled_timeEi($12,$15))|0);
    $17=(($this+((($i_046)*(12))&-1))|0);
    $18=((HEAP32[(($17)>>2)])|0);
    $19=((($18)+($16))|0);
    $20=((__ZNK11Blip_Buffer14resampled_timeEi($12,$nes_end_time))|0);
    HEAP32[(($17)>>2)]=0;
    $21=($19>>>0)<($20>>>0);
    if ($21) {
     $23=$i_046<<3;
     $24=((($23)+(64))|0);
     $25=(($this+104+$24)|0);
     $_sum=((($23)+(68))|0);
     $26=(($this+104+$_sum)|0);
     $27=((HEAP8[($26)])|0);
     $28=($27&255);
     $29=$28&224;
     $30=($29|0)==0;
     if ($30) {
      break;
     }
     $_sum43=((($23)+(71))|0);
     $32=(($this+104+$_sum43)|0);
     $33=((HEAP8[($32)])|0);
     $34=($33&255);
     $35=$34&15;
     $36=($35|0)==0;
     if ($36) {
      break;
     }
     $38=$28<<16;
     $39=$38&196608;
     $_sum44=((($23)+(66))|0);
     $40=(($this+104+$_sum44)|0);
     $41=((HEAP8[($40)])|0);
     $42=($41&255);
     $43=$42<<8;
     $44=$43|$39;
     $45=((HEAP8[($25)])|0);
     $46=($45&255);
     $47=$44|$46;
     $48=($47|0)<($8|0);
     if ($48) {
      break;
     }
     $50=((__ZNK11Blip_Buffer18resampled_durationEi($12,983040))|0);
     $51=(((($50>>>0))/(($47>>>0)))&-1);
     $52=(Math_imul($51,$5)|0);
     $53=$28&28;
     $54=(((32)-($53))|0);
     $55=(($this+((($i_046)*(12))&-1)+8)|0);
     $56=((HEAP16[(($55)>>1)])|0);
     $57=(($56<<16)>>16);
     $58=(($this+((($i_046)*(12))&-1)+10)|0);
     $59=((HEAP16[(($58)>>1)])|0);
     $60=(($59<<16)>>16);
     $_sum45=((($23)+(70))|0);
     $61=(($this+104+$_sum45)|0);
     $time_0=$19;$wave_pos_0=$60;$last_amp_0=$57;
     while(1) {
      $63=((HEAP8[($61)])|0);
      $64=($63&255);
      $65=((($64)+($wave_pos_0))|0);
      $66=$65>>1;
      $67=(($this+104+$66)|0);
      $68=((HEAP8[($67)])|0);
      $69=($68&255);
      $70=$65<<2;
      $71=$70&4;
      $72=$69>>>($71>>>0);
      $73=((($wave_pos_0)+(1))|0);
      $74=$72&15;
      $75=(Math_imul($74,$35)|0);
      $76=($75|0)==($last_amp_0|0);
      if ($76) {
       $last_amp_1=$last_amp_0;
      } else {
       $78=((($75)-($last_amp_0))|0);
       __ZNK10Blip_SynthILi12ELi15EE16offset_resampledEjiP11Blip_Buffer($9,$time_0,$78,$12);
       $last_amp_1=$75;
      }
      $80=((($time_0)+($52))|0);
      $81=($73|0)<($54|0);
      $_=($81?$73:0);
      $82=($80>>>0)<($20>>>0);
      if ($82) {
       $time_0=$80;$wave_pos_0=$_;$last_amp_0=$last_amp_1;
      } else {
       break;
      }
     }
     $84=(($_)&65535);
     HEAP16[(($58)>>1)]=$84;
     $85=(($last_amp_1)&65535);
     HEAP16[(($55)>>1)]=$85;
     $time_1=$80;
    } else {
     $time_1=$19;
    }
    $87=((($time_1)-($20))|0);
    HEAP32[(($17)>>2)]=$87;
   }
  } while(0);
  $89=((($i_046)+(1))|0);
  $90=($89|0)<8;
  if ($90) {
   $i_046=$89;
  } else {
   break;
  }
 }
 $91=(($this+96)|0);
 HEAP32[(($91)>>2)]=$nes_end_time;
 return;
}
function __ZNK10Blip_SynthILi12ELi15EE16offset_resampledEjiP11Blip_Buffer($this,$time,$delta,$blip_buf){
 $this=($this)|0;
 $time=($time)|0;
 $delta=($delta)|0;
 $blip_buf=($blip_buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_sum=0,$14=0,$15=0,$16=0,$17=0,$_sum59=0,$18=0,$19=0,$20=0;
 var $_sum60=0,$21=0,$22=0,$23=0,$24=0,$_sum61=0,$25=0,$26=0,$27=0,$_sum6263=0,$28=0,$29=0,$30=0,$31=0,$_sum64=0,$32=0,$33=0,$34=0,$_sum65=0,$35=0;
 var $36=0,$37=0,$38=0,$_sum66=0,$39=0,$40=0,$41=0,$_sum6768=0,$42=0,$43=0,$44=0,$45=0,$_sum69=0,$46=0,$47=0,$48=0,$_sum70=0,$49=0,$50=0,$51=0;
 var $52=0,$_sum71=0,$53=0,$54=0,$55=0,$56=0,$_sum7273=0,$57=0,$58=0,$59=0,$60=0,$_sum74=0,$61=0,$62=0,$63=0,$_sum7576=0,$64=0,$65=0,$66=0,$67=0;
 var $_sum77=0,$68=0,$69=0,$70=0,$_sum7879=0,$71=0,$72=0,$73=0,$74=0,$_sum80=0,$75=0,$76=0,$77=0,$_sum8182=0,$78=0,$79=0,$80=0,$81=0,$_sum83=0,$82=0;
 var $83=0,$84=0,$_sum8485=0,$85=0,$86=0,$87=0,$88=0,$_sum86=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$_sum87=0,$95=0,$96=0,$97=0,label=0;
 $1=$time>>>16;
 $2=(($blip_buf+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($1|0)<($3|0);
 if ($4) {
  $7=(($this+8)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(Math_imul($8,$delta)|0);
  $10=(($blip_buf+8)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=$time>>>10;
  $13=$12&63;
  $_sum=(((64)-($13))|0);
  $14=(($this+40+($_sum<<1))|0);
  $15=((HEAP16[(($14)>>1)])|0);
  $16=(($15<<16)>>16);
  $17=(Math_imul($16,$9)|0);
  $_sum59=((($1)+(2))|0);
  $18=(($11+($_sum59<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((($17)+($19))|0);
  $_sum60=((($_sum)+(64))|0);
  $21=(($this+40+($_sum60<<1))|0);
  $22=((HEAP16[(($21)>>1)])|0);
  $23=(($22<<16)>>16);
  $24=(Math_imul($23,$9)|0);
  $_sum61=((($1)+(3))|0);
  $25=(($11+($_sum61<<2))|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((($24)+($26))|0);
  $_sum6263=$_sum|128;
  $28=(($this+40+($_sum6263<<1))|0);
  $29=((HEAP16[(($28)>>1)])|0);
  $30=(($29<<16)>>16);
  HEAP32[(($18)>>2)]=$20;
  HEAP32[(($25)>>2)]=$27;
  $31=(Math_imul($30,$9)|0);
  $_sum64=((($1)+(4))|0);
  $32=(($11+($_sum64<<2))|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=((($31)+($33))|0);
  $_sum65=((($_sum)+(192))|0);
  $35=(($this+40+($_sum65<<1))|0);
  $36=((HEAP16[(($35)>>1)])|0);
  $37=(($36<<16)>>16);
  $38=(Math_imul($37,$9)|0);
  $_sum66=((($1)+(5))|0);
  $39=(($11+($_sum66<<2))|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=((($38)+($40))|0);
  $_sum6768=$_sum|256;
  $42=(($this+40+($_sum6768<<1))|0);
  $43=((HEAP16[(($42)>>1)])|0);
  $44=(($43<<16)>>16);
  HEAP32[(($32)>>2)]=$34;
  HEAP32[(($39)>>2)]=$41;
  $45=(Math_imul($44,$9)|0);
  $_sum69=((($1)+(6))|0);
  $46=(($11+($_sum69<<2))|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=((($45)+($47))|0);
  $_sum70=((($_sum)+(320))|0);
  $49=(($this+40+($_sum70<<1))|0);
  $50=((HEAP16[(($49)>>1)])|0);
  $51=(($50<<16)>>16);
  $52=(Math_imul($51,$9)|0);
  $_sum71=((($1)+(7))|0);
  $53=(($11+($_sum71<<2))|0);
  $54=((HEAP32[(($53)>>2)])|0);
  $55=((($52)+($54))|0);
  $56=(($this+40+($13<<1))|0);
  $_sum7273=$13|320;
  $57=(($this+40+($_sum7273<<1))|0);
  $58=((HEAP16[(($57)>>1)])|0);
  $59=(($58<<16)>>16);
  HEAP32[(($46)>>2)]=$48;
  HEAP32[(($53)>>2)]=$55;
  $60=(Math_imul($59,$9)|0);
  $_sum74=((($1)+(8))|0);
  $61=(($11+($_sum74<<2))|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=((($60)+($62))|0);
  $_sum7576=$13|256;
  $64=(($this+40+($_sum7576<<1))|0);
  $65=((HEAP16[(($64)>>1)])|0);
  $66=(($65<<16)>>16);
  $67=(Math_imul($66,$9)|0);
  $_sum77=((($1)+(9))|0);
  $68=(($11+($_sum77<<2))|0);
  $69=((HEAP32[(($68)>>2)])|0);
  $70=((($67)+($69))|0);
  $_sum7879=$13|192;
  $71=(($this+40+($_sum7879<<1))|0);
  $72=((HEAP16[(($71)>>1)])|0);
  $73=(($72<<16)>>16);
  HEAP32[(($61)>>2)]=$63;
  HEAP32[(($68)>>2)]=$70;
  $74=(Math_imul($73,$9)|0);
  $_sum80=((($1)+(10))|0);
  $75=(($11+($_sum80<<2))|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $77=((($74)+($76))|0);
  $_sum8182=$13|128;
  $78=(($this+40+($_sum8182<<1))|0);
  $79=((HEAP16[(($78)>>1)])|0);
  $80=(($79<<16)>>16);
  $81=(Math_imul($80,$9)|0);
  $_sum83=((($1)+(11))|0);
  $82=(($11+($_sum83<<2))|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=((($81)+($83))|0);
  $_sum8485=$13|64;
  $85=(($this+40+($_sum8485<<1))|0);
  $86=((HEAP16[(($85)>>1)])|0);
  $87=(($86<<16)>>16);
  HEAP32[(($75)>>2)]=$77;
  HEAP32[(($82)>>2)]=$84;
  $88=(Math_imul($87,$9)|0);
  $_sum86=((($1)+(12))|0);
  $89=(($11+($_sum86<<2))|0);
  $90=((HEAP32[(($89)>>2)])|0);
  $91=((($88)+($90))|0);
  $92=((HEAP16[(($56)>>1)])|0);
  $93=(($92<<16)>>16);
  $94=(Math_imul($93,$9)|0);
  $_sum87=((($1)+(13))|0);
  $95=(($11+($_sum87<<2))|0);
  $96=((HEAP32[(($95)>>2)])|0);
  $97=((($94)+($96))|0);
  HEAP32[(($89)>>2)]=$91;
  HEAP32[(($95)>>2)]=$97;
  return;
 } else {
  ___assert_fail(((4776)|0),((3584)|0),((343)|0),((8560)|0));
 }
}
function __ZN10Blip_SynthILi12ELi15EEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=(($this+40)|0);
 __ZN11Blip_Synth_C2EPsi($1,$2,12);
 return;
}
function __ZN10Blip_SynthILi12ELi15EE6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=.0,label=0;
 $1=(($this)|0);
 $2=($v)*((0.06666666666666667));
 __ZN11Blip_Synth_11volume_unitEd($1,$2);
 return;
}
function __ZN7Nes_Osc12clock_lengthEi($this,$halt_mask){
 $this=($this)|0;
 $halt_mask=($halt_mask)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 }
 $5=(($this)|0);
 $6=((HEAP8[($5)])|0);
 $7=($6&255);
 $8=$7&$halt_mask;
 $9=($8|0)==0;
 if (!($9)) {
  return;
 }
 $11=((($2)-(1))|0);
 HEAP32[(($1)>>2)]=$11;
 return;
}
function __ZN12Nes_Envelope14clock_envelopeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$26=0,$27=0,label=0;
 $1=(($this)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3&15;
 $5=(($this+7)|0);
 $6=((HEAP8[($5)])|0);
 $7=$6&1;
 $8=(($7<<24)>>24)==0;
 if (!($8)) {
  HEAP8[($5)]=0;
  $10=(($this+28)|0);
  HEAP32[(($10)>>2)]=$4;
  $11=(($this+24)|0);
  HEAP32[(($11)>>2)]=15;
  return;
 }
 $13=(($this+28)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((($14)-(1))|0);
 HEAP32[(($13)>>2)]=$15;
 $16=($15|0)<0;
 if (!($16)) {
  return;
 }
 HEAP32[(($13)>>2)]=$4;
 $18=(($this+24)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=((HEAP8[($1)])|0);
 $21=($20&255);
 $22=$21&32;
 $23=$22|$19;
 $24=($23|0)==0;
 if ($24) {
  return;
 }
 $26=((($19)+(15))|0);
 $27=$26&15;
 HEAP32[(($18)>>2)]=$27;
 return;
}
function __ZNK12Nes_Envelope6volumeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$13=0,$14=0,$16=0,label=0;
 $1=(($this+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $16=0;
  return (($16)|0);
 }
 $5=(($this)|0);
 $6=((HEAP8[($5)])|0);
 $7=($6&255);
 $8=$7&16;
 $9=($8|0)==0;
 if ($9) {
  $13=(($this+24)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $16=$14;
  return (($16)|0);
 } else {
  $11=$7&15;
  $16=$11;
  return (($16)|0);
 }
  return 0;
}
function __ZN10Nes_Square11clock_sweepEi($this,$negative_adjust){
 $this=($this)|0;
 $negative_adjust=($negative_adjust)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$notlhs=0,$notrhs=0,$or_cond_not=0,$14=0,$or_cond14=0,$16=0,$17=0,$18=0;
 var $19=0,$offset_0=0,$20=0,$21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0;
 var label=0;
 $1=(($this+1)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=(($this+36)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($5)-(1))|0);
 HEAP32[(($4)>>2)]=$6;
 $7=($6|0)<0;
 do {
  if ($7) {
   $9=(($this)|0);
   $10=(($this+5)|0);
   HEAP8[($10)]=1;
   $11=((__ZNK7Nes_Osc6periodEv($9))|0);
   $12=$3&7;
   $13=$3&128;
   $notlhs=($12|0)!=0;
   $notrhs=($13|0)!=0;
   $or_cond_not=$notrhs&$notlhs;
   $14=($11|0)>7;
   $or_cond14=$or_cond_not&$14;
   if (!($or_cond14)) {
    break;
   }
   $16=$11>>($12|0);
   $17=$3&8;
   $18=($17|0)==0;
   $19=((($negative_adjust)-($16))|0);
   $offset_0=($18?$16:$19);
   $20=((($offset_0)+($11))|0);
   $21=($20|0)<2048;
   if (!($21)) {
    break;
   }
   $23=(($20)&255);
   $24=(($this+2)|0);
   HEAP8[($24)]=$23;
   $25=(($this+3)|0);
   $26=((HEAP8[($25)])|0);
   $27=($26&255);
   $28=$27&248;
   $29=$20>>>8;
   $30=$29&7;
   $31=$28|$30;
   $32=(($31)&255);
   HEAP8[($25)]=$32;
  }
 } while(0);
 $34=(($this+5)|0);
 $35=((HEAP8[($34)])|0);
 $36=$35&1;
 $37=(($36<<24)>>24)==0;
 if ($37) {
  return;
 }
 HEAP8[($34)]=0;
 $39=$3>>>4;
 $40=$39&7;
 HEAP32[(($4)>>2)]=$40;
 return;
}
function __ZNK7Nes_Osc6periodEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+3)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3<<8;
 $5=$4&1792;
 $6=(($this+2)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=$5|$8;
 return (($9)|0);
}
function __ZN10Nes_Square3runEii($this,$time,$end_time){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$or_cond=0;
 var $23=0,$24=0,$25=0,$26=0,$_=0,$27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$_37=0,$_38=0,$50=0,$51=0,$52=0,$53=0,$amp_1=0,$54=0,$55=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0;
 var $66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$_0=0,$delta1_0=0,$phase_0=0,$73=0,$74=0,$75=0,$76=0,$or_cond39=0,$78=0,$delta1_1=0,$80=0,$81=0,$83=0,$84=0;
 var $85=0,$_1=0,$87=0,$88=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK7Nes_Osc6periodEv($1))|0);
 $3=$2<<1;
 $4=((($3)+(2))|0);
 $5=(($this+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==0;
 if ($7) {
  $9=(($this+16)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((($10)+($time))|0);
  $12=((__ZN10Nes_Square14maintain_phaseEiii($this,$11,$end_time,$4))|0);
  $13=((($12)-($end_time))|0);
  HEAP32[(($9)>>2)]=$13;
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($6);
 $15=(($this+1)|0);
 $16=((HEAP8[($15)])|0);
 $17=($16&255);
 $18=(($this)|0);
 $19=((__ZNK12Nes_Envelope6volumeEv($18))|0);
 $20=($19|0)==0;
 $21=($2|0)<8;
 $or_cond=$20|$21;
 do {
  if ($or_cond) {
   label = 1225;
  } else {
   $23=$17&8;
   $24=$17&7;
   $25=($23|0)==0;
   $26=$2>>($24|0);
   $_=($25?$26:0);
   $27=((($_)+($2))|0);
   $28=($27|0)>2047;
   if ($28) {
    label = 1225;
    break;
   }
   $44=(($this)|0);
   $45=((HEAP8[($44)])|0);
   $46=($45&255);
   $47=$46>>>6;
   $48=1<<$47;
   $49=($47|0)==3;
   $_37=($49?$19:0);
   $_38=($49?2:$48);
   $50=(($this+32)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=($51|0)<($_38|0);
   $53=($52?$19:0);
   $amp_1=$53^$_37;
   $54=((__ZN7Nes_Osc10update_ampEi($1,$amp_1))|0);
   $55=($54|0)==0;
   if (!($55)) {
    $57=(($this+40)|0);
    $58=((HEAP32[(($57)>>2)])|0);
    $59=((HEAP32[(($5)>>2)])|0);
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($58,$time,$54,$59);
   }
   $61=(($this+16)|0);
   $62=((HEAP32[(($61)>>2)])|0);
   $63=((($62)+($time))|0);
   $64=($63|0)<($end_time|0);
   if (!($64)) {
    $_1=$63;
    break;
   }
   $66=((HEAP32[(($5)>>2)])|0);
   $67=(($this+40)|0);
   $68=((HEAP32[(($67)>>2)])|0);
   $69=$amp_1<<1;
   $70=((($69)-($19))|0);
   $71=((HEAP32[(($50)>>2)])|0);
   $phase_0=$71;$delta1_0=$70;$_0=$63;
   while(1) {
    $73=((($phase_0)+(1))|0);
    $74=$73&7;
    $75=($74|0)==0;
    $76=($74|0)==($_38|0);
    $or_cond39=$75|$76;
    if ($or_cond39) {
     $78=(((-$delta1_0))|0);
     __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($68,$_0,$78,$66);
     $delta1_1=$78;
    } else {
     $delta1_1=$delta1_0;
    }
    $80=((($_0)+($4))|0);
    $81=($80|0)<($end_time|0);
    if ($81) {
     $phase_0=$74;$delta1_0=$delta1_1;$_0=$80;
    } else {
     break;
    }
   }
   $83=((($delta1_1)+($19))|0);
   $84=$83>>1;
   $85=(($this+20)|0);
   HEAP32[(($85)>>2)]=$84;
   HEAP32[(($50)>>2)]=$74;
   $_1=$80;
  }
 } while(0);
 if ((label|0) == 1225) {
  $30=(($this+20)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=($31|0)==0;
  if (!($32)) {
   $34=(($this+40)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=(((-$31))|0);
   $37=((HEAP32[(($5)>>2)])|0);
   __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($35,$time,$36,$37);
   HEAP32[(($30)>>2)]=0;
  }
  $39=(($this+16)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=((($40)+($time))|0);
  $42=((__ZN10Nes_Square14maintain_phaseEiii($this,$41,$end_time,$4))|0);
  $_1=$42;
 }
 $87=((($_1)-($end_time))|0);
 $88=(($this+16)|0);
 HEAP32[(($88)>>2)]=$87;
 return;
}
function __ZN10Nes_Square14maintain_phaseEiii($this,$time,$end_time,$timer_period){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 $timer_period=($timer_period)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;
 $1=((($end_time)-($time))|0);
 $2=($1|0)>0;
 if (!($2)) {
  $_0=$time;
  return (($_0)|0);
 }
 $4=((($timer_period)-(1))|0);
 $5=((($4)+($1))|0);
 $6=(((($5|0))/(($timer_period|0)))&-1);
 $7=(($this+32)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)+($6))|0);
 $10=$9&7;
 HEAP32[(($7)>>2)]=$10;
 $11=(Math_imul($6,$timer_period)|0);
 $12=((($11)+($time))|0);
 $_0=$12;
 return (($_0)|0);
}
function __ZN7Nes_Osc10update_ampEi($this,$amp){
 $this=($this)|0;
 $amp=($amp)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($amp)-($2))|0);
 HEAP32[(($1)>>2)]=$amp;
 return (($3)|0);
}
function __ZN12Nes_Triangle20clock_linear_counterEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$16=0,$18=0,$19=0,$20=0,label=0;
 $1=(($this+7)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 do {
  if ($4) {
   $12=(($this+28)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=($13|0)==0;
   if ($14) {
    break;
   }
   $16=((($13)-(1))|0);
   HEAP32[(($12)>>2)]=$16;
  } else {
   $6=(($this)|0);
   $7=((HEAP8[($6)])|0);
   $8=($7&255);
   $9=$8&127;
   $10=(($this+28)|0);
   HEAP32[(($10)>>2)]=$9;
  }
 } while(0);
 $18=(($this)|0);
 $19=((HEAP8[($18)])|0);
 $20=(($19<<24)>>24)<0;
 if ($20) {
  return;
 }
 HEAP8[($1)]=0;
 return;
}
function __ZN12Nes_Triangle3runEii($this,$time,$end_time){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$or_cond=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$or_cond27=0,$42=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$_=0,$_28=0,$49=0,$_0=0,$phase_0=0,$volume_0=0,$51=0,$52=0,$54=0,$phase_1=0,$volume_1=0,$57=0,$58=0,$60=0,$61=0,$_phase_1=0,$62=0,$63=0,$_1=0;
 var $65=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK7Nes_Osc6periodEv($1))|0);
 $3=((($2)+(1))|0);
 $4=(($this+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if ($6) {
  $8=(($this+16)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=((($9)+($time))|0);
  HEAP32[(($8)>>2)]=0;
  $11=(($this+12)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==0;
  if ($13) {
   return;
  }
  $15=(($this+28)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=($16|0)!=0;
  $18=($3|0)>2;
  $or_cond=$17&$18;
  if (!($or_cond)) {
   return;
  }
  $20=((__ZN12Nes_Triangle14maintain_phaseEiii($this,$10,$end_time,$3))|0);
  $21=((($20)-($end_time))|0);
  HEAP32[(($8)>>2)]=$21;
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($5);
 $23=((__ZNK12Nes_Triangle8calc_ampEv($this))|0);
 $24=((__ZN7Nes_Osc10update_ampEi($1,$23))|0);
 $25=($24|0)==0;
 if (!($25)) {
  $27=(($this+32)|0);
  $28=((HEAP32[(($4)>>2)])|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($27,$time,$24,$28);
 }
 $30=(($this+16)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=((($31)+($time))|0);
 $33=(($this+12)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=($34|0)==0;
 do {
  if ($35) {
   $_1=$end_time;
  } else {
   $37=(($this+28)|0);
   $38=((HEAP32[(($37)>>2)])|0);
   $39=($38|0)==0;
   $40=($3|0)<3;
   $or_cond27=$39|$40;
   if ($or_cond27) {
    $_1=$end_time;
    break;
   }
   $42=($32|0)<($end_time|0);
   if (!($42)) {
    $_1=$32;
    break;
   }
   $44=((HEAP32[(($4)>>2)])|0);
   $45=(($this+24)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=($46|0)>16;
   $48=((($46)-(16))|0);
   $_=($47?$48:$46);
   $_28=($47?-1:1);
   $49=(($this+32)|0);
   $volume_0=$_28;$phase_0=$_;$_0=$32;
   while(1) {
    $51=((($phase_0)-(1))|0);
    $52=($51|0)==0;
    if ($52) {
     $54=(((-$volume_0))|0);
     $volume_1=$54;$phase_1=16;
    } else {
     __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($49,$_0,$volume_0,$44);
     $volume_1=$volume_0;$phase_1=$51;
    }
    $57=((($_0)+($3))|0);
    $58=($57|0)<($end_time|0);
    if ($58) {
     $volume_0=$volume_1;$phase_0=$phase_1;$_0=$57;
    } else {
     break;
    }
   }
   $60=($volume_1|0)<0;
   $61=((($phase_1)+(16))|0);
   $_phase_1=($60?$61:$phase_1);
   HEAP32[(($45)>>2)]=$_phase_1;
   $62=((__ZNK12Nes_Triangle8calc_ampEv($this))|0);
   $63=(($this+20)|0);
   HEAP32[(($63)>>2)]=$62;
   $_1=$57;
  }
 } while(0);
 $65=((($_1)-($end_time))|0);
 HEAP32[(($30)>>2)]=$65;
 return;
}
function __ZN12Nes_Triangle14maintain_phaseEiii($this,$time,$end_time,$timer_period){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 $timer_period=($timer_period)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$_0=0,label=0;
 $1=((($end_time)-($time))|0);
 $2=($1|0)>0;
 if (!($2)) {
  $_0=$time;
  return (($_0)|0);
 }
 $4=((($timer_period)-(1))|0);
 $5=((($4)+($1))|0);
 $6=(((($5|0))/(($timer_period|0)))&-1);
 $7=(($this+24)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(((1)-($6))|0);
 $10=((($9)+($8))|0);
 $11=$10&31;
 $12=((($11)+(1))|0);
 HEAP32[(($7)>>2)]=$12;
 $13=(Math_imul($6,$timer_period)|0);
 $14=((($13)+($time))|0);
 $_0=$14;
 return (($_0)|0);
}
function __ZNK12Nes_Triangle8calc_ampEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$_=0,label=0;
 $1=(($this+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(((16)-($2))|0);
 $4=($3|0)<0;
 $5=((($2)-(17))|0);
 $_=($4?$5:$3);
 return (($_)|0);
}
function __ZN7Nes_Dmc5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+48)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+32)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+36)|0);
 HEAP32[(($4)>>2)]=1;
 $5=(($this+40)|0);
 HEAP32[(($5)>>2)]=0;
 $6=(($this+44)|0);
 HEAP8[($6)]=0;
 $7=(($this+45)|0);
 HEAP8[($7)]=1;
 $8=(($this+52)|0);
 HEAP32[(($8)>>2)]=1073741824;
 $9=(($this+57)|0);
 HEAP8[($9)]=0;
 $10=(($this+56)|0);
 HEAP8[($10)]=0;
 $11=(($this)|0);
 __ZN7Nes_Osc5resetEv($11);
 $12=(($this+28)|0);
 HEAP32[(($12)>>2)]=428;
 return;
}
function __ZN7Nes_Dmc10recalc_irqEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$irq_0=0,$28=0,$29=0,$30=0,$32=0,$33=0,label=0;
 $1=(($this+56)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 do {
  if ($4) {
   $irq_0=1073741824;
  } else {
   $6=(($this+12)|0);
   $7=((HEAP32[(($6)>>2)])|0);
   $8=($7|0)==0;
   if ($8) {
    $irq_0=1073741824;
    break;
   }
   $10=(($this+68)|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=(($11+1948)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=(($this+16)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=$7<<3;
   $17=(($this+36)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=((($16)-(9))|0);
   $20=((($19)+($18))|0);
   $21=(($this+28)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   $23=(Math_imul($20,$22)|0);
   $24=((($13)+(1))|0);
   $25=((($24)+($15))|0);
   $26=((($25)+($23))|0);
   $irq_0=$26;
  }
 } while(0);
 $28=(($this+52)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=($irq_0|0)==($29|0);
 if ($30) {
  return;
 }
 HEAP32[(($28)>>2)]=$irq_0;
 $32=(($this+68)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 __ZN7Nes_Apu11irq_changedEv($33);
 return;
}
function __ZN7Nes_Dmc14write_registerEii($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,label=0;
 if (((($addr|0))|0)==((1)|0)) {
  $19=(($this+48)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=$data&127;
  HEAP32[(($19)>>2)]=$21;
  $22=(($this+59)|0);
  $23=((HEAP8[($22)])|0);
  $24=$23&1;
  $25=(($24<<24)>>24)==0;
  if (!($25)) {
   return;
  }
  $27=((17736+$20)|0);
  $28=((17736+$21)|0);
  $29=((HEAP8[($27)])|0);
  $30=((HEAP8[($28)])|0);
  $31=($30&255);
  $32=($29&255);
  $33=((($32)+($21))|0);
  $34=((($33)-($31))|0);
  $35=(($this+20)|0);
  HEAP32[(($35)>>2)]=$34;
  return;
 } else if (((($addr|0))|0)==((0)|0)) {
  $2=$data&15;
  $3=(($this+58)|0);
  $4=((HEAP8[($3)])|0);
  $5=$4&1;
  $6=($5&255);
  $7=((17952+($6<<5)+($2<<1))|0);
  $8=((HEAP16[(($7)>>1)])|0);
  $9=(($8<<16)>>16);
  $10=(($this+28)|0);
  HEAP32[(($10)>>2)]=$9;
  $11=$data&192;
  $12=($11|0)==128;
  $13=(($this+56)|0);
  $14=($12&1);
  HEAP8[($13)]=$14;
  $15=(($this+57)|0);
  $16=((HEAP8[($15)])|0);
  $17=$16&$14;
  HEAP8[($15)]=$17;
  __ZN7Nes_Dmc10recalc_irqEv($this);
  return;
 } else {
  return;
 }
}
function __ZN7Nes_Dmc5startEv($this){
 $this=($this)|0;
 var label=0;
 __ZN7Nes_Dmc13reload_sampleEv($this);
 __ZN7Nes_Dmc11fill_bufferEv($this);
 __ZN7Nes_Dmc10recalc_irqEv($this);
 return;
}
function __ZN7Nes_Dmc13reload_sampleEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this+2)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3<<6;
 $5=$4|16384;
 $6=(($this+24)|0);
 HEAP32[(($6)>>2)]=$5;
 $7=(($this+3)|0);
 $8=((HEAP8[($7)])|0);
 $9=($8&255);
 $10=$9<<4;
 $11=$10|1;
 $12=(($this+12)|0);
 HEAP32[(($12)>>2)]=$11;
 return;
}
function __ZN7Nes_Dmc11fill_bufferEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,label=0;
 $1=(($this+44)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 if (!($4)) {
  return;
 }
 $6=(($this+12)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 if ($8) {
  return;
 }
 $10=(($this+60)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=($11|0)==0;
 if ($12) {
  ___assert_fail(((2992)|0),((6784)|0),((380)|0),((8880)|0));
 }
 $15=(($this+64)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($this+24)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((($18)+(32768))|0);
 $20=((FUNCTION_TABLE_iii[($11)&127]($16,$19))|0);
 $21=(($this+32)|0);
 HEAP32[(($21)>>2)]=$20;
 $22=((HEAP32[(($17)>>2)])|0);
 $23=((($22)+(1))|0);
 $24=$23&32767;
 HEAP32[(($17)>>2)]=$24;
 HEAP8[($1)]=1;
 $25=((HEAP32[(($6)>>2)])|0);
 $26=((($25)-(1))|0);
 HEAP32[(($6)>>2)]=$26;
 $27=($26|0)==0;
 if (!($27)) {
  return;
 }
 $29=(($this)|0);
 $30=((HEAP8[($29)])|0);
 $31=$30&64;
 $32=(($31<<24)>>24)==0;
 if ($32) {
  $35=(($this+68)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=(($36+1972)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=$38&-17;
  HEAP32[(($37)>>2)]=$39;
  $40=(($this+56)|0);
  $41=((HEAP8[($40)])|0);
  $42=$41&1;
  $43=(($this+57)|0);
  HEAP8[($43)]=$42;
  $44=(($this+52)|0);
  HEAP32[(($44)>>2)]=1073741824;
  $45=((HEAP32[(($35)>>2)])|0);
  __ZN7Nes_Apu11irq_changedEv($45);
  return;
 } else {
  __ZN7Nes_Dmc13reload_sampleEv($this);
  return;
 }
}
function __ZN7Nes_Dmc3runEii($this,$time,$end_time){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$47=0,$48=0;
 var $49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$bits_remain_0=0,$bits_0=0,$dac_0=0,$_0=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=0,$bits_1=0,$dac_1=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$79=0,$bits_remain_1=0,$bits_2=0,$83=0,$85=0,$bits_remain_2=0,$_1=0,$_2=0,$88=0,label=0;
 $1=(($this)|0);
 $2=(($this+48)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((__ZN7Nes_Osc10update_ampEi($1,$3))|0);
 $5=(($this+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==0;
 do {
  if ($7) {
   $9=(($this+45)|0);
   HEAP8[($9)]=1;
  } else {
   __ZN11Blip_Buffer12set_modifiedEv($6);
   $11=($4|0)==0;
   if ($11) {
    break;
   }
   $13=(($this+72)|0);
   $14=((HEAP32[(($5)>>2)])|0);
   __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($13,$time,$4,$14);
  }
 } while(0);
 $16=(($this+16)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=((($17)+($time))|0);
 $19=($18|0)<($end_time|0);
 if (!($19)) {
  $_2=$18;
  $88=((($_2)-($end_time))|0);
  HEAP32[(($16)>>2)]=$88;
  return;
 }
 $21=(($this+36)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($this+45)|0);
 $24=((HEAP8[($23)])|0);
 $25=$24&1;
 $26=(($25<<24)>>24)==0;
 do {
  if ($26) {
   label = 1324;
  } else {
   $28=(($this+44)|0);
   $29=((HEAP8[($28)])|0);
   $30=$29&1;
   $31=(($30<<24)>>24)==0;
   if (!($31)) {
    label = 1324;
    break;
   }
   $33=(($this+28)|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=((($end_time)-(1))|0);
   $36=((($35)-($18))|0);
   $37=((($36)+($34))|0);
   $38=(((($37|0))/(($34|0)))&-1);
   $39=((($22)+(7))|0);
   $40=(((($38|0))%(8))&-1);
   $41=((($39)-($40))|0);
   $42=(((($41|0))%(8))&-1);
   $43=((($42)+(1))|0);
   $44=(Math_imul($38,$34)|0);
   $45=((($44)+($18))|0);
   $_1=$45;$bits_remain_2=$43;
  }
 } while(0);
 if ((label|0) == 1324) {
  $47=((HEAP32[(($5)>>2)])|0);
  $48=(($this+28)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  $50=(($this+40)|0);
  $51=((HEAP32[(($50)>>2)])|0);
  $52=((HEAP32[(($2)>>2)])|0);
  $53=(($this+72)|0);
  $54=(($this+44)|0);
  $55=(($this+32)|0);
  $56=($47|0)==0;
  $_0=$18;$dac_0=$52;$bits_0=$51;$bits_remain_0=$22;
  while(1) {
   $58=((HEAP8[($23)])|0);
   $59=$58&1;
   $60=(($59<<24)>>24)==0;
   do {
    if ($60) {
     $62=$bits_0<<2;
     $63=$62&4;
     $64=((($63)-(2))|0);
     $65=$bits_0>>1;
     $66=((($64)+($dac_0))|0);
     $67=($66>>>0)<((128)>>>0);
     if (!($67)) {
      $dac_1=$dac_0;$bits_1=$65;
      break;
     }
     __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($53,$_0,$64,$47);
     $dac_1=$66;$bits_1=$65;
    } else {
     $dac_1=$dac_0;$bits_1=$bits_0;
    }
   } while(0);
   $70=((($_0)+($49))|0);
   $71=((($bits_remain_0)-(1))|0);
   $72=($71|0)==0;
   do {
    if ($72) {
     $74=((HEAP8[($54)])|0);
     $75=$74&1;
     $76=(($75<<24)>>24)==0;
     if ($76) {
      HEAP8[($23)]=1;
      $bits_2=$bits_1;$bits_remain_1=8;
      break;
     }
     HEAP8[($23)]=0;
     $79=((HEAP32[(($55)>>2)])|0);
     HEAP8[($54)]=0;
     if ($56) {
      HEAP8[($23)]=1;
     }
     __ZN7Nes_Dmc11fill_bufferEv($this);
     $bits_2=$79;$bits_remain_1=8;
    } else {
     $bits_2=$bits_1;$bits_remain_1=$71;
    }
   } while(0);
   $83=($70|0)<($end_time|0);
   if ($83) {
    $_0=$70;$dac_0=$dac_1;$bits_0=$bits_2;$bits_remain_0=$bits_remain_1;
   } else {
    break;
   }
  }
  HEAP32[(($2)>>2)]=$dac_1;
  $85=(($this+20)|0);
  HEAP32[(($85)>>2)]=$dac_1;
  HEAP32[(($50)>>2)]=$bits_2;
  $_1=$70;$bits_remain_2=$bits_remain_1;
 }
 HEAP32[(($21)>>2)]=$bits_remain_2;
 $_2=$_1;
 $88=((($_2)-($end_time))|0);
 HEAP32[(($16)>>2)]=$88;
 return;
}
function __ZN9Nes_Noise3runEii($this,$time,$end_time){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$sum=0,$19=0,$20=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$41=0,$43=0,$44=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0;
 var $68=0,$69=0,$noise_0=0,$delta1_0=0,$rtime_0=0,$_0=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$79=0,$delta1_1=0,$81=0,$82=0,$83=0,$84=0,$85=0;
 var $87=0,$88=0,$89=0,$_1=0,$91=0,label=0;
 $1=(($this+2)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3&15;
 $5=((17920+($4<<1))|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=(($6<<16)>>16);
 $8=(($this+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if ($10) {
  $12=(($this+16)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=((($13)+($time))|0);
  $15=((($end_time)-(1))|0);
  $16=((($15)+($7))|0);
  $17=((($16)-($14))|0);
  $18=(((($17|0))%(($7|0)))&-1);
  $sum=((($18)+($end_time))|0);
  $19=((($14)-($sum))|0);
  $20=((($19)+($17))|0);
  HEAP32[(($12)>>2)]=$20;
  return;
 }
 $22=(($this)|0);
 __ZN11Blip_Buffer12set_modifiedEv($9);
 $23=(($this)|0);
 $24=((__ZNK12Nes_Envelope6volumeEv($23))|0);
 $25=(($this+32)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$26&1;
 $28=($27|0)!=0;
 $29=($28?$24:0);
 $30=((__ZN7Nes_Osc10update_ampEi($22,$29))|0);
 $31=($30|0)==0;
 if (!($31)) {
  $33=(($this+40)|0);
  $34=((HEAP32[(($8)>>2)])|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($33,$time,$30,$34);
 }
 $36=(($this+16)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=((($37)+($time))|0);
 $39=($38|0)<($end_time|0);
 do {
  if ($39) {
   $41=($24|0)==0;
   if ($41) {
    $43=((($end_time)-(1))|0);
    $44=((($43)+($7))|0);
    $45=((($44)-($38))|0);
    $46=(((($45|0))%(($7|0)))&-1);
    $47=((($45)-($46))|0);
    $48=((($47)+($38))|0);
    $49=((HEAP8[($1)])|0);
    $50=(($49<<24)>>24)<0;
    if ($50) {
     $_1=$48;
     break;
    }
    $52=((HEAP32[(($25)>>2)])|0);
    $53=$52<<13;
    $54=$52<<14;
    $55=$53^$54;
    $56=$55&16384;
    $57=$52>>1;
    $58=$56|$57;
    HEAP32[(($25)>>2)]=$58;
    $_1=$48;
    break;
   }
   $60=((HEAP32[(($8)>>2)])|0);
   $61=((__ZNK11Blip_Buffer18resampled_durationEi($60,$7))|0);
   $62=((__ZNK11Blip_Buffer14resampled_timeEi($60,$38))|0);
   $63=((HEAP32[(($25)>>2)])|0);
   $64=$29<<1;
   $65=((($64)-($24))|0);
   $66=((HEAP8[($1)])|0);
   $67=(($66<<24)>>24)<0;
   $68=($67?8:13);
   $69=(($this+40)|0);
   $_0=$38;$rtime_0=$62;$delta1_0=$65;$noise_0=$63;
   while(1) {
    $71=$noise_0<<$68;
    $72=$noise_0<<14;
    $73=$71^$72;
    $74=((($_0)+($7))|0);
    $75=((($noise_0)+(1))|0);
    $76=$75&2;
    $77=($76|0)==0;
    if ($77) {
     $delta1_1=$delta1_0;
    } else {
     $79=(((-$delta1_0))|0);
     __ZNK10Blip_SynthILi8ELi1EE16offset_resampledEjiP11Blip_Buffer($69,$rtime_0,$79,$60);
     $delta1_1=$79;
    }
    $81=((($rtime_0)+($61))|0);
    $82=$73&16384;
    $83=$noise_0>>1;
    $84=$82|$83;
    $85=($74|0)<($end_time|0);
    if ($85) {
     $_0=$74;$rtime_0=$81;$delta1_0=$delta1_1;$noise_0=$84;
    } else {
     break;
    }
   }
   $87=((($delta1_1)+($24))|0);
   $88=$87>>1;
   $89=(($this+20)|0);
   HEAP32[(($89)>>2)]=$88;
   HEAP32[(($25)>>2)]=$84;
   $_1=$74;
  } else {
   $_1=$38;
  }
 } while(0);
 $91=((($_1)-($end_time))|0);
 HEAP32[(($36)>>2)]=$91;
 return;
}
function __ZN12Nes_Vrc6_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+80)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($1);
 $2=(($this+640)|0);
 __ZN10Blip_SynthILi12ELi1EEC1Ev($2);
 __ZN12Nes_Vrc6_Apu6outputEP11Blip_Buffer($this,0);
 __ZN12Nes_Vrc6_Apu6volumeEd($this,1.0);
 __ZN12Nes_Vrc6_Apu5resetEv($this);
 return;
}
function __ZN12Nes_Vrc6_Apu6outputEP11Blip_Buffer($this,$buf){
 $this=($this)|0;
 $buf=($buf)|0;
 var label=0;
 __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 return;
}
function __ZN12Nes_Vrc6_Apu6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=.0,$3=0,$4=.0,label=0;
 $1=(($this+80)|0);
 $2=($v)*((0.006238709677419354));
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($1,$2);
 $3=(($this+640)|0);
 $4=($v)*((0.0064466666666666665));
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($3,$4);
 return;
}
function __ZN12Nes_Vrc6_Apu5resetEv($this){
 $this=($this)|0;
 var $1=0,$scevgep11=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 $1=(($this+72)|0);
 HEAP32[(($1)>>2)]=0;
 $scevgep11=(($this)|0);
 _memset((((($scevgep11)|0))|0), ((((0)|0))|0), ((((3)|0))|0));
 $2=(($this+8)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+12)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+16)|0);
 HEAP32[(($4)>>2)]=1;
 $5=(($this+20)|0);
 $6=$5;
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((7)|0))|0));
 $7=(($this+32)|0);
 HEAP32[(($7)>>2)]=0;
 $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=0;
 $9=(($this+40)|0);
 HEAP32[(($9)>>2)]=1;
 $10=(($this+44)|0);
 $11=$10;
 _memset((((($11)|0))|0), ((((0)|0))|0), ((((7)|0))|0));
 $12=(($this+56)|0);
 HEAP32[(($12)>>2)]=0;
 $13=(($this+60)|0);
 HEAP32[(($13)>>2)]=0;
 $14=(($this+64)|0);
 HEAP32[(($14)>>2)]=1;
 $15=(($this+68)|0);
 HEAP32[(($15)>>2)]=0;
 return;
}
function __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf){
 $this=($this)|0;
 $i=($i)|0;
 $buf=($buf)|0;
 var $1=0,$4=0,label=0;
 $1=($i>>>0)<((3)>>>0);
 if ($1) {
  $4=(($this+((($i)*(24))&-1)+4)|0);
  HEAP32[(($4)>>2)]=$buf;
  return;
 } else {
  ___assert_fail(((1384)|0),((896)|0),((78)|0),((9440)|0));
 }
}
function __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,label=0;
 $1=(($this+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($time|0);
 if ($3) {
  ___assert_fail(((2744)|0),((6712)|0),((48)|0),((9408)|0));
 } else {
  $6=(($this)|0);
  __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$6,$time);
  $7=(($this+24)|0);
  __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$7,$time);
  __ZN12Nes_Vrc6_Apu7run_sawEi($this,$time);
  HEAP32[(($1)>>2)]=$time;
  return;
 }
}
function __ZN12Nes_Vrc6_Apu10run_squareERNS_8Vrc6_OscEi($this,$osc,$end_time){
 $this=($this)|0;
 $osc=($osc)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$_=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$brmerge=0,$brmerge_not=0,$38=0,$or_cond=0,$40=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$time_0=0,$phase_0=0,$48=0,$49=0,$51=0,$phase_143=0,$54=0,$55=0,$time_1=0,$58=0,label=0;
 $1=(($osc+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($2);
 $5=(($osc)|0);
 $6=((HEAP8[($5)])|0);
 $7=($6&255);
 $8=$7&15;
 $9=(($osc+2)|0);
 $10=((HEAP8[($9)])|0);
 $11=(($10<<24)>>24)<0;
 $_=($11?$8:0);
 $12=$7&128;
 $13=$7>>>4;
 $14=$13&7;
 $15=((($14)+(1))|0);
 $16=($12|0)!=0;
 if ($16) {
  label = 1370;
 } else {
  $18=(($osc+16)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=($19|0)<($15|0);
  if ($20) {
   label = 1370;
  } else {
   $23=0;
  }
 }
 if ((label|0) == 1370) {
  $23=$_;
 }
 $24=(($osc+12)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($this+72)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($23|0)==($25|0);
 if (!($28)) {
  $30=((($23)-($25))|0);
  HEAP32[(($24)>>2)]=$23;
  $31=(($this+640)|0);
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($31,$27,$30,$2);
 }
 $33=(($osc+8)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=((($34)+($27))|0);
 HEAP32[(($33)>>2)]=0;
 $36=((__ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($osc))|0);
 $37=($_|0)==0;
 $brmerge=$37|$16;
 $brmerge_not=$brmerge^1;
 $38=($36|0)>4;
 $or_cond=$38&$brmerge_not;
 if (!($or_cond)) {
  return;
 }
 $40=($35|0)<($end_time|0);
 if ($40) {
  $42=(($osc+16)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=(($this+640)|0);
  $45=(($this+640)|0);
  $46=(((-$_))|0);
  $phase_0=$43;$time_0=$35;
  while(1) {
   $48=((($phase_0)+(1))|0);
   $49=($48|0)==16;
   do {
    if ($49) {
     HEAP32[(($24)>>2)]=$_;
     __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($44,$time_0,$_,$2);
     $phase_143=0;
    } else {
     $51=($48|0)==($15|0);
     if (!($51)) {
      $phase_143=$48;
      break;
     }
     HEAP32[(($24)>>2)]=0;
     __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($45,$time_0,$46,$2);
     $phase_143=$48;
    }
   } while(0);
   $54=((($time_0)+($36))|0);
   $55=($54|0)<($end_time|0);
   if ($55) {
    $phase_0=$phase_143;$time_0=$54;
   } else {
    break;
   }
  }
  HEAP32[(($42)>>2)]=$phase_143;
  $time_1=$54;
 } else {
  $time_1=$35;
 }
 $58=((($time_1)-($end_time))|0);
 HEAP32[(($33)>>2)]=$58;
 return;
}
function __ZN12Nes_Vrc6_Apu7run_sawEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$last_amp_0=0,$time_0=0,$phase_0=0,$amp_0=0,$39=0,$40=0,$_=0,$_amp_0=0;
 var $41=0,$42=0,$44=0,$last_amp_1=0,$46=0,$47=0,$48=0,$49=0,$last_amp_2=0,$time_1=0,$52=0,$last_amp_3=0,label=0;
 $1=(($this+48)|0);
 $2=(($this+52)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($3|0)==0;
 if ($4) {
  return;
 }
 __ZN11Blip_Buffer12set_modifiedEv($3);
 $6=(($this+68)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($1)|0);
 $9=((HEAP8[($8)])|0);
 $10=($9&255);
 $11=$10&63;
 $12=(($this+72)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($this+60)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($this+50)|0);
 $17=((HEAP8[($16)])|0);
 $18=(($17<<24)>>24)<0;
 do {
  if ($18) {
   $20=$11|$7;
   $21=($20|0)==0;
   if ($21) {
    label = 1390;
    break;
   }
   $28=(($this+56)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=((($29)+($13))|0);
   $31=($30|0)<($end_time|0);
   if ($31) {
    $33=((__ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($1))|0);
    $34=$33<<1;
    $35=(($this+64)|0);
    $36=((HEAP32[(($35)>>2)])|0);
    $37=(($this+80)|0);
    $amp_0=$7;$phase_0=$36;$time_0=$30;$last_amp_0=$15;
    while(1) {
     $39=((($phase_0)-(1))|0);
     $40=($39|0)==0;
     $_=($40?7:$39);
     $_amp_0=($40?0:$amp_0);
     $41=$_amp_0>>3;
     $42=($41|0)==($last_amp_0|0);
     if ($42) {
      $last_amp_1=$last_amp_0;
     } else {
      $44=((($41)-($last_amp_0))|0);
      __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($37,$time_0,$44,$3);
      $last_amp_1=$41;
     }
     $46=((($time_0)+($34))|0);
     $47=((($_amp_0)+($11))|0);
     $48=$47&255;
     $49=($46|0)<($end_time|0);
     if ($49) {
      $amp_0=$48;$phase_0=$_;$time_0=$46;$last_amp_0=$last_amp_1;
     } else {
      break;
     }
    }
    HEAP32[(($35)>>2)]=$_;
    HEAP32[(($6)>>2)]=$48;
    $time_1=$46;$last_amp_2=$last_amp_1;
   } else {
    $time_1=$30;$last_amp_2=$15;
   }
   $52=((($time_1)-($end_time))|0);
   HEAP32[(($28)>>2)]=$52;
   $last_amp_3=$last_amp_2;
  } else {
   label = 1390;
  }
 } while(0);
 if ((label|0) == 1390) {
  $23=(($this+56)|0);
  HEAP32[(($23)>>2)]=0;
  $24=$7>>3;
  $25=((($24)-($15))|0);
  $26=(($this+80)|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($26,$13,$25,$3);
  $last_amp_3=$24;
 }
 HEAP32[(($14)>>2)]=$last_amp_3;
 return;
}
function __ZN12Nes_Vrc6_Apu9write_oscEiiii($this,$time,$osc_index,$reg,$data){
 $this=($this)|0;
 $time=($time)|0;
 $osc_index=($osc_index)|0;
 $reg=($reg)|0;
 $data=($data)|0;
 var $1=0,$4=0,$7=0,$8=0,label=0;
 $1=($osc_index>>>0)<((3)>>>0);
 if (!($1)) {
  ___assert_fail(((4680)|0),((6712)|0),((57)|0),((9392)|0));
 }
 $4=($reg>>>0)<((3)>>>0);
 if ($4) {
  __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time);
  $7=(($data)&255);
  $8=(($this+((($osc_index)*(24))&-1)+$reg)|0);
  HEAP8[($8)]=$7;
  return;
 } else {
  ___assert_fail(((3528)|0),((6712)|0),((58)|0),((9392)|0));
 }
}
function __ZN12Nes_Vrc6_Apu9end_frameEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$10=0,label=0;
 $1=(($this+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($time|0);
 if ($3) {
  __ZN12Nes_Vrc6_Apu9run_untilEi($this,$time);
 }
 $6=((HEAP32[(($1)>>2)])|0);
 $7=($6|0)<($time|0);
 if ($7) {
  ___assert_fail(((2848)|0),((6712)|0),((69)|0),((9424)|0));
 } else {
  $10=((($6)-($time))|0);
  HEAP32[(($1)>>2)]=$10;
  return;
 }
}
function __ZNK12Nes_Vrc6_Apu8Vrc6_Osc6periodEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=(($this+2)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=$3<<8;
 $5=$4&3840;
 $6=(($this+1)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=$5|$8;
 $10=((($9)+(1))|0);
 return (($10)|0);
}
function __ZN7Nsf_Emu8pcm_readEPvj($emu,$addr){
 $emu=($emu)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($emu+272)|0);
 $2=$1;
 $3=((__ZN7Nes_Cpu8get_codeEj($2,$addr))|0);
 $4=((HEAP8[($3)])|0);
 $5=($4&255);
 return (($5)|0);
}
function __ZN7Nsf_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$16=0,$18$0=0,$18$1=0,$21$0=0,$21$1=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 __ZN7Nes_CpuC2Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuC2Ev($3);
 $4=$this;
 HEAP32[(($4)>>2)]=13512;
 $5=(($this+2540)|0);
 __ZN8Rom_DataILi4096EEC1Ev($5);
 $6=(($this+2576)|0);
 __ZN7Nes_ApuC2Ev($6);
 $8=(($this)|0);
 $9=(($this+2568)|0);
 HEAP32[(($9)>>2)]=0;
 $10=(($this+2564)|0);
 HEAP32[(($10)>>2)]=0;
 $11=(($this+2572)|0);
 HEAP32[(($11)>>2)]=0;
 $12=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($12,176);
 $13=$this;
 __ZN9Music_Emu21set_silence_lookaheadEi($13,6);
 __ZN7Nes_Apu10dmc_readerEPFiPvjES0_($6,70,$8);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($13,17616);
 __ZN9Music_Emu8set_gainEd($13,1.4);
 $16=(($this+13704)|0);
 _memset((((($16)|0))|0), ((((-14)|0))|0), ((((2056)|0))|0));
 return;
}
function __ZN7Nes_CpuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+2060)|0);
 $2=(($this+2056)|0);
 HEAP32[(($2)>>2)]=$1;
 return;
}
function __ZN8Rom_DataILi4096EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Rom_DataILi4096EEC2Ev($this);
 return;
}
function __ZN7Nes_Apu10dmc_readerEPFiPvjES0_($this,$func,$user_data){
 $this=($this)|0;
 $func=($func)|0;
 $user_data=($user_data)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+1368)|0);
 HEAP32[(($1)>>2)]=$user_data;
 $2=(($this+1364)|0);
 HEAP32[(($2)>>2)]=$func;
 return;
}
function __ZN8Rom_DataILi4096EED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Rom_DataILi4096EED2Ev($this);
 return;
}
function __ZN7Nsf_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Nsf_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Nsf_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$11=0,$12=0,$10$0=0,$10$1=0,$15$0=0,$15$1=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=13512;
 $2=$this;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 FUNCTION_TABLE_vi[($5)&255]($this);
 $7=(($this+2540)|0);
 __ZN8Rom_DataILi4096EED1Ev($7);
 $8=(($this)|0);
 __ZN11Classic_EmuD2Ev($8);
 return;
}
function __ZN7Nsf_Emu6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$11=0,$13=0,$14=0,$15=0,$17=0,$19=0,$20=0,label=0;
 $1=(($this+2568)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  $5=(($2)|0);
  __ZN12Nes_Vrc6_ApudlEPv($5);
 }
 HEAP32[(($1)>>2)]=0;
 $7=(($this+2564)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if (!($9)) {
  $11=$8;
  __ZN13Nes_Namco_ApudlEPv($11);
 }
 HEAP32[(($7)>>2)]=0;
 $13=(($this+2572)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)==0;
 if (!($15)) {
  $17=(($14)|0);
  __ZN12Nes_Fme7_ApudlEPv($17);
 }
 HEAP32[(($13)>>2)]=0;
 $19=(($this+2540)|0);
 __ZN8Rom_DataILi4096EE5clearEv($19);
 $20=$this;
 __ZN9Music_Emu6unloadEv($20);
 return;
}
function __ZN12Nes_Vrc6_ApudlEPv($p){
 $p=($p)|0;
 var label=0;
 _free($p);
 return;
}
function __ZN13Nes_Namco_ApudlEPv($p){
 $p=($p)|0;
 var label=0;
 _free($p);
 return;
}
function __ZN12Nes_Fme7_ApudlEPv($p){
 $p=($p)|0;
 var label=0;
 _free($p);
 return;
}
function __ZN8Rom_DataILi4096EE5clearEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN13blargg_vectorIhE5clearEv($1);
 return;
}
function __ZNK7Nsf_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+5384)|0);
 __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($h,$out){
 $h=($h)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,label=0;
 $1=(($out+272)|0);
 $2=(($h+14)|0);
 __ZN8Gme_File11copy_field_EPcPKci($1,$2,32);
 $3=(($out+784)|0);
 $4=(($h+46)|0);
 __ZN8Gme_File11copy_field_EPcPKci($3,$4,32);
 $5=(($out+1040)|0);
 $6=(($h+78)|0);
 __ZN8Gme_File11copy_field_EPcPKci($5,$6,32);
 $7=(($h+123)|0);
 $8=((HEAP8[($7)])|0);
 $9=(($8<<24)>>24)==0;
 if ($9) {
  return;
 }
 $11=(($out+16)|0);
 __ZN8Gme_File11copy_field_EPcPKc($11,3296);
 return;
}
function __ZL11new_nsf_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(15760))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Nsf_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL12new_nsf_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(384))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Nsf_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Nsf_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$playback_rate_0=0,$standard_rate_0=0,$13=0,$standard_rate_0_playback_rate_0=0,$14=0,$15=0,$or_cond=0,$17=.0,$18=.0,$19=.0;
 var $20=.0,$21=.0,$22=0,$24=0,label=0;
 $1=(($this+5494)|0);
 $2=((__Z8get_le16PKv($1))|0);
 $3=(($this+2504)|0);
 HEAPF64[(($3)>>3)]=1789772.72727;
 $4=(($this+2528)|0);
 HEAP32[(($4)>>2)]=357366;
 $5=(($this+2512)|0);
 $6=((HEAP8[($5)])|0);
 $7=$6&1;
 $8=(($7<<24)>>24)==0;
 if ($8) {
  $standard_rate_0=16666;$playback_rate_0=$2;
 } else {
  HEAP32[(($4)>>2)]=398964;
  HEAPF64[(($3)>>3)]=1662607.125;
  $10=(($this+5504)|0);
  $11=((__Z8get_le16PKv($10))|0);
  $standard_rate_0=20000;$playback_rate_0=$11;
 }
 $13=($playback_rate_0|0)==0;
 $standard_rate_0_playback_rate_0=($13?$standard_rate_0:$playback_rate_0);
 $14=($standard_rate_0_playback_rate_0|0)!=($standard_rate_0|0);
 $15=$t!=(1.0);
 $or_cond=$14|$15;
 if (!($or_cond)) {
  $24=(($this+2576)|0);
  __ZN7Nes_Apu9set_tempoEd($24,$t);
  return;
 }
 $17=(+((($standard_rate_0_playback_rate_0>>>0))>>>0));
 $18=(+(HEAPF64[(($3)>>3)]));
 $19=($17)*($18);
 $20=($t)*((83333.33333333333));
 $21=($19)/($20);
 $22=(~~($21));
 HEAP32[(($4)>>2)]=$22;
 $24=(($this+2576)|0);
 __ZN7Nes_Apu9set_tempoEd($24,$t);
 return;
}
function __ZN7Nsf_Emu10init_soundEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$9=0,$10=.0,$11=0,$12=0,$13=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$24=0,$27=0,$28=0;
 var $30=0,$31=.0,$adjusted_gain_0=.0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$41=0,$44=0,$45=0,$47=0,$48=.0,$49=0,$50=0,$51=0,$adjusted_gain_1=.0,$54=0,$55=0;
 var $56=0,$58=0,$59=0,$60=0,$62=0,$65=0,$66=0,$68=0,$69=.0,$adjusted_gain_2=.0,$71=0,$72=0,$73=0,$76=0,$77=0,$78=0,$81=0,$82=0,$83=0,$86=0;
 var $_0=0,$_017=0,$_016=0,$89$0=0,$89$1=0,$90$0=0,$90$1=0,$26$0=0,$26$1=0,$43$0=0,$43$1=0,$64$0=0,$64$1=0,label=0;
 $1=(($this+5507)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&-50;
 $4=(($3<<24)>>24)==0;
 if (!($4)) {
  $6=$this;
  __ZN8Gme_File11set_warningEPKc($6,4632);
 }
 $8=$this;
 __ZN9Music_Emu15set_voice_countEi($8,5);
 __ZN9Music_Emu15set_voice_namesEPKPKc($8,10328);
 $9=(($this)|0);
 __ZN11Classic_Emu15set_voice_typesEPKi($9,10352);
 $10=(+(__ZNK9Music_Emu4gainEv($8)));
 $11=((HEAP8[($1)])|0);
 $12=$11&49;
 $13=(($12<<24)>>24)==0;
 if (!($13)) {
  __ZN9Music_Emu15set_voice_countEi($8,8);
 }
 $16=((HEAP8[($1)])|0);
 $17=$16&16;
 $18=(($17<<24)>>24)==0;
 do {
  if ($18) {
   $adjusted_gain_0=$10;
  } else {
   $20=((__ZN13Nes_Namco_ApunwEj(1048))|0);
   $21=($20|0)==0;
   if ($21) {
    $22=(($this+2564)|0);
    HEAP32[(($22)>>2)]=0;
    $_0=880;
    return (($_0)|0);
   } else {
    $24=$20;
    __ZN13Nes_Namco_ApuC2Ev($24);
    $30=(($this+2564)|0);
    HEAP32[(($30)>>2)]=$24;
    $31=($10)*((0.75));
    __ZN9Music_Emu15set_voice_countEi($8,13);
    __ZN9Music_Emu15set_voice_namesEPKPKc($8,10544);
    $adjusted_gain_0=$31;
    break;
   }
  }
 } while(0);
 $33=((HEAP8[($1)])|0);
 $34=$33&1;
 $35=(($34<<24)>>24)==0;
 do {
  if ($35) {
   $adjusted_gain_1=$adjusted_gain_0;
  } else {
   $37=((__ZN12Nes_Vrc6_ApunwEj(1456))|0);
   $38=($37|0)==0;
   if ($38) {
    $39=(($this+2568)|0);
    HEAP32[(($39)>>2)]=0;
    $_0=880;
    return (($_0)|0);
   }
   $41=$37;
   __ZN12Nes_Vrc6_ApuC2Ev($41);
   $47=(($this+2568)|0);
   HEAP32[(($47)>>2)]=$41;
   $48=($adjusted_gain_0)*((0.75));
   __ZN9Music_Emu15set_voice_countEi($8,8);
   __ZN9Music_Emu15set_voice_namesEPKPKc($8,10512);
   $49=((HEAP8[($1)])|0);
   $50=$49&16;
   $51=(($50<<24)>>24)==0;
   if ($51) {
    $adjusted_gain_1=$48;
    break;
   }
   __ZN9Music_Emu15set_voice_countEi($8,16);
   __ZN9Music_Emu15set_voice_namesEPKPKc($8,10448);
   $adjusted_gain_1=$48;
  }
 } while(0);
 $54=((HEAP8[($1)])|0);
 $55=$54&32;
 $56=(($55<<24)>>24)==0;
 do {
  if ($56) {
   $adjusted_gain_2=$adjusted_gain_1;
  } else {
   $58=((__ZN12Nes_Fme7_ApunwEj(872))|0);
   $59=($58|0)==0;
   if ($59) {
    $60=(($this+2572)|0);
    HEAP32[(($60)>>2)]=0;
    $_0=880;
    return (($_0)|0);
   } else {
    $62=$58;
    __ZN12Nes_Fme7_ApuC1Ev($62);
    $68=(($this+2572)|0);
    HEAP32[(($68)>>2)]=$62;
    $69=($adjusted_gain_1)*((0.75));
    __ZN9Music_Emu15set_voice_countEi($8,8);
    __ZN9Music_Emu15set_voice_namesEPKPKc($8,10416);
    $adjusted_gain_2=$69;
    break;
   }
  }
 } while(0);
 $71=(($this+2564)|0);
 $72=((HEAP32[(($71)>>2)])|0);
 $73=($72|0)==0;
 if (!($73)) {
  __ZN13Nes_Namco_Apu6volumeEd($72,$adjusted_gain_2);
 }
 $76=(($this+2568)|0);
 $77=((HEAP32[(($76)>>2)])|0);
 $78=($77|0)==0;
 if (!($78)) {
  __ZN12Nes_Vrc6_Apu6volumeEd($77,$adjusted_gain_2);
 }
 $81=(($this+2572)|0);
 $82=((HEAP32[(($81)>>2)])|0);
 $83=($82|0)==0;
 if (!($83)) {
  __ZN12Nes_Fme7_Apu6volumeEd($82,$adjusted_gain_2);
 }
 $86=(($this+2576)|0);
 __ZN7Nes_Apu6volumeEd($86,$adjusted_gain_2);
 $_0=0;
 return (($_0)|0);
}
function __ZN13Nes_Namco_ApunwEj($s){
 $s=($s)|0;
 var $1=0,label=0;
 $1=((_malloc($s))|0);
 return (($1)|0);
}
function __ZN12Nes_Vrc6_ApunwEj($s){
 $s=($s)|0;
 var $1=0,label=0;
 $1=((_malloc($s))|0);
 return (($1)|0);
}
function __ZN12Nes_Fme7_ApunwEj($s){
 $s=($s)|0;
 var $1=0,label=0;
 $1=((_malloc($s))|0);
 return (($1)|0);
}
function __ZN12Nes_Fme7_ApuC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN12Nes_Fme7_ApuC2Ev($this);
 return;
}
function __ZN12Nes_Fme7_Apu6volumeEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,$2=.0,label=0;
 $1=(($this+56)|0);
 $2=($v)*((0.001979166666666667));
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$2);
 return;
}
function __ZN7Nsf_Emu5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$_=0,$30=0,$31=0,$_pr=0,$34=0,$35=0,$38=0,$40=0,$41=0,$43=0,$44=0,$_15=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$i_0=0,$52=0,$54=0,$55=0,$extract_t=0,$extract_t_=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$65=0,$ld$0$0=0,$66$0=0,$ld$1$1=0,$66$1=0;
 var $st$2$0=0,$st$3$1=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=.0,$75=0,$76=0,$77=.0,$78=.0,$79=0,$80=0,$_0=0,label=0;
 $1=(($this+2540)|0);
 $2=(($this+5384)|0);
 $3=((__ZN8Rom_DataILi4096EE4loadER11Data_ReaderiPvi($1,$in,128,$2,0))|0);
 $4=($3|0)==0;
 if (!($4)) {
  $_0=$3;
  return (($_0)|0);
 }
 $6=$this;
 $7=(($this+5390)|0);
 $8=((HEAP8[($7)])|0);
 $9=($8&255);
 __ZN8Gme_File15set_track_countEi($6,$9);
 $10=((__ZL16check_nsf_headerPKv($2))|0);
 $11=($10|0)==0;
 if (!($11)) {
  $_0=$10;
  return (($_0)|0);
 }
 $13=(($this+5389)|0);
 $14=((HEAP8[($13)])|0);
 $15=(($14<<24)>>24)==1;
 if (!($15)) {
  __ZN8Gme_File11set_warningEPKc($6,4744);
 }
 $18=((__ZN7Nsf_Emu10init_soundEv($this))|0);
 $19=($18|0)==0;
 if (!($19)) {
  $_0=$18;
  return (($_0)|0);
 }
 $21=(($this+5392)|0);
 $22=((__Z8get_le16PKv($21))|0);
 $23=(($this+5394)|0);
 $24=((__Z8get_le16PKv($23))|0);
 $25=(($this+2492)|0);
 HEAP32[(($25)>>2)]=$24;
 $26=(($this+5396)|0);
 $27=((__Z8get_le16PKv($26))|0);
 $28=(($this+2496)|0);
 HEAP32[(($28)>>2)]=$27;
 $29=($22|0)==0;
 $_=($29?32768:$22);
 $30=((HEAP32[(($25)>>2)])|0);
 $31=($30|0)==0;
 if ($31) {
  HEAP32[(($25)>>2)]=32768;
  $_pr=((HEAP32[(($28)>>2)])|0);
  $34=$_pr;
 } else {
  $34=$27;
 }
 $35=($34|0)==0;
 if ($35) {
  HEAP32[(($28)>>2)]=32768;
 }
 $38=($_>>>0)<((32768)>>>0);
 do {
  if (!($38)) {
   $40=((HEAP32[(($25)>>2)])|0);
   $41=($40>>>0)<((32768)>>>0);
   if ($41) {
    break;
   }
   $46=$_&4095;
   __ZN8Rom_DataILi4096EE8set_addrEl($1,$46);
   $47=((__ZNK8Rom_DataILi4096EE4sizeEv($1))|0);
   $48=(((($47|0))/(4096))&-1);
   $49=((($_)-(32768))|0);
   $50=$49>>>12;
   $i_0=0;
   while(1) {
    $52=($i_0|0)<8;
    if (!($52)) {
     break;
    }
    $54=((($i_0)-($50))|0);
    $55=($54>>>0)<($48>>>0);
    $extract_t=(($54)&255);
    $extract_t_=($55?$extract_t:0);
    $56=(($this+2484+$i_0)|0);
    HEAP8[($56)]=$extract_t_;
    $57=(($this+5496+$i_0)|0);
    $58=((HEAP8[($57)])|0);
    $59=(($58<<24)>>24)==0;
    $60=((($i_0)+(1))|0);
    if ($59) {
     $i_0=$60;
    } else {
     label = 1521;
     break;
    }
   }
   if ((label|0) == 1521) {
    $62=(($this+2484)|0);
    $63=(($this+5496)|0);
    $64=$63;
    $65=$62;
    $ld$0$0=(($64)|0);
    $66$0=((((((HEAPU8[($ld$0$0)])|0))|(((HEAPU8[((($ld$0$0)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$0$0)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$0$0)+(3))|0)])|0)<<24))|0));
    $ld$1$1=(($64+4)|0);
    $66$1=((((((HEAPU8[($ld$1$1)])|0))|(((HEAPU8[((($ld$1$1)+(1))|0)])|0)<<8)|(((HEAPU8[((($ld$1$1)+(2))|0)])|0)<<16)|(((HEAPU8[((($ld$1$1)+(3))|0)])|0)<<24))|0));
    $st$2$0=(($65)|0);
    tempBigInt=$66$0;HEAP8[($st$2$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))|0)]=tempBigInt&0xff;
    $st$3$1=(($65+4)|0);
    tempBigInt=$66$1;HEAP8[($st$3$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))|0)]=tempBigInt&0xff;
   }
   $67=(($this+5506)|0);
   $68=((HEAP8[($67)])|0);
   $69=$68&3;
   $70=(($69<<24)>>24)==1;
   $71=(($this+2512)|0);
   $72=($70&1);
   HEAP8[($71)]=$72;
   HEAP8[($67)]=0;
   $73=$this;
   $74=(+(__ZNK9Music_Emu5tempoEv($73)));
   __ZN9Music_Emu9set_tempoEd($73,$74);
   $75=(($this)|0);
   $76=(($this+2504)|0);
   $77=(+(HEAPF64[(($76)>>3)]));
   $78=($77)+((0.5));
   $79=(~~($78));
   $80=((__ZN11Classic_Emu12setup_bufferEl($75,$79))|0);
   $_0=$80;
   return (($_0)|0);
  }
 } while(0);
 $43=((__ZN8Gme_File7warningEv($6))|0);
 $44=($43|0)==0;
 $_15=($44?4456:$43);
 $_0=$_15;
 return (($_0)|0);
}
function __ZN8Rom_DataILi4096EE4loadER11Data_ReaderiPvi($this,$in,$header_size,$header_out,$fill){
 $this=($this)|0;
 $in=($in)|0;
 $header_size=($header_size)|0;
 $header_out=($header_out)|0;
 $fill=($fill)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((__ZN9Rom_Data_14load_rom_data_ER11Data_ReaderiPvil($1,$in,$header_size,$header_out,$fill,4104))|0);
 return (($2)|0);
}
function __ZL16check_nsf_headerPKv($header){
 $header=($header)|0;
 var $1=0,$2=0,$_=0,label=0;
 $1=((_memcmp((($header)|0),((3360)|0),((5)|0)))|0);
 $2=($1|0)==0;
 $_=($2?0:16);
 return (($_)|0);
}
function __ZN8Rom_DataILi4096EE8set_addrEl($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_9set_addr_Eli($1,$addr,4096);
 return;
}
function __ZN7Nsf_Emu9update_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,label=0;
 $1=(($this+2576)|0);
 __ZN7Nes_Apu9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+2564)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($3|0)==0;
 if (!($4)) {
  __ZN13Nes_Namco_Apu9treble_eqERK9blip_eq_t($3,$eq);
 }
 $7=(($this+2568)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if (!($9)) {
  __ZN12Nes_Vrc6_Apu9treble_eqERK9blip_eq_t($8,$eq);
 }
 $12=(($this+2572)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($13|0)==0;
 if ($14) {
  return;
 }
 __ZN12Nes_Fme7_Apu9treble_eqERK9blip_eq_t($13,$eq);
 return;
}
function __ZN13Nes_Namco_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+232)|0);
 __ZN10Blip_SynthILi12ELi15EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN12Nes_Vrc6_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+80)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+640)|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
 return;
}
function __ZN12Nes_Fme7_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+56)|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Nsf_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$buf,$0,$1){
 $this=($this)|0;
 $i=($i)|0;
 $buf=($buf)|0;
 $0=($0)|0;
 $1=($1)|0;
 var $3=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$or_cond=0,$14=0,$15=0,$16=0,$19=0,$20=0,$_=0,$22=0,$_1=0,$24=0,$25=0,$26=0,$27=0;
 var $or_cond15=0,label=0;
 $3=($i|0)<5;
 if ($3) {
  $5=(($this+2576)|0);
  __ZN7Nes_Apu10osc_outputEiP11Blip_Buffer($5,$i,$buf);
  return;
 }
 $7=((($i)-(5))|0);
 $8=(($this+2572)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)!=0;
 $11=($7|0)<3;
 $or_cond=$10&$11;
 if ($or_cond) {
  __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($9,$7,$buf);
  return;
 }
 $14=(($this+2568)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=($15|0)==0;
 do {
  if ($16) {
   $_1=$7;
  } else {
   if (!($11)) {
    $22=((($i)-(8))|0);
    $_1=$22;
    break;
   }
   $19=((($i)-(6))|0);
   $20=($19|0)<0;
   $_=($20?2:$19);
   __ZN12Nes_Vrc6_Apu10osc_outputEiP11Blip_Buffer($15,$_,$buf);
   return;
  }
 } while(0);
 $24=(($this+2564)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)!=0;
 $27=($_1|0)<8;
 $or_cond15=$26&$27;
 if (!($or_cond15)) {
  return;
 }
 __ZN13Nes_Namco_Apu10osc_outputEiP11Blip_Buffer($25,$_1,$buf);
 return;
}
function __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,$i,$buf){
 $this=($this)|0;
 $i=($i)|0;
 $buf=($buf)|0;
 var $1=0,$4=0,label=0;
 $1=($i>>>0)<((3)>>>0);
 if ($1) {
  $4=(($this+24+($i<<3))|0);
  HEAP32[(($4)>>2)]=$buf;
  return;
 } else {
  ___assert_fail(((3816)|0),((3904)|0),((77)|0),((9344)|0));
 }
}
function __ZN7Nsf_Emu14cpu_write_miscEji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$11=0,$13=0,$14=0,$15=0,$17=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0;
 var $31=0,$or_cond=0,$33=0,$34=0,$35=0,$36=0,label=0;
 $1=(($this+2564)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 do {
  if (!($3)) {
   if (((($addr|0))|0)==((18432)|0)) {
    $6=(($this+272)|0);
    $7=$6;
    $8=((__ZNK7Nes_Cpu4timeEv($7))|0);
    __ZN13Nes_Namco_Apu10write_dataEii($2,$8,$data);
    return;
   } else if (((($addr|0))|0)==((63488)|0)) {
    __ZN13Nes_Namco_Apu10write_addrEi($2,$data);
    return;
   } else {
    break;
   }
  }
 } while(0);
 $11=($addr>>>0)>((49151)>>>0);
 do {
  if ($11) {
   $13=(($this+2572)|0);
   $14=((HEAP32[(($13)>>2)])|0);
   $15=($14|0)==0;
   if ($15) {
    break;
   }
   $17=$addr&57344;
   if (((($17|0))|0)==((49152)|0)) {
    __ZN12Nes_Fme7_Apu11write_latchEi($14,$data);
    return;
   } else if (((($17|0))|0)==((57344)|0)) {
    $20=(($this+272)|0);
    $21=$20;
    $22=((__ZNK7Nes_Cpu4timeEv($21))|0);
    __ZN12Nes_Fme7_Apu10write_dataEii($14,$22,$data);
    return;
   } else {
    break;
   }
  }
 } while(0);
 $24=(($this+2568)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)==0;
 if ($26) {
  return;
 }
 $28=$addr&4095;
 $29=((($addr)-(36864))|0);
 $30=($29>>>0)<((12288)>>>0);
 $31=($28>>>0)<((3)>>>0);
 $or_cond=$30&$31;
 if (!($or_cond)) {
  return;
 }
 $33=$29>>>12;
 $34=(($this+272)|0);
 $35=$34;
 $36=((__ZNK7Nes_Cpu4timeEv($35))|0);
 __ZN12Nes_Vrc6_Apu9write_oscEiiii($25,$36,$33,$28,$data);
 return;
}
function __ZN13Nes_Namco_Apu10write_dataEii($this,$time,$data){
 $this=($this)|0;
 $time=($time)|0;
 $data=($data)|0;
 var $1=0,$2=0,label=0;
 __ZN13Nes_Namco_Apu9run_untilEi($this,$time);
 $1=(($data)&255);
 $2=((__ZN13Nes_Namco_Apu6accessEv($this))|0);
 HEAP8[($2)]=$1;
 return;
}
function __ZN13Nes_Namco_Apu10write_addrEi($this,$v){
 $this=($this)|0;
 $v=($v)|0;
 var $1=0,label=0;
 $1=(($this+100)|0);
 HEAP32[(($1)>>2)]=$v;
 return;
}
function __ZN12Nes_Fme7_Apu11write_latchEi($this,$data){
 $this=($this)|0;
 $data=($data)|0;
 var $1=0,$2=0,label=0;
 $1=(($data)&255);
 $2=(($this+17)|0);
 HEAP8[($2)]=$1;
 return;
}
function __ZN12Nes_Fme7_Apu10write_dataEii($this,$time,$data){
 $this=($this)|0;
 $time=($time)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+17)|0);
 $2=((HEAP8[($1)])|0);
 $3=((($2&255))>>>0)>((13)>>>0);
 if ($3) {
  return;
 }
 __ZN12Nes_Fme7_Apu9run_untilEi($this,$time);
 $5=(($data)&255);
 $6=((HEAP8[($1)])|0);
 $7=($6&255);
 $8=(($this+$7)|0);
 HEAP8[($8)]=$5;
 return;
}
function __ZN7Nsf_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$52=0,$53=0,$54=0,$57=0,$58=0,$59=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0;
 var $68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((__ZN11Classic_Emu12start_track_Ei($1,$track))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this+272)|0);
 $6=$5;
 _memset((((($5)|0))|0), ((((0)|0))|0), ((((2048)|0))|0));
 $7=(($this+5512)|0);
 _memset((((($7)|0))|0), ((((0)|0))|0), ((((8192)|0))|0));
 $8=(($this+13704)|0);
 __ZN7Nes_Cpu5resetEPKv($6,$8);
 __ZN7Nes_Cpu8map_codeEjjPKvb($6,24576,8192,$7,0);
 $9=(($this+2484)|0);
 $10=((HEAP8[($9)])|0);
 $11=($10&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24568,$11);
 $12=(($this+2485)|0);
 $13=((HEAP8[($12)])|0);
 $14=($13&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24569,$14);
 $15=(($this+2486)|0);
 $16=((HEAP8[($15)])|0);
 $17=($16&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24570,$17);
 $18=(($this+2487)|0);
 $19=((HEAP8[($18)])|0);
 $20=($19&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24571,$20);
 $21=(($this+2488)|0);
 $22=((HEAP8[($21)])|0);
 $23=($22&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24572,$23);
 $24=(($this+2489)|0);
 $25=((HEAP8[($24)])|0);
 $26=($25&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24573,$26);
 $27=(($this+2490)|0);
 $28=((HEAP8[($27)])|0);
 $29=($28&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24574,$29);
 $30=(($this+2491)|0);
 $31=((HEAP8[($30)])|0);
 $32=($31&255);
 __ZN7Nsf_Emu9cpu_writeEji($this,24575,$32);
 $33=(($this+2576)|0);
 $34=(($this+2512)|0);
 $35=((HEAP8[($34)])|0);
 $36=$35&1;
 $37=(($36<<24)>>24)!=0;
 $38=(($this+5506)|0);
 $39=((HEAP8[($38)])|0);
 $40=$39&32;
 $41=(($40<<24)>>24)!=0;
 $42=($41?63:0);
 __ZN7Nes_Apu5resetEbi($33,$37,$42);
 __ZN7Nes_Apu14write_registerEiji($33,0,16405,15);
 $43=((HEAP8[($38)])|0);
 $44=$43&16;
 $45=(($44<<24)>>24)!=0;
 $46=($45?128:0);
 __ZN7Nes_Apu14write_registerEiji($33,0,16407,$46);
 $47=(($this+2564)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=($48|0)==0;
 if (!($49)) {
  __ZN13Nes_Namco_Apu5resetEv($48);
 }
 $52=(($this+2568)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=($53|0)==0;
 if (!($54)) {
  __ZN12Nes_Vrc6_Apu5resetEv($53);
 }
 $57=(($this+2572)|0);
 $58=((HEAP32[(($57)>>2)])|0);
 $59=($58|0)==0;
 if (!($59)) {
  __ZN12Nes_Fme7_Apu5resetEv($58);
 }
 $62=(($this+2536)|0);
 HEAP32[(($62)>>2)]=4;
 $63=(($this+2532)|0);
 HEAP32[(($63)>>2)]=0;
 $64=(($this+2528)|0);
 $65=((HEAP32[(($64)>>2)])|0);
 $66=(((($65|0))/(12))&-1);
 $67=(($this+2524)|0);
 HEAP32[(($67)>>2)]=$66;
 $68=(($this+2514)|0);
 HEAP16[(($68)>>1)]=24568;
 $69=(($this+783)|0);
 HEAP8[($69)]=95;
 $70=(($this+782)|0);
 HEAP8[($70)]=-9;
 $71=(($this+2320)|0);
 $72=(($this+2326)|0);
 HEAP8[($72)]=-3;
 $73=(($this+2492)|0);
 $74=((HEAP32[(($73)>>2)])|0);
 $75=(($74)&65535);
 $76=$71;
 HEAP16[(($76)>>1)]=$75;
 $77=(($track)&255);
 $78=(($this+2322)|0);
 HEAP8[($78)]=$77;
 $79=((HEAP8[($34)])|0);
 $80=$79&1;
 $81=(($this+2323)|0);
 HEAP8[($81)]=$80;
 $_0=0;
 return (($_0)|0);
}
function __ZN7Nsf_Emu10run_clocksERii($this,$duration,$0){
 $this=($this)|0;
 $duration=($duration)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$38=0,$39=0,$41=0,$42=0,$ld$0$0=0,$44$0=0,$ld$1$1=0;
 var $44$1=0,$st$2$0=0,$st$3$1=0,$47=0,$48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$65=0,$66=0;
 var $ld$4$0=0,$68$0=0,$ld$5$1=0,$68$1=0,$st$6$0=0,$st$7$1=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$_sum=0,$76=0,$77=0,$78=0,$79=0,$80=0,$_sum12=0,$81=0;
 var $82=0,$83=0,$84=0,$85=0,$86=0,$88=0,$90=0,$91=0,$92=0,$93=0,$94=0,$_=0,$95=0,$96=0,$97=0,$98=0,$99=0,$101=0,$103=0,$104=0;
 var $105=0,$107=0,$109=0,$110=0,$111=0,$113=0,label=0;
 $2=(($this+272)|0);
 $3=$2;
 __ZN7Nes_Cpu8set_timeEi($3,0);
 $4=((__ZNK7Nes_Cpu4timeEv($3))|0);
 $5=((HEAP32[(($duration)>>2)])|0);
 $6=($4|0)<($5|0);
 if ($6) {
  $7=(($this+2524)|0);
  $8=(($this+2320)|0);
  $9=$8;
  $10=(($this+2536)|0);
  $11=(($this+2514)|0);
  $12=(($11)|0);
  $13=$11;
  $14=$8;
  $15=$this;
  $16=(($this+2528)|0);
  $17=(($this+2532)|0);
  $18=(($this+2536)|0);
  $19=(($this+2320)|0);
  $20=$19;
  $21=(($this+2496)|0);
  $22=(($this+2326)|0);
  $23=(($this+2514)|0);
  $24=$19;
  $25=$23;
  $28=$4;$27=$5;
  while(1) {
   $29=((HEAP32[(($7)>>2)])|0);
   $30=((__Z3minIiET_S0_S0_($29,$27))|0);
   $31=((($28)+(32767))|0);
   $32=((__Z3minIiET_S0_S0_($30,$31))|0);
   $33=((__ZN7Nes_Cpu3runEi($3,$32))|0);
   do {
    if ($33) {
     $35=((HEAP16[(($9)>>1)])|0);
     $36=(($35<<16)>>16)==24568;
     if (!($36)) {
      __ZN8Gme_File11set_warningEPKc($15,4312);
      $38=((HEAP16[(($9)>>1)])|0);
      $39=((($38)+(1))&65535);
      HEAP16[(($9)>>1)]=$39;
      break;
     }
     HEAP32[(($10)>>2)]=1;
     $41=((HEAP16[(($12)>>1)])|0);
     $42=(($41<<16)>>16)==24568;
     if ($42) {
      __ZN7Nes_Cpu8set_timeEi($3,$32);
      break;
     } else {
      $ld$0$0=(($13)|0);
      $44$0=(((HEAPU16[(($ld$0$0)>>1)])|0)|(((HEAPU16[((($ld$0$0)+(2))>>1)])|0)<<16));
      $ld$1$1=(($13+4)|0);
      $44$1=(((HEAPU16[(($ld$1$1)>>1)])|0)|(((HEAPU16[((($ld$1$1)+(2))>>1)])|0)<<16));
      $st$2$0=(($14)|0);
      tempBigInt=$44$0;HEAP16[(($st$2$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$2$0)+(2))>>1)]=tempBigInt>>16;
      $st$3$1=(($14+4)|0);
      tempBigInt=$44$1;HEAP16[(($st$3$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$3$1)+(2))>>1)]=tempBigInt>>16;
      HEAP16[(($12)>>1)]=24568;
      break;
     }
    }
   } while(0);
   $47=((__ZNK7Nes_Cpu4timeEv($3))|0);
   $48=((HEAP32[(($7)>>2)])|0);
   $49=($47|0)<($48|0);
   do {
    if (!($49)) {
     $51=((HEAP32[(($16)>>2)])|0);
     $52=((HEAP32[(($17)>>2)])|0);
     $53=((($52)+($51))|0);
     $54=(((($53|0))/(12))&-1);
     $55=((($54)*(-12))&-1);
     $56=((($55)+($51))|0);
     HEAP32[(($17)>>2)]=$56;
     $57=((HEAP32[(($7)>>2)])|0);
     $58=((($57)+($54))|0);
     HEAP32[(($7)>>2)]=$58;
     $59=((HEAP32[(($18)>>2)])|0);
     $60=($59|0)==0;
     if ($60) {
      break;
     }
     $62=((($59)-(1))|0);
     HEAP32[(($18)>>2)]=$62;
     $63=($62|0)==0;
     if (!($63)) {
      break;
     }
     $65=((HEAP16[(($20)>>1)])|0);
     $66=(($65<<16)>>16)==24568;
     if (!($66)) {
      $ld$4$0=(($24)|0);
      $68$0=(((HEAPU16[(($ld$4$0)>>1)])|0)|(((HEAPU16[((($ld$4$0)+(2))>>1)])|0)<<16));
      $ld$5$1=(($24+4)|0);
      $68$1=(((HEAPU16[(($ld$5$1)>>1)])|0)|(((HEAPU16[((($ld$5$1)+(2))>>1)])|0)<<16));
      $st$6$0=(($25)|0);
      tempBigInt=$68$0;HEAP16[(($st$6$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$6$0)+(2))>>1)]=tempBigInt>>16;
      $st$7$1=(($25+4)|0);
      tempBigInt=$68$1;HEAP16[(($st$7$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$7$1)+(2))>>1)]=tempBigInt>>16;
     }
     $70=((HEAP32[(($21)>>2)])|0);
     $71=(($70)&65535);
     HEAP16[(($20)>>1)]=$71;
     $72=((HEAP8[($22)])|0);
     $73=((($72)-(1))&255);
     HEAP8[($22)]=$73;
     $74=($72&255);
     $75=$74|256;
     $_sum=((($75)+(272))|0);
     $76=(($this+$_sum)|0);
     HEAP8[($76)]=95;
     $77=((HEAP8[($22)])|0);
     $78=((($77)-(1))&255);
     HEAP8[($22)]=$78;
     $79=($77&255);
     $80=$79|256;
     $_sum12=((($80)+(272))|0);
     $81=(($this+$_sum12)|0);
     HEAP8[($81)]=-9;
    }
   } while(0);
   $82=((__ZNK7Nes_Cpu4timeEv($3))|0);
   $83=((HEAP32[(($duration)>>2)])|0);
   $84=($82|0)<($83|0);
   if ($84) {
    $28=$82;$27=$83;
   } else {
    break;
   }
  }
 }
 $85=((__ZNK7Nes_Cpu11error_countEv($3))|0);
 $86=($85|0)==0;
 if (!($86)) {
  __ZN7Nes_Cpu17clear_error_countEv($3);
  $88=$this;
  __ZN8Gme_File11set_warningEPKc($88,4312);
 }
 $90=((__ZNK7Nes_Cpu4timeEv($3))|0);
 HEAP32[(($duration)>>2)]=$90;
 $91=(($this+2524)|0);
 $92=((HEAP32[(($91)>>2)])|0);
 $93=((($92)-($90))|0);
 $94=($93|0)<0;
 $_=($94?0:$93);
 HEAP32[(($91)>>2)]=$_;
 $95=(($this+2576)|0);
 $96=((HEAP32[(($duration)>>2)])|0);
 __ZN7Nes_Apu9end_frameEi($95,$96);
 $97=(($this+2564)|0);
 $98=((HEAP32[(($97)>>2)])|0);
 $99=($98|0)==0;
 if (!($99)) {
  $101=((HEAP32[(($duration)>>2)])|0);
  __ZN13Nes_Namco_Apu9end_frameEi($98,$101);
 }
 $103=(($this+2568)|0);
 $104=((HEAP32[(($103)>>2)])|0);
 $105=($104|0)==0;
 if (!($105)) {
  $107=((HEAP32[(($duration)>>2)])|0);
  __ZN12Nes_Vrc6_Apu9end_frameEi($104,$107);
 }
 $109=(($this+2572)|0);
 $110=((HEAP32[(($109)>>2)])|0);
 $111=($110|0)==0;
 if ($111) {
  return ((0)|0);
 }
 $113=((HEAP32[(($duration)>>2)])|0);
 __ZN12Nes_Fme7_Apu9end_frameEi($110,$113);
 return ((0)|0);
}
function __ZN7Nes_Cpu8set_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+2056)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+132)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($t)-($4))|0);
 $6=(($2+136)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}
function __ZNK7Nes_Cpu11error_countEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+2208)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN7Nes_Cpu17clear_error_countEv($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+2208)|0);
 HEAP32[(($1)>>2)]=0;
 return;
}
function __ZN12Nes_Fme7_Apu9end_frameEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$10=0,label=0;
 $1=(($this+48)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($time|0);
 if ($3) {
  __ZN12Nes_Fme7_Apu9run_untilEi($this,$time);
 }
 $6=((HEAP32[(($1)>>2)])|0);
 $7=($6|0)<($time|0);
 if ($7) {
  ___assert_fail(((3984)|0),((3904)|0),((115)|0),((9472)|0));
 } else {
  $10=((($6)-($time))|0);
  HEAP32[(($1)>>2)]=$10;
  return;
 }
}
function __ZN10Blip_SynthILi12ELi15EE9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN11Blip_Synth_9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN12Nes_Fme7_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+56)|0);
 __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
 __ZN12Nes_Fme7_Apu6outputEP11Blip_Buffer($this,0);
 __ZN12Nes_Fme7_Apu6volumeEd($this,1.0);
 __ZN12Nes_Fme7_Apu5resetEv($this);
 return;
}
function __ZN12Nes_Fme7_Apu6outputEP11Blip_Buffer($this,$buf){
 $this=($this)|0;
 $buf=($buf)|0;
 var label=0;
 __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,0,$buf);
 __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,1,$buf);
 __ZN12Nes_Fme7_Apu10osc_outputEiP11Blip_Buffer($this,2,$buf);
 return;
}
function __ZN8Nsf_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Nsf_FileC2Ev($this);
 return;
}
function __ZN8Nsf_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12712;
 $3=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($3,176);
 return;
}
function __ZN8Nsf_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Nsf_FileD2Ev($this);
 return;
}
function __ZN8Nsf_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Nsf_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Nsf_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$_0=0;
 var label=0;
 $1=$in;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+252)|0);
 $6=((FUNCTION_TABLE_iiii[($4)&127]($in,$5,128))|0);
 $7=($6|0)==0;
 if (!($7)) {
  $9=($6|0)==17648;
  $10=($9?16:$6);
  $_0=$10;
  return (($_0)|0);
 }
 $12=(($this+375)|0);
 $13=((HEAP8[($12)])|0);
 $14=$13&-50;
 $15=(($14<<24)>>24)==0;
 if (!($15)) {
  $17=$this;
  __ZN8Gme_File11set_warningEPKc($17,4632);
 }
 $19=$this;
 $20=(($this+258)|0);
 $21=((HEAP8[($20)])|0);
 $22=($21&255);
 __ZN8Gme_File15set_track_countEi($19,$22);
 $23=((__ZL16check_nsf_headerPKv($5))|0);
 $_0=$23;
 return (($_0)|0);
}
function __ZNK8Nsf_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+252)|0);
 __ZL15copy_nsf_fieldsRKN7Nsf_Emu8header_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZN8Nsf_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_D2Ev($1);
 return;
}
function __ZN8Rom_DataILi4096EED2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_D2Ev($1);
 return;
}
function __ZN8Rom_DataILi4096EEC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN9Rom_Data_C2Ev($1);
 return;
}
function __ZN9Nsfe_InfoC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+1152)|0);
 __ZN13blargg_vectorIcEC1Ev($1);
 $2=(($this+1160)|0);
 __ZN13blargg_vectorIPKcEC1Ev($2);
 $3=(($this+1168)|0);
 __ZN13blargg_vectorIhEC1Ev($3);
 $4=(($this+1176)|0);
 __ZN13blargg_vectorIA4_cEC1Ev($4);
 $5=(($this+1188)|0);
 HEAP8[($5)]=0;
 return;
}
function __ZN13blargg_vectorIPKcEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIPKcEC2Ev($this);
 return;
}
function __ZN13blargg_vectorIA4_cEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIA4_cEC2Ev($this);
 return;
}
function __ZN13blargg_vectorIPKcED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIPKcED2Ev($this);
 return;
}
function __ZN9Nsfe_InfoD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+1176)|0);
 __ZN13blargg_vectorIA4_cED1Ev($1);
 $2=(($this+1168)|0);
 __ZN13blargg_vectorIhED1Ev($2);
 $3=(($this+1160)|0);
 __ZN13blargg_vectorIPKcED1Ev($3);
 $4=(($this+1152)|0);
 __ZN13blargg_vectorIcED1Ev($4);
 return;
}
function __ZN13blargg_vectorIA4_cED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13blargg_vectorIA4_cED2Ev($this);
 return;
}
function __ZN9Nsfe_Info16disable_playlistEb($this,$b){
 $this=($this)|0;
 $b=($b)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,label=0;
 $1=(($this+1188)|0);
 $2=($b&1);
 HEAP8[($1)]=$2;
 $3=(($this+1168)|0);
 $4=((__ZNK13blargg_vectorIhE4sizeEv($3))|0);
 $5=(($4)&255);
 $6=(($this+6)|0);
 HEAP8[($6)]=$5;
 $7=(($5<<24)>>24)==0;
 do {
  if (!($7)) {
   $9=((HEAP8[($1)])|0);
   $10=$9&1;
   $11=(($10<<24)>>24)==0;
   if (!($11)) {
    break;
   }
   return;
  }
 } while(0);
 $13=(($this+1184)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14)&255);
 HEAP8[($6)]=$15;
 return;
}
function __ZNK9Nsfe_Info11remap_trackEi($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$_0=0,label=0;
 $1=(($this+1188)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 if (!($4)) {
  $_0=$track;
  return (($_0)|0);
 }
 $6=(($this+1168)|0);
 $7=((__ZNK13blargg_vectorIhE4sizeEv($6))|0);
 $8=($7>>>0)>($track>>>0);
 if (!($8)) {
  $_0=$track;
  return (($_0)|0);
 }
 $10=((__ZNK13blargg_vectorIhEixEj($6,$track))|0);
 $11=((HEAP8[($10)])|0);
 $12=($11&255);
 $_0=$12;
 return (($_0)|0);
}
function __ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($this,$in,$nsf_emu){
 $this=($this)|0;
 $in=($in)|0;
 $nsf_emu=($nsf_emu)|0;
 var $signature=0,$block_header=0,$finfo=0,$chars=0,$strs=0,$sub=0,$rem=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0;
 var $17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$_062=0,$45=0,$46=0,$47=0,$48=0,$49=0,$51=0,$52=0,$54=0,$56=0,$57=0,$58=0;
 var $59=0,$60=0,$61=0,$63=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$_0_be=0,$79=0,$81=0,$82=0;
 var $83=0,$84=0,$85=0,$87=0,$89=0,$91=0,$92=0,$94=0,$96=0,$98=0,$100=0,$102=0,$104=0,$106=0,$108=0,$110=0,$112=0,$114=0,$_059=0,$_1=0;
 var $118=0,$119=0,$121=0,$122=0,$123=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$135=0,$136=0,$138=0,$139=0,$141=0,$142=0;
 var $143=0,$144=0,$145=0,$146=0,$149=0,$150=0,$151=0,$152=0,$153=0,$156=0,$159=0,$160=0,$163=0,$164=0,$166=0,$_0_=0,$168=0,$169=0,$170=0,$171=0;
 var $172=0,$_3=0,$_258=0,$_255=0,$174$0=0,$174$1=0,$175$0=0,$175$1=0,$117$0=0,$117$1=0,$158$0=0,$158$1=0,$162$0=0,$162$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+80)|0;
 $signature=((sp)|0);
 $block_header=(((sp)+(8))|0);
 $finfo=(((sp)+(16))|0);
 $chars=(((sp)+(32))|0);
 $strs=(((sp)+(40))|0);
 $sub=(((sp)+(48))|0);
 $rem=(((sp)+(64))|0);
 $1=$in;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($signature)|0);
 $6=((FUNCTION_TABLE_iiii[($4)&127]($in,$5,4))|0);
 $7=($6|0)==0;
 if (!($7)) {
  $9=($6|0)==17648;
  $10=($9?16:$6);
  $_3=$10;
  STACKTOP=sp;return (($_3)|0);
 }
 $12=((_memcmp((($5)|0),((2552)|0),((4)|0)))|0);
 $13=($12|0)==0;
 if (!($13)) {
  $_3=16;
  STACKTOP=sp;return (($_3)|0);
 }
 $15=(($this+1152)|0);
 __ZN13blargg_vectorIcE5clearEv($15);
 $16=(($this+1160)|0);
 __ZN13blargg_vectorIPKcE5clearEv($16);
 $17=(($this+1168)|0);
 __ZN13blargg_vectorIhE5clearEv($17);
 $18=(($this+1176)|0);
 __ZN13blargg_vectorIA4_cE5clearEv($18);
 $19=(($this)|0);
 (_memcpy((($19)|0), ((9680)|0), 128)|0);
 $20=(($block_header)|0);
 $21=(($block_header+4)|0);
 $22=$in;
 $23=(($finfo+8)|0);
 $24=(($finfo+9)|0);
 $25=(($finfo)|0);
 $26=$in;
 $27=(($finfo+6)|0);
 $28=(($this+122)|0);
 $29=(($finfo+7)|0);
 $30=(($this+123)|0);
 $31=(($this+6)|0);
 $32=(($this+1184)|0);
 $33=(($this+7)|0);
 $34=(($this+8)|0);
 $35=(($this+112)|0);
 $36=(($this+896)|0);
 $37=(($this+640)|0);
 $38=(($this+384)|0);
 $39=(($this+128)|0);
 $40=($nsf_emu|0)==0;
 $41=$in;
 $42=(($sub)|0);
 $43=$nsf_emu;
 $44=(($rem)|0);
 $_062=0;
 while(1) {
  $45=((HEAP32[(($1)>>2)])|0);
  $46=(($45+12)|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=((FUNCTION_TABLE_iiii[($47)&127]($in,$20,8))|0);
  $49=($48|0)==0;
  if (!($49)) {
   $_3=$48;
   label = 1730;
   break;
  }
  $51=((__Z8get_le32PKv($20))|0);
  $52=((__Z8get_le32PKv($21))|0);
  if (((($52|0))|0)==((1701669236)|0)) {
   $121=(((($51|0))/(4))&-1);
   $122=((__ZN13blargg_vectorIA4_cE6resizeEj($18,$121))|0);
   $123=($122|0)==0;
   if (!($123)) {
    $_3=$122;
    label = 1722;
    break;
   }
   $125=((HEAP32[(($1)>>2)])|0);
   $126=(($125+12)|0);
   $127=((HEAP32[(($126)>>2)])|0);
   $128=((__ZNK13blargg_vectorIA4_cE5beginEv($18))|0);
   $129=(($128)|0);
   $130=((__ZNK13blargg_vectorIA4_cE4sizeEv($18))|0);
   $131=$130<<2;
   $132=((FUNCTION_TABLE_iiii[($127)&127]($in,$129,$131))|0);
   $133=($132|0)==0;
   if ($133) {
    $_0_be=$_062;
   } else {
    $_3=$132;
    label = 1734;
    break;
   }
  } else if (((($52|0))|0)==((1145980238)|0)) {
   $_3=0;
   label = 1731;
   break;
  } else if (((($52|0))|0)==((1330007625)|0)) {
   $54=($51|0)<8;
   if ($54) {
    $_3=6504;
    label = 1725;
    break;
   }
   HEAP8[($23)]=1;
   HEAP8[($24)]=0;
   $56=((HEAP32[(($1)>>2)])|0);
   $57=(($56+12)|0);
   $58=((HEAP32[(($57)>>2)])|0);
   $59=((__Z3minIiET_S0_S0_($51,16))|0);
   $60=((FUNCTION_TABLE_iiii[($58)&127]($in,$25,$59))|0);
   $61=($60|0)==0;
   if (!($61)) {
    $_3=$60;
    label = 1738;
    break;
   }
   $63=($51|0)>16;
   if ($63) {
    $65=((HEAP32[(($26)>>2)])|0);
    $66=(($65+20)|0);
    $67=((HEAP32[(($66)>>2)])|0);
    $68=((($51)-(16))|0);
    $69=((FUNCTION_TABLE_iii[($67)&127]($in,$68))|0);
    $70=($69|0)==0;
    if (!($70)) {
     $_3=$69;
     label = 1721;
     break;
    }
   }
   $72=((HEAP8[($27)])|0);
   HEAP8[($28)]=$72;
   $73=((HEAP8[($29)])|0);
   HEAP8[($30)]=$73;
   $74=((HEAP8[($23)])|0);
   HEAP8[($31)]=$74;
   $75=((HEAP8[($23)])|0);
   $76=($75&255);
   HEAP32[(($32)>>2)]=$76;
   $77=((HEAP8[($24)])|0);
   HEAP8[($33)]=$77;
   HEAP8[($34)]=((HEAP8[($25)])|0);HEAP8[((($34)+(1))|0)]=((HEAP8[((($25)+(1))|0)])|0);HEAP8[((($34)+(2))|0)]=((HEAP8[((($25)+(2))|0)])|0);HEAP8[((($34)+(3))|0)]=((HEAP8[((($25)+(3))|0)])|0);HEAP8[((($34)+(4))|0)]=((HEAP8[((($25)+(4))|0)])|0);HEAP8[((($34)+(5))|0)]=((HEAP8[((($25)+(5))|0)])|0);
   $_062=$_062;
   continue;
  } else if (((($52|0))|0)==((1818389620)|0)) {
   $135=((__ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$51,$15,$16))|0);
   $136=($135|0)==0;
   if ($136) {
    $_0_be=$_062;
   } else {
    $_3=$135;
    label = 1728;
    break;
   }
  } else if (((($52|0))|0)==((1752462689)|0)) {
   __ZN13blargg_vectorIcEC1Ev($chars);
   __ZN13blargg_vectorIPKcEC1Ev($strs);
   $87=((__ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$51,$chars,$strs))|0);
   $89=($87|0)==0;
   do {
    if ($89) {
     $91=((__ZNK13blargg_vectorIPKcE4sizeEv($strs))|0);
     $92=($91|0)>3;
     if ($92) {
      $94=((__ZNK13blargg_vectorIPKcEixEj($strs,3))|0);
      $96=((HEAP32[(($94)>>2)])|0);
      __ZL8copy_strPKcPci($96,$36);
     }
     $98=($91|0)>2;
     if ($98) {
      $100=((__ZNK13blargg_vectorIPKcEixEj($strs,2))|0);
      $102=((HEAP32[(($100)>>2)])|0);
      __ZL8copy_strPKcPci($102,$37);
     }
     $104=($91|0)>1;
     if ($104) {
      $106=((__ZNK13blargg_vectorIPKcEixEj($strs,1))|0);
      $108=((HEAP32[(($106)>>2)])|0);
      __ZL8copy_strPKcPci($108,$38);
     }
     $110=($91|0)>0;
     if (!($110)) {
      $_1=$_062;$_059=1;
      break;
     }
     $112=((__ZNK13blargg_vectorIPKcEixEj($strs,0))|0);
     $114=((HEAP32[(($112)>>2)])|0);
     __ZL8copy_strPKcPci($114,$39);
     $_1=$_062;$_059=1;
    } else {
     $_1=$87;$_059=0;
    }
   } while(0);
   __ZN13blargg_vectorIPKcED1Ev($strs);
   __ZN13blargg_vectorIcED1Ev($chars);
   if ($_059) {
    $_0_be=$_1;
   } else {
    $_3=$_1;
    label = 1739;
    break;
   }
  } else if (((($52|0))|0)==((1263419714)|0)) {
   $79=($51|0)>8;
   if ($79) {
    $_3=6504;
    label = 1733;
    break;
   }
   $81=((HEAP32[(($1)>>2)])|0);
   $82=(($81+12)|0);
   $83=((HEAP32[(($82)>>2)])|0);
   $84=((FUNCTION_TABLE_iiii[($83)&127]($in,$35,$51))|0);
   $85=($84|0)==0;
   if ($85) {
    $_0_be=$_062;
   } else {
    $_3=$84;
    label = 1732;
    break;
   }
  } else if (((($52|0))|0)==((1953721456)|0)) {
   $138=((__ZN13blargg_vectorIhE6resizeEj($17,$51))|0);
   $139=($138|0)==0;
   if (!($139)) {
    $_3=$138;
    label = 1735;
    break;
   }
   $141=((HEAP32[(($1)>>2)])|0);
   $142=(($141+12)|0);
   $143=((HEAP32[(($142)>>2)])|0);
   $144=((__ZNK13blargg_vectorIhEixEj($17,0))|0);
   $145=((FUNCTION_TABLE_iiii[($143)&127]($in,$144,$51))|0);
   $146=($145|0)==0;
   if ($146) {
    $_0_be=$_062;
   } else {
    $_3=$145;
    label = 1736;
    break;
   }
  } else if (((($52|0))|0)==((1096040772)|0)) {
   if ($40) {
    $149=((HEAP32[(($41)>>2)])|0);
    $150=(($149+20)|0);
    $151=((HEAP32[(($150)>>2)])|0);
    $152=((FUNCTION_TABLE_iii[($151)&127]($in,$51))|0);
    $153=($152|0)==0;
    if ($153) {
     $_062=$_062;
     continue;
    } else {
     $_3=$152;
     label = 1727;
     break;
    }
   }
   __ZN13Subset_ReaderC2EP11Data_Readerl($sub,$in,$51);
   __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($rem,$19,128,$42);
   $156=((__ZN8Gme_File4loadER11Data_Reader($43,$44))|0);
   $166=($156|0)==0;
   $_0_=($166?$_062:$156);
   if ($166) {
    $_062=$_0_;
    continue;
   } else {
    $_3=$_0_;
    label = 1723;
    break;
   }
  } else {
   $168=((HEAP32[(($22)>>2)])|0);
   $169=(($168+20)|0);
   $170=((HEAP32[(($169)>>2)])|0);
   $171=((FUNCTION_TABLE_iii[($170)&127]($in,$51))|0);
   $172=($171|0)==0;
   if ($172) {
    $_0_be=$_062;
   } else {
    $_3=$171;
    label = 1724;
    break;
   }
  }
  if (0) {
   $_3=0;
   label = 1726;
   break;
  } else {
   $_062=$_0_be;
  }
 }
 if ((label|0) == 1733) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1734) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1735) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1736) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1730) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1731) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1732) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1738) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1739) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1721) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1722) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1723) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1724) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1725) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1726) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1727) {
  STACKTOP=sp;return (($_3)|0);
 }
 else if ((label|0) == 1728) {
  STACKTOP=sp;return (($_3)|0);
 }
  return 0;
}
function __ZN13blargg_vectorIPKcE5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 HEAP32[(($1)>>2)]=0;
 $4=(($this+4)|0);
 HEAP32[(($4)>>2)]=0;
 _free($3);
 return;
}
function __ZN13blargg_vectorIA4_cE5clearEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 HEAP32[(($1)>>2)]=0;
 $4=(($this+4)|0);
 HEAP32[(($4)>>2)]=0;
 _free($3);
 return;
}
function __ZL9read_strsR11Data_ReaderlR13blargg_vectorIcERS1_IPKcE($in,$size,$chars,$strs){
 $in=($in)|0;
 $size=($size)|0;
 $chars=($chars)|0;
 $strs=($strs)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$i_030=0,$count_029=0,$17=0,$18=0,$20=0,$21=0;
 var $22=0,$24=0,$25=0,$26=0,$i_1=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$count_0_lcssa=0,$36=0,$_0=0,label=0;
 $1=((($size)+(1))|0);
 $2=((__ZN13blargg_vectorIcE6resizeEj($chars,$1))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=((__ZNK13blargg_vectorIcEixEj($chars,$size))|0);
 HEAP8[($5)]=0;
 $6=$in;
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=((__ZNK13blargg_vectorIcEixEj($chars,0))|0);
 $11=((FUNCTION_TABLE_iiii[($9)&127]($in,$10,$size))|0);
 $12=($11|0)==0;
 if (!($12)) {
  $_0=$11;
  return (($_0)|0);
 }
 $14=((__ZN13blargg_vectorIPKcE6resizeEj($strs,128))|0);
 $15=($14|0)==0;
 if (!($15)) {
  $_0=$14;
  return (($_0)|0);
 }
 $16=($size|0)>0;
 L1987: do {
  if ($16) {
   $count_029=0;$i_030=0;
   while(1) {
    $17=((__ZNK13blargg_vectorIPKcE4sizeEv($strs))|0);
    $18=($17|0)>($count_029|0);
    if (!($18)) {
     $20=$count_029<<1;
     $21=((__ZN13blargg_vectorIPKcE6resizeEj($strs,$20))|0);
     $22=($21|0)==0;
     if (!($22)) {
      $_0=$21;
      break;
     }
    }
    $24=((__ZNK13blargg_vectorIcEixEj($chars,$i_030))|0);
    $25=((($count_029)+(1))|0);
    $26=((__ZNK13blargg_vectorIPKcEixEj($strs,$count_029))|0);
    HEAP32[(($26)>>2)]=$24;
    $i_1=$i_030;
    while(1) {
     $28=($i_1|0)<($size|0);
     if (!($28)) {
      break;
     }
     $30=((__ZNK13blargg_vectorIcEixEj($chars,$i_1))|0);
     $31=((HEAP8[($30)])|0);
     $32=(($31<<24)>>24)==0;
     $33=((($i_1)+(1))|0);
     if ($32) {
      break;
     } else {
      $i_1=$33;
     }
    }
    $34=((($i_1)+(1))|0);
    $35=($34|0)<($size|0);
    if ($35) {
     $count_029=$25;$i_030=$34;
    } else {
     $count_0_lcssa=$25;
     break L1987;
    }
   }
   return (($_0)|0);
  } else {
   $count_0_lcssa=0;
  }
 } while(0);
 $36=((__ZN13blargg_vectorIPKcE6resizeEj($strs,$count_0_lcssa))|0);
 $_0=$36;
 return (($_0)|0);
}
function __ZNK13blargg_vectorIPKcE4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZL8copy_strPKcPci($in,$out){
 $in=($in)|0;
 $out=($out)|0;
 var $1=0,$2=0,label=0;
 $1=(($out+255)|0);
 HEAP8[($1)]=0;
 $2=((_strncpy((($out)|0),(($in)|0),((255)|0)))|0);
 return;
}
function __ZNK13blargg_vectorIPKcEixEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)<($n>>>0);
 if ($3) {
  ___assert_fail(((3496)|0),((2792)|0),((51)|0),((8456)|0));
  return ((0)|0);
 } else {
  $6=(($this)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+($n<<2))|0);
  return (($8)|0);
 }
  return 0;
}
function __ZN13blargg_vectorIA4_cE6resizeEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$or_cond=0,$9=0,$10=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=$n<<2;
 $5=((_realloc($3,$4))|0);
 $6=($5|0)!=0;
 $7=($n|0)==0;
 $or_cond=$6|$7;
 if (!($or_cond)) {
  $_0=2280;
  return (($_0)|0);
 }
 $9=$5;
 HEAP32[(($1)>>2)]=$9;
 $10=(($this+4)|0);
 HEAP32[(($10)>>2)]=$n;
 $_0=0;
 return (($_0)|0);
}
function __ZNK13blargg_vectorIA4_cE5beginEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZNK13blargg_vectorIA4_cE4sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZNK9Nsfe_Info11track_info_EP12track_info_ti($this,$out,$track){
 $this=($this)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,label=0;
 $1=((__ZNK9Nsfe_Info11remap_trackEi($this,$track))|0);
 $2=(($this+1176)|0);
 $3=((__ZNK13blargg_vectorIA4_cE4sizeEv($2))|0);
 $4=($1>>>0)<($3>>>0);
 do {
  if ($4) {
   $6=((__ZNK13blargg_vectorIA4_cEixEj($2,$1))|0);
   $7=(($6)|0);
   $8=((__Z8get_le32PKv($7))|0);
   $9=($8|0)>0;
   if (!($9)) {
    break;
   }
   $11=(($out+4)|0);
   HEAP32[(($11)>>2)]=$8;
  }
 } while(0);
 $13=(($this+1160)|0);
 $14=((__ZNK13blargg_vectorIPKcE4sizeEv($13))|0);
 $15=($1>>>0)<($14>>>0);
 if ($15) {
  $17=(($out+528)|0);
  $18=((__ZNK13blargg_vectorIPKcEixEj($13,$1))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  __ZN8Gme_File11copy_field_EPcPKc($17,$19);
 }
 $21=(($out+272)|0);
 $22=(($this+128)|0);
 __ZN8Gme_File11copy_field_EPcPKci($21,$22,256);
 $23=(($out+784)|0);
 $24=(($this+384)|0);
 __ZN8Gme_File11copy_field_EPcPKci($23,$24,256);
 $25=(($out+1040)|0);
 $26=(($this+640)|0);
 __ZN8Gme_File11copy_field_EPcPKci($25,$26,256);
 $27=(($out+1552)|0);
 $28=(($this+896)|0);
 __ZN8Gme_File11copy_field_EPcPKci($27,$28,256);
 return ((0)|0);
}
function __ZNK13blargg_vectorIA4_cEixEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)<($n>>>0);
 if ($3) {
  ___assert_fail(((3496)|0),((2792)|0),((51)|0),((8456)|0));
  return ((0)|0);
 } else {
  $6=(($this)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+($n<<2))|0);
  return (($8)|0);
 }
  return 0;
}
function __ZN8Nsfe_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$8$0=0,$8$1=0,$11$0=0,$11$1=0,label=0;
 $1=(($this)|0);
 __ZN7Nsf_EmuC2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12616;
 $3=(($this+15760)|0);
 __ZN9Nsfe_InfoC2Ev($3);
 $5=(($this+16952)|0);
 HEAP8[($5)]=0;
 $6=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($6,152);
 return;
}
function __ZN8Nsfe_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Nsfe_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Nsfe_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$4=0,$7=0,$6$0=0,$6$1=0,$10$0=0,$10$1=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=12616;
 $2=(($this+15760)|0);
 __ZN9Nsfe_InfoD2Ev($2);
 $4=(($this)|0);
 __ZN7Nsf_EmuD2Ev($4);
 return;
}
function __ZN8Nsfe_Emu6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,label=0;
 $1=(($this+16952)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 if ($4) {
  $6=(($this+15760)|0);
  __ZN9Nsfe_Info6unloadEv($6);
 }
 $8=(($this)|0);
 __ZN7Nsf_Emu6unloadEv($8);
 return;
}
function __ZN9Nsfe_Info6unloadEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+1152)|0);
 __ZN13blargg_vectorIcE5clearEv($1);
 $2=(($this+1160)|0);
 __ZN13blargg_vectorIPKcE5clearEv($2);
 $3=(($this+1168)|0);
 __ZN13blargg_vectorIhE5clearEv($3);
 $4=(($this+1176)|0);
 __ZN13blargg_vectorIA4_cE5clearEv($4);
 return;
}
function __ZNK8Nsfe_Emu11track_info_EP12track_info_ti($this,$out,$track){
 $this=($this)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+15760)|0);
 $2=((__ZNK9Nsfe_Info11track_info_EP12track_info_ti($1,$out,$track))|0);
 return ((0)|0);
}
function __ZL12new_nsfe_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(16960))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Nsfe_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL13new_nsfe_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(1448))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN9Nsfe_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN8Nsfe_Emu5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,$_0=0,label=0;
 $1=(($this+16952)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 if ($4) {
  HEAP8[($1)]=1;
  $9=(($this+15760)|0);
  $10=(($this)|0);
  $11=((__ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($9,$in,$10))|0);
  HEAP8[($1)]=0;
  __ZN8Nsfe_Emu16disable_playlistEb($this,0);
  $_0=$11;
  return (($_0)|0);
 } else {
  $6=(($this)|0);
  $7=((__ZN7Nsf_Emu5load_ER11Data_Reader($6,$in))|0);
  $_0=$7;
  return (($_0)|0);
 }
  return 0;
}
function __ZN8Nsfe_Emu16disable_playlistEb($this,$b){
 $this=($this)|0;
 $b=($b)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+15760)|0);
 __ZN9Nsfe_Info16disable_playlistEb($1,$b);
 $2=$this;
 $3=(($this+15766)|0);
 $4=((HEAP8[($3)])|0);
 $5=($4&255);
 __ZN8Gme_File15set_track_countEi($2,$5);
 return;
}
function __ZN8Nsfe_Emu15clear_playlist_Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Nsfe_Emu16disable_playlistEb($this,1);
 return;
}
function __ZN8Nsfe_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this)|0);
 $2=(($this+15760)|0);
 $3=((__ZNK9Nsfe_Info11remap_trackEi($2,$track))|0);
 $4=((__ZN7Nsf_Emu12start_track_Ei($1,$3))|0);
 return (($4)|0);
}
function __ZN13blargg_vectorIA4_cED2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 _free($3);
 return;
}
function __ZN13blargg_vectorIPKcED2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 _free($3);
 return;
}
function __ZN13blargg_vectorIA4_cEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZN13blargg_vectorIPKcEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZN9Nsfe_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN9Nsfe_FileC2Ev($this);
 return;
}
function __ZN9Nsfe_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$7$0=0,$7$1=0,$10$0=0,$10$1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12088;
 $3=(($this+252)|0);
 __ZN9Nsfe_InfoC2Ev($3);
 $5=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($5,152);
 return;
}
function __ZN9Nsfe_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN9Nsfe_FileD2Ev($this);
 return;
}
function __ZN9Nsfe_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN9Nsfe_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN9Nsfe_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$_0=0,label=0;
 $1=(($this+252)|0);
 $2=((__ZN9Nsfe_Info4loadER11Data_ReaderP7Nsf_Emu($1,$in,0))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 __ZN9Nsfe_Info16disable_playlistEb($1,0);
 $5=$this;
 $6=(($this+258)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 __ZN8Gme_File15set_track_countEi($5,$8);
 $_0=0;
 return (($_0)|0);
}
function __ZNK9Nsfe_File11track_info_EP12track_info_ti($this,$out,$track){
 $this=($this)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+252)|0);
 $2=((__ZNK9Nsfe_Info11track_info_EP12track_info_ti($1,$out,$track))|0);
 return ((0)|0);
}
function __ZN9Nsfe_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$4=0,$7=0,$6$0=0,$6$1=0,$10$0=0,$10$1=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=12088;
 $2=(($this+252)|0);
 __ZN9Nsfe_InfoD2Ev($2);
 $4=$this;
 __ZN9Gme_Info_D2Ev($4);
 return;
}
function __ZNK13blargg_vectorIcEixEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)<($n>>>0);
 if ($3) {
  ___assert_fail(((3496)|0),((2792)|0),((51)|0),((8456)|0));
  return ((0)|0);
 } else {
  $6=(($this)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+$n)|0);
  return (($8)|0);
 }
  return 0;
}
function __ZN13blargg_vectorIPKcE6resizeEj($this,$n){
 $this=($this)|0;
 $n=($n)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$or_cond=0,$9=0,$10=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 $4=$n<<2;
 $5=((_realloc($3,$4))|0);
 $6=($5|0)!=0;
 $7=($n|0)==0;
 $or_cond=$6|$7;
 if (!($or_cond)) {
  $_0=2280;
  return (($_0)|0);
 }
 $9=$5;
 HEAP32[(($1)>>2)]=$9;
 $10=(($this+4)|0);
 HEAP32[(($10)>>2)]=$n;
 $_0=0;
 return (($_0)|0);
}
function __ZN12Sap_Apu_ImplC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this)|0);
 __ZN10Blip_SynthILi12ELi1EEC1Ev($1);
 $2=(($this+816)|0);
 __ZL8gen_polyjiPh(12,2,$2);
 $3=(($this+818)|0);
 __ZL8gen_polyjiPh(264,64,$3);
 $4=(($this+882)|0);
 __ZL8gen_polyjiPh(67584,16384,$4);
 return;
}
function __ZL8gen_polyjiPh($mask,$count,$out){
 $mask=($mask)|0;
 $count=($count)|0;
 $out=($out)|0;
 var $_07=0,$_0=0,$n_0=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0;
 var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0;
 var $59=0,label=0;
 $n_0=1;$_0=$out;$_07=$count;
 while(1) {
  $2=$n_0&1;
  $3=$n_0>>>1;
  $4=(((-$2))|0);
  $5=$4&$mask;
  $6=$5^$3;
  $7=$6&1;
  $8=$7<<1;
  $9=$8|$2;
  $10=$6>>>1;
  $11=(((-$7))|0);
  $12=$11&$mask;
  $13=$12^$10;
  $14=$13&1;
  $15=$14<<2;
  $16=$15|$9;
  $17=$13>>>1;
  $18=(((-$14))|0);
  $19=$18&$mask;
  $20=$19^$17;
  $21=$20&1;
  $22=$21<<3;
  $23=$22|$16;
  $24=$20>>>1;
  $25=(((-$21))|0);
  $26=$25&$mask;
  $27=$26^$24;
  $28=$27&1;
  $29=$28<<4;
  $30=$29|$23;
  $31=$27>>>1;
  $32=(((-$28))|0);
  $33=$32&$mask;
  $34=$33^$31;
  $35=$34&1;
  $36=$35<<5;
  $37=$36|$30;
  $38=$34>>>1;
  $39=(((-$35))|0);
  $40=$39&$mask;
  $41=$40^$38;
  $42=$41&1;
  $43=$42<<6;
  $44=$43|$37;
  $45=$41>>>1;
  $46=(((-$42))|0);
  $47=$46&$mask;
  $48=$47^$45;
  $49=$48&1;
  $50=$49<<7;
  $51=$50|$44;
  $52=$48>>>1;
  $53=(((-$49))|0);
  $54=$53&$mask;
  $55=$54^$52;
  $56=(($51)&255);
  $57=(($_0+1)|0);
  HEAP8[($_0)]=$56;
  $58=((($_07)-(1))|0);
  $59=($58|0)==0;
  if ($59) {
   break;
  } else {
   $n_0=$55;$_0=$57;$_07=$58;
  }
 }
 return;
}
function __ZN7Sap_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this+80)|0);
 HEAP32[(($1)>>2)]=0;
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,0,0);
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,1,0);
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,2,0);
 __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,3,0);
 return;
}
function __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($this,$i,$b){
 $this=($this)|0;
 $i=($i)|0;
 $b=($b)|0;
 var $1=0,$4=0,label=0;
 $1=($i>>>0)<((4)>>>0);
 if ($1) {
  $4=(($this+((($i)*(20))&-1)+16)|0);
  HEAP32[(($4)>>2)]=$b;
  return;
 } else {
  ___assert_fail(((4544)|0),((3440)|0),((73)|0),((8864)|0));
 }
}
function __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($this,$new_impl){
 $this=($this)|0;
 $new_impl=($new_impl)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+80)|0);
 HEAP32[(($1)>>2)]=$new_impl;
 $2=(($this+84)|0);
 $3=$2;
 _memset((((($3)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 $4=(($this)|0);
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 $5=(($this+20)|0);
 _memset((((($5)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 $6=(($this+40)|0);
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 $7=(($this+60)|0);
 _memset((((($7)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 return;
}
function __ZN7Sap_Apu9run_untilEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$_=0,$_109=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$21=0,$i_0123=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$or_cond=0;
 var $40=0,$41=0,$42=0,$or_cond111=0,$_lobit=0,$44=0,$_112=0,$45=0,$46=0,$47=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$_sum=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$69=0,$70=0,$71=0,$72=0,$period2_0=0,$time2_0=0,$volume_1=0,$74=0,$75=0,$or_cond113=0,$77=0,$78=0;
 var $79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$_109_=0,$__=0,$_128=0,$poly_pos_0=0,$86=0,$87=0,$88=0,$89=0,$poly_1=0,$poly_len_1=0,$poly_pos_1=0,$poly_inc_0=0,$91=0,$92=0;
 var $93=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$wave_0=0,$poly5_inc_0=0,$102=0,$103=0,$time2_1=0,$poly_pos_2=0,$wave_1=0,$osc_last_amp_0=0,$volume_2=0,$time_0=0,$104=0,$105=0,$107=0;
 var $volume_2_=0,$delta1_0=0,$108=0,$110=0,$111=0,$osc_last_amp_1_ph=0,$volume_3_ph=0,$time2_2=0,$113=0,$114=0,$116=0,$time2_2_end_time=0,$117=0,$time_1118=0,$osc_last_amp_2117=0,$wave_2116=0,$poly_pos_3115=0,$118=0,$119=0,$121=0;
 var $122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$_114=0,$133=0,$135=0,$poly_pos_5=0,$osc_last_amp_3=0,$137=0,$138=0,$139=0,$time_1_lcssa=0;
 var $osc_last_amp_2_lcssa=0,$wave_2_lcssa=0,$poly_pos_3_lcssa=0,$140=0,$143=0,$volume_4=0,$time_2=0,$145=0,$146=0,$148=0,$149=0,$150=0,$time_3=0,$152=0,$153=0,$155=0,$156=0,$157=0,$158=0,$159=0;
 var $160=0,$161=0,$162=0,$163=0,$164=0,$time_4=0,$166=0,$167=0,$168=0,$169=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0;
 var $181=0,label=0;
 __ZN7Sap_Apu12calc_periodsEv($this);
 $1=(($this+80)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+882)|0);
 $4=(($this+100)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5&128;
 $7=($6|0)==0;
 $8=(($2+818)|0);
 $_=($7?131071:511);
 $_109=($7?$3:$8);
 $9=(($this+96)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(((($10|0))%(($_|0)))&-1);
 HEAP32[(($9)>>2)]=$11;
 $12=(($this+84)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($2+816)|0);
 $15=(($this+92)|0);
 $16=(($this+88)|0);
 $17=(($2)|0);
 $18=(($2)|0);
 $19=(($2)|0);
 $i_0123=0;$21=$13;
 while(1) {
  $22=(($this+((($i_0123)*(20))&-1)+8)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=((($23)+($21))|0);
  $25=(($this+((($i_0123)*(20))&-1)+12)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=(($this+((($i_0123)*(20))&-1)+16)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=($28|0)==0;
  L2095: do {
   if ($29) {
    $time_3=$24;
   } else {
    __ZN11Blip_Buffer12set_modifiedEv($28);
    $31=(($this+((($i_0123)*(20))&-1)+1)|0);
    $32=((HEAP8[($31)])|0);
    $33=($32&255);
    $34=$33<<1;
    $35=$34&30;
    $36=($35|0)!=0;
    $37=$33&16;
    $38=($37|0)==0;
    $or_cond=$36&$38;
    do {
     if ($or_cond) {
      $40=$33&160;
      $41=($40|0)==160;
      $42=($26|0)<74;
      $or_cond111=$41&$42;
      if ($or_cond111) {
       break;
      }
      $52=((HEAP32[(($4)>>2)])|0);
      $53=((10312+$i_0123)|0);
      $54=((HEAP8[($53)])|0);
      $55=($54&255);
      $56=$55&$52;
      $57=($56|0)==0;
      do {
       if ($57) {
        $volume_1=$35;$time2_0=$end_time;$period2_0=0;
       } else {
        $_sum=((($i_0123)+(2))|0);
        $59=(($this+((($_sum)*(20))&-1)+12)|0);
        $60=((HEAP32[(($59)>>2)])|0);
        $61=((HEAP32[(($12)>>2)])|0);
        $62=(($this+((($_sum)*(20))&-1)+8)|0);
        $63=((HEAP32[(($62)>>2)])|0);
        $64=((($63)+($61))|0);
        $65=(($this+((($i_0123)*(20))&-1)+3)|0);
        $66=((HEAP8[($65)])|0);
        $67=(($66<<24)>>24)==0;
        if ($67) {
         $volume_1=$35;$time2_0=$64;$period2_0=$60;
         break;
        }
        $69=(($this+((($i_0123)*(20))&-1)+4)|0);
        $70=((HEAP32[(($69)>>2)])|0);
        $71=((($70)-($35))|0);
        HEAP32[(($69)>>2)]=$71;
        $72=(((-$35))|0);
        $volume_1=$72;$time2_0=$64;$period2_0=$60;
       }
      } while(0);
      $74=($24|0)<($end_time|0);
      $75=($time2_0|0)<($end_time|0);
      $or_cond113=$74|$75;
      if ($or_cond113) {
       $77=(($this+((($i_0123)*(20))&-1)+2)|0);
       $78=((HEAP8[($77)])|0);
       $79=($78&255);
       $80=$79&1;
       $81=$33&32;
       $82=($81|0)==0;
       if ($82) {
        $84=$33&64;
        $85=($84|0)==0;
        $_109_=($85?$_109:$14);
        $__=($85?$_:15);
        $_128=($85?$9:$15);
        $poly_pos_0=((HEAP32[(($_128)>>2)])|0);
        $86=(((($26|0))%(($__|0)))&-1);
        $87=((HEAP32[(($22)>>2)])|0);
        $88=((($87)+($poly_pos_0))|0);
        $89=(((($88|0))%(($__|0)))&-1);
        $poly_inc_0=$86;$poly_pos_1=$89;$poly_len_1=$__;$poly_1=$_109_;
       } else {
        $poly_inc_0=1;$poly_pos_1=$80;$poly_len_1=16;$poly_1=10304;
       }
       $91=((($poly_inc_0)-($poly_len_1))|0);
       $92=$33&128;
       $93=($92|0)==0;
       if ($93) {
        $95=((HEAP32[(($22)>>2)])|0);
        $96=((HEAP32[(($16)>>2)])|0);
        $97=((($96)+($95))|0);
        $98=(((($97|0))%(31))&-1);
        $99=((__Z9run_poly5ji(377253537,$98))|0);
        $100=(((($26|0))%(31))&-1);
        $poly5_inc_0=$100;$wave_0=$99;
       } else {
        $poly5_inc_0=0;$wave_0=377253537;
       }
       $102=(($this+((($i_0123)*(20))&-1)+4)|0);
       $103=((HEAP32[(($102)>>2)])|0);
       $time_0=$24;$volume_2=$volume_1;$osc_last_amp_0=$103;$wave_1=$wave_0;$poly_pos_2=$poly_pos_1;$time2_1=$time2_0;
       while(1) {
        $104=(((-$volume_2))|0);
        $105=($time2_1|0)<($time_0|0);
        do {
         if ($105) {
          $107=($volume_2|0)<0;
          $volume_2_=($107?$volume_2:0);
          $delta1_0=((($volume_2_)-($osc_last_amp_0))|0);
          $108=($volume_2_|0)==($osc_last_amp_0|0);
          if ($108) {
           $volume_3_ph=$volume_2;$osc_last_amp_1_ph=$osc_last_amp_0;
           break;
          }
          $110=((($osc_last_amp_0)-($volume_2))|0);
          $111=((($110)+($delta1_0))|0);
          __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($17,$time2_1,$delta1_0,$28);
          $volume_3_ph=$104;$osc_last_amp_1_ph=$111;
         } else {
          $volume_3_ph=$volume_2;$osc_last_amp_1_ph=$osc_last_amp_0;
         }
        } while(0);
        $time2_2=$time2_1;
        while(1) {
         $113=($time2_2|0)>($time_0|0);
         $114=((($time2_2)+($period2_0))|0);
         if ($113) {
          break;
         } else {
          $time2_2=$114;
         }
        }
        $116=($time2_2|0)<($end_time|0);
        $time2_2_end_time=($116?$time2_2:$end_time);
        $117=($time_0|0)<($time2_2_end_time|0);
        if ($117) {
         $poly_pos_3115=$poly_pos_2;$wave_2116=$wave_1;$osc_last_amp_2117=$osc_last_amp_1_ph;$time_1118=$time_0;
         while(1) {
          $118=$wave_2116&1;
          $119=($118|0)==0;
          do {
           if ($119) {
            $osc_last_amp_3=$osc_last_amp_2117;$poly_pos_5=$poly_pos_3115;
           } else {
            $121=$poly_pos_3115>>3;
            $122=(($poly_1+$121)|0);
            $123=((HEAP8[($122)])|0);
            $124=($123&255);
            $125=$poly_pos_3115&7;
            $126=$124>>>($125>>>0);
            $127=$126&1;
            $128=(((-$127))|0);
            $129=$volume_3_ph&$128;
            $130=((($poly_pos_3115)+($91))|0);
            $131=($130|0)<0;
            $132=((($poly_pos_3115)+($poly_inc_0))|0);
            $_114=($131?$132:$130);
            $133=($129|0)==($osc_last_amp_2117|0);
            if ($133) {
             $osc_last_amp_3=$osc_last_amp_2117;$poly_pos_5=$_114;
             break;
            }
            $135=((($129)-($osc_last_amp_2117))|0);
            __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($18,$time_1118,$135,$28);
            $osc_last_amp_3=$129;$poly_pos_5=$_114;
           }
          } while(0);
          $137=((__Z9run_poly5ji($wave_2116,$poly5_inc_0))|0);
          $138=((($time_1118)+($26))|0);
          $139=($138|0)<($time2_2_end_time|0);
          if ($139) {
           $poly_pos_3115=$poly_pos_5;$wave_2116=$137;$osc_last_amp_2117=$osc_last_amp_3;$time_1118=$138;
          } else {
           $poly_pos_3_lcssa=$poly_pos_5;$wave_2_lcssa=$137;$osc_last_amp_2_lcssa=$osc_last_amp_3;$time_1_lcssa=$138;
           break;
          }
         }
        } else {
         $poly_pos_3_lcssa=$poly_pos_2;$wave_2_lcssa=$wave_1;$osc_last_amp_2_lcssa=$osc_last_amp_1_ph;$time_1_lcssa=$time_0;
        }
        $140=($time_1_lcssa|0)<($end_time|0);
        if ($140) {
         $time_0=$time_1_lcssa;$volume_2=$volume_3_ph;$osc_last_amp_0=$osc_last_amp_2_lcssa;$wave_1=$wave_2_lcssa;$poly_pos_2=$poly_pos_3_lcssa;$time2_1=$time2_2;
         continue;
        }
        if ($116) {
         $time_0=$time_1_lcssa;$volume_2=$volume_3_ph;$osc_last_amp_0=$osc_last_amp_2_lcssa;$wave_1=$wave_2_lcssa;$poly_pos_2=$poly_pos_3_lcssa;$time2_1=$time2_2;
        } else {
         break;
        }
       }
       $143=(($poly_pos_3_lcssa)&255);
       HEAP8[($77)]=$143;
       HEAP32[(($102)>>2)]=$osc_last_amp_2_lcssa;
       $time_2=$time_1_lcssa;$volume_4=$volume_3_ph;
      } else {
       $time_2=$24;$volume_4=$volume_1;
      }
      $145=(($this+((($i_0123)*(20))&-1)+3)|0);
      HEAP8[($145)]=0;
      $146=($volume_4|0)<0;
      if (!($146)) {
       $time_3=$time_2;
       break L2095;
      }
      $148=(($this+((($i_0123)*(20))&-1)+4)|0);
      $149=((HEAP32[(($148)>>2)])|0);
      $150=((($149)-($volume_4))|0);
      HEAP32[(($148)>>2)]=$150;
      HEAP8[($145)]=1;
      $time_3=$time_2;
      break L2095;
     }
    } while(0);
    $_lobit=$37>>>4;
    $44=$_lobit^1;
    $_112=$35>>>($44>>>0);
    $45=(($this+((($i_0123)*(20))&-1)+4)|0);
    $46=((HEAP32[(($45)>>2)])|0);
    $47=($_112|0)==($46|0);
    if ($47) {
     $time_3=$24;
     break;
    }
    $49=((($_112)-($46))|0);
    HEAP32[(($45)>>2)]=$_112;
    $50=((HEAP32[(($12)>>2)])|0);
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($19,$50,$49,$28);
    $time_3=$24;
   }
  } while(0);
  $152=((($end_time)-($time_3))|0);
  $153=($152|0)>0;
  if ($153) {
   $155=((($26)-(1))|0);
   $156=((($155)+($152))|0);
   $157=(((($156|0))/(($26|0)))&-1);
   $158=(($this+((($i_0123)*(20))&-1)+2)|0);
   $159=((HEAP8[($158)])|0);
   $160=($159&255);
   $161=$160^$157;
   $162=(($161)&255);
   HEAP8[($158)]=$162;
   $163=(Math_imul($157,$26)|0);
   $164=((($163)+($time_3))|0);
   $time_4=$164;
  } else {
   $time_4=$time_3;
  }
  $166=((($time_4)-($end_time))|0);
  HEAP32[(($22)>>2)]=$166;
  $167=((($i_0123)+(1))|0);
  $168=($167|0)<4;
  $169=((HEAP32[(($12)>>2)])|0);
  if ($168) {
   $i_0123=$167;$21=$169;
  } else {
   break;
  }
 }
 $171=((($end_time)-($169))|0);
 HEAP32[(($12)>>2)]=$end_time;
 $172=(($this+92)|0);
 $173=((HEAP32[(($172)>>2)])|0);
 $174=((($173)+($171))|0);
 $175=(((($174|0))%(15))&-1);
 HEAP32[(($172)>>2)]=$175;
 $176=(($this+88)|0);
 $177=((HEAP32[(($176)>>2)])|0);
 $178=((($177)+($171))|0);
 $179=(((($178|0))%(31))&-1);
 HEAP32[(($176)>>2)]=$179;
 $180=((HEAP32[(($9)>>2)])|0);
 $181=((($180)+($171))|0);
 HEAP32[(($9)>>2)]=$181;
 return;
}
function __ZN7Sap_Apu12calc_periodsEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$_=0,$i_013=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0;
 var $22=0,$_sum=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$period_1=0,$38=0,$39=0,$40=0,label=0;
 $1=(($this+100)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&1;
 $4=($3|0)==0;
 $_=($4?28:114);
 $i_013=0;
 while(1) {
  $6=(($this+((($i_013)*(20))&-1))|0);
  $7=((HEAP8[($6)])|0);
  $8=($7&255);
  $9=((($8)+(1))|0);
  $10=(Math_imul($9,$_)|0);
  $11=((HEAP32[(($1)>>2)])|0);
  $12=((10320+$i_013)|0);
  $13=((HEAP8[($12)])|0);
  $14=($13&255);
  $15=$14&$11;
  $16=($15|0)==0;
  do {
   if ($16) {
    $period_1=$10;
   } else {
    $18=((($8)+(4))|0);
    $19=$i_013&1;
    $20=($19|0)==0;
    if ($20) {
     $period_1=$18;
     break;
    }
    $22=$8<<8;
    $_sum=((($i_013)-(1))|0);
    $23=(($this+((($_sum)*(20))&-1))|0);
    $24=((HEAP8[($23)])|0);
    $25=($24&255);
    $26=$25|$22;
    $27=((($26)+(7))|0);
    $28=((($i_013)-(1))|0);
    $29=((10320+$28)|0);
    $30=((HEAP8[($29)])|0);
    $31=($30&255);
    $32=$31&$11;
    $33=($32|0)==0;
    if (!($33)) {
     $period_1=$27;
     break;
    }
    $35=((($26)+(1))|0);
    $36=(Math_imul($35,$_)|0);
    $period_1=$36;
   }
  } while(0);
  $38=(($this+((($i_013)*(20))&-1)+12)|0);
  HEAP32[(($38)>>2)]=$period_1;
  $39=((($i_013)+(1))|0);
  $40=($39|0)<4;
  if ($40) {
   $i_013=$39;
  } else {
   break;
  }
 }
 return;
}
function __Z9run_poly5ji($in,$shift){
 $in=($in)|0;
 $shift=($shift)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=$in<<$shift;
 $2=$1&2147483647;
 $3=(((31)-($shift))|0);
 $4=$in>>>($3>>>0);
 $5=$2|$4;
 return (($5)|0);
}
function __ZN7Sap_Apu10write_dataEiji($this,$time,$addr,$data){
 $this=($this)|0;
 $time=($time)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$10=0,$12=0,$13=0,$14=0,$15=0,label=0;
 __ZN7Sap_Apu9run_untilEi($this,$time);
 $1=$addr>>>1;
 $2=$1^26880;
 $3=($2>>>0)<((4)>>>0);
 if ($3) {
  $5=(($data)&255);
  $6=$addr&1;
  $7=(($this+((($2)*(20))&-1)+$6)|0);
  HEAP8[($7)]=$5;
  return;
 }
 if (((($addr|0))|0)==((53769)|0)) {
  $12=(($this+8)|0);
  HEAP32[(($12)>>2)]=0;
  $13=(($this+28)|0);
  HEAP32[(($13)>>2)]=0;
  $14=(($this+48)|0);
  HEAP32[(($14)>>2)]=0;
  $15=(($this+68)|0);
  HEAP32[(($15)>>2)]=0;
  return;
 } else if (((($addr|0))|0)==((53768)|0)) {
  $10=(($this+100)|0);
  HEAP32[(($10)>>2)]=$data;
  return;
 } else {
  return;
 }
}
function __ZN7Sap_Apu9end_frameEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,label=0;
 $1=(($this+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($end_time|0);
 if ($3) {
  __ZN7Sap_Apu9run_untilEi($this,$end_time);
 }
 $6=((HEAP32[(($1)>>2)])|0);
 $7=((($6)-($end_time))|0);
 HEAP32[(($1)>>2)]=$7;
 return;
}
function __ZN7Sap_Emu9cpu_writeEji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$_mask=0,$3=0,label=0;
 $1=(($data)&255);
 $2=(($this+1364+$addr)|0);
 HEAP8[($2)]=$1;
 $_mask=$addr&-256;
 $3=($_mask|0)==53760;
 if (!($3)) {
  return;
 }
 __ZN7Sap_Emu10cpu_write_Eji($this,$addr,$data);
 return;
}
function __ZN7Sap_Emu8cpu_readEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+1364+$addr)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 return (($3)|0);
}
function __ZN7Sap_Cpu5resetEPv($this,$new_mem){
 $this=($this)|0;
 $new_mem=($new_mem)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 $1=(($this+12)|0);
 $2=(($this+8)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($this+28)|0);
 HEAP32[(($3)>>2)]=$new_mem;
 $4=(($this+5)|0);
 HEAP8[($4)]=4;
 $5=(($this+6)|0);
 HEAP8[($5)]=-1;
 $6=(($this+16)|0);
 HEAP32[(($6)>>2)]=0;
 $7=(($1)|0);
 HEAP32[(($7)>>2)]=0;
 $8=(($this+20)|0);
 $9=$this;
 _memset((((($9)|0))|0), ((((0)|0))|0), ((((5)|0))|0));
 HEAP32[(($8)>>2)]=1073741824;
 $10=(($this+24)|0);
 HEAP32[(($10)>>2)]=1073741824;
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Sap_Cpu3runEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $s=0,$tmpcast=0,$1=0,$2=0,$ld$0$0=0,$3$0=0,$ld$1$1=0,$3$1=0,$st$2$0=0,$st$3$1=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0;
 var $34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0;
 var $54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0;
 var $74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$pc_0=0,$81=0,$nz_0=0,$c_0=0,$status_0=0,$sp_0=0,$y_0=0,$x_0=0,$a_0=0,$pc_1=0,$s_time_0=0,$82=0,$83=0,$84=0;
 var $85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$or_cond=0,$96=0,$97=0,$99=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0;
 var $108=0,$109=0,$110=0,$111=0,$113=0,$114=0,$115=0,$116=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0;
 var $131=0,$132=0,$133=0,$134=0,$135=0,$137=0,$139=0,$140=0,$142=0,$143=0,$144=0,$145=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$154=0,$155=0;
 var $156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0;
 var $177=0,$178=0,$179=0,$181=0,$182=0,$data_0=0,$184=0,$185=0,$186=0,$x_0_pn674=0,$data_1=0,$189=0,$190=0,$data_2=0,$s_time_1=0,$192=0,$193=0,$194=0,$195=0,$196=0;
 var $197=0,$data_3=0,$pc_2=0,$s_time_2=0,$199=0,$data_4=0,$pc_3=0,$s_time_3=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$211=0,$212=0,$213=0,$214=0;
 var $215=0,$216=0,$218=0,$219=0,$220=0,$221=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$230=0,$231=0,$data_5=0,$233=0,$234=0,$235=0,$237=0,$238=0;
 var $242=0,$243=0,$244=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=0,$260=0,$261=0,$262=0,$263=0;
 var $265=0,$266=0,$268=0,$269=0,$270=0,$272=0,$273=0,$275=0,$276=0,$277=0,$278=0,$280=0,$281=0,$addr10_0=0,$pc_4=0,$283=0,$285=0,$286=0,$287=0,$288=0;
 var $289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=0,$296=0,$298=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=0,$308=0,$309=0;
 var $310=0,$312=0,$314=0,$315=0,$316=0,$317=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$328=0,$329=0,$330=0,$331=0,$332=0;
 var $333=0,$334=0,$335=0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$348=0,$349=0,$350=0,$351=0,$352=0,$353=0;
 var $354=0,$355=0,$356=0,$357=0,$358=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$addr13_0=0,$pc_5=0,$s_time_4=0,$372=0;
 var $374=0,$375=0,$376=0,$377=0,$379=0,$380=0,$381=0,$382=0,$383=0,$384=0,$386=0,$387=0,$388=0,$389=0,$391=0,$392=0,$393=0,$394=0,$395=0,$396=0;
 var $398=0,$399=0,$400=0,$401=0,$403=0,$404=0,$405=0,$406=0,$407=0,$408=0,$410=0,$411=0,$412=0,$413=0,$415=0,$416=0,$417=0,$418=0,$419=0,$420=0;
 var $422=0,$423=0,$data_6=0,$425=0,$426=0,$427=0,$429=0,$430=0,$data_7=0,$432=0,$433=0,$434=0,$436=0,$437=0,$data_8=0,$439=0,$440=0,$441=0,$data_9=0,$443=0;
 var $445=0,$446=0,$data_10=0,$448=0,$449=0,$450=0,$data_11=0,$452=0,$454=0,$455=0,$456=0,$data_12=0,$s_time_5=0,$_sum672=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0;
 var $464=0,$466=0,$467=0,$468=0,$data_13=0,$s_time_6=0,$_sum671=0,$470=0,$471=0,$472=0,$473=0,$474=0,$475=0,$476=0,$temp25_0=0,$479=0,$480=0,$481=0,$483=0,$484=0;
 var $486=0,$488=0,$489=0,$490=0,$492=0,$493=0,$494=0,$data_14=0,$pc_6=0,$496=0,$497=0,$498=0,$499=0,$501=0,$502=0,$503=0,$505=0,$506=0,$507=0,$data_15=0;
 var $pc_7=0,$509=0,$510=0,$511=0,$512=0,$514=0,$515=0,$516=0,$517=0,$518=0,$519=0,$520=0,$521=0,$522=0,$523=0,$524=0,$525=0,$527=0,$528=0,$529=0;
 var $530=0,$531=0,$532=0,$533=0,$534=0,$535=0,$536=0,$537=0,$538=0,$539=0,$541=0,$542=0,$data_16=0,$544=0,$545=0,$546=0,$x_0_pn670=0,$data_17=0,$549=0,$550=0;
 var $data_18=0,$s_time_9=0,$552=0,$553=0,$554=0,$555=0,$556=0,$557=0,$data_19=0,$pc_8=0,$s_time_10=0,$559=0,$data_20=0,$pc_9=0,$s_time_11=0,$561=0,$562=0,$564=0,$565=0,$566=0;
 var $567=0,$568=0,$569=0,$570=0,$571=0,$572=0,$573=0,$574=0,$575=0,$577=0,$578=0,$579=0,$580=0,$581=0,$582=0,$583=0,$584=0,$585=0,$586=0,$587=0;
 var $588=0,$589=0,$591=0,$592=0,$data_21=0,$594=0,$595=0,$596=0,$x_0_pn668=0,$data_22=0,$599=0,$600=0,$data_23=0,$s_time_12=0,$602=0,$603=0,$604=0,$605=0,$606=0,$607=0;
 var $data_24=0,$pc_10=0,$s_time_13=0,$609=0,$data_25=0,$pc_11=0,$s_time_14=0,$611=0,$612=0,$614=0,$615=0,$616=0,$617=0,$618=0,$619=0,$620=0,$621=0,$622=0,$623=0,$624=0;
 var $625=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$635=0,$636=0,$637=0,$638=0,$639=0,$641=0,$642=0,$data_26=0,$644=0,$645=0,$646=0;
 var $x_0_pn666=0,$data_27=0,$649=0,$650=0,$data_28=0,$s_time_15=0,$652=0,$653=0,$654=0,$655=0,$656=0,$657=0,$data_29=0,$pc_12=0,$s_time_16=0,$659=0,$data_30=0,$pc_13=0,$s_time_17=0,$661=0;
 var $662=0,$664=0,$665=0,$666=0,$667=0,$668=0,$669=0,$670=0,$671=0,$672=0,$_=0,$674=0,$675=0,$676=0,$677=0,$678=0,$679=0,$680=0,$681=0,$682=0;
 var $684=0,$686=0,$687=0,$688=0,$689=0,$690=0,$691=0,$692=0,$693=0,$694=0,$695=0,$696=0,$697=0,$699=0,$700=0,$701=0,$702=0,$703=0,$704=0,$705=0;
 var $706=0,$707=0,$708=0,$709=0,$710=0,$711=0,$713=0,$714=0,$data_31=0,$716=0,$717=0,$718=0,$x_0_pn664=0,$data_32=0,$721=0,$722=0,$data_33=0,$s_time_18=0,$724=0,$725=0;
 var $726=0,$727=0,$728=0,$729=0,$data_34=0,$pc_14=0,$s_time_19=0,$731=0,$data_35=0,$pc_15=0,$s_time_20=0,$733=0,$735=0,$736=0,$737=0,$738=0,$739=0,$740=0,$741=0,$742=0;
 var $743=0,$744=0,$745=0,$746=0,$748=0,$749=0,$750=0,$751=0,$752=0,$753=0,$754=0,$755=0,$756=0,$757=0,$758=0,$759=0,$760=0,$762=0,$763=0,$data_36=0;
 var $765=0,$766=0,$767=0,$x_0_pn=0,$data_37=0,$770=0,$771=0,$data_38=0,$s_time_21=0,$773=0,$774=0,$775=0,$776=0,$777=0,$778=0,$data_39=0,$pc_16=0,$s_time_22=0,$780=0,$data_40=0;
 var $pc_17=0,$s_time_23=0,$782=0,$783=0,$784=0,$785=0,$sext=0,$786=0,$787=0,$788=0,$789=0,$790=0,$791=0,$792=0,$793=0,$794=0,$795=0,$c_1=0,$798=0,$799=0;
 var $800=0,$801=0,$802=0,$804=0,$805=0,$807=0,$808=0,$809=0,$810=0,$811=0,$813=0,$data_41=0,$data_42=0,$c_2=0,$_sum=0,$816=0,$817=0,$818=0,$819=0,$820=0;
 var $821=0,$822=0,$823=0,$824=0,$825=0,$826=0,$828=0,$830=0,$data_43=0,$data_44=0,$c_3=0,$_sum661=0,$833=0,$834=0,$835=0,$836=0,$837=0,$838=0,$839=0,$840=0;
 var $841=0,$842=0,$data_45=0,$nz_1=0,$c_4=0,$844=0,$845=0,$846=0,$848=0,$850=0,$851=0,$853=0,$854=0,$data_46=0,$data_47=0,$c_5=0,$857=0,$858=0,$859=0,$860=0;
 var $861=0,$862=0,$863=0,$864=0,$866=0,$867=0,$869=0,$870=0,$data_48=0,$data_49=0,$c_6=0,$873=0,$874=0,$875=0,$876=0,$877=0,$878=0,$879=0,$881=0,$882=0;
 var $884=0,$885=0,$887=0,$888=0,$890=0,$891=0,$data_51=0,$data_52=0,$nz_2=0,$894=0,$895=0,$896=0,$897=0,$data_53=0,$nz_3=0,$c_7=0,$899=0,$900=0,$901=0,$903=0;
 var $904=0,$906=0,$908=0,$909=0,$911=0,$data_56=0,$nz_4=0,$913=0,$914=0,$915=0,$916=0,$917=0,$921=0,$922=0,$924=0,$925=0,$927=0,$928=0,$929=0,$930=0;
 var $932=0,$933=0,$934=0,$935=0,$936=0,$938=0,$939=0,$940=0,$941=0,$942=0,$943=0,$944=0,$945=0,$946=0,$947=0,$948=0,$949=0,$950=0,$951=0,$952=0;
 var $953=0,$954=0,$955=0,$956=0,$957=0,$958=0,$959=0,$960=0,$961=0,$962=0,$963=0,$965=0,$966=0,$967=0,$969=0,$970=0,$_675=0,$new_time_0=0,$972=0,$973=0;
 var $974=0,$976=0,$977=0,$978=0,$979=0,$980=0,$981=0,$982=0,$983=0,$984=0,$985=0,$986=0,$987=0,$988=0,$990=0,$991=0,$993=0,$994=0,$995=0,$996=0;
 var $997=0,$998=0,$999=0,$1000=0,$1001=0,$1002=0,$1003=0,$temp45_0=0,$1004=0,$1005=0,$1006=0,$1007=0,$1008=0,$1010=0,$1011=0,$1012=0,$1013=0,$1014=0,$1015=0,$1016=0;
 var $1017=0,$1018=0,$1019=0,$1020=0,$1021=0,$1022=0,$1026=0,$1028=0,$1030=0,$1033=0,$nz_5=0,$c_8=0,$status_1=0,$sp_1=0,$1035=0,$1036=0,$1037=0,$1038=0,$1039=0,$1041=0;
 var $1042=0,$1044=0,$1045=0,$1047=0,$1050=0,$nz_6=0,$c_9=0,$status_2=0,$sp_2=0,$1052=0,$1053=0,$1054=0,$1055=0,$1056=0,$1058=0,$1059=0,$1060=0,$s_time_24=0,$1062=0,$pc_19=0;
 var $s_time_25=0,$1064=0,$1066=0,$1068=0,$extract_t=0,$extract=0,$extract_t654=0,$1069=0,$1070=0,$1071=0,$1072=0,$1073=0,$1074=0,$1075=0,$1076=0,$1077=0,$1078=0,$1079=0,$1080=0,$1081=0;
 var $1082=0,$1083=0,$1084=0,$1085=0,$1086=0,$1087=0,$1088=0,$temp48_0=0,$1089=0,$extract_t657=0,$1090=0,$1091=0,$1092=0,$1093=0,$1094=0,$1095=0,$1096=0,$1097=0,$1098=0,$s_time_27=0;
 var $illegal_encountered_0_off0=0,$1100=0,$1101=0,$1102=0,$1103=0,$1104=0,$1105=0,$1106=0,$1107=0,$1108=0,$1109=0,$1110=0,$1111=0,$1112=0,$1113=0,$1114=0,$1115=0,$extract_t659=0,$1117=0,$extract_t660=0;
 var $temp50_0_off0=0,$ld$4$0=0,$1119$0=0,$ld$5$1=0,$1119$1=0,$st$6$0=0,$st$7$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $s=((sp)|0);
 $tmpcast=$s;
 __ZN7Sap_Cpu12set_end_timeEi($this,$end_time);
 $1=(($this+12)|0);
 $2=$1;
 $ld$0$0=(($2)|0);
 $3$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($2+4)|0);
 $3$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $st$2$0=(($s)|0);
 HEAP32[(($st$2$0)>>2)]=$3$0;
 $st$3$1=(($s+4)|0);
 HEAP32[(($st$3$1)>>2)]=$3$1;
 $4=(($this+8)|0);
 HEAP32[(($4)>>2)]=$tmpcast;
 $5=(($tmpcast+4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+28)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($this)|0);
 $10=((HEAP16[(($9)>>1)])|0);
 $11=($10&65535);
 $12=(($this+2)|0);
 $13=((HEAP8[($12)])|0);
 $14=($13&255);
 $15=(($this+3)|0);
 $16=((HEAP8[($15)])|0);
 $17=($16&255);
 $18=(($this+4)|0);
 $19=((HEAP8[($18)])|0);
 $20=($19&255);
 $21=(($this+6)|0);
 $22=((HEAP8[($21)])|0);
 $23=($22&255);
 $24=((($23)+(1))|0);
 $25=$24|256;
 $26=(($this+5)|0);
 $27=((HEAP8[($26)])|0);
 $28=($27&255);
 $29=$28&76;
 $30=$28<<8;
 $31=$28&2;
 $32=$31|$30;
 $33=$32^2;
 $34=(($this+24)|0);
 $35=((($this)-(288)+16)|0);
 $36=$35;
 $37=((($this)-(288)+16)|0);
 $38=$37;
 $39=((($this)-(288)+16)|0);
 $40=$39;
 $41=((($this)-(288)+16)|0);
 $42=$41;
 $43=((($this)-(288)+16)|0);
 $44=$43;
 $45=((($this)-(288)+16)|0);
 $46=$45;
 $47=((($this)-(288)+16)|0);
 $48=$47;
 $49=((($this)-(288)+16)|0);
 $50=$49;
 $51=((($this)-(288)+16)|0);
 $52=$51;
 $53=((($this)-(288)+16)|0);
 $54=$53;
 $55=((($this)-(288)+16)|0);
 $56=$55;
 $57=((($this)-(288)+16)|0);
 $58=$57;
 $59=((($this)-(288)+16)|0);
 $60=$59;
 $61=((($this)-(288)+16)|0);
 $62=$61;
 $63=((($this)-(288)+16)|0);
 $64=$63;
 $65=((($this)-(288)+16)|0);
 $66=$65;
 $67=((($this)-(288)+16)|0);
 $68=$67;
 $69=((($this)-(288)+16)|0);
 $70=$69;
 $71=((($this)-(288)+16)|0);
 $72=$71;
 $73=(($this+20)|0);
 $74=$s;
 $75=$s;
 $76=(($this+20)|0);
 $77=$s;
 $78=(($8+65534)|0);
 $79=$s;
 $s_time_0=$6;$pc_1=$11;$a_0=$14;$x_0=$17;$y_0=$20;$sp_0=$25;$status_0=$29;$c_0=$30;$nz_0=$33;
 L2173: while(1) {
  $82=$status_0&4;
  $83=($82|0)!=0;
  $84=(($8+$pc_1)|0);
  $85=((HEAP8[($84)])|0);
  $86=($85&255);
  $87=((($pc_1)+(1))|0);
  $88=(($8+$87)|0);
  $89=((10048+$86)|0);
  $90=((HEAP8[($89)])|0);
  $91=($90&255);
  $92=((($91)+($s_time_0))|0);
  $93=($92|0)<0;
  $94=($92|0)<($91|0);
  $or_cond=$93|$94;
  if (!($or_cond)) {
   HEAP32[(($5)>>2)]=$s_time_0;
   $99=($s_time_0|0)<0;
   if ($99) {
    $s_time_0=$s_time_0;$pc_1=$pc_1;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue;
   } else {
    $illegal_encountered_0_off0=0;$s_time_27=$s_time_0;
    break;
   }
  }
  $96=((HEAP8[($88)])|0);
  $97=($96&255);
  L2178: do {
   switch (($86|0)) {
   case 228: {
    $492=(($8+$97)|0);
    $493=((HEAP8[($492)])|0);
    $494=($493&255);
    $pc_6=$87;$data_14=$494;
    label = 1996;
    break;
   }
   case 224: {
    $pc_6=$87;$data_14=$97;
    label = 1996;
    break;
   }
   case 204: {
    $501=((__Z8get_le16PKv($88))|0);
    $502=((($pc_1)+(2))|0);
    HEAP32[(($5)>>2)]=$92;
    $503=((__ZN7Sap_Emu8cpu_readEj($52,$501))|0);
    $pc_7=$502;$data_15=$503;
    label = 1999;
    break;
   }
   case 196: {
    $505=(($8+$97)|0);
    $506=((HEAP8[($505)])|0);
    $507=($506&255);
    $pc_7=$87;$data_15=$507;
    label = 1999;
    break;
   }
   case 192: {
    $pc_7=$87;$data_15=$97;
    label = 1999;
    break;
   }
   case 21: {
    $641=((($97)+($x_0))|0);
    $642=$641&255;
    $data_26=$642;
    label = 2021;
    break;
   }
   case 5: {
    $data_26=$97;
    label = 2021;
    break;
   }
   case 29: {
    $x_0_pn666=$x_0;
    label = 2023;
    break;
   }
   case 25: {
    $x_0_pn666=$y_0;
    label = 2023;
    break;
   }
   case 13: {
    $s_time_15=$92;$data_28=$97;
    label = 2024;
    break;
   }
   case 54: {
    $866=((($97)+($x_0))|0);
    $867=$866&255;
    $c_6=$c_0;$data_49=$867;
    label = 2068;
    break;
   }
   case 22: {
    $869=((($97)+($x_0))|0);
    $870=$869&255;
    $data_48=$870;
    label = 2067;
    break;
   }
   case 6: {
    $data_48=$97;
    label = 2067;
    break;
   }
   case 38: {
    $c_6=$c_0;$data_49=$97;
    label = 2068;
    break;
   }
   case 202: {
    $881=((($x_0)-(1))|0);
    $882=$881&255;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$882;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$881;
    continue L2173;
    break;
   }
   case 136: {
    $884=((($y_0)-(1))|0);
    $885=$884&255;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$885;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$884;
    continue L2173;
    break;
   }
   case 246: {
    $887=((($97)+($x_0))|0);
    $888=$887&255;
    $nz_2=1;$data_52=$888;
    label = 2074;
    break;
   }
   case 214: {
    $890=((($97)+($x_0))|0);
    $891=$890&255;
    $data_51=$891;
    label = 2073;
    break;
   }
   case 198: {
    $data_51=$97;
    label = 2073;
    break;
   }
   case 230: {
    $nz_2=1;$data_52=$97;
    label = 2074;
    break;
   }
   case 148: {
    $422=((($97)+($x_0))|0);
    $423=$422&255;
    $data_6=$423;
    label = 1977;
    break;
   }
   case 132: {
    $data_6=$97;
    label = 1977;
    break;
   }
   case 150: {
    $429=((($97)+($y_0))|0);
    $430=$429&255;
    $data_7=$430;
    label = 1979;
    break;
   }
   case 134: {
    $data_7=$97;
    label = 1979;
    break;
   }
   case 221: {
    $x_0_pn674=$x_0;
    label = 1938;
    break;
   }
   case 217: {
    $x_0_pn674=$y_0;
    label = 1938;
    break;
   }
   case 141: {
    $268=((__Z8get_le16PKv($88))|0);
    $269=((($pc_1)+(3))|0);
    $270=($268>>>0)<((2048)>>>0);
    if (!($270)) {
     $pc_4=$269;$addr10_0=$268;
     label = 1959;
     break L2178;
    }
    $272=(($a_0)&255);
    $273=(($8+$268)|0);
    HEAP8[($273)]=$272;
    $s_time_0=$92;$pc_1=$269;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 149: {
    $230=((($97)+($x_0))|0);
    $231=$230&255;
    $data_5=$231;
    label = 1947;
    break;
   }
   case 172: {
    $s_time_5=$92;$data_12=$97;
    label = 1987;
    break;
   }
   case 190: {
    $466=((($97)+($y_0))|0);
    $467=$466>>>8;
    $468=((($467)+($92))|0);
    $s_time_6=$468;$data_13=$466;
    label = 1989;
    break;
   }
   case 174: {
    $s_time_6=$92;$data_13=$97;
    label = 1989;
    break;
   }
   case 80: {
    $374=(($96<<24)>>24);
    $375=((($pc_1)+(2))|0);
    $376=$status_0&64;
    $377=($376|0)==0;
    if (!($377)) {
     $pc_0=$375;
     label = 1920;
     break L2178;
    }
    $379=$375&255;
    $380=((($374)+($379))|0);
    $381=((($374)+($375))|0);
    $382=$380>>>8;
    $383=$382&1;
    $384=((($383)+($92))|0);
    $s_time_0=$384;$pc_1=$381;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 77: {
    $s_time_12=$92;$data_23=$97;
    label = 2015;
    break;
   }
   case 73: {
    $s_time_14=$92;$pc_11=$87;$data_25=$97;
    label = 2017;
    break;
   }
   case 1: {
    $614=((($97)+($x_0))|0);
    $615=((($614)+(1))|0);
    $616=$615&255;
    $617=(($8+$616)|0);
    $618=((HEAP8[($617)])|0);
    $619=($618&255);
    $620=$619<<8;
    $621=$614&255;
    $622=(($8+$621)|0);
    $623=((HEAP8[($622)])|0);
    $624=($623&255);
    $625=$620|$624;
    $s_time_16=$92;$pc_12=$87;$data_29=$625;
    label = 2025;
    break;
   }
   case 17: {
    $627=(($8+$97)|0);
    $628=((HEAP8[($627)])|0);
    $629=($628&255);
    $630=((($629)+($y_0))|0);
    $631=((($96)+(1))&255);
    $632=($631&255);
    $633=(($8+$632)|0);
    $634=((HEAP8[($633)])|0);
    $635=($634&255);
    $636=$635<<8;
    $637=((($636)+($630))|0);
    $638=$630>>>8;
    $639=((($638)+($92))|0);
    $s_time_16=$639;$pc_12=$87;$data_29=$637;
    label = 2025;
    break;
   }
   case 32: {
    $125=((($pc_1)+(2))|0);
    $126=((__Z8get_le16PKv($88))|0);
    $127=$125>>>8;
    $128=(($127)&255);
    $129=((($sp_0)-(1))|0);
    $130=$129|256;
    $131=(($8+$130)|0);
    HEAP8[($131)]=$128;
    $132=((($sp_0)-(2))|0);
    $133=$132|256;
    $134=(($125)&255);
    $135=(($8+$133)|0);
    HEAP8[($135)]=$134;
    $s_time_0=$92;$pc_1=$126;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$133;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 9: {
    $s_time_17=$92;$pc_13=$87;$data_30=$97;
    label = 2026;
    break;
   }
   case 44: {
    $664=((__Z8get_le16PKv($88))|0);
    $665=((($pc_1)+(3))|0);
    $666=$status_0&-65;
    $667=((__ZN7Sap_Emu8cpu_readEj($60,$664))|0);
    $668=$667&64;
    $669=$668|$666;
    $670=$667&$a_0;
    $671=($670|0)==0;
    $672=$667<<8;
    $_=($671?$672:$667);
    $s_time_0=$92;$pc_1=$665;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$669;$c_0=$c_0;$nz_0=$_;
    continue L2173;
    break;
   }
   case 36: {
    $674=(($8+$97)|0);
    $675=((HEAP8[($674)])|0);
    $676=($675&255);
    $677=((($pc_1)+(2))|0);
    $678=$status_0&-65;
    $679=$676&64;
    $680=$679|$678;
    $681=$676&$a_0;
    $682=($681|0)==0;
    if (!($682)) {
     $s_time_0=$92;$pc_1=$677;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$680;$c_0=$c_0;$nz_0=$676;
     continue L2173;
    }
    $684=$676<<8;
    $s_time_0=$92;$pc_1=$677;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$680;$c_0=$c_0;$nz_0=$684;
    continue L2173;
    break;
   }
   case 225: {
    $686=((($97)+($x_0))|0);
    $687=((($686)+(1))|0);
    $688=$687&255;
    $689=(($8+$688)|0);
    $690=((HEAP8[($689)])|0);
    $691=($690&255);
    $692=$691<<8;
    $693=$686&255;
    $694=(($8+$693)|0);
    $695=((HEAP8[($694)])|0);
    $696=($695&255);
    $697=$692|$696;
    $s_time_19=$92;$pc_14=$87;$data_34=$697;
    label = 2037;
    break;
   }
   case 120: {
    if ($83) {
     $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L2173;
    }
    $1050=$status_0|4;
    $sp_2=$sp_0;$status_2=$1050;$c_9=$c_0;$nz_6=$nz_0;
    label = 2108;
    break;
   }
   case 28:case 60:case 92:case 124:case 220:case 252: {
    $1058=((($97)+($x_0))|0);
    $1059=$1058>>>8;
    $1060=((($1059)+($92))|0);
    $s_time_24=$1060;
    label = 2110;
    break;
   }
   case 12: {
    $s_time_24=$92;
    label = 2110;
    break;
   }
   case 116:case 4:case 20:case 52:case 68:case 84:case 100:case 128:case 130:case 137:case 194:case 212:case 226:case 244: {
    $s_time_25=$92;$pc_19=$87;
    label = 2111;
    break;
   }
   case 0: {
    $1066=($pc_1>>>0)>((65278)>>>0);
    if ($1066) {
     $illegal_encountered_0_off0=0;$s_time_27=$92;
     break L2173;
    }
    $1068=((($pc_1)+(2))|0);
    $extract_t=(($1068)&255);
    $extract=$1068>>>8;
    $extract_t654=(($extract)&255);
    $1069=((($sp_0)-(1))|0);
    $1070=$1069|256;
    $1071=(($8+$1070)|0);
    HEAP8[($1071)]=$extract_t654;
    $1072=((($sp_0)-(2))|0);
    $1073=$1072|256;
    $1074=(($8+$1073)|0);
    HEAP8[($1074)]=$extract_t;
    $1075=((__Z8get_le16PKv($78))|0);
    $1076=((($sp_0)-(3))|0);
    $1077=$1076|256;
    $1078=$status_0&76;
    $1079=$nz_0>>>8;
    $1080=$1079|$nz_0;
    $1081=$1080&128;
    $1082=$1078|$1081;
    $1083=$c_0>>>8;
    $1084=$1083&1;
    $1085=$1082|$1084;
    $1086=$nz_0&255;
    $1087=($1086|0)==0;
    $1088=$1085|2;
    $temp48_0=($1087?$1088:$1085);
    $1089=$temp48_0|48;
    $extract_t657=(($1089)&255);
    $1090=(($8+$1077)|0);
    HEAP8[($1090)]=$extract_t657;
    $1091=$status_0&-13;
    $1092=$1091|4;
    $1093=(($1092)&255);
    HEAP8[($26)]=$1093;
    $1094=((HEAP32[(($79)>>2)])|0);
    $1095=((HEAP32[(($34)>>2)])|0);
    HEAP32[(($79)>>2)]=$1095;
    $1096=((($92)+(7))|0);
    $1097=((($1096)+($1094))|0);
    $1098=((($1097)-($1095))|0);
    $s_time_0=$1098;$pc_1=$1075;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1077;$status_0=$1092;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 232: {
    $139=((($x_0)+(1))|0);
    $140=$139&255;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$140;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$139;
    continue L2173;
    break;
   }
   case 157: {
    $275=((__Z8get_le16PKv($88))|0);
    $276=((($275)+($x_0))|0);
    $277=((($pc_1)+(3))|0);
    $278=($276>>>0)<((2048)>>>0);
    if (!($278)) {
     $pc_4=$277;$addr10_0=$276;
     label = 1959;
     break L2178;
    }
    $280=(($a_0)&255);
    $281=(($8+$276)|0);
    HEAP8[($281)]=$280;
    $s_time_0=$92;$pc_1=$277;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 185: {
    $348=((($97)+($y_0))|0);
    $349=$348>>>8;
    $350=((($349)+($92))|0);
    $351=((__Z8get_le16PKv($88))|0);
    $352=((($351)+($y_0))|0);
    $353=((($pc_1)+(3))|0);
    $354=(($8+$352)|0);
    $355=((HEAP8[($354)])|0);
    $356=($355&255);
    $357=$352^32768;
    $358=($357>>>0)<((40960)>>>0);
    if ($358) {
     $s_time_0=$350;$pc_1=$353;$a_0=$356;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$356;
     continue L2173;
    } else {
     $s_time_4=$350;$pc_5=$353;$addr13_0=$352;
     label = 1967;
    }
    break;
   }
   case 189: {
    $360=((($97)+($x_0))|0);
    $361=$360>>>8;
    $362=((($361)+($92))|0);
    $363=((__Z8get_le16PKv($88))|0);
    $364=((($363)+($x_0))|0);
    $365=((($pc_1)+(3))|0);
    $366=(($8+$364)|0);
    $367=((HEAP8[($366)])|0);
    $368=($367&255);
    $369=$364^32768;
    $370=($369>>>0)<((40960)>>>0);
    if ($370) {
     $s_time_0=$362;$pc_1=$365;$a_0=$368;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$368;
     continue L2173;
    } else {
     $s_time_4=$362;$pc_5=$365;$addr13_0=$364;
     label = 1967;
    }
    break;
   }
   case 30: {
    $830=((($97)+($x_0))|0);
    $data_43=$830;
    label = 2057;
    break;
   }
   case 14: {
    $data_43=$97;
    label = 2057;
    break;
   }
   case 46: {
    $c_3=$c_0;$data_44=$97;
    label = 2058;
    break;
   }
   case 126: {
    $848=((($97)+($x_0))|0);
    $c_2=$c_0;$data_42=$848;
    label = 2054;
    break;
   }
   case 118: {
    $850=((($97)+($x_0))|0);
    $851=$850&255;
    $c_5=$c_0;$data_47=$851;
    label = 2064;
    break;
   }
   case 86: {
    $853=((($97)+($x_0))|0);
    $854=$853&255;
    $data_46=$854;
    label = 2063;
    break;
   }
   case 70: {
    $data_46=$97;
    label = 2063;
    break;
   }
   case 102: {
    $c_5=$c_0;$data_47=$97;
    label = 2064;
    break;
   }
   case 117: {
    $762=((($97)+($x_0))|0);
    $763=$762&255;
    $data_36=$763;
    label = 2042;
    break;
   }
   case 101: {
    $data_36=$97;
    label = 2042;
    break;
   }
   case 125: {
    $x_0_pn=$x_0;
    label = 2044;
    break;
   }
   case 121: {
    $x_0_pn=$y_0;
    label = 2044;
    break;
   }
   case 109: {
    $s_time_21=$92;$data_38=$97;
    label = 2045;
    break;
   }
   case 105: {
    $s_time_23=$92;$pc_17=$87;$data_40=$97;
    break;
   }
   case 74: {
    $c_1=0;
    label = 2049;
    break;
   }
   case 106: {
    $c_1=$c_0;
    label = 2049;
    break;
   }
   case 193: {
    $154=((($97)+($x_0))|0);
    $155=((($154)+(1))|0);
    $156=$155&255;
    $157=(($8+$156)|0);
    $158=((HEAP8[($157)])|0);
    $159=($158&255);
    $160=$159<<8;
    $161=$154&255;
    $162=(($8+$161)|0);
    $163=((HEAP8[($162)])|0);
    $164=($163&255);
    $165=$160|$164;
    $s_time_2=$92;$pc_2=$87;$data_3=$165;
    label = 1940;
    break;
   }
   case 182: {
    $436=((($97)+($y_0))|0);
    $437=$436&255;
    $data_8=$437;
    label = 1981;
    break;
   }
   case 166: {
    $data_8=$97;
    label = 1981;
    break;
   }
   case 162: {
    $data_9=$97;
    label = 1982;
    break;
   }
   case 180: {
    $445=((($97)+($x_0))|0);
    $446=$445&255;
    $data_10=$446;
    label = 1984;
    break;
   }
   case 164: {
    $data_10=$97;
    label = 1984;
    break;
   }
   case 160: {
    $data_11=$97;
    label = 1985;
    break;
   }
   case 188: {
    $454=((($97)+($x_0))|0);
    $455=$454>>>8;
    $456=((($455)+($92))|0);
    $s_time_5=$456;$data_12=$454;
    label = 1987;
    break;
   }
   case 145: {
    $285=(($8+$97)|0);
    $286=((HEAP8[($285)])|0);
    $287=($286&255);
    $288=((($287)+($y_0))|0);
    $289=((($96)+(1))&255);
    $290=($289&255);
    $291=(($8+$290)|0);
    $292=((HEAP8[($291)])|0);
    $293=($292&255);
    $294=$293<<8;
    $295=((($288)+($294))|0);
    $296=((($pc_1)+(2))|0);
    $pc_4=$296;$addr10_0=$295;
    label = 1959;
    break;
   }
   case 129: {
    $298=((($97)+($x_0))|0);
    $299=((($298)+(1))|0);
    $300=$299&255;
    $301=(($8+$300)|0);
    $302=((HEAP8[($301)])|0);
    $303=($302&255);
    $304=$303<<8;
    $305=$298&255;
    $306=(($8+$305)|0);
    $307=((HEAP8[($306)])|0);
    $308=($307&255);
    $309=$304|$308;
    $310=((($pc_1)+(2))|0);
    $pc_4=$310;$addr10_0=$309;
    label = 1959;
    break;
   }
   case 142: {
    $temp25_0=$x_0;
    label = 1991;
    break;
   }
   case 140: {
    $temp25_0=$y_0;
    label = 1991;
    break;
   }
   case 236: {
    $488=((__Z8get_le16PKv($88))|0);
    $489=((($pc_1)+(2))|0);
    HEAP32[(($5)>>2)]=$92;
    $490=((__ZN7Sap_Emu8cpu_readEj($50,$488))|0);
    $pc_6=$489;$data_14=$490;
    label = 1996;
    break;
   }
   case 64: {
    $938=(($8+$sp_0)|0);
    $939=((HEAP8[($938)])|0);
    $940=($939&255);
    $941=((($sp_0)-(255))|0);
    $942=$941|256;
    $943=(($8+$942)|0);
    $944=((HEAP8[($943)])|0);
    $945=($944&255);
    $946=((($sp_0)-(254))|0);
    $947=$946|256;
    $948=(($8+$947)|0);
    $949=((HEAP8[($948)])|0);
    $950=($949&255);
    $951=$950<<8;
    $952=$951|$945;
    $953=((($sp_0)-(253))|0);
    $954=$953|256;
    $955=$940&76;
    $956=$940<<8;
    $957=$940&2;
    $958=$957|$956;
    $959=$958^2;
    $960=(($955)&255);
    HEAP8[($26)]=$960;
    $961=$940^$status_0;
    $962=$961&4;
    $963=($962|0)==0;
    if ($963) {
     $s_time_0=$92;$pc_1=$952;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$954;$status_0=$955;$c_0=$956;$nz_0=$959;
     continue L2173;
    }
    $965=((HEAP32[(($34)>>2)])|0);
    $966=$940&4;
    $967=($966|0)==0;
    if ($967) {
     $969=((HEAP32[(($73)>>2)])|0);
     $970=($965|0)>($969|0);
     $_675=($970?$969:$965);
     $new_time_0=$_675;
    } else {
     $new_time_0=$965;
    }
    $972=((HEAP32[(($74)>>2)])|0);
    HEAP32[(($74)>>2)]=$new_time_0;
    $973=((($92)-($new_time_0))|0);
    $974=((($973)+($972))|0);
    $s_time_0=$974;$pc_1=$952;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$954;$status_0=$955;$c_0=$956;$nz_0=$959;
    continue L2173;
    break;
   }
   case 40: {
    $976=(($8+$sp_0)|0);
    $977=((HEAP8[($976)])|0);
    $978=($977&255);
    $979=((($sp_0)-(255))|0);
    $980=$979|256;
    $981=$978^$status_0;
    $982=$978&76;
    $983=$978<<8;
    $984=$978&2;
    $985=$984|$983;
    $986=$985^2;
    $987=$981&4;
    $988=($987|0)==0;
    if ($988) {
     $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$980;$status_0=$982;$c_0=$983;$nz_0=$986;
     continue L2173;
    }
    $990=$978&4;
    $991=($990|0)==0;
    if ($991) {
     $sp_1=$980;$status_1=$982;$c_8=$983;$nz_5=$986;
     label = 2102;
    } else {
     $sp_2=$980;$status_2=$982;$c_9=$983;$nz_6=$986;
     label = 2108;
    }
    break;
   }
   case 8: {
    $993=$status_0&76;
    $994=$nz_0>>>8;
    $995=$994|$nz_0;
    $996=$995&128;
    $997=$993|$996;
    $998=$c_0>>>8;
    $999=$998&1;
    $1000=$997|$999;
    $1001=$nz_0&255;
    $1002=($1001|0)==0;
    $1003=$1000|2;
    $temp45_0=($1002?$1003:$1000);
    $1004=((($sp_0)-(1))|0);
    $1005=$1004|256;
    $1006=$temp45_0|48;
    $1007=(($1006)&255);
    $1008=(($8+$1005)|0);
    HEAP8[($1008)]=$1007;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$1005;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 16: {
    $142=(($96<<24)>>24);
    $143=((($pc_1)+(2))|0);
    $144=$nz_0&32896;
    $145=($144|0)==0;
    if (!($145)) {
     $pc_0=$143;
     label = 1920;
     break L2178;
    }
    $147=$143&255;
    $148=((($142)+($147))|0);
    $149=((($142)+($143))|0);
    $150=$148>>>8;
    $151=$150&1;
    $152=((($151)+($92))|0);
    $s_time_0=$152;$pc_1=$149;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 168: {
    $s_time_0=$92;$pc_1=$87;$y_0=$a_0;$nz_0=$a_0;$a_0=$a_0;$x_0=$x_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L2173;
    break;
   }
   case 152: {
    $s_time_0=$92;$pc_1=$87;$a_0=$y_0;$x_0=$x_0;$nz_0=$y_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L2173;
    break;
   }
   case 173: {
    $242=((__Z8get_le16PKv($88))|0);
    $243=((($pc_1)+(3))|0);
    $244=((__ZN7Sap_Emu8cpu_readEj($38,$242))|0);
    $s_time_0=$92;$pc_1=$243;$a_0=$244;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$244;
    continue L2173;
    break;
   }
   case 237: {
    $s_time_18=$92;$data_33=$97;
    label = 2036;
    break;
   }
   case 233:case 235: {
    $s_time_20=$92;$pc_15=$87;$data_35=$97;
    label = 2038;
    break;
   }
   case 97: {
    $735=((($97)+($x_0))|0);
    $736=((($735)+(1))|0);
    $737=$736&255;
    $738=(($8+$737)|0);
    $739=((HEAP8[($738)])|0);
    $740=($739&255);
    $741=$740<<8;
    $742=$735&255;
    $743=(($8+$742)|0);
    $744=((HEAP8[($743)])|0);
    $745=($744&255);
    $746=$741|$745;
    $s_time_22=$92;$pc_16=$87;$data_39=$746;
    label = 2046;
    break;
   }
   case 113: {
    $748=(($8+$97)|0);
    $749=((HEAP8[($748)])|0);
    $750=($749&255);
    $751=((($750)+($y_0))|0);
    $752=((($96)+(1))&255);
    $753=($752&255);
    $754=(($8+$753)|0);
    $755=((HEAP8[($754)])|0);
    $756=($755&255);
    $757=$756<<8;
    $758=((($757)+($751))|0);
    $759=$751>>>8;
    $760=((($759)+($92))|0);
    $s_time_22=$760;$pc_16=$87;$data_39=$758;
    label = 2046;
    break;
   }
   case 33: {
    $514=((($97)+($x_0))|0);
    $515=((($514)+(1))|0);
    $516=$515&255;
    $517=(($8+$516)|0);
    $518=((HEAP8[($517)])|0);
    $519=($518&255);
    $520=$519<<8;
    $521=$514&255;
    $522=(($8+$521)|0);
    $523=((HEAP8[($522)])|0);
    $524=($523&255);
    $525=$520|$524;
    $s_time_10=$92;$pc_8=$87;$data_19=$525;
    label = 2007;
    break;
   }
   case 49: {
    $527=(($8+$97)|0);
    $528=((HEAP8[($527)])|0);
    $529=($528&255);
    $530=((($529)+($y_0))|0);
    $531=((($96)+(1))&255);
    $532=($531&255);
    $533=(($8+$532)|0);
    $534=((HEAP8[($533)])|0);
    $535=($534&255);
    $536=$535<<8;
    $537=((($536)+($530))|0);
    $538=$530>>>8;
    $539=((($538)+($92))|0);
    $s_time_10=$539;$pc_8=$87;$data_19=$537;
    label = 2007;
    break;
   }
   case 53: {
    $541=((($97)+($x_0))|0);
    $542=$541&255;
    $data_16=$542;
    label = 2003;
    break;
   }
   case 37: {
    $data_16=$97;
    label = 2003;
    break;
   }
   case 61: {
    $x_0_pn670=$x_0;
    label = 2005;
    break;
   }
   case 57: {
    $x_0_pn670=$y_0;
    label = 2005;
    break;
   }
   case 45: {
    $s_time_9=$92;$data_18=$97;
    label = 2006;
    break;
   }
   case 41: {
    $s_time_11=$92;$pc_9=$87;$data_20=$97;
    label = 2008;
    break;
   }
   case 65: {
    $564=((($97)+($x_0))|0);
    $565=((($564)+(1))|0);
    $566=$565&255;
    $567=(($8+$566)|0);
    $568=((HEAP8[($567)])|0);
    $569=($568&255);
    $570=$569<<8;
    $571=$564&255;
    $572=(($8+$571)|0);
    $573=((HEAP8[($572)])|0);
    $574=($573&255);
    $575=$570|$574;
    $s_time_13=$92;$pc_10=$87;$data_24=$575;
    label = 2016;
    break;
   }
   case 144: {
    $410=(($96<<24)>>24);
    $411=((($pc_1)+(2))|0);
    $412=$c_0&256;
    $413=($412|0)==0;
    if (!($413)) {
     $pc_0=$411;
     label = 1920;
     break L2178;
    }
    $415=$411&255;
    $416=((($410)+($415))|0);
    $417=((($410)+($411))|0);
    $418=$416>>>8;
    $419=$418&1;
    $420=((($419)+($92))|0);
    $s_time_0=$420;$pc_1=$417;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 161: {
    $314=((($97)+($x_0))|0);
    $315=((($314)+(1))|0);
    $316=$315&255;
    $317=(($8+$316)|0);
    $318=((HEAP8[($317)])|0);
    $319=($318&255);
    $320=$319<<8;
    $321=$314&255;
    $322=(($8+$321)|0);
    $323=((HEAP8[($322)])|0);
    $324=($323&255);
    $325=$320|$324;
    $326=((($pc_1)+(2))|0);
    $s_time_4=$92;$pc_5=$326;$addr13_0=$325;
    label = 1967;
    break;
   }
   case 177: {
    $328=(($8+$97)|0);
    $329=((HEAP8[($328)])|0);
    $330=($329&255);
    $331=((($330)+($y_0))|0);
    $332=$331>>>8;
    $333=((($332)+($92))|0);
    $334=((($96)+(1))&255);
    $335=($334&255);
    $336=(($8+$335)|0);
    $337=((HEAP8[($336)])|0);
    $338=($337&255);
    $339=$338<<8;
    $340=((($339)+($331))|0);
    $341=((($pc_1)+(2))|0);
    $342=(($8+$340)|0);
    $343=((HEAP8[($342)])|0);
    $344=($343&255);
    $345=$340^32768;
    $346=($345>>>0)<((40960)>>>0);
    if ($346) {
     $s_time_0=$333;$pc_1=$341;$a_0=$344;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$344;
     continue L2173;
    } else {
     $s_time_4=$333;$pc_5=$341;$addr13_0=$340;
     label = 1967;
    }
    break;
   }
   case 213: {
    $181=((($97)+($x_0))|0);
    $182=$181&255;
    $data_0=$182;
    label = 1936;
    break;
   }
   case 197: {
    $data_0=$97;
    label = 1936;
    break;
   }
   case 205: {
    $s_time_1=$92;$data_2=$97;
    label = 1939;
    break;
   }
   case 81: {
    $577=(($8+$97)|0);
    $578=((HEAP8[($577)])|0);
    $579=($578&255);
    $580=((($579)+($y_0))|0);
    $581=((($96)+(1))&255);
    $582=($581&255);
    $583=(($8+$582)|0);
    $584=((HEAP8[($583)])|0);
    $585=($584&255);
    $586=$585<<8;
    $587=((($586)+($580))|0);
    $588=$580>>>8;
    $589=((($588)+($92))|0);
    $s_time_13=$589;$pc_10=$87;$data_24=$587;
    label = 2016;
    break;
   }
   case 85: {
    $591=((($97)+($x_0))|0);
    $592=$591&255;
    $data_21=$592;
    label = 2012;
    break;
   }
   case 69: {
    $data_21=$97;
    label = 2012;
    break;
   }
   case 93: {
    $x_0_pn668=$x_0;
    label = 2014;
    break;
   }
   case 89: {
    $x_0_pn668=$y_0;
    label = 2014;
    break;
   }
   case 10: {
    $804=$a_0<<1;
    $805=$804&254;
    $s_time_0=$92;$pc_1=$87;$a_0=$805;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$804;$nz_0=$804;
    continue L2173;
    break;
   }
   case 42: {
    $807=$a_0<<1;
    $808=$c_0>>>8;
    $809=$808&1;
    $810=$807|$809;
    $811=$810&255;
    $s_time_0=$92;$pc_1=$87;$a_0=$811;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$807;$nz_0=$810;
    continue L2173;
    break;
   }
   case 94: {
    $813=((($97)+($x_0))|0);
    $data_41=$813;
    label = 2053;
    break;
   }
   case 78: {
    $data_41=$97;
    label = 2053;
    break;
   }
   case 110: {
    $c_2=$c_0;$data_42=$97;
    label = 2054;
    break;
   }
   case 62: {
    $828=((($97)+($x_0))|0);
    $c_3=$c_0;$data_44=$828;
    label = 2058;
    break;
   }
   case 208: {
    $113=(($96<<24)>>24);
    $114=((($pc_1)+(2))|0);
    $115=(($nz_0)&255);
    $116=(($115<<24)>>24)==0;
    if ($116) {
     $pc_0=$114;
     label = 1920;
     break L2178;
    }
    $118=$114&255;
    $119=((($113)+($118))|0);
    $120=((($113)+($114))|0);
    $121=$119>>>8;
    $122=$121&1;
    $123=((($122)+($92))|0);
    $s_time_0=$123;$pc_1=$120;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 112: {
    $386=(($96<<24)>>24);
    $387=((($pc_1)+(2))|0);
    $388=$status_0&64;
    $389=($388|0)==0;
    if ($389) {
     $pc_0=$387;
     label = 1920;
     break L2178;
    }
    $391=$387&255;
    $392=((($386)+($391))|0);
    $393=((($386)+($387))|0);
    $394=$392>>>8;
    $395=$394&1;
    $396=((($395)+($92))|0);
    $s_time_0=$396;$pc_1=$393;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 176: {
    $398=(($96<<24)>>24);
    $399=((($pc_1)+(2))|0);
    $400=$c_0&256;
    $401=($400|0)==0;
    if ($401) {
     $pc_0=$399;
     label = 1920;
     break L2178;
    }
    $403=$399&255;
    $404=((($398)+($403))|0);
    $405=((($398)+($399))|0);
    $406=$404>>>8;
    $407=$406&1;
    $408=((($407)+($92))|0);
    $s_time_0=$408;$pc_1=$405;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 76: {
    $137=((__Z8get_le16PKv($88))|0);
    $s_time_0=$92;$pc_1=$137;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 209: {
    $167=(($8+$97)|0);
    $168=((HEAP8[($167)])|0);
    $169=($168&255);
    $170=((($169)+($y_0))|0);
    $171=((($96)+(1))&255);
    $172=($171&255);
    $173=(($8+$172)|0);
    $174=((HEAP8[($173)])|0);
    $175=($174&255);
    $176=$175<<8;
    $177=((($176)+($170))|0);
    $178=$170>>>8;
    $179=((($178)+($92))|0);
    $s_time_2=$179;$pc_2=$87;$data_3=$177;
    label = 1940;
    break;
   }
   case 234:case 26:case 58:case 90:case 122:case 218:case 250: {
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 201: {
    $s_time_3=$92;$pc_3=$87;$data_4=$97;
    label = 1941;
    break;
   }
   case 240: {
    $218=(($96<<24)>>24);
    $219=((($pc_1)+(2))|0);
    $220=(($nz_0)&255);
    $221=(($220<<24)>>24)==0;
    if (!($221)) {
     $pc_0=$219;
     label = 1920;
     break L2178;
    }
    $223=$219&255;
    $224=((($218)+($223))|0);
    $225=((($218)+($219))|0);
    $226=$224>>>8;
    $227=$226&1;
    $228=((($227)+($92))|0);
    $s_time_0=$228;$pc_1=$225;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 48: {
    $206=(($96<<24)>>24);
    $207=((($pc_1)+(2))|0);
    $208=$nz_0&32896;
    $209=($208|0)==0;
    if ($209) {
     $pc_0=$207;
     label = 1920;
     break L2178;
    }
    $211=$207&255;
    $212=((($206)+($211))|0);
    $213=((($206)+($207))|0);
    $214=$212>>>8;
    $215=$214&1;
    $216=((($215)+($92))|0);
    $s_time_0=$216;$pc_1=$213;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 169: {
    $312=((($pc_1)+(2))|0);
    $s_time_0=$92;$pc_1=$312;$a_0=$97;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$97;
    continue L2173;
    break;
   }
   case 133: {
    $data_5=$97;
    label = 1947;
    break;
   }
   case 200: {
    $237=((($y_0)+(1))|0);
    $238=$237&255;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$238;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$237;
    continue L2173;
    break;
   }
   case 165: {
    $108=(($8+$97)|0);
    $109=((HEAP8[($108)])|0);
    $110=($109&255);
    $111=((($pc_1)+(2))|0);
    $s_time_0=$92;$pc_1=$111;$a_0=$110;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$110;
    continue L2173;
    break;
   }
   case 241: {
    $699=(($8+$97)|0);
    $700=((HEAP8[($699)])|0);
    $701=($700&255);
    $702=((($701)+($y_0))|0);
    $703=((($96)+(1))&255);
    $704=($703&255);
    $705=(($8+$704)|0);
    $706=((HEAP8[($705)])|0);
    $707=($706&255);
    $708=$707<<8;
    $709=((($708)+($702))|0);
    $710=$702>>>8;
    $711=((($710)+($92))|0);
    $s_time_19=$711;$pc_14=$87;$data_34=$709;
    label = 2037;
    break;
   }
   case 245: {
    $713=((($97)+($x_0))|0);
    $714=$713&255;
    $data_31=$714;
    label = 2033;
    break;
   }
   case 229: {
    $data_31=$97;
    label = 2033;
    break;
   }
   case 253: {
    $x_0_pn664=$x_0;
    label = 2035;
    break;
   }
   case 249: {
    $x_0_pn664=$y_0;
    label = 2035;
    break;
   }
   case 96: {
    $246=(($8+$sp_0)|0);
    $247=((HEAP8[($246)])|0);
    $248=($247&255);
    $249=((($248)+(1))|0);
    $250=((($sp_0)-(255))|0);
    $251=$250|256;
    $252=(($8+$251)|0);
    $253=((HEAP8[($252)])|0);
    $254=($253&255);
    $255=$254<<8;
    $256=((($249)+($255))|0);
    $257=((($sp_0)-(254))|0);
    $258=$257|256;
    $s_time_0=$92;$pc_1=$256;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$258;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 153: {
    $260=((__Z8get_le16PKv($88))|0);
    $261=((($260)+($y_0))|0);
    $262=((($pc_1)+(3))|0);
    $263=($261>>>0)<((2048)>>>0);
    if (!($263)) {
     $pc_4=$262;$addr10_0=$261;
     label = 1959;
     break L2178;
    }
    $265=(($a_0)&255);
    $266=(($8+$261)|0);
    HEAP8[($266)]=$265;
    $s_time_0=$92;$pc_1=$262;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 108: {
    $1010=((__Z8get_le16PKv($88))|0);
    $1011=(($8+$1010)|0);
    $1012=((HEAP8[($1011)])|0);
    $1013=($1012&255);
    $1014=$1010&65280;
    $1015=((($1010)+(1))|0);
    $1016=$1015&255;
    $1017=$1016|$1014;
    $1018=(($8+$1017)|0);
    $1019=((HEAP8[($1018)])|0);
    $1020=($1019&255);
    $1021=$1020<<8;
    $1022=$1021|$1013;
    $s_time_0=$92;$pc_1=$1022;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 56: {
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=-1;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 24: {
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 184: {
    $1026=$status_0&-65;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1026;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 216: {
    $1028=$status_0&-9;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1028;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 248: {
    $1030=$status_0|8;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$1030;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 88: {
    if (!($83)) {
     $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
     continue L2173;
    }
    $1033=$status_0&-5;
    $sp_1=$sp_0;$status_1=$1033;$c_8=$c_0;$nz_5=$nz_0;
    label = 2102;
    break;
   }
   case 181: {
    $101=((($97)+($x_0))|0);
    $102=$101&255;
    $103=(($8+$102)|0);
    $104=((HEAP8[($103)])|0);
    $105=($104&255);
    $106=((($pc_1)+(2))|0);
    $s_time_0=$92;$pc_1=$106;$a_0=$105;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$105;
    continue L2173;
    break;
   }
   case 254: {
    $903=((__Z8get_le16PKv($88))|0);
    $904=((($903)+($x_0))|0);
    $nz_4=1;$data_56=$904;
    label = 2080;
    break;
   }
   case 238: {
    $906=((__Z8get_le16PKv($88))|0);
    $nz_4=1;$data_56=$906;
    label = 2080;
    break;
   }
   case 222: {
    $908=((__Z8get_le16PKv($88))|0);
    $909=((($908)+($x_0))|0);
    $nz_4=-1;$data_56=$909;
    label = 2080;
    break;
   }
   case 206: {
    $911=((__Z8get_le16PKv($88))|0);
    $nz_4=-1;$data_56=$911;
    label = 2080;
    break;
   }
   case 170: {
    $s_time_0=$92;$pc_1=$87;$x_0=$a_0;$nz_0=$a_0;$a_0=$a_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L2173;
    break;
   }
   case 138: {
    $s_time_0=$92;$pc_1=$87;$a_0=$x_0;$nz_0=$x_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;
    continue L2173;
    break;
   }
   case 154: {
    $921=((($x_0)+(1))|0);
    $922=$921|256;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$922;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 186: {
    $924=((($sp_0)+(255))|0);
    $925=$924&255;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$925;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$925;
    continue L2173;
    break;
   }
   case 72: {
    $927=((($sp_0)-(1))|0);
    $928=$927|256;
    $929=(($a_0)&255);
    $930=(($8+$928)|0);
    HEAP8[($930)]=$929;
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$928;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue L2173;
    break;
   }
   case 104: {
    $932=(($8+$sp_0)|0);
    $933=((HEAP8[($932)])|0);
    $934=($933&255);
    $935=((($sp_0)-(255))|0);
    $936=$935|256;
    $s_time_0=$92;$pc_1=$87;$a_0=$934;$x_0=$x_0;$y_0=$y_0;$sp_0=$936;$status_0=$status_0;$c_0=$c_0;$nz_0=$934;
    continue L2173;
    break;
   }
   default: {
    $illegal_encountered_0_off0=1;$s_time_27=$92;
    break L2173;
   }
   }
  } while(0);
  if ((label|0) == 1996) {
   label = 0;
   $496=((($x_0)-($data_14))|0);
   $497=((($pc_6)+(1))|0);
   $498=$496^-1;
   $499=$496&255;
   $s_time_0=$92;$pc_1=$497;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$498;$nz_0=$499;
   continue;
  }
  else if ((label|0) == 1999) {
   label = 0;
   $509=((($y_0)-($data_15))|0);
   $510=((($pc_7)+(1))|0);
   $511=$509^-1;
   $512=$509&255;
   $s_time_0=$92;$pc_1=$510;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$511;$nz_0=$512;
   continue;
  }
  else if ((label|0) == 2021) {
   label = 0;
   $644=(($8+$data_26)|0);
   $645=((HEAP8[($644)])|0);
   $646=($645&255);
   $s_time_17=$92;$pc_13=$87;$data_30=$646;
   label = 2026;
  }
  else if ((label|0) == 2023) {
   label = 0;
   $data_27=((($x_0_pn666)+($97))|0);
   $649=$data_27>>>8;
   $650=((($649)+($92))|0);
   $s_time_15=$650;$data_28=$data_27;
   label = 2024;
  }
  else if ((label|0) == 2067) {
   label = 0;
   $c_6=0;$data_49=$data_48;
   label = 2068;
  }
  else if ((label|0) == 2073) {
   label = 0;
   $nz_2=-1;$data_52=$data_51;
   label = 2074;
  }
  else if ((label|0) == 1977) {
   label = 0;
   $425=((($pc_1)+(2))|0);
   $426=(($y_0)&255);
   $427=(($8+$data_6)|0);
   HEAP8[($427)]=$426;
   $s_time_0=$92;$pc_1=$425;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 1979) {
   label = 0;
   $432=((($pc_1)+(2))|0);
   $433=(($x_0)&255);
   $434=(($8+$data_7)|0);
   HEAP8[($434)]=$433;
   $s_time_0=$92;$pc_1=$432;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 1938) {
   label = 0;
   $data_1=((($x_0_pn674)+($97))|0);
   $189=$data_1>>>8;
   $190=((($189)+($92))|0);
   $s_time_1=$190;$data_2=$data_1;
   label = 1939;
  }
  else if ((label|0) == 1987) {
   label = 0;
   $_sum672=((($pc_1)+(2))|0);
   $458=(($8+$_sum672)|0);
   $459=((HEAP8[($458)])|0);
   $460=($459&255);
   $461=$460<<8;
   $462=((($461)+($data_12))|0);
   $463=((($pc_1)+(3))|0);
   HEAP32[(($5)>>2)]=$s_time_5;
   $464=((__ZN7Sap_Emu8cpu_readEj($44,$462))|0);
   $s_time_0=$s_time_5;$pc_1=$463;$a_0=$a_0;$x_0=$x_0;$y_0=$464;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$464;
   continue;
  }
  else if ((label|0) == 1989) {
   label = 0;
   $_sum671=((($pc_1)+(2))|0);
   $470=(($8+$_sum671)|0);
   $471=((HEAP8[($470)])|0);
   $472=($471&255);
   $473=$472<<8;
   $474=((($473)+($data_13))|0);
   $475=((($pc_1)+(3))|0);
   HEAP32[(($5)>>2)]=$s_time_6;
   $476=((__ZN7Sap_Emu8cpu_readEj($46,$474))|0);
   $s_time_0=$s_time_6;$pc_1=$475;$a_0=$a_0;$x_0=$476;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$476;
   continue;
  }
  else if ((label|0) == 2108) {
   label = 0;
   $1052=(($status_2)&255);
   HEAP8[($26)]=$1052;
   $1053=((HEAP32[(($77)>>2)])|0);
   $1054=((HEAP32[(($34)>>2)])|0);
   HEAP32[(($77)>>2)]=$1054;
   $1055=((($1053)+($92))|0);
   $1056=((($1055)-($1054))|0);
   $s_time_0=$1056;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_2;$status_0=$status_2;$c_0=$c_9;$nz_0=$nz_6;
   continue;
  }
  else if ((label|0) == 2110) {
   label = 0;
   $1062=((($pc_1)+(2))|0);
   $s_time_25=$s_time_24;$pc_19=$1062;
   label = 2111;
  }
  else if ((label|0) == 2057) {
   label = 0;
   $c_3=0;$data_44=$data_43;
   label = 2058;
  }
  else if ((label|0) == 2063) {
   label = 0;
   $c_5=0;$data_47=$data_46;
   label = 2064;
  }
  else if ((label|0) == 2042) {
   label = 0;
   $765=(($8+$data_36)|0);
   $766=((HEAP8[($765)])|0);
   $767=($766&255);
   $s_time_23=$92;$pc_17=$87;$data_40=$767;
  }
  else if ((label|0) == 2044) {
   label = 0;
   $data_37=((($x_0_pn)+($97))|0);
   $770=$data_37>>>8;
   $771=((($770)+($92))|0);
   $s_time_21=$771;$data_38=$data_37;
   label = 2045;
  }
  else if ((label|0) == 2049) {
   label = 0;
   $798=$c_1>>>1;
   $799=$798&128;
   $800=$a_0<<8;
   $801=$a_0>>>1;
   $802=$799|$801;
   $s_time_0=$92;$pc_1=$87;$a_0=$802;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$800;$nz_0=$802;
   continue;
  }
  else if ((label|0) == 1981) {
   label = 0;
   $439=(($8+$data_8)|0);
   $440=((HEAP8[($439)])|0);
   $441=($440&255);
   $data_9=$441;
   label = 1982;
  }
  else if ((label|0) == 1984) {
   label = 0;
   $448=(($8+$data_10)|0);
   $449=((HEAP8[($448)])|0);
   $450=($449&255);
   $data_11=$450;
   label = 1985;
  }
  else if ((label|0) == 1959) {
   label = 0;
   HEAP32[(($5)>>2)]=$92;
   __ZN7Sap_Emu9cpu_writeEji($40,$addr10_0,$a_0);
   $283=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$283;$pc_1=$pc_4;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 1991) {
   label = 0;
   $479=((__Z8get_le16PKv($88))|0);
   $480=((($pc_1)+(3))|0);
   $481=($479>>>0)<((2048)>>>0);
   if ($481) {
    $483=(($temp25_0)&255);
    $484=(($8+$479)|0);
    HEAP8[($484)]=$483;
    $s_time_0=$92;$pc_1=$480;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue;
   } else {
    HEAP32[(($5)>>2)]=$92;
    __ZN7Sap_Emu9cpu_writeEji($48,$479,$temp25_0);
    $486=((HEAP32[(($5)>>2)])|0);
    $s_time_0=$486;$pc_1=$480;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
    continue;
   }
  }
  else if ((label|0) == 1967) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_4;
   $372=((__ZN7Sap_Emu8cpu_readEj($42,$addr13_0))|0);
   $s_time_0=$s_time_4;$pc_1=$pc_5;$a_0=$372;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$372;
   continue;
  }
  else if ((label|0) == 2003) {
   label = 0;
   $544=(($8+$data_16)|0);
   $545=((HEAP8[($544)])|0);
   $546=($545&255);
   $s_time_11=$92;$pc_9=$87;$data_20=$546;
   label = 2008;
  }
  else if ((label|0) == 2005) {
   label = 0;
   $data_17=((($x_0_pn670)+($97))|0);
   $549=$data_17>>>8;
   $550=((($549)+($92))|0);
   $s_time_9=$550;$data_18=$data_17;
   label = 2006;
  }
  else if ((label|0) == 1920) {
   label = 0;
   $81=((($92)-(1))|0);
   $s_time_0=$81;$pc_1=$pc_0;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 1936) {
   label = 0;
   $184=(($8+$data_0)|0);
   $185=((HEAP8[($184)])|0);
   $186=($185&255);
   $s_time_3=$92;$pc_3=$87;$data_4=$186;
   label = 1941;
  }
  else if ((label|0) == 2012) {
   label = 0;
   $594=(($8+$data_21)|0);
   $595=((HEAP8[($594)])|0);
   $596=($595&255);
   $s_time_14=$92;$pc_11=$87;$data_25=$596;
   label = 2017;
  }
  else if ((label|0) == 2014) {
   label = 0;
   $data_22=((($x_0_pn668)+($97))|0);
   $599=$data_22>>>8;
   $600=((($599)+($92))|0);
   $s_time_12=$600;$data_23=$data_22;
   label = 2015;
  }
  else if ((label|0) == 2053) {
   label = 0;
   $c_2=0;$data_42=$data_41;
   label = 2054;
  }
  else if ((label|0) == 1947) {
   label = 0;
   $233=((($pc_1)+(2))|0);
   $234=(($a_0)&255);
   $235=(($8+$data_5)|0);
   HEAP8[($235)]=$234;
   $s_time_0=$92;$pc_1=$233;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 2033) {
   label = 0;
   $716=(($8+$data_31)|0);
   $717=((HEAP8[($716)])|0);
   $718=($717&255);
   $s_time_20=$92;$pc_15=$87;$data_35=$718;
   label = 2038;
  }
  else if ((label|0) == 2035) {
   label = 0;
   $data_32=((($x_0_pn664)+($97))|0);
   $721=$data_32>>>8;
   $722=((($721)+($92))|0);
   $s_time_18=$722;$data_33=$data_32;
   label = 2036;
  }
  else if ((label|0) == 2102) {
   label = 0;
   $1035=(($status_1)&255);
   HEAP8[($26)]=$1035;
   $1036=((HEAP32[(($75)>>2)])|0);
   $1037=((HEAP32[(($76)>>2)])|0);
   $1038=((($1036)-($1037))|0);
   $1039=($1038|0)<1;
   if ($1039) {
    $s_time_0=$92;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
    continue;
   }
   HEAP32[(($75)>>2)]=$1037;
   $1041=((($1038)+($92))|0);
   $1042=($1041|0)<0;
   if ($1042) {
    $s_time_0=$1041;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
    continue;
   }
   $1044=((($1041)+(1))|0);
   $1045=($1038|0)<($1044|0);
   if ($1045) {
    $s_time_0=$1041;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
    continue;
   }
   $1047=((($1044)+($1037))|0);
   HEAP32[(($75)>>2)]=$1047;
   HEAP32[(($76)>>2)]=$1047;
   $s_time_0=-1;$pc_1=$87;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_1;$status_0=$status_1;$c_0=$c_8;$nz_0=$nz_5;
   continue;
  }
  else if ((label|0) == 2080) {
   label = 0;
   HEAP32[(($5)>>2)]=$92;
   $913=((__ZN7Sap_Emu8cpu_readEj($72,$data_56))|0);
   $914=((($913)+($nz_4))|0);
   $915=((($pc_1)+(3))|0);
   $916=$914&255;
   __ZN7Sap_Emu9cpu_writeEji($72,$data_56,$916);
   $917=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$917;$pc_1=$915;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$914;
   continue;
  }
  if ((label|0) == 2024) {
   label = 0;
   $652=((($pc_1)+(2))|0);
   $653=(($8+$652)|0);
   $654=((HEAP8[($653)])|0);
   $655=($654&255);
   $656=$655<<8;
   $657=((($656)+($data_28))|0);
   $s_time_16=$s_time_15;$pc_12=$652;$data_29=$657;
   label = 2025;
  }
  else if ((label|0) == 2068) {
   label = 0;
   $873=$c_6>>>8;
   $874=$873&1;
   $875=(($8+$data_49)|0);
   $876=((HEAP8[($875)])|0);
   $877=($876&255);
   $878=$877<<1;
   $879=$878|$874;
   $c_7=$878;$nz_3=$879;$data_53=$data_49;
   label = 2075;
  }
  else if ((label|0) == 2074) {
   label = 0;
   $894=(($8+$data_52)|0);
   $895=((HEAP8[($894)])|0);
   $896=($895&255);
   $897=((($896)+($nz_2))|0);
   $c_7=$c_0;$nz_3=$897;$data_53=$data_52;
   label = 2075;
  }
  else if ((label|0) == 2015) {
   label = 0;
   $602=((($pc_1)+(2))|0);
   $603=(($8+$602)|0);
   $604=((HEAP8[($603)])|0);
   $605=($604&255);
   $606=$605<<8;
   $607=((($606)+($data_23))|0);
   $s_time_13=$s_time_12;$pc_10=$602;$data_24=$607;
   label = 2016;
  }
  else if ((label|0) == 2111) {
   label = 0;
   $1064=((($pc_19)+(1))|0);
   $s_time_0=$s_time_25;$pc_1=$1064;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$nz_0;
   continue;
  }
  else if ((label|0) == 2058) {
   label = 0;
   $_sum661=((($pc_1)+(2))|0);
   $833=(($8+$_sum661)|0);
   $834=((HEAP8[($833)])|0);
   $835=($834&255);
   $836=$835<<8;
   $837=((($836)+($data_44))|0);
   $838=$c_3>>>8;
   $839=$838&1;
   HEAP32[(($5)>>2)]=$92;
   $840=((__ZN7Sap_Emu8cpu_readEj($70,$837))|0);
   $841=$840<<1;
   $842=$841|$839;
   $c_4=$841;$nz_1=$842;$data_45=$837;
   label = 2059;
  }
  else if ((label|0) == 2064) {
   label = 0;
   $857=(($8+$data_47)|0);
   $858=((HEAP8[($857)])|0);
   $859=($858&255);
   $860=$c_5>>>1;
   $861=$860&128;
   $862=$859>>>1;
   $863=$862|$861;
   $864=$859<<8;
   $c_7=$864;$nz_3=$863;$data_53=$data_47;
   label = 2075;
  }
  else if ((label|0) == 2045) {
   label = 0;
   $773=((($pc_1)+(2))|0);
   $774=(($8+$773)|0);
   $775=((HEAP8[($774)])|0);
   $776=($775&255);
   $777=$776<<8;
   $778=((($777)+($data_38))|0);
   $s_time_22=$s_time_21;$pc_16=$773;$data_39=$778;
   label = 2046;
  }
  else if ((label|0) == 1982) {
   label = 0;
   $443=((($pc_1)+(2))|0);
   $s_time_0=$92;$pc_1=$443;$a_0=$a_0;$x_0=$data_9;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$data_9;
   continue;
  }
  else if ((label|0) == 1985) {
   label = 0;
   $452=((($pc_1)+(2))|0);
   $s_time_0=$92;$pc_1=$452;$a_0=$a_0;$x_0=$x_0;$y_0=$data_11;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$data_11;
   continue;
  }
  else if ((label|0) == 2036) {
   label = 0;
   $724=((($pc_1)+(2))|0);
   $725=(($8+$724)|0);
   $726=((HEAP8[($725)])|0);
   $727=($726&255);
   $728=$727<<8;
   $729=((($728)+($data_33))|0);
   $s_time_19=$s_time_18;$pc_14=$724;$data_34=$729;
   label = 2037;
  }
  else if ((label|0) == 2006) {
   label = 0;
   $552=((($pc_1)+(2))|0);
   $553=(($8+$552)|0);
   $554=((HEAP8[($553)])|0);
   $555=($554&255);
   $556=$555<<8;
   $557=((($556)+($data_18))|0);
   $s_time_10=$s_time_9;$pc_8=$552;$data_19=$557;
   label = 2007;
  }
  else if ((label|0) == 1939) {
   label = 0;
   $192=((($pc_1)+(2))|0);
   $193=(($8+$192)|0);
   $194=((HEAP8[($193)])|0);
   $195=($194&255);
   $196=$195<<8;
   $197=((($196)+($data_2))|0);
   $s_time_2=$s_time_1;$pc_2=$192;$data_3=$197;
   label = 1940;
  }
  else if ((label|0) == 2054) {
   label = 0;
   $_sum=((($pc_1)+(2))|0);
   $816=(($8+$_sum)|0);
   $817=((HEAP8[($816)])|0);
   $818=($817&255);
   $819=$818<<8;
   $820=((($819)+($data_42))|0);
   HEAP32[(($5)>>2)]=$92;
   $821=((__ZN7Sap_Emu8cpu_readEj($66,$820))|0);
   $822=$c_2>>>1;
   $823=$822&128;
   $824=$821>>1;
   $825=$824|$823;
   $826=$821<<8;
   $c_4=$826;$nz_1=$825;$data_45=$820;
   label = 2059;
  }
  if ((label|0) == 2075) {
   label = 0;
   $899=((($pc_1)+(2))|0);
   $900=(($nz_3)&255);
   $901=(($8+$data_53)|0);
   HEAP8[($901)]=$900;
   $s_time_0=$92;$pc_1=$899;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_7;$nz_0=$nz_3;
   continue;
  }
  else if ((label|0) == 2016) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_13;
   $609=((__ZN7Sap_Emu8cpu_readEj($56,$data_24))|0);
   $s_time_14=$s_time_13;$pc_11=$pc_10;$data_25=$609;
   label = 2017;
  }
  else if ((label|0) == 2025) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_16;
   $659=((__ZN7Sap_Emu8cpu_readEj($58,$data_29))|0);
   $s_time_17=$s_time_16;$pc_13=$pc_12;$data_30=$659;
   label = 2026;
  }
  else if ((label|0) == 2059) {
   label = 0;
   $844=((($pc_1)+(3))|0);
   $845=$nz_1&255;
   __ZN7Sap_Emu9cpu_writeEji($68,$data_45,$845);
   $846=((HEAP32[(($5)>>2)])|0);
   $s_time_0=$846;$pc_1=$844;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_4;$nz_0=$nz_1;
   continue;
  }
  else if ((label|0) == 2046) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_22;
   $780=((__ZN7Sap_Emu8cpu_readEj($64,$data_39))|0);
   $s_time_23=$s_time_22;$pc_17=$pc_16;$data_40=$780;
  }
  else if ((label|0) == 2037) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_19;
   $731=((__ZN7Sap_Emu8cpu_readEj($62,$data_34))|0);
   $s_time_20=$s_time_19;$pc_15=$pc_14;$data_35=$731;
   label = 2038;
  }
  else if ((label|0) == 2007) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_10;
   $559=((__ZN7Sap_Emu8cpu_readEj($54,$data_19))|0);
   $s_time_11=$s_time_10;$pc_9=$pc_8;$data_20=$559;
   label = 2008;
  }
  else if ((label|0) == 1940) {
   label = 0;
   HEAP32[(($5)>>2)]=$s_time_2;
   $199=((__ZN7Sap_Emu8cpu_readEj($36,$data_3))|0);
   $s_time_3=$s_time_2;$pc_3=$pc_2;$data_4=$199;
   label = 1941;
  }
  if ((label|0) == 2017) {
   label = 0;
   $611=$data_25^$a_0;
   $612=((($pc_11)+(1))|0);
   $s_time_0=$s_time_14;$pc_1=$612;$a_0=$611;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$611;
   continue;
  }
  else if ((label|0) == 2026) {
   label = 0;
   $661=$data_30|$a_0;
   $662=((($pc_13)+(1))|0);
   $s_time_0=$s_time_17;$pc_1=$662;$a_0=$661;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$661;
   continue;
  }
  else if ((label|0) == 2038) {
   label = 0;
   $733=$data_35^255;
   $s_time_23=$s_time_20;$pc_17=$pc_15;$data_40=$733;
  }
  else if ((label|0) == 2008) {
   label = 0;
   $561=$data_20&$a_0;
   $562=((($pc_9)+(1))|0);
   $s_time_0=$s_time_11;$pc_1=$562;$a_0=$561;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$c_0;$nz_0=$561;
   continue;
  }
  else if ((label|0) == 1941) {
   label = 0;
   $201=((($a_0)-($data_4))|0);
   $202=((($pc_3)+(1))|0);
   $203=$201^-1;
   $204=$201&255;
   $s_time_0=$s_time_3;$pc_1=$202;$a_0=$a_0;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$status_0;$c_0=$203;$nz_0=$204;
   continue;
  }
  $782=$c_0>>>8;
  $783=$782&1;
  $784=$a_0^128;
  $785=((($784)+($783))|0);
  $sext=$data_40<<24;
  $786=$sext>>24;
  $787=((($785)+($786))|0);
  $788=$status_0&-65;
  $789=$787>>>2;
  $790=$789&64;
  $791=$790|$788;
  $792=((($a_0)+($783))|0);
  $793=((($792)+($data_40))|0);
  $794=((($pc_17)+(1))|0);
  $795=$793&255;
  $s_time_0=$s_time_23;$pc_1=$794;$a_0=$795;$x_0=$x_0;$y_0=$y_0;$sp_0=$sp_0;$status_0=$791;$c_0=$793;$nz_0=$793;
 }
 HEAP32[(($5)>>2)]=$s_time_27;
 $1100=(($pc_1)&65535);
 HEAP16[(($9)>>1)]=$1100;
 $1101=((($sp_0)+(255))|0);
 $1102=(($1101)&255);
 HEAP8[($21)]=$1102;
 $1103=(($a_0)&255);
 HEAP8[($12)]=$1103;
 $1104=(($x_0)&255);
 HEAP8[($15)]=$1104;
 $1105=(($y_0)&255);
 HEAP8[($18)]=$1105;
 $1106=$status_0&76;
 $1107=$nz_0>>>8;
 $1108=$1107|$nz_0;
 $1109=$1108&128;
 $1110=$1106|$1109;
 $1111=$c_0>>>8;
 $1112=$1111&1;
 $1113=$1110|$1112;
 $1114=$nz_0&255;
 $1115=($1114|0)==0;
 $extract_t659=(($1113)&255);
 if (!($1115)) {
  $temp50_0_off0=$extract_t659;
  HEAP8[($26)]=$temp50_0_off0;
  $ld$4$0=(($s)|0);
  $1119$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($s+4)|0);
  $1119$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $st$6$0=(($2)|0);
  HEAP32[(($st$6$0)>>2)]=$1119$0;
  $st$7$1=(($2+4)|0);
  HEAP32[(($st$7$1)>>2)]=$1119$1;
  HEAP32[(($4)>>2)]=$1;
  STACKTOP=sp;return (($illegal_encountered_0_off0)|0);
 }
 $1117=$1113|2;
 $extract_t660=(($1117)&255);
 $temp50_0_off0=$extract_t660;
 HEAP8[($26)]=$temp50_0_off0;
 $ld$4$0=(($s)|0);
 $1119$0=((HEAP32[(($ld$4$0)>>2)])|0);
 $ld$5$1=(($s+4)|0);
 $1119$1=((HEAP32[(($ld$5$1)>>2)])|0);
 $st$6$0=(($2)|0);
 HEAP32[(($st$6$0)>>2)]=$1119$0;
 $st$7$1=(($2+4)|0);
 HEAP32[(($st$7$1)>>2)]=$1119$1;
 HEAP32[(($4)>>2)]=$1;
 STACKTOP=sp;return (($illegal_encountered_0_off0)|0);
}
function __ZN7Sap_Cpu12set_end_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=$t;
 $2=(($this+20)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((__ZN7Sap_Cpu15update_end_timeEii($this,$t,$3))|0);
 $5=(($this+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)+($4))|0);
 HEAP32[(($7)>>2)]=$9;
 return;
}
function __ZN7Sap_Cpu15update_end_timeEii($this,$t,$irq){
 $this=($this)|0;
 $t=($t)|0;
 $irq=($irq)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$irq_t=0,$_0=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=($irq|0)<($t|0);
 if ($1) {
  $3=(($this+5)|0);
  $4=((HEAP8[($3)])|0);
  $5=$4&4;
  $6=(($5<<24)>>24)==0;
  $irq_t=($6?$irq:$t);
  $_0=$irq_t;
 } else {
  $_0=$t;
 }
 $8=(($this+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((($11)-($_0))|0);
 HEAP32[(($10)>>2)]=$_0;
 return (($12)|0);
}
function __ZN7Sap_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$9=0,$11=0,$12=0,$14$0=0,$14$1=0,$17$0=0,$17$1=0,label=0;
 $1=(($this+272)|0);
 $2=$1;
 __ZN7Sap_CpuC2Ev($2);
 $3=(($this)|0);
 __ZN11Classic_EmuC2Ev($3);
 $4=$this;
 HEAP32[(($4)>>2)]=13416;
 $5=(($this+900)|0);
 __ZN7Sap_ApuC2Ev($5);
 $7=(($this+1004)|0);
 __ZN7Sap_ApuC2Ev($7);
 $9=(($this+67160)|0);
 __ZN12Sap_Apu_ImplC2Ev($9);
 $11=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($11,128);
 $12=$this;
 __ZN9Music_Emu15set_voice_namesEPKPKc($12,10016);
 __ZN11Classic_Emu15set_voice_typesEPKi($3,9984);
 __ZN9Music_Emu21set_silence_lookaheadEi($12,6);
 return;
}
function __ZN7Sap_CpuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+12)|0);
 $2=(($this+8)|0);
 HEAP32[(($2)>>2)]=$1;
 return;
}
function __ZN7Sap_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Sap_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Sap_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN11Classic_EmuD2Ev($1);
 return;
}
function __ZNK7Sap_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+304)|0);
 __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($in,$out){
 $in=($in)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($out+272)|0);
 $2=(($in+289)|0);
 __ZN8Gme_File11copy_field_EPcPKc($1,$2);
 $3=(($out+784)|0);
 $4=(($in+33)|0);
 __ZN8Gme_File11copy_field_EPcPKc($3,$4);
 $5=(($out+1040)|0);
 $6=(($in+545)|0);
 __ZN8Gme_File11copy_field_EPcPKc($5,$6);
 return;
}
function __ZL11new_sap_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(84432))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Sap_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL12new_sap_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(832))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Sap_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Sap_Emu9load_mem_EPKhl($this,$in,$size){
 $this=($this)|0;
 $in=($in)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=.0,$25=0,$26=0,$_0=0,label=0;
 $1=(($in+$size)|0);
 $2=(($this+884)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($this+304)|0);
 $4=(($this+308)|0);
 HEAP32[(($4)>>2)]=0;
 $5=(($this+324)|0);
 HEAP32[(($5)>>2)]=66;
 $6=(($this+336)|0);
 HEAP8[($6)]=0;
 $7=(($this+312)|0);
 HEAP32[(($7)>>2)]=-1;
 $8=(($this+316)|0);
 HEAP32[(($8)>>2)]=-1;
 $9=(($this+320)|0);
 HEAP32[(($9)>>2)]=-1;
 $10=(($this+332)|0);
 HEAP32[(($10)>>2)]=312;
 $11=((__ZL10parse_infoPKhlPN7Sap_Emu6info_tE($in,$size,$3))|0);
 $12=($11|0)==0;
 if (!($12)) {
  $_0=$11;
  return (($_0)|0);
 }
 $14=$this;
 $15=((HEAP32[(($4)>>2)])|0);
 __ZN8Gme_File11set_warningEPKc($14,$15);
 $16=(($this+328)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 __ZN8Gme_File15set_track_countEi($14,$17);
 $18=$this;
 $19=((HEAP8[($6)])|0);
 $20=$19&1;
 $21=($20&255);
 $22=4<<$21;
 __ZN9Music_Emu15set_voice_countEi($18,$22);
 $23=(($this+67160)|0);
 $24=(+(__ZNK9Music_Emu4gainEv($18)));
 __ZN12Sap_Apu_Impl6volumeEd($23,$24);
 $25=(($this)|0);
 $26=((__ZN11Classic_Emu12setup_bufferEl($25,1773447))|0);
 $_0=$26;
 return (($_0)|0);
}
function __ZL10parse_infoPKhlPN7Sap_Emu6info_tE($in,$size,$out){
 $in=($in)|0;
 $size=($size)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$_sum=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$_08086=0,$20=0,$21=0;
 var $23=0,$24=0,$25=0,$line_end_0=0,$26=0,$28=0,$29=0,$30=0,$_1=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$_2=0,$40=0,$42=0,$43=0;
 var $44=0,$45=0,$47=0,$48=0,$50=0,$51=0,$53=0,$54=0,$56=0,$57=0,$59=0,$60=0,$62=0,$63=0,$65=0,$66=0,$68=0,$69=0,$71=0,$72=0;
 var $74=0,$75=0,$77=0,$78=0,$81=0,$82=0,$84=0,$85=0,$87=0,$88=0,$91=0,$92=0,$95=0,$96=0,$99=0,$100=0,$_080_lcssa=0,$101=0,$102=0,$104=0;
 var $105=0,$106=0,$108=0,$109=0,$_0_ph=0,$_0=0,label=0;
 $1=(($out+24)|0);
 HEAP32[(($1)>>2)]=1;
 $2=(($out+33)|0);
 HEAP8[($2)]=0;
 $3=(($out+289)|0);
 HEAP8[($3)]=0;
 $4=(($out+545)|0);
 HEAP8[($4)]=0;
 $5=($size|0)<16;
 if ($5) {
  $_0=16;
  return (($_0)|0);
 }
 $7=((_memcmp((($in)|0),((6080)|0),((5)|0)))|0);
 $8=($7|0)==0;
 if (!($8)) {
  $_0=16;
  return (($_0)|0);
 }
 $_sum=((($size)-(5))|0);
 $10=(($in+$_sum)|0);
 $11=(($in+5)|0);
 $12=($_sum|0)>5;
 L2416: do {
  if ($12) {
   $13=(($out+8)|0);
   $14=(($out+12)|0);
   $15=(($out+16)|0);
   $16=(($out+20)|0);
   $17=(($out+32)|0);
   $18=(($out+28)|0);
   $_08086=$11;
   L2418: while(1) {
    $20=((HEAP8[($_08086)])|0);
    $21=(($20<<24)>>24)==-1;
    if ($21) {
     $23=(($_08086+1)|0);
     $24=((HEAP8[($23)])|0);
     $25=(($24<<24)>>24)==-1;
     if ($25) {
      $_080_lcssa=$_08086;
      break L2416;
     } else {
      $line_end_0=$_08086;
     }
    } else {
     $line_end_0=$_08086;
    }
    while(1) {
     $26=($line_end_0>>>0)<($10>>>0);
     if (!($26)) {
      $_1=$_08086;
      break;
     }
     $28=((HEAP8[($line_end_0)])|0);
     $29=(($28<<24)>>24)==13;
     $30=(($line_end_0+1)|0);
     if ($29) {
      $_1=$_08086;
      break;
     } else {
      $line_end_0=$30;
     }
    }
    while(1) {
     $31=($_1>>>0)<($line_end_0>>>0);
     if (!($31)) {
      break;
     }
     $33=((HEAP8[($_1)])|0);
     $34=((($33&255))>>>0)>((32)>>>0);
     $35=(($_1+1)|0);
     if ($34) {
      $_1=$35;
     } else {
      break;
     }
    }
    $36=$_1;
    $37=$_08086;
    $38=((($36)-($37))|0);
    $_2=$_1;
    while(1) {
     $40=($_2>>>0)<($line_end_0>>>0);
     if (!($40)) {
      break;
     }
     $42=((HEAP8[($_2)])|0);
     $43=((($42&255))>>>0)<((33)>>>0);
     $44=(($_2+1)|0);
     if ($43) {
      $_2=$44;
     } else {
      break;
     }
    }
    $45=($38|0)<1;
    do {
     if (!($45)) {
      $47=((_strncmp(((5856)|0),(($_08086)|0),(($38)|0)))|0);
      $48=($47|0)==0;
      if ($48) {
       $50=((__ZL8from_hexPKh($_2))|0);
       HEAP32[(($13)>>2)]=$50;
       $51=($50>>>0)>((65535)>>>0);
       if ($51) {
        $_0_ph=5712;
        break L2418;
       } else {
        break;
       }
      }
      $53=((_strncmp(((5536)|0),(($_08086)|0),(($38)|0)))|0);
      $54=($53|0)==0;
      if ($54) {
       $56=((__ZL8from_hexPKh($_2))|0);
       HEAP32[(($14)>>2)]=$56;
       $57=($56>>>0)>((65535)>>>0);
       if ($57) {
        $_0_ph=5392;
        break L2418;
       } else {
        break;
       }
      }
      $59=((_strncmp(((5272)|0),(($_08086)|0),(($38)|0)))|0);
      $60=($59|0)==0;
      if ($60) {
       $62=((__ZL8from_hexPKh($_2))|0);
       HEAP32[(($15)>>2)]=$62;
       $63=($62>>>0)>((65535)>>>0);
       if ($63) {
        $_0_ph=5096;
        break L2418;
       } else {
        break;
       }
      }
      $65=((_strncmp(((4944)|0),(($_08086)|0),(($38)|0)))|0);
      $66=($65|0)==0;
      if ($66) {
       $68=((__ZL8from_decPKhS0_($_2,$line_end_0))|0);
       HEAP32[(($1)>>2)]=$68;
       $69=($68|0)<1;
       if ($69) {
        $_0_ph=4720;
        break L2418;
       } else {
        break;
       }
      }
      $71=((_strncmp(((4448)|0),(($_08086)|0),(($38)|0)))|0);
      $72=($71|0)==0;
      if ($72) {
       $74=((HEAP8[($_2)])|0);
       $75=($74&255);
       HEAP32[(($16)>>2)]=$75;
       if (((($75|0))|0)==((68)|0)) {
        $_0_ph=4288;
        break L2418;
       } else if (((($75|0))|0)==((67)|0)|((($75|0))|0)==((66)|0)) {
        break;
       } else {
        $_0=4136;
        label = 2193;
        break L2418;
       }
      }
      $77=((_strncmp(((4064)|0),(($_08086)|0),(($38)|0)))|0);
      $78=($77|0)==0;
      if ($78) {
       HEAP8[($17)]=1;
       break;
      }
      $81=((_strncmp(((3968)|0),(($_08086)|0),(($38)|0)))|0);
      $82=($81|0)==0;
      if ($82) {
       $84=((__ZL8from_decPKhS0_($_2,$line_end_0))|0);
       HEAP32[(($18)>>2)]=$84;
       $85=($84|0)<1;
       if ($85) {
        $_0_ph=3880;
        break L2418;
       } else {
        break;
       }
      }
      $87=((_strncmp(((3792)|0),(($_08086)|0),(($38)|0)))|0);
      $88=($87|0)==0;
      if ($88) {
       __ZL12parse_stringPKhS0_iPc($_2,$line_end_0,256,$2);
       break;
      }
      $91=((_strncmp(((3712)|0),(($_08086)|0),(($38)|0)))|0);
      $92=($91|0)==0;
      if ($92) {
       __ZL12parse_stringPKhS0_iPc($_2,$line_end_0,256,$3);
       break;
      }
      $95=((_strncmp(((3664)|0),(($_08086)|0),(($38)|0)))|0);
      $96=($95|0)==0;
      if (!($96)) {
       break;
      }
      __ZL12parse_stringPKhS0_iPc($_2,$line_end_0,32,$4);
     }
    } while(0);
    $99=(($line_end_0+2)|0);
    $100=($99>>>0)<($10>>>0);
    if ($100) {
     $_08086=$99;
    } else {
     $_080_lcssa=$99;
     break L2416;
    }
   }
   if ((label|0) == 2193) {
    return (($_0)|0);
   }
   $_0=$_0_ph;
   return (($_0)|0);
  } else {
   $_080_lcssa=$11;
  }
 } while(0);
 $101=((HEAP8[($_080_lcssa)])|0);
 $102=(($101<<24)>>24)==-1;
 if (!($102)) {
  $_0=3560;
  return (($_0)|0);
 }
 $104=(($_080_lcssa+1)|0);
 $105=((HEAP8[($104)])|0);
 $106=(($105<<24)>>24)==-1;
 if (!($106)) {
  $_0=3560;
  return (($_0)|0);
 }
 $108=(($_080_lcssa+2)|0);
 $109=(($out)|0);
 HEAP32[(($109)>>2)]=$108;
 $_0=0;
 return (($_0)|0);
}
function __ZN12Sap_Apu_Impl6volumeEd($this,$d){
 $this=($this)|0;
 $d=+($d);
 var $1=0,$2=.0,label=0;
 $1=(($this)|0);
 $2=($d)*((0.008333333333333333));
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($1,$2);
 return;
}
function __ZN7Sap_Emu9update_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,label=0;
 $1=(($this+67160)|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 return;
}
function __ZN7Sap_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$center,$left,$right){
 $this=($this)|0;
 $i=($i)|0;
 $center=($center)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$2=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 $1=((($i)-(4))|0);
 $2=($1|0)>-1;
 if ($2) {
  $4=(($this+1004)|0);
  __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($4,$1,$right);
  return;
 } else {
  $6=(($this+900)|0);
  $7=(($this+336)|0);
  $8=((HEAP8[($7)])|0);
  $9=$8&1;
  $10=(($9<<24)>>24)!=0;
  $11=($10?$left:$center);
  __ZN7Sap_Apu10osc_outputEiP11Blip_Buffer($6,$i,$11);
  return;
 }
}
function __ZN7Sap_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=.0,$2=0,$3=0,label=0;
 $1=((114.0))/($t);
 $2=(~~($1));
 $3=(($this+888)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZN7Sap_Emu7cpu_jsrEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,label=0;
 $1=(($addr)&65535);
 $2=(($this+272)|0);
 $3=$2;
 HEAP16[(($3)>>1)]=$1;
 $4=(($this+278)|0);
 $5=((HEAP8[($4)])|0);
 $6=(($5<<24)>>24)==-2;
 do {
  if ($6) {
   $8=(($this+1875)|0);
   $9=((HEAP8[($8)])|0);
   $10=(($9<<24)>>24)==-2;
   if (!($10)) {
    break;
   }
   HEAP8[($4)]=-1;
  }
 } while(0);
 $13=((HEAP8[($4)])|0);
 $14=((($13)-(1))&255);
 HEAP8[($4)]=$14;
 $15=($13&255);
 $16=$15|256;
 $17=(($this+1364+$16)|0);
 HEAP8[($17)]=-2;
 $18=((HEAP8[($4)])|0);
 $19=((($18)-(1))&255);
 HEAP8[($4)]=$19;
 $20=($18&255);
 $21=$20|256;
 $22=(($this+1364+$21)|0);
 HEAP8[($22)]=-2;
 $23=((HEAP8[($4)])|0);
 $24=((($23)-(1))&255);
 HEAP8[($4)]=$24;
 $25=($23&255);
 $26=$25|256;
 $27=(($this+1364+$26)|0);
 HEAP8[($27)]=-2;
 return;
}
function __ZN7Sap_Emu11run_routineEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,label=0;
 __ZN7Sap_Emu7cpu_jsrEj($this,$addr);
 $1=(($this+272)|0);
 $2=$1;
 $3=((__ZN7Sap_Cpu3runEi($2,2134080))|0);
 return;
}
function __ZN7Sap_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$in_022=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$31=0,$_sum=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$_sum20=0,$42=0,$43=0,$44=0;
 var $_sum21=0,$46=0,$in_0_be=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((__ZN11Classic_Emu12start_track_Ei($1,$track))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this+1108)|0);
 _memset((((($5)|0))|0), ((((0)|0))|0), ((((66048)|0))|0));
 $6=(($this+304)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($this+884)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$9;
 $11=$7;
 $12=((($10)-($11))|0);
 $13=($12|0)>4;
 L2495: do {
  if ($13) {
   $in_022=$7;$14=$10;
   while(1) {
    $15=((__Z8get_le16PKv($in_022))|0);
    $16=(($in_022+2)|0);
    $17=((__Z8get_le16PKv($16))|0);
    $18=(($in_022+4)|0);
    $19=($17>>>0)<($15>>>0);
    if ($19) {
     label = 2214;
     break;
    }
    $23=((($17)-($15))|0);
    $24=((($23)+(1))|0);
    $25=$18;
    $26=((($14)-($25))|0);
    $27=($24|0)>($26|0);
    if ($27) {
     label = 2216;
     break;
    }
    $31=(($this+1364+$15)|0);
    (_memcpy((($31)|0), (($18)|0), $24)|0);
    $_sum=((($23)+(5))|0);
    $32=(($in_022+$_sum)|0);
    $33=((HEAP32[(($8)>>2)])|0);
    $34=$33;
    $35=$32;
    $36=((($34)-($35))|0);
    $37=($36|0)>1;
    do {
     if ($37) {
      $39=((HEAP8[($32)])|0);
      $40=(($39<<24)>>24)==-1;
      if (!($40)) {
       $in_0_be=$32;
       break;
      }
      $_sum20=((($23)+(6))|0);
      $42=(($in_022+$_sum20)|0);
      $43=((HEAP8[($42)])|0);
      $44=(($43<<24)>>24)==-1;
      if (!($44)) {
       $in_0_be=$32;
       break;
      }
      $_sum21=((($23)+(7))|0);
      $46=(($in_022+$_sum21)|0);
      $in_0_be=$46;
     } else {
      $in_0_be=$32;
     }
    } while(0);
    $47=((HEAP32[(($8)>>2)])|0);
    $48=$47;
    $49=$in_0_be;
    $50=((($48)-($49))|0);
    $51=($50|0)>4;
    if ($51) {
     $in_022=$in_0_be;$14=$48;
    } else {
     break L2495;
    }
   }
   if ((label|0) == 2216) {
    $29=$this;
    __ZN8Gme_File11set_warningEPKc($29,8064);
    break;
   }
   else if ((label|0) == 2214) {
    $21=$this;
    __ZN8Gme_File11set_warningEPKc($21,8064);
    break;
   }
  }
 } while(0);
 $52=(($this+900)|0);
 $53=(($this+67160)|0);
 __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($52,$53);
 $54=(($this+1004)|0);
 __ZN7Sap_Apu5resetEP12Sap_Apu_Impl($54,$53);
 $55=(($this+272)|0);
 $56=$55;
 $57=(($this+1364)|0);
 __ZN7Sap_Cpu5resetEPv($56,$57);
 $58=(($this+896)|0);
 HEAP32[(($58)>>2)]=0;
 __ZN7Sap_Emu9call_initEi($this,$track);
 HEAP32[(($58)>>2)]=-1;
 $59=((__ZNK7Sap_Emu11play_periodEv($this))|0);
 $60=(($this+892)|0);
 HEAP32[(($60)>>2)]=$59;
 $_0=0;
 return (($_0)|0);
}
function __ZN7Sap_Emu9call_initEi($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,label=0;
 $1=(($this+324)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 if (((($2|0))|0)==((67)|0)) {
  $9=(($this+274)|0);
  HEAP8[($9)]=112;
  $10=(($this+320)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($11)&255);
  $13=(($this+275)|0);
  HEAP8[($13)]=$12;
  $14=((HEAP32[(($10)>>2)])|0);
  $15=$14>>>8;
  $16=(($15)&255);
  $17=(($this+276)|0);
  HEAP8[($17)]=$16;
  $18=(($this+316)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((($19)+(3))|0);
  __ZN7Sap_Emu11run_routineEj($this,$20);
  HEAP8[($9)]=0;
  $21=(($track)&255);
  HEAP8[($13)]=$21;
  $22=((HEAP32[(($18)>>2)])|0);
  $23=((($22)+(3))|0);
  __ZN7Sap_Emu11run_routineEj($this,$23);
  return;
 } else if (((($2|0))|0)==((66)|0)) {
  $4=(($track)&255);
  $5=(($this+274)|0);
  HEAP8[($5)]=$4;
  $6=(($this+312)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  __ZN7Sap_Emu11run_routineEj($this,$7);
  return;
 } else {
  return;
 }
}
function __ZNK7Sap_Emu11play_periodEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($this+332)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+888)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(Math_imul($4,$2)|0);
 return (($5)|0);
}
function __ZN7Sap_Emu10cpu_write_Eji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,label=0;
 $1=$addr^53760;
 $2=($1>>>0)<((10)>>>0);
 if ($2) {
  $4=(($this+900)|0);
  $5=(($this+272)|0);
  $6=$5;
  $7=((__ZNK7Sap_Cpu4timeEv($6))|0);
  $8=(($this+896)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=$9&$7;
  __ZN7Sap_Apu10write_dataEiji($4,$10,$addr,$data);
  return;
 }
 $12=$addr^53776;
 $13=($12>>>0)<((10)>>>0);
 if (!($13)) {
  return;
 }
 $15=(($this+336)|0);
 $16=((HEAP8[($15)])|0);
 $17=$16&1;
 $18=(($17<<24)>>24)==0;
 if ($18) {
  return;
 }
 $20=(($this+1004)|0);
 $21=(($this+272)|0);
 $22=$21;
 $23=((__ZNK7Sap_Cpu4timeEv($22))|0);
 $24=(($this+896)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=$25&$23;
 $27=$addr^16;
 __ZN7Sap_Apu10write_dataEiji($20,$26,$27,$data);
 return;
}
function __ZNK7Sap_Cpu4timeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)+($4))|0);
 return (($7)|0);
}
function __ZN7Sap_Emu10run_clocksERii($this,$duration,$0){
 $this=($this)|0;
 $duration=($duration)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$16=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0;
 var $27=0,$_lcssa=0,$29=0,$30=0,$31=0,$32=0,$_=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$_0=0,label=0;
 $2=(($this+272)|0);
 $3=$2;
 __ZN7Sap_Cpu8set_timeEi($3,0);
 $4=((__ZNK7Sap_Cpu4timeEv($3))|0);
 $5=((HEAP32[(($duration)>>2)])|0);
 $6=($4|0)<($5|0);
 L2532: do {
  if ($6) {
   $7=$2;
   $8=(($this+892)|0);
   $10=$5;
   while(1) {
    $11=((__ZN7Sap_Cpu3runEi($3,$10))|0);
    if ($11) {
     $_0=7776;
     label = 2259;
     break;
    }
    $13=((HEAP16[(($7)>>1)])|0);
    $14=((($13&65535))>>>0)>((65279)>>>0);
    if ($14) {
     $_0=7776;
     label = 2260;
     break;
    }
    $16=(($13<<16)>>16)==-257;
    do {
     if ($16) {
      $18=((HEAP32[(($8)>>2)])|0);
      $19=((HEAP32[(($duration)>>2)])|0);
      $20=($18|0)>($19|0);
      if ($20) {
       __ZN7Sap_Cpu8set_timeEi($3,$19);
       break;
      } else {
       __ZN7Sap_Cpu8set_timeEi($3,$18);
       $22=((__ZNK7Sap_Emu11play_periodEv($this))|0);
       $23=((HEAP32[(($8)>>2)])|0);
       $24=((($23)+($22))|0);
       HEAP32[(($8)>>2)]=$24;
       __ZN7Sap_Emu9call_playEv($this);
       break;
      }
     }
    } while(0);
    $25=((__ZNK7Sap_Cpu4timeEv($3))|0);
    $26=((HEAP32[(($duration)>>2)])|0);
    $27=($25|0)<($26|0);
    if ($27) {
     $10=$26;
    } else {
     $_lcssa=$25;
     break L2532;
    }
   }
   if ((label|0) == 2259) {
    return (($_0)|0);
   }
   else if ((label|0) == 2260) {
    return (($_0)|0);
   }
  } else {
   $_lcssa=$4;
  }
 } while(0);
 HEAP32[(($duration)>>2)]=$_lcssa;
 $29=(($this+892)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=((($30)-($_lcssa))|0);
 $32=($31|0)<0;
 $_=($32?0:$31);
 HEAP32[(($29)>>2)]=$_;
 $33=(($this+900)|0);
 $34=((HEAP32[(($duration)>>2)])|0);
 __ZN7Sap_Apu9end_frameEi($33,$34);
 $35=(($this+336)|0);
 $36=((HEAP8[($35)])|0);
 $37=$36&1;
 $38=(($37<<24)>>24)==0;
 if ($38) {
  $_0=0;
  return (($_0)|0);
 }
 $40=(($this+1004)|0);
 $41=((HEAP32[(($duration)>>2)])|0);
 __ZN7Sap_Apu9end_frameEi($40,$41);
 $_0=0;
 return (($_0)|0);
}
function __ZN7Sap_Cpu8set_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($t)-($4))|0);
 $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}
function __ZN7Sap_Emu9call_playEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$4=0,$5=0,$7=0,$8=0,$9=0,label=0;
 $1=(($this+324)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 if (((($2|0))|0)==((67)|0)) {
  $7=(($this+316)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=((($8)+(6))|0);
  __ZN7Sap_Emu7cpu_jsrEj($this,$9);
  return;
 } else if (((($2|0))|0)==((66)|0)) {
  $4=(($this+316)|0);
  $5=((HEAP32[(($4)>>2)])|0);
  __ZN7Sap_Emu7cpu_jsrEj($this,$5);
  return;
 } else {
  return;
 }
}
function __ZL8from_hexPKh($in){
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_0=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$30=0,label=0;
 $1=((HEAP8[($in)])|0);
 $2=($1&255);
 $3=((__Z13from_hex_chari($2))|0);
 $4=($3|0)>15;
 if ($4) {
  $_0=-1;
  return (($_0)|0);
 }
 $6=(($in+1)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=((__Z13from_hex_chari($8))|0);
 $10=($9|0)>15;
 if ($10) {
  $_0=-1;
  return (($_0)|0);
 }
 $13=(($in+2)|0);
 $14=((HEAP8[($13)])|0);
 $15=($14&255);
 $16=((__Z13from_hex_chari($15))|0);
 $17=($16|0)>15;
 if ($17) {
  $_0=-1;
  return (($_0)|0);
 }
 $19=(($in+3)|0);
 $20=((HEAP8[($19)])|0);
 $21=($20&255);
 $22=((__Z13from_hex_chari($21))|0);
 $23=($22|0)>15;
 if ($23) {
  $_0=-1;
  return (($_0)|0);
 }
 $25=$3<<4;
 $26=((($9)+($25))|0);
 $27=$26<<4;
 $28=((($16)+($27))|0);
 $29=$28<<4;
 $30=((($22)+($29))|0);
 $_0=$30;
 return (($_0)|0);
}
function __ZL8from_decPKhS0_($in,$end){
 $in=($in)|0;
 $end=($end)|0;
 var $1=0,$2=0,$n_010=0,$_089=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$_0=0,label=0;
 $1=($in>>>0)<($end>>>0);
 L2575: do {
  if ($1) {
   $2=($in>>>0)<($end>>>0);
   if ($2) {
    $_089=$in;$n_010=0;
   } else {
    $_0=0;
    break;
   }
   while(1) {
    $3=((HEAP8[($_089)])|0);
    $4=($3&255);
    $5=((($4)-(48))|0);
    $6=($5>>>0)>((9)>>>0);
    if ($6) {
     $_0=-1;
     break L2575;
    }
    $8=(($_089+1)|0);
    $9=((($n_010)*(10))&-1);
    $10=((($5)+($9))|0);
    $11=($8>>>0)<($end>>>0);
    if ($11) {
     $_089=$8;$n_010=$10;
    } else {
     $_0=$10;
     break;
    }
   }
  } else {
   $_0=-1;
  }
 } while(0);
 return (($_0)|0);
}
function __ZL12parse_stringPKhS0_iPc($in,$end,$len,$out){
 $in=($in)|0;
 $end=($end)|0;
 $len=($len)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$_0=0,$4=0,$6=0,$7=0,$8=0,$_1=0,$start_0=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;
 $1=(($in+1)|0);
 $2=((HEAP8[($in)])|0);
 $3=(($2<<24)>>24)==34;
 L2582: do {
  if ($3) {
   $_0=$1;
   while(1) {
    $4=($_0>>>0)<($end>>>0);
    if (!($4)) {
     $start_0=$1;$_1=$_0;
     break L2582;
    }
    $6=((HEAP8[($_0)])|0);
    $7=(($6<<24)>>24)==34;
    $8=(($_0+1)|0);
    if ($7) {
     $start_0=$1;$_1=$_0;
     break;
    } else {
     $_0=$8;
    }
   }
  } else {
   $start_0=$in;$_1=$end;
  }
 } while(0);
 $9=((($len)-(1))|0);
 $10=$_1;
 $11=$start_0;
 $12=((($10)-($11))|0);
 $13=((__Z3minIiET_S0_S0_($9,$12))|0);
 $14=(($out+$13)|0);
 HEAP8[($14)]=0;
 (_memcpy((($out)|0), (($start_0)|0), $13)|0);
 return;
}
function __ZN8Sap_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Sap_FileC2Ev($this);
 return;
}
function __ZN8Sap_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12528;
 $3=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($3,128);
 return;
}
function __ZN8Sap_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Sap_FileD2Ev($this);
 return;
}
function __ZN8Sap_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Sap_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Sap_File9load_mem_EPKhl($this,$begin,$size){
 $this=($this)|0;
 $begin=($begin)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$_0=0,label=0;
 $1=(($this+252)|0);
 $2=((__ZL10parse_infoPKhlPN7Sap_Emu6info_tE($begin,$size,$1))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=$this;
 $6=(($this+276)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 __ZN8Gme_File15set_track_countEi($5,$7);
 $_0=0;
 return (($_0)|0);
}
function __ZNK8Sap_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,label=0;
 $2=(($this+252)|0);
 __ZL15copy_sap_fieldsRKN7Sap_Emu6info_tEP12track_info_t($2,$out);
 return ((0)|0);
}
function __ZN8Sap_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN9Gme_Info_D2Ev($1);
 return;
}
function __ZN7Sms_OscC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 _memset((((($1)|0))|0), ((((0)|0))|0), ((((20)|0))|0));
 return;
}
function __ZN7Sms_Osc5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+24)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+28)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+32)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+20)|0);
 HEAP32[(($4)>>2)]=3;
 $5=(($this+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($this+16)|0);
 HEAP32[(($7)>>2)]=$6;
 return;
}
function __ZN10Sms_Square3runEii($this,$time,$end_time){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0;
 var $49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$_0=0,$delta1_0=0,$65=0,$66=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$73=0,$74=0,$75=0,$76=0,$_1=0,$78=0,$79=0,label=0;
 $1=(($this+32)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 do {
  if (!($3)) {
   $5=(($this+36)|0);
   $6=((HEAP32[(($5)>>2)])|0);
   $7=($6|0)<129;
   if ($7) {
    break;
   }
   $40=(($this+40)|0);
   $41=((HEAP32[(($40)>>2)])|0);
   $42=($41|0)!=0;
   $43=(((-$2))|0);
   $44=($42?$2:$43);
   $45=(($this+28)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=($44|0)==($46|0);
   if (!($47)) {
    $49=((($44)-($46))|0);
    HEAP32[(($45)>>2)]=$44;
    $50=(($this+44)|0);
    $51=((HEAP32[(($50)>>2)])|0);
    $52=(($this+16)|0);
    $53=((HEAP32[(($52)>>2)])|0);
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($51,$time,$49,$53);
   }
   $55=(($this+24)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=((($56)+($time))|0);
   $58=($57|0)<($end_time|0);
   if (!($58)) {
    $_1=$57;
    $78=((($_1)-($end_time))|0);
    $79=(($this+24)|0);
    HEAP32[(($79)>>2)]=$78;
    return;
   }
   $60=(($this+16)|0);
   $61=((HEAP32[(($60)>>2)])|0);
   $62=$44<<1;
   $63=(($this+44)|0);
   $delta1_0=$62;$_0=$57;
   while(1) {
    $65=(((-$delta1_0))|0);
    $66=((HEAP32[(($63)>>2)])|0);
    __ZNK10Blip_SynthILi12ELi1EE13offset_inlineEiiP11Blip_Buffer($66,$_0,$65,$61);
    $67=((HEAP32[(($5)>>2)])|0);
    $68=((($67)+($_0))|0);
    $69=((HEAP32[(($40)>>2)])|0);
    $70=$69^1;
    HEAP32[(($40)>>2)]=$70;
    $71=($68|0)<($end_time|0);
    if ($71) {
     $delta1_0=$65;$_0=$68;
    } else {
     break;
    }
   }
   $73=($69|0)!=1;
   $74=((HEAP32[(($1)>>2)])|0);
   $75=(((-$74))|0);
   $76=($73?$74:$75);
   HEAP32[(($45)>>2)]=$76;
   $_1=$68;
   $78=((($_1)-($end_time))|0);
   $79=(($this+24)|0);
   HEAP32[(($79)>>2)]=$78;
   return;
  }
 } while(0);
 $9=(($this+28)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==0;
 if (!($11)) {
  $13=(($this+44)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=(((-$10))|0);
  $16=(($this+16)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($14,$time,$15,$17);
  HEAP32[(($9)>>2)]=0;
 }
 $19=(($this+24)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=((($20)+($time))|0);
 $22=(($this+36)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=($23|0)==0;
 if ($24) {
  $_1=$end_time;
  $78=((($_1)-($end_time))|0);
  $79=(($this+24)|0);
  HEAP32[(($79)>>2)]=$78;
  return;
 }
 $26=($21|0)<($end_time|0);
 if (!($26)) {
  $_1=$21;
  $78=((($_1)-($end_time))|0);
  $79=(($this+24)|0);
  HEAP32[(($79)>>2)]=$78;
  return;
 }
 $28=((($end_time)-(1))|0);
 $29=((($28)-($21))|0);
 $30=((($29)+($23))|0);
 $31=(((($30|0))/(($23|0)))&-1);
 $32=(($this+40)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=((($33)+($31))|0);
 $35=$34&1;
 HEAP32[(($32)>>2)]=$35;
 $36=((HEAP32[(($22)>>2)])|0);
 $37=(Math_imul($36,$31)|0);
 $38=((($37)+($21))|0);
 $_1=$38;
 $78=((($_1)-($end_time))|0);
 $79=(($this+24)|0);
 HEAP32[(($79)>>2)]=$78;
 return;
}
function __ZN9Sms_Noise3runEii($this,$time,$end_time){
 $this=($this)|0;
 $time=($time)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$amp_0=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $end_time_=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$_=0,$33=0,$34=0,$shifter_0=0,$delta1_0=0,$_1=0,$36=0,$37=0,$38=0;
 var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0,$delta1_1=0,$48=0,$49=0,$51=0,$_2=0,$53=0,label=0;
 $1=(($this+32)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$4&1;
 $6=($5|0)==0;
 $7=(((-$2))|0);
 $amp_0=($6?$2:$7);
 $8=(($this+28)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($amp_0|0)==($9|0);
 if (!($10)) {
  $12=((($amp_0)-($9))|0);
  HEAP32[(($8)>>2)]=$amp_0;
  $13=(($this+48)|0);
  $14=(($this+16)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  __ZNK10Blip_SynthILi8ELi1EE6offsetEiiP11Blip_Buffer($13,$time,$12,$15);
 }
 $17=(($this+24)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((($18)+($time))|0);
 $20=((HEAP32[(($1)>>2)])|0);
 $21=($20|0)==0;
 $end_time_=($21?$end_time:$19);
 $22=($end_time_|0)<($end_time|0);
 if (!($22)) {
  $_2=$end_time_;
  $53=((($_2)-($end_time))|0);
  HEAP32[(($17)>>2)]=$53;
  return;
 }
 $24=(($this+16)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((HEAP32[(($3)>>2)])|0);
 $27=$amp_0<<1;
 $28=(($this+36)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=$30<<1;
 $32=($31|0)==0;
 $_=($32?16:$31);
 $33=(($this+44)|0);
 $34=(($this+48)|0);
 $_1=$end_time_;$delta1_0=$27;$shifter_0=$26;
 while(1) {
  $36=((($shifter_0)+(1))|0);
  $37=((HEAP32[(($33)>>2)])|0);
  $38=$shifter_0&1;
  $39=(((-$38))|0);
  $40=$37&$39;
  $41=$shifter_0>>>1;
  $42=$40^$41;
  $43=$36&2;
  $44=($43|0)==0;
  if ($44) {
   $delta1_1=$delta1_0;
  } else {
   $46=(((-$delta1_0))|0);
   __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($34,$_1,$46,$25);
   $delta1_1=$46;
  }
  $48=((($_1)+($_))|0);
  $49=($48|0)<($end_time|0);
  if ($49) {
   $_1=$48;$delta1_0=$delta1_1;$shifter_0=$42;
  } else {
   break;
  }
 }
 HEAP32[(($3)>>2)]=$42;
 $51=$delta1_1>>1;
 HEAP32[(($8)>>2)]=$51;
 $_2=$48;
 $53=((($_2)-($end_time))|0);
 HEAP32[(($17)>>2)]=$53;
 return;
}
function __ZN7Sms_ApuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;
 $1=(($this+16)|0);
 __ZN10Sms_SquareC1Ev($1);
 $2=(($this+64)|0);
 __ZN10Sms_SquareC1Ev($2);
 $3=(($this+112)|0);
 __ZN10Sms_SquareC1Ev($3);
 $4=(($this+160)|0);
 __ZN10Blip_SynthILi12ELi1EEC1Ev($4);
 $5=(($this+984)|0);
 __ZN9Sms_NoiseC1Ev($5);
 $6=(($this+60)|0);
 HEAP32[(($6)>>2)]=$4;
 $7=(($this+16)|0);
 $8=(($this)|0);
 HEAP32[(($8)>>2)]=$7;
 $9=(($this+108)|0);
 HEAP32[(($9)>>2)]=$4;
 $10=(($this+64)|0);
 $11=(($this+4)|0);
 HEAP32[(($11)>>2)]=$10;
 $12=(($this+156)|0);
 HEAP32[(($12)>>2)]=$4;
 $13=(($this+112)|0);
 $14=(($this+8)|0);
 HEAP32[(($14)>>2)]=$13;
 $15=(($5)|0);
 $16=(($this+12)|0);
 HEAP32[(($16)>>2)]=$15;
 __ZN7Sms_Apu6volumeEd($this,1.0);
 __ZN7Sms_Apu5resetEji($this,0,0);
 return;
}
function __ZN10Sms_SquareC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN10Sms_SquareC2Ev($this);
 return;
}
function __ZN9Sms_NoiseC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN9Sms_NoiseC2Ev($this);
 return;
}
function __ZN7Sms_Apu6volumeEd($this,$vol){
 $this=($this)|0;
 $vol=+($vol);
 var $1=.0,$2=0,$3=0,label=0;
 $1=($vol)*((0.00166015625));
 $2=(($this+160)|0);
 __ZN10Blip_SynthILi12ELi1EE6volumeEd($2,$1);
 $3=(($this+1032)|0);
 __ZN10Blip_SynthILi8ELi1EE6volumeEd($3,$1);
 return;
}
function __ZN7Sms_Apu5resetEji($this,$feedback,$noise_width){
 $this=($this)|0;
 $feedback=($feedback)|0;
 $noise_width=($noise_width)|0;
 var $1=0,$2=0,$3=0,$4=0,$or_cond=0,$_0=0,$5=0,$6=0,$7=0,$8=0,$9=0,$_07=0,$_promoted=0,$11=0,$_110=0,$_189=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$19=0,$20=0,$21=0,$22=0,label=0;
 $1=(($this+976)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+980)|0);
 HEAP32[(($2)>>2)]=0;
 $3=($feedback|0)==0;
 $4=($noise_width|0)==0;
 $or_cond=$3|$4;
 $_0=($or_cond?16:$noise_width);
 $5=((($_0)-(1))|0);
 $6=1<<$5;
 $7=(($this+1596)|0);
 HEAP32[(($7)>>2)]=$6;
 $8=(($this+1592)|0);
 HEAP32[(($8)>>2)]=0;
 $9=($_0|0)==0;
 if (!($9)) {
  $_07=($or_cond?9:$feedback);
  $_promoted=((HEAP32[(($8)>>2)])|0);
  $_189=$_07;$_110=$_0;$11=$_promoted;
  while(1) {
   $12=((($_110)-(1))|0);
   $13=$11<<1;
   $14=$_189&1;
   $15=$13|$14;
   $16=$_189>>>1;
   $17=($12|0)==0;
   if ($17) {
    break;
   } else {
    $_189=$16;$_110=$12;$11=$15;
   }
  }
  HEAP32[(($8)>>2)]=$15;
 }
 $19=(($this+16)|0);
 __ZN10Sms_Square5resetEv($19);
 $20=(($this+64)|0);
 __ZN10Sms_Square5resetEv($20);
 $21=(($this+112)|0);
 __ZN10Sms_Square5resetEv($21);
 $22=(($this+984)|0);
 __ZN9Sms_Noise5resetEv($22);
 return;
}
function __ZN7Sms_ApuD2Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN7Sms_Apu9treble_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+160)|0);
 __ZN10Blip_SynthILi12ELi1EE9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+1032)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
 return;
}
function __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,$index,$center,$left,$right){
 $this=($this)|0;
 $index=($index)|0;
 $center=($center)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$_not=0,$4=0,$or_cond=0,$5=0,$or_cond17=0,$or_cond17_not=0,$or_cond19=0,$or_cond20=0,$or_cond21=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var label=0;
 $1=($index>>>0)<((4)>>>0);
 if (!($1)) {
  ___assert_fail(((2176)|0),((6336)|0),((194)|0),((8824)|0));
 }
 $_not=($center|0)==0;
 $4=($left|0)==0;
 $or_cond=$_not|$4;
 $5=($right|0)==0;
 $or_cond17=$or_cond|$5;
 $or_cond17_not=$or_cond17^1;
 $or_cond19=$_not&$4;
 $or_cond20=$or_cond19&$5;
 $or_cond21=$or_cond20|$or_cond17_not;
 if ($or_cond21) {
  $8=(($this+($index<<2))|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9+4)|0);
  HEAP32[(($10)>>2)]=$right;
  $11=(($9+8)|0);
  HEAP32[(($11)>>2)]=$left;
  $12=(($9+12)|0);
  HEAP32[(($12)>>2)]=$center;
  $13=(($9+20)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=(($9+($14<<2))|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=(($9+16)|0);
  HEAP32[(($17)>>2)]=$16;
  return;
 } else {
  ___assert_fail(((4384)|0),((6336)|0),((195)|0),((8824)|0));
 }
}
function __ZN7Sms_Apu6outputEP11Blip_BufferS1_S1_($this,$center,$left,$right){
 $this=($this)|0;
 $center=($center)|0;
 $left=($left)|0;
 $right=($right)|0;
 var label=0;
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,0,$center,$left,$right);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,1,$center,$left,$right);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,2,$center,$left,$right);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($this,3,$center,$left,$right);
 return;
}
function __ZN10Sms_Square5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+36)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+40)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this)|0);
 __ZN7Sms_Osc5resetEv($3);
 return;
}
function __ZN9Sms_Noise5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+36)|0);
 HEAP32[(($1)>>2)]=18064;
 $2=(($this+40)|0);
 HEAP32[(($2)>>2)]=32768;
 $3=(($this+44)|0);
 HEAP32[(($3)>>2)]=36864;
 $4=(($this)|0);
 __ZN7Sms_Osc5resetEv($4);
 return;
}
function __ZN7Sms_Apu9run_untilEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$25=0,$26=0,$28=0;
 var $29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,label=0;
 $1=(($this+976)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($end_time|0);
 if ($3) {
  ___assert_fail(((3408)|0),((6336)|0),((236)|0),((8760)|0));
 }
 $6=($2|0)<($end_time|0);
 if (!($6)) {
  return;
 }
 $8=(($this+984)|0);
 $9=(($this)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+16)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($12|0)==0;
 if (!($13)) {
  __ZN11Blip_Buffer12set_modifiedEv($12);
  $15=(($this+16)|0);
  $16=((HEAP32[(($1)>>2)])|0);
  __ZN10Sms_Square3runEii($15,$16,$end_time);
 }
 $18=(($this+4)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($21|0)==0;
 if (!($22)) {
  __ZN11Blip_Buffer12set_modifiedEv($21);
  $25=(($this+64)|0);
  $26=((HEAP32[(($1)>>2)])|0);
  __ZN10Sms_Square3runEii($25,$26,$end_time);
 }
 $28=(($this+8)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($29+16)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=($31|0)==0;
 if (!($32)) {
  __ZN11Blip_Buffer12set_modifiedEv($31);
  $34=(($this+112)|0);
  $35=((HEAP32[(($1)>>2)])|0);
  __ZN10Sms_Square3runEii($34,$35,$end_time);
 }
 $37=(($this+12)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=(($38+16)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=($40|0)==0;
 if (!($41)) {
  __ZN11Blip_Buffer12set_modifiedEv($40);
  $43=((HEAP32[(($1)>>2)])|0);
  __ZN9Sms_Noise3runEii($8,$43,$end_time);
 }
 HEAP32[(($1)>>2)]=$end_time;
 return;
}
function __ZN7Sms_Apu9end_frameEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$10=0,label=0;
 $1=(($this+976)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)<($end_time|0);
 if ($3) {
  __ZN7Sms_Apu9run_untilEi($this,$end_time);
 }
 $6=((HEAP32[(($1)>>2)])|0);
 $7=($6|0)<($end_time|0);
 if ($7) {
  ___assert_fail(((2720)|0),((6336)|0),((263)|0),((8776)|0));
 } else {
  $10=((($6)-($end_time))|0);
  HEAP32[(($1)>>2)]=$10;
  return;
 }
}
function __ZN7Sms_Apu14write_ggstereoEii($this,$time,$data){
 $this=($this)|0;
 $time=($time)|0;
 $data=($data)|0;
 var $1=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0,$24=0,$25=0;
 var $28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0,$46=0,$48=0,$49=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$68=0,$70=0,$72=0,$73=0,$76=0,$77=0;
 var $78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0,$92=0,$94=0,$96=0,$97=0,label=0;
 $1=($data>>>0)<((256)>>>0);
 if (!($1)) {
  ___assert_fail(((2208)|0),((6336)|0),((269)|0),((8792)|0));
 }
 __ZN7Sms_Apu9run_untilEi($this,$time);
 $4=(($this+160)|0);
 $5=(($this)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=$data>>>3;
 $10=$9&2;
 $11=$data&1;
 $12=$10|$11;
 $13=(($6+20)|0);
 HEAP32[(($13)>>2)]=$12;
 $14=(($6+($12<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 HEAP32[(($7)>>2)]=$15;
 $16=($15|0)==($8|0);
 do {
  if (!($16)) {
   $18=(($6+28)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=($19|0)==0;
   if ($20) {
    break;
   }
   $22=($8|0)==0;
   if (!($22)) {
    __ZN11Blip_Buffer12set_modifiedEv($8);
    $24=((HEAP32[(($18)>>2)])|0);
    $25=(((-$24))|0);
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($4,$time,$25,$8);
   }
   HEAP32[(($18)>>2)]=0;
  }
 } while(0);
 $28=(($this+4)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=$data>>1;
 $31=(($29+16)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=$30>>>3;
 $34=$33&2;
 $35=$30&1;
 $36=$34|$35;
 $37=(($29+20)|0);
 HEAP32[(($37)>>2)]=$36;
 $38=(($29+($36<<2))|0);
 $39=((HEAP32[(($38)>>2)])|0);
 HEAP32[(($31)>>2)]=$39;
 $40=($39|0)==($32|0);
 do {
  if (!($40)) {
   $42=(($29+28)|0);
   $43=((HEAP32[(($42)>>2)])|0);
   $44=($43|0)==0;
   if ($44) {
    break;
   }
   $46=($32|0)==0;
   if (!($46)) {
    __ZN11Blip_Buffer12set_modifiedEv($32);
    $48=((HEAP32[(($42)>>2)])|0);
    $49=(((-$48))|0);
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($4,$time,$49,$32);
   }
   HEAP32[(($42)>>2)]=0;
  }
 } while(0);
 $52=(($this+8)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=$data>>2;
 $55=(($53+16)|0);
 $56=((HEAP32[(($55)>>2)])|0);
 $57=$54>>>3;
 $58=$57&2;
 $59=$54&1;
 $60=$58|$59;
 $61=(($53+20)|0);
 HEAP32[(($61)>>2)]=$60;
 $62=(($53+($60<<2))|0);
 $63=((HEAP32[(($62)>>2)])|0);
 HEAP32[(($55)>>2)]=$63;
 $64=($63|0)==($56|0);
 do {
  if (!($64)) {
   $66=(($53+28)|0);
   $67=((HEAP32[(($66)>>2)])|0);
   $68=($67|0)==0;
   if ($68) {
    break;
   }
   $70=($56|0)==0;
   if (!($70)) {
    __ZN11Blip_Buffer12set_modifiedEv($56);
    $72=((HEAP32[(($66)>>2)])|0);
    $73=(((-$72))|0);
    __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($4,$time,$73,$56);
   }
   HEAP32[(($66)>>2)]=0;
  }
 } while(0);
 $76=(($this+12)|0);
 $77=((HEAP32[(($76)>>2)])|0);
 $78=$data>>3;
 $79=(($77+16)|0);
 $80=((HEAP32[(($79)>>2)])|0);
 $81=$78>>>3;
 $82=$81&2;
 $83=$78&1;
 $84=$82|$83;
 $85=(($77+20)|0);
 HEAP32[(($85)>>2)]=$84;
 $86=(($77+($84<<2))|0);
 $87=((HEAP32[(($86)>>2)])|0);
 HEAP32[(($79)>>2)]=$87;
 $88=($87|0)==($80|0);
 if ($88) {
  return;
 }
 $90=(($77+28)|0);
 $91=((HEAP32[(($90)>>2)])|0);
 $92=($91|0)==0;
 if ($92) {
  return;
 }
 $94=($80|0)==0;
 if (!($94)) {
  __ZN11Blip_Buffer12set_modifiedEv($80);
  $96=((HEAP32[(($90)>>2)])|0);
  $97=(((-$96))|0);
  __ZNK10Blip_SynthILi12ELi1EE6offsetEiiP11Blip_Buffer($4,$time,$97,$80);
 }
 HEAP32[(($90)>>2)]=0;
 return;
}
function __ZN7Sms_Apu10write_dataEii($this,$time,$data){
 $this=($this)|0;
 $time=($time)|0;
 $data=($data)|0;
 var $1=0,$4=0,$5=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$24=0,$26=0,$27=0;
 var $29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$42=0,$43=0,$45=0,$46=0,$48=0,$49=0,$50=0,$51=0,$_in=0,$52=0;
 var $53=0,$54=0,label=0;
 $1=($data>>>0)<((256)>>>0);
 if (!($1)) {
  ___assert_fail(((2208)|0),((6336)|0),((299)|0),((8808)|0));
 }
 __ZN7Sms_Apu9run_untilEi($this,$time);
 $4=$data&128;
 $5=($4|0)!=0;
 if ($5) {
  $7=(($this+980)|0);
  HEAP32[(($7)>>2)]=$data;
 }
 $9=(($this+980)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10>>>5;
 $12=$11&3;
 $13=$10&16;
 $14=($13|0)==0;
 if (!($14)) {
  $16=$data&15;
  $17=((17896+$16)|0);
  $18=((HEAP8[($17)])|0);
  $19=($18&255);
  $20=(($this+($12<<2))|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21+32)|0);
  HEAP32[(($22)>>2)]=$19;
  return;
 }
 $24=($12|0)==3;
 if ($24) {
  $39=$data&3;
  $40=($39|0)==3;
  if ($40) {
   $45=(($this+148)|0);
   $46=(($this+1020)|0);
   HEAP32[(($46)>>2)]=$45;
  } else {
   $42=((18064+($39<<2))|0);
   $43=(($this+1020)|0);
   HEAP32[(($43)>>2)]=$42;
  }
  $48=$data&4;
  $49=($48|0)==0;
  $50=(($this+1592)|0);
  $51=(($this+1596)|0);
  $_in=($49?$51:$50);
  $52=((HEAP32[(($_in)>>2)])|0);
  $53=(($this+1028)|0);
  HEAP32[(($53)>>2)]=$52;
  $54=(($this+1024)|0);
  HEAP32[(($54)>>2)]=32768;
  return;
 } else {
  $26=(($this+16+((($12)*(48))&-1)+36)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  if ($5) {
   $29=$27&65280;
   $30=$data<<4;
   $31=$30&240;
   $32=$29|$31;
   HEAP32[(($26)>>2)]=$32;
   return;
  } else {
   $34=$27&255;
   $35=$data<<8;
   $36=$35&16128;
   $37=$34|$36;
   HEAP32[(($26)>>2)]=$37;
   return;
  }
 }
}
function __ZN9Sms_NoiseC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 __ZN7Sms_OscC2Ev($1);
 $2=(($this+48)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($2);
 return;
}
function __ZN10Sms_SquareC2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN7Sms_OscC2Ev($1);
 return;
}
function __ZN8Snes_SpcC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this+88)|0);
 $2=(($this+948)|0);
 __ZN7Spc_DspC2EPh($1,$2);
 $3=(($this+604)|0);
 __ZN7Spc_CpuC2EP8Snes_SpcPh($3,$this,$2);
 __ZN8Snes_Spc9set_tempoEd($this,1.0);
 $4=(($this+692)|0);
 _memset((((($4)|0))|0), ((((-1)|0))|0), ((((256)|0))|0));
 $5=(($this+66484)|0);
 _memset((((($5)|0))|0), ((((-1)|0))|0), ((((256)|0))|0));
 $6=(($this+66802)|0);
 HEAP8[($6)]=-64;
 $7=(($this+66803)|0);
 HEAP8[($7)]=-1;
 $8=(($this+66740)|0);
 _memset((((($8)|0))|0), ((((0)|0))|0), ((((62)|0))|0));
 return;
}
function __ZN8Snes_Spc9set_tempoEd($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=.0,$2=.0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=((16.0))/($t);
 $2=($1)+((0.5));
 $3=(~~($2));
 $4=$3<<3;
 $5=(($this+12)|0);
 HEAP32[(($5)>>2)]=$4;
 $6=(($this+36)|0);
 HEAP32[(($6)>>2)]=$4;
 $7=(($this+60)|0);
 HEAP32[(($7)>>2)]=$3;
 return;
}
function __ZN8Snes_Spc11set_ipl_romEPKv($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,label=0;
 $1=(($this+66740)|0);
 (_memcpy((($1)|0), (($in)|0), 64)|0);
 return;
}
function __ZN8Snes_Spc8load_spcEPKvl($this,$data,$size){
 $this=($this)|0;
 $data=($data)|0;
 $size=($size)|0;
 var $regs=0,$1=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$34=0,$35=0,$36=0,$37=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $regs=((sp)|0);
 $1=($size|0)<65920;
 if ($1) {
  $_0=2112;
  STACKTOP=sp;return (($_0)|0);
 }
 $3=((_strncmp((($data)|0),((6272)|0),((27)|0)))|0);
 $4=($3|0)==0;
 if (!($4)) {
  $_0=2112;
  STACKTOP=sp;return (($_0)|0);
 }
 $6=(($data+37)|0);
 $7=(($data+38)|0);
 $8=((HEAP8[($7)])|0);
 $9=($8&255);
 $10=$9<<8;
 $11=((HEAP8[($6)])|0);
 $12=($11&255);
 $13=$10|$12;
 $14=(($regs)|0);
 HEAP32[(($14)>>2)]=$13;
 $15=(($data+39)|0);
 $16=((HEAP8[($15)])|0);
 $17=(($regs+4)|0);
 HEAP8[($17)]=$16;
 $18=(($data+40)|0);
 $19=((HEAP8[($18)])|0);
 $20=(($regs+5)|0);
 HEAP8[($20)]=$19;
 $21=(($data+41)|0);
 $22=((HEAP8[($21)])|0);
 $23=(($regs+6)|0);
 HEAP8[($23)]=$22;
 $24=(($data+42)|0);
 $25=((HEAP8[($24)])|0);
 $26=(($regs+7)|0);
 HEAP8[($26)]=$25;
 $27=(($data+43)|0);
 $28=((HEAP8[($27)])|0);
 $29=(($regs+8)|0);
 HEAP8[($29)]=$28;
 $30=($size>>>0)>((66047)>>>0);
 if ($30) {
  $32=(($data+65920)|0);
  __ZN8Snes_Spc11set_ipl_romEPKv($this,$32);
 }
 $34=(($data+256)|0);
 $35=(($data+65792)|0);
 $36=((__ZN8Snes_Spc10load_stateERKN7Spc_Cpu11registers_tEPKvS5_($this,$regs,$34,$35))|0);
 $37=(($this+602)|0);
 HEAP8[($37)]=0;
 $_0=0;
 STACKTOP=sp;return (($_0)|0);
}
function __ZN8Snes_Spc10load_stateERKN7Spc_Cpu11registers_tEPKvS5_($this,$cpu_state,$new_ram,$dsp_state){
 $this=($this)|0;
 $cpu_state=($cpu_state)|0;
 $new_ram=($new_ram)|0;
 $dsp_state=($dsp_state)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_lobit=0,$_lobit_not=0,$11=0,$12=0,$i_021=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0;
 var $63=0,$64=0,$65=0,$66=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0;
 var $85=0,$86=0,$87=0,$88=0,label=0;
 $1=(($this+608)|0);
 $2=$1;
 $3=$cpu_state;
 HEAP32[(($2)>>2)]=((HEAP32[(($3)>>2)])|0);HEAP32[((($2)+(4))>>2)]=((HEAP32[((($3)+(4))>>2)])|0);HEAP32[((($2)+(8))>>2)]=((HEAP32[((($3)+(8))>>2)])|0);
 $4=(($this+72)|0);
 HEAP32[(($4)>>2)]=32;
 $5=(($this+948)|0);
 (_memcpy((($5)|0), (($new_ram)|0), 65536)|0);
 $6=(($this+628)|0);
 $7=(($this+66420)|0);
 (_memcpy((($6)|0), (($7)|0), 64)|0);
 $8=(($this+1189)|0);
 $9=((HEAP8[($8)])|0);
 $10=(($this+603)|0);
 $_lobit=($9&255)>>>7;
 $_lobit_not=$_lobit^1;
 HEAP8[($10)]=$_lobit_not;
 $11=(($_lobit<<24)>>24)==1;
 __ZN8Snes_Spc10enable_romEb($this,$11);
 $12=(($this+88)|0);
 __ZN7Spc_Dsp5resetEv($12);
 $i_021=0;
 while(1) {
  $14=(($dsp_state+$i_021)|0);
  $15=((HEAP8[($14)])|0);
  $16=($15&255);
  __ZN7Spc_Dsp5writeEii($12,$i_021,$16);
  $17=((($i_021)+(1))|0);
  $18=($17|0)<128;
  if ($18) {
   $i_021=$17;
  } else {
   break;
  }
 }
 $19=(($this)|0);
 HEAP32[(($19)>>2)]=0;
 $20=((HEAP8[($8)])|0);
 $21=($20&255);
 $22=$21&1;
 $23=(($this+16)|0);
 HEAP32[(($23)>>2)]=$22;
 $24=($22|0)==0;
 if ($24) {
  HEAP32[(($19)>>2)]=127;
 }
 $27=(($this+8)|0);
 HEAP32[(($27)>>2)]=0;
 $28=(($this+1201)|0);
 $29=((HEAP8[($28)])|0);
 $30=($29&255);
 $31=$30&15;
 $32=(($this+20)|0);
 HEAP32[(($32)>>2)]=$31;
 $33=(($this+1198)|0);
 $34=((HEAP8[($33)])|0);
 $35=($34&255);
 $36=(($34<<24)>>24)!=0;
 $37=($36?$35:256);
 $38=(($this+4)|0);
 HEAP32[(($38)>>2)]=$37;
 $39=(($this+24)|0);
 HEAP32[(($39)>>2)]=0;
 $40=((HEAP8[($8)])|0);
 $41=($40&255);
 $42=$41>>>1;
 $43=$42&1;
 $44=(($this+40)|0);
 HEAP32[(($44)>>2)]=$43;
 $45=($43|0)==0;
 if ($45) {
  HEAP32[(($39)>>2)]=127;
 }
 $48=(($this+32)|0);
 HEAP32[(($48)>>2)]=0;
 $49=(($this+1202)|0);
 $50=((HEAP8[($49)])|0);
 $51=($50&255);
 $52=$51&15;
 $53=(($this+44)|0);
 HEAP32[(($53)>>2)]=$52;
 $54=(($this+1199)|0);
 $55=((HEAP8[($54)])|0);
 $56=($55&255);
 $57=(($55<<24)>>24)!=0;
 $58=($57?$56:256);
 $59=(($this+28)|0);
 HEAP32[(($59)>>2)]=$58;
 $60=(($this+48)|0);
 HEAP32[(($60)>>2)]=0;
 $61=((HEAP8[($8)])|0);
 $62=($61&255);
 $63=$62>>>2;
 $64=$63&1;
 $65=(($this+64)|0);
 HEAP32[(($65)>>2)]=$64;
 $66=($64|0)==0;
 if ($66) {
  HEAP32[(($60)>>2)]=127;
 }
 $69=(($this+56)|0);
 HEAP32[(($69)>>2)]=0;
 $70=(($this+1203)|0);
 $71=((HEAP8[($70)])|0);
 $72=($71&255);
 $73=$72&15;
 $74=(($this+68)|0);
 HEAP32[(($74)>>2)]=$73;
 $75=(($this+1200)|0);
 $76=((HEAP8[($75)])|0);
 $77=($76&255);
 $78=(($76<<24)>>24)!=0;
 $79=($78?$77:256);
 $80=(($this+52)|0);
 HEAP32[(($80)>>2)]=$79;
 $81=(($this+1188)|0);
 HEAP8[($81)]=0;
 HEAP8[($8)]=0;
 $82=(($this+1191)|0);
 HEAP8[($82)]=-1;
 $83=(($this+1198)|0);
 HEAP8[($83)]=0;
 $84=(($this+1199)|0);
 HEAP8[($84)]=0;
 $85=(($this+1200)|0);
 HEAP8[($85)]=0;
 $86=(($this+1201)|0);
 HEAP8[($86)]=-1;
 $87=(($this+1202)|0);
 HEAP8[($87)]=-1;
 $88=(($this+1203)|0);
 HEAP8[($88)]=-1;
 return ((0)|0);
}
function __ZN8Snes_Spc10clear_echoEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this+88)|0);
 $2=((__ZN7Spc_Dsp4readEi($1,108))|0);
 $3=$2&32;
 $4=($3|0)==0;
 if (!($4)) {
  return;
 }
 $6=((__ZN7Spc_Dsp4readEi($1,109))|0);
 $7=$6<<8;
 $8=((__ZN7Spc_Dsp4readEi($1,125))|0);
 $9=$8<<11;
 $10=(($this+948+$7)|0);
 $11=(((65536)-($7))|0);
 $12=((__Z3minIjET_S0_S0_($9,$11))|0);
 _memset((((($10)|0))|0), ((((-1)|0))|0), (((($12)|0))|0));
 return;
}
function __ZN7Spc_Dsp4readEi($this,$i){
 $this=($this)|0;
 $i=($i)|0;
 var $1=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=($i>>>0)<((128)>>>0);
 if ($1) {
  $4=$this;
  $5=(($4+$i)|0);
  $6=((HEAP8[($5)])|0);
  $7=($6&255);
  return (($7)|0);
 } else {
  ___assert_fail(((8032)|0),((7736)|0),((148)|0),((8720)|0));
  return ((0)|0);
 }
  return 0;
}
function __Z3minIjET_S0_S0_($x,$y){
 $x=($x)|0;
 $y=($y)|0;
 var $1=0,$x_y=0,label=0;
 $1=($x>>>0)<($y>>>0);
 $x_y=($1?$x:$y);
 return (($x_y)|0);
}
function __ZN8Snes_Spc10enable_romEb($this,$enable){
 $this=($this)|0;
 $enable=($enable)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;
 $1=(($this+603)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=($3&255);
 $5=($enable&1);
 $6=($4|0)==($5|0);
 if ($6) {
  return;
 }
 $8=($enable&1);
 HEAP8[($1)]=$8;
 $9=(($this+66420)|0);
 $10=(($this+66740)|0);
 $11=(($this+628)|0);
 $12=($enable?$10:$11);
 $13=(($12)|0);
 (_memcpy((($9)|0), (($13)|0), 64)|0);
 return;
}
function __ZN8Snes_Spc5Timer10run_until_Ei($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$elapsed_0=0,label=0;
 $1=(($this+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  ___assert_fail(((4376)|0),((3368)|0),((183)|0),((8704)|0));
 }
 $6=(($this)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((($time)-($7))|0);
 $9=(($this+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(((($8|0))/(($10|0)))&-1);
 $12=((($11)+(1))|0);
 $13=(Math_imul($12,$10)|0);
 $14=((($13)+($7))|0);
 HEAP32[(($6)>>2)]=$14;
 $15=(($this+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((($12)+($16))|0);
 $18=(($this+4)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($17|0)<($19|0);
 if ($20) {
  $elapsed_0=$17;
  HEAP32[(($15)>>2)]=$elapsed_0;
  return;
 }
 $22=(((($17|0))/(($19|0)))&-1);
 $23=(Math_imul($22,$19)|0);
 $24=((($17)-($23))|0);
 $25=(($this+20)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=((($26)+($22))|0);
 $28=$27&15;
 HEAP32[(($25)>>2)]=$28;
 $elapsed_0=$24;
 HEAP32[(($15)>>2)]=$elapsed_0;
 return;
}
function __ZN8Snes_Spc8run_dsp_Ei($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$17=0,$18=0,$19=0,$20=0,label=0;
 $1=(($this+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($time)-($2))|0);
 $4=$3>>5;
 $5=((($4)+(1))|0);
 $6=(($this+76)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 do {
  if (!($8)) {
   $10=$5<<1;
   $11=(($7+($10<<1))|0);
   HEAP32[(($6)>>2)]=$11;
   $12=(($this+80)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=($11>>>0)>($13>>>0);
   if (!($14)) {
    break;
   }
   ___assert_fail(((2696)|0),((3368)|0),((208)|0),((8688)|0));
  }
 } while(0);
 $17=$5<<5;
 $18=((HEAP32[(($1)>>2)])|0);
 $19=((($18)+($17))|0);
 HEAP32[(($1)>>2)]=$19;
 $20=(($this+88)|0);
 __ZN7Spc_Dsp3runElPs($20,$5,$7);
 return;
}
function __ZN8Snes_Spc4readEj($this,$addr){
 $this=($this)|0;
 $addr=($addr)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$_0=0;
 var label=0;
 $1=(($this+948+$addr)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=((($addr)-(240))|0);
 $5=($4>>>0)<((16)>>>0);
 if (!($5)) {
  $_0=$3;
  return (($_0)|0);
 }
 $7=((($addr)-(253))|0);
 $8=($7|0)>-1;
 if ($8) {
  $10=(($this+((($7)*(24))&-1))|0);
  $11=((__ZNK8Snes_Spc4timeEv($this))|0);
  __ZN8Snes_Spc5Timer9run_untilEi($10,$11);
  $12=(($this+((($7)*(24))&-1)+20)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  HEAP32[(($12)>>2)]=0;
  $_0=$13;
  return (($_0)|0);
 }
 $15=($addr|0)==243;
 if (!($15)) {
  $_0=$3;
  return (($_0)|0);
 }
 $17=((__ZNK8Snes_Spc4timeEv($this))|0);
 __ZN8Snes_Spc7run_dspEi($this,$17);
 $18=(($this+1190)|0);
 $19=((HEAP8[($18)])|0);
 $20=($19&255);
 $21=(($this+88)|0);
 $22=$20&127;
 $23=((__ZN7Spc_Dsp4readEi($21,$22))|0);
 $_0=$23;
 return (($_0)|0);
}
function __ZN8Snes_Spc5Timer9run_untilEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($time|0);
 if ($3) {
  return;
 }
 __ZN8Snes_Spc5Timer10run_until_Ei($this,$time);
 return;
}
function __ZNK8Snes_Spc4timeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+604)|0);
 $2=((__ZNK7Spc_Cpu6remainEv($1))|0);
 $3=(((-$2))|0);
 return (($3)|0);
}
function __ZN8Snes_Spc7run_dspEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)>($time|0);
 if ($3) {
  return;
 }
 __ZN8Snes_Spc8run_dsp_Ei($this,$time);
 return;
}
function __ZN8Snes_Spc5writeEji($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$3=0,$4=0,$7=0,$8=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0;
 var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$52=0;
 var $54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$65=0,$67=0,$68=0,$70=0,$71=0,$73=0,$74=0,$76=0,$77=0,$79=0,$80=0;
 var $81=0,$82=0,$83=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0,$94=0,$95=0,$97=0,$98=0,$99=0,$100=0,$102=0,$104=0,$105=0,$106=0,$107=0;
 var $109=0,$110=0,$112=0,$113=0,$114=0,$115=0,$117=0,$119=0,$120=0,label=0;
 $1=($addr>>>0)<((240)>>>0);
 if ($1) {
  $3=(($data)&255);
  $4=(($this+948+$addr)|0);
  HEAP8[($4)]=$3;
  return;
 }
 switch (($addr|0)) {
 case 243: {
  $21=((__ZNK8Snes_Spc4timeEv($this))|0);
  __ZN8Snes_Spc7run_dspEi($this,$21);
  $22=(($this+1190)|0);
  $23=((HEAP8[($22)])|0);
  $24=($23&255);
  $25=(($this+84)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=($26|0)>0;
  do {
   if ($27) {
    if ((((($23<<24)>>24))|0)==((92)|0)) {
     $38=(($this+596)|0);
     $39=((HEAP32[(($38)>>2)])|0);
     $40=$39|$data;
     HEAP32[(($38)>>2)]=$40;
     $41=$data^-1;
     $42=(($this+592)|0);
     $43=((HEAP32[(($42)>>2)])|0);
     $44=$43&$41;
     HEAP32[(($42)>>2)]=$44;
     break;
    } else if ((((($23<<24)>>24))|0)==((76)|0)) {
     $30=(($this+88)|0);
     $31=((__ZN7Spc_Dsp4readEi($30,92))|0);
     $32=$31^-1;
     $33=$32&$data;
     $34=(($this+592)|0);
     $35=((HEAP32[(($34)>>2)])|0);
     $36=$35|$33;
     HEAP32[(($34)>>2)]=$36;
     break;
    } else {
     label = 2498;
     break;
    }
   } else {
    label = 2498;
   }
  } while(0);
  do {
   if ((label|0) == 2498) {
    $46=(($23<<24)>>24)>-1;
    if ($46) {
     break;
    }
    return;
   }
  } while(0);
  $47=(($this+88)|0);
  __ZN7Spc_Dsp5writeEii($47,$24,$data);
  return;
  break;
 }
 case 240:case 244:case 245:case 246:case 247: {
  return;
  break;
 }
 case 250:case 251:case 252: {
  $79=((($addr)-(250))|0);
  $80=(($this+((($79)*(24))&-1)+4)|0);
  $81=((HEAP32[(($80)>>2)])|0);
  $82=$81&255;
  $83=($82|0)==($data|0);
  if ($83) {
   return;
  }
  $85=(($this+((($79)*(24))&-1))|0);
  $86=((__ZNK8Snes_Spc4timeEv($this))|0);
  __ZN8Snes_Spc5Timer9run_untilEi($85,$86);
  $87=($data|0)!=0;
  $88=($87?$data:256);
  HEAP32[(($80)>>2)]=$88;
  return;
  break;
 }
 case 241: {
  $48=$data&1;
  $49=($48|0)==0;
  $50=(($this+16)|0);
  do {
   if ($49) {
    HEAP32[(($50)>>2)]=0;
    $52=(($this)|0);
    HEAP32[(($52)>>2)]=127;
   } else {
    $54=((HEAP32[(($50)>>2)])|0);
    $55=($54|0)==0;
    if (!($55)) {
     break;
    }
    HEAP32[(($50)>>2)]=1;
    $57=(($this+20)|0);
    HEAP32[(($57)>>2)]=0;
    $58=(($this+8)|0);
    HEAP32[(($58)>>2)]=0;
    $59=((__ZNK8Snes_Spc4timeEv($this))|0);
    $60=(($this)|0);
    HEAP32[(($60)>>2)]=$59;
   }
  } while(0);
  $62=(($this+24)|0);
  $63=$data&2;
  $64=($63|0)==0;
  $65=(($this+40)|0);
  do {
   if ($64) {
    HEAP32[(($65)>>2)]=0;
    $102=(($62)|0);
    HEAP32[(($102)>>2)]=127;
   } else {
    $94=((HEAP32[(($65)>>2)])|0);
    $95=($94|0)==0;
    if (!($95)) {
     break;
    }
    HEAP32[(($65)>>2)]=1;
    $97=(($this+44)|0);
    HEAP32[(($97)>>2)]=0;
    $98=(($this+32)|0);
    HEAP32[(($98)>>2)]=0;
    $99=((__ZNK8Snes_Spc4timeEv($this))|0);
    $100=(($62)|0);
    HEAP32[(($100)>>2)]=$99;
   }
  } while(0);
  $104=(($this+48)|0);
  $105=$data&4;
  $106=($105|0)==0;
  $107=(($this+64)|0);
  do {
   if ($106) {
    HEAP32[(($107)>>2)]=0;
    $117=(($104)|0);
    HEAP32[(($117)>>2)]=127;
   } else {
    $109=((HEAP32[(($107)>>2)])|0);
    $110=($109|0)==0;
    if (!($110)) {
     break;
    }
    HEAP32[(($107)>>2)]=1;
    $112=(($this+68)|0);
    HEAP32[(($112)>>2)]=0;
    $113=(($this+56)|0);
    HEAP32[(($113)>>2)]=0;
    $114=((__ZNK8Snes_Spc4timeEv($this))|0);
    $115=(($104)|0);
    HEAP32[(($115)>>2)]=$114;
   }
  } while(0);
  $119=$data&16;
  $120=($119|0)==0;
  if (!($120)) {
   $67=(($this+1192)|0);
   HEAP8[($67)]=0;
   $68=(($this+1193)|0);
   HEAP8[($68)]=0;
  }
  $70=$data&32;
  $71=($70|0)==0;
  if (!($71)) {
   $73=(($this+1194)|0);
   HEAP8[($73)]=0;
   $74=(($this+1195)|0);
   HEAP8[($74)]=0;
  }
  $76=$data&128;
  $77=($76|0)!=0;
  __ZN8Snes_Spc10enable_romEb($this,$77);
  return;
  break;
 }
 case 253:case 254:case 255: {
  $90=((($addr)-(253))|0);
  $91=(($this+((($90)*(24))&-1)+20)|0);
  HEAP32[(($91)>>2)]=0;
  return;
  break;
 }
 default: {
  $7=($addr>>>0)<((65472)>>>0);
  $8=(($data)&255);
  if ($7) {
   $10=(($this+948+$addr)|0);
   HEAP8[($10)]=$8;
   return;
  }
  $12=((($addr)-(65472))|0);
  $13=(($this+628+$12)|0);
  HEAP8[($13)]=$8;
  $14=(($this+603)|0);
  $15=((HEAP8[($14)])|0);
  $16=$15&1;
  $17=(($16<<24)>>24)==0;
  if (!($17)) {
   return;
  }
  $19=(($this+948+$addr)|0);
  HEAP8[($19)]=$8;
  return;
 }
 }
}
function __ZN8Snes_Spc4skipEl($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$_06=0,$17=0,$_0=0,label=0;
 $1=($count|0)>128000;
 do {
  if ($1) {
   $3=(($this+592)|0);
   HEAP32[(($3)>>2)]=0;
   $4=(($this+596)|0);
   HEAP32[(($4)>>2)]=0;
   $5=((($count)-(64000))|0);
   $6=(($this+600)|0);
   $7=((__ZN8Snes_Spc4playElPs($this,$5,$6))|0);
   $8=($7|0)==0;
   if ($8) {
    $10=(($this+88)|0);
    $11=((HEAP32[(($4)>>2)])|0);
    $12=((HEAP32[(($3)>>2)])|0);
    $13=$12^-1;
    $14=$11&$13;
    __ZN7Spc_Dsp5writeEii($10,92,$14);
    $15=((HEAP32[(($3)>>2)])|0);
    __ZN7Spc_Dsp5writeEii($10,76,$15);
    __ZN8Snes_Spc10clear_echoEv($this);
    $_06=64000;
    break;
   } else {
    $_0=$7;
    return (($_0)|0);
   }
  } else {
   $_06=$count;
  }
 } while(0);
 $17=((__ZN8Snes_Spc4playElPs($this,$_06,0))|0);
 $_0=$17;
 return (($_0)|0);
}
function __ZN8Snes_Spc4playElPs($this,$count,$out){
 $this=($this)|0;
 $count=($count)|0;
 $out=($out)|0;
 var $1=0,$2=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$_=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$_22=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$35=0,$37=0,$38=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$_0=0,$52=0;
 var $53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,label=0;
 $1=$count&1;
 $2=($1|0)==0;
 if (!($2)) {
  ___assert_fail(((1744)|0),((3368)|0),((448)|0),((8728)|0));
  return ((0)|0);
 }
 $5=(((($count|0))/(2))&-1);
 $6=$5<<5;
 $7=(($this+76)|0);
 HEAP32[(($7)>>2)]=$out;
 $8=($out|0)!=0;
 if ($8) {
  $10=(($this+600)|0);
  $11=($10|0)!=($out|0);
  $_=($11?$count:0);
  $13=$_;
 } else {
  $13=0;
 }
 $14=(($out+($13<<1))|0);
 $15=(($this+80)|0);
 HEAP32[(($15)>>2)]=$14;
 $16=(($this+600)|0);
 $17=($16|0)==($out|0);
 $18=(((32)-($6))|0);
 $_22=($17?32:$18);
 $19=(($this+84)|0);
 HEAP32[(($19)>>2)]=$_22;
 $20=(((-$6))|0);
 $21=(($this+16)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)==0;
 if (!($23)) {
  $25=(($this)|0);
  $26=(($this)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=((($27)-($6))|0);
  HEAP32[(($26)>>2)]=$28;
  __ZN8Snes_Spc5Timer9run_untilEi($25,$20);
 }
 $30=(($this+24)|0);
 $31=(($this+40)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=($32|0)==0;
 if (!($33)) {
  $52=(($30)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=((($53)-($6))|0);
  HEAP32[(($52)>>2)]=$54;
  __ZN8Snes_Spc5Timer9run_untilEi($30,$20);
 }
 $56=(($this+48)|0);
 $57=(($this+64)|0);
 $58=((HEAP32[(($57)>>2)])|0);
 $59=($58|0)==0;
 if (!($59)) {
  $61=(($56)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=((($62)-($6))|0);
  HEAP32[(($61)>>2)]=$63;
  __ZN8Snes_Spc5Timer9run_untilEi($56,$20);
 }
 $65=(($this+604)|0);
 $66=(($this+72)|0);
 $67=((HEAP32[(($66)>>2)])|0);
 $68=((($6)-($67))|0);
 $69=((__ZN7Spc_Cpu3runEi($65,$68))|0);
 $70=($69|0)>0;
 if ($70) {
  $_0=1312;
  return (($_0)|0);
 }
 $35=(((-$69))|0);
 HEAP32[(($66)>>2)]=$35;
 __ZN8Snes_Spc7run_dspEi($this,0);
 do {
  if ($8) {
   $37=((HEAP32[(($19)>>2)])|0);
   $38=($37|0)==32;
   if (!($38)) {
    ___assert_fail(((832)|0),((3368)|0),((483)|0),((8728)|0));
    return ((0)|0);
   }
   if ($17) {
    break;
   }
   $42=((HEAP32[(($7)>>2)])|0);
   $43=$42;
   $44=$out;
   $45=((($43)-($44))|0);
   $46=$45>>1;
   $47=($46|0)==($count|0);
   if ($47) {
    break;
   }
   ___assert_fail(((344)|0),((3368)|0),((484)|0),((8728)|0));
   return ((0)|0);
  }
 } while(0);
 HEAP32[(($15)>>2)]=0;
 $_0=0;
 return (($_0)|0);
}
function __ZNK7Spc_Cpu6remainEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}
function __ZN7Spc_CpuC2EP8Snes_SpcPh($this,$e,$ram_in){
 $this=($this)|0;
 $e=($e)|0;
 $ram_in=($ram_in)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=$ram_in;
 $2=(($this+20)|0);
 HEAP32[(($2)>>2)]=$e;
 $3=(($this+16)|0);
 HEAP32[(($3)>>2)]=0;
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Spc_Cpu7mem_bitEj($this,$pc){
 $this=($this)|0;
 $pc=($pc)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+$pc)|0);
 $4=((__Z8get_le16PKv($3))|0);
 $5=(($this+20)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$4&8191;
 $8=((__ZN8Snes_Spc4readEj($6,$7))|0);
 $9=$4>>>13;
 $10=$8>>>($9>>>0);
 $11=$10<<8;
 $12=$11&256;
 return (($12)|0);
}
function __ZN7Spc_Cpu3runEi($this,$cycle_count){
 $this=($this)|0;
 $cycle_count=($cycle_count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$_sum=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0;
 var $80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$pc_0=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$nz_0=0,$c_0=0,$status_0=0,$y_0=0,$x_0=0,$a_0=0,$pc_1=0;
 var $94=0,$dp_0_be=0,$nz_1_be=0,$c_1_be=0,$status_1_be=0,$y_1_be=0,$x_1_be=0,$a_1_be=0,$pc_2_be=0,$sp_0_be=0,$95=0,$96=0,$97=0,$98=0,$100=0,$_in_in=0,$101=0,$102=0,$_pn=0,$sp_0761=0;
 var $a_1757=0,$x_1744=0,$y_1738=0,$status_1736=0,$c_1734=0,$nz_1732=0,$dp_0731=0,$_in=0,$_in771_in=0,$_in771=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0,$111=0,$112=0,$114=0;
 var $115=0,$116=0,$118=0,$119=0,$120=0,$122=0,$123=0,$124=0,$126=0,$127=0,$128=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$139=0;
 var $141=0,$142=0,$143=0,$144=0,$146=0,$147=0,$148=0,$149=0,$150=0,$152=0,$154=0,$data_0=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$163=0,$164=0;
 var $data_1=0,$166=0,$data_2=0,$x_2=0,$pc_3=0,$168=0,$169=0,$171=0,$172=0,$173=0,$175=0,$176=0,$data_3=0,$178=0,$180=0,$181=0,$data_4=0,$pc_4=0,$183=0,$184=0;
 var $data_5=0,$pc_5=0,$187=0,$188=0,$data_6=0,$190=0,$192=0,$193=0,$data_7=0,$pc_6=0,$195=0,$196=0,$data_8=0,$pc_7=0,$199=0,$201=0,$202=0,$203=0,$204=0,$206=0;
 var $207=0,$208=0,$209=0,$210=0,$212=0,$214=0,$data_9=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$223=0,$224=0,$data_10=0,$226=0,$data_11=0,$pc_8=0,$228=0;
 var $temp2_0=0,$231=0,$232=0,$233=0,$235=0,$236=0,$data_12=0,$238=0,$239=0,$241=0,$242=0,$data_13=0,$244=0,$245=0,$247=0,$248=0,$249=0,$data_14=0,$251=0,$252=0;
 var $253=0,$254=0,$255=0,$256=0,$262=0,$263=0,$264=0,$_sum723=0,$266=0,$268=0,$269=0,$270=0,$272=0,$274=0,$275=0,$276=0,$277=0,$279=0,$280=0,$281=0;
 var $282=0,$283=0,$285=0,$287=0,$data_15=0,$289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$296=0,$297=0,$data_16=0,$299=0,$data_17=0,$pc_9=0,$301=0,$302=0,$data_18=0;
 var $pc_10=0,$304=0,$306=0,$307=0,$308=0,$309=0,$311=0,$312=0,$313=0,$data_19=0,$315=0,$316=0,$317=0,$318=0,$319=0,$addr_0=0,$data_20=0,$pc_11=0,$321=0,$322=0;
 var $323=0,$324=0,$326=0,$328=0,$329=0,$330=0,$331=0,$333=0,$334=0,$335=0,$336=0,$337=0,$339=0,$341=0,$data_21=0,$343=0,$344=0,$345=0,$346=0,$347=0;
 var $348=0,$350=0,$351=0,$data_22=0,$353=0,$data_23=0,$pc_12=0,$355=0,$356=0,$data_24=0,$pc_13=0,$358=0,$360=0,$361=0,$362=0,$363=0,$365=0,$366=0,$367=0,$data_25=0;
 var $369=0,$370=0,$371=0,$372=0,$373=0,$addr3_0=0,$data_26=0,$pc_14=0,$375=0,$376=0,$377=0,$378=0,$380=0,$382=0,$383=0,$384=0,$385=0,$387=0,$388=0,$389=0;
 var $390=0,$391=0,$393=0,$395=0,$data_27=0,$397=0,$398=0,$399=0,$400=0,$401=0,$402=0,$404=0,$405=0,$data_28=0,$407=0,$data_29=0,$pc_15=0,$409=0,$410=0,$data_30=0;
 var $pc_16=0,$412=0,$414=0,$415=0,$416=0,$417=0,$419=0,$420=0,$421=0,$data_31=0,$423=0,$424=0,$425=0,$426=0,$427=0,$addr4_0=0,$data_32=0,$pc_17=0,$429=0,$430=0;
 var $431=0,$432=0,$434=0,$436=0,$437=0,$438=0,$439=0,$441=0,$442=0,$443=0,$444=0,$445=0,$447=0,$449=0,$data_33=0,$451=0,$452=0,$453=0,$454=0,$455=0;
 var $456=0,$458=0,$459=0,$data_34=0,$461=0,$data_35=0,$pc_18=0,$463=0,$464=0,$data_36=0,$pc_19=0,$466=0,$467=0,$468=0,$470=0,$471=0,$472=0,$473=0,$474=0,$475=0;
 var $476=0,$477=0,$478=0,$480=0,$481=0,$482=0,$data_37=0,$484=0,$485=0,$486=0,$487=0,$488=0,$489=0,$490=0,$491=0,$492=0,$493=0,$495=0,$497=0,$498=0;
 var $data_38=0,$pc_20=0,$500=0,$501=0,$data_39=0,$pc_21=0,$503=0,$504=0,$505=0,$507=0,$509=0,$510=0,$data_40=0,$pc_22=0,$512=0,$513=0,$data_41=0,$pc_23=0,$515=0,$516=0;
 var $517=0,$519=0,$520=0,$521=0,$522=0,$524=0,$525=0,$526=0,$data_42=0,$528=0,$529=0,$530=0,$531=0,$532=0,$addr5_0=0,$data_43=0,$pc_24=0,$534=0,$535=0,$537=0;
 var $539=0,$540=0,$541=0,$542=0,$544=0,$545=0,$546=0,$547=0,$548=0,$550=0,$552=0,$data_44=0,$554=0,$555=0,$556=0,$557=0,$558=0,$559=0,$561=0,$562=0;
 var $data_45=0,$564=0,$data_46=0,$pc_25=0,$566=0,$567=0,$addr5_1=0,$data_48=0,$nz_2=0,$pc_27=0,$569=0,$570=0,$571=0,$data_49=0,$572=0,$573=0,$574=0,$575=0,$sext=0,$576=0;
 var $577=0,$578=0,$579=0,$580=0,$581=0,$sum=0,$582=0,$583=0,$584=0,$585=0,$586=0,$587=0,$588=0,$589=0,$590=0,$592=0,$594=0,$595=0,$597=0,$598=0;
 var $600=0,$601=0,$603=0,$604=0,$606=0,$607=0,$609=0,$610=0,$612=0,$613=0,$615=0,$616=0,$data_50=0,$618=0,$620=0,$621=0,$data_51=0,$pc_28=0,$623=0,$624=0;
 var $625=0,$626=0,$627=0,$628=0,$629=0,$630=0,$c_2=0,$633=0,$634=0,$635=0,$636=0,$637=0,$c_3=0,$640=0,$641=0,$642=0,$643=0,$644=0,$646=0,$c_4=0;
 var $649=0,$650=0,$data_52=0,$c_5=0,$652=0,$c_6=0,$655=0,$656=0,$data_53=0,$c_7=0,$pc_29=0,$658=0,$659=0,$660=0,$661=0,$662=0,$663=0,$664=0,$665=0,$667=0;
 var $c_8=0,$670=0,$671=0,$data_54=0,$c_9=0,$673=0,$c_10=0,$676=0,$677=0,$data_55=0,$c_11=0,$pc_30=0,$679=0,$680=0,$681=0,$682=0,$683=0,$684=0,$685=0,$686=0;
 var $688=0,$689=0,$690=0,$691=0,$693=0,$694=0,$695=0,$696=0,$697=0,$698=0,$699=0,$700=0,$701=0,$702=0,$703=0,$704=0,$706=0,$707=0,$708=0,$709=0;
 var $710=0,$711=0,$713=0,$714=0,$715=0,$716=0,$717=0,$718=0,$719=0,$720=0,$721=0,$722=0,$723=0,$724=0,$725=0,$726=0,$727=0,$728=0,$729=0,$730=0;
 var $731=0,$732=0,$733=0,$734=0,$736=0,$737=0,$738=0,$739=0,$740=0,$741=0,$742=0,$743=0,$744=0,$745=0,$746=0,$747=0,$748=0,$750=0,$751=0,$752=0;
 var $sign_0=0,$temp9_0=0,$754=0,$755=0,$756=0,$757=0,$758=0,$759=0,$760=0,$_masked722=0,$761=0,$762=0,$763=0,$764=0,$765=0,$766=0,$767=0,$768=0,$769=0,$770=0;
 var $771=0,$772=0,$773=0,$774=0,$776=0,$777=0,$778=0,$779=0,$780=0,$781=0,$782=0,$783=0,$784=0,$785=0,$786=0,$787=0,$788=0,$789=0,$790=0,$791=0;
 var $_masked=0,$792=0,$794=0,$795=0,$796=0,$797=0,$798=0,$799=0,$800=0,$802=0,$803=0,$804=0,$805=0,$806=0,$status_2=0,$807=0,$808=0,$status_2_=0,$809=0,$810=0;
 var $811=0,$812=0,$814=0,$815=0,$816=0,$extract_t792=0,$818=0,$819=0,$820=0,$821=0,$822=0,$823=0,$824=0,$extract_t793=0,$_sink_off0=0,$y_2=0,$826=0,$828=0,$829=0,$831=0;
 var $832=0,$833=0,$835=0,$836=0,$837=0,$839=0,$840=0,$841=0,$843=0,$844=0,$845=0,$847=0,$848=0,$849=0,$851=0,$852=0,$853=0,$855=0,$856=0,$857=0;
 var $859=0,$860=0,$861=0,$863=0,$864=0,$865=0,$867=0,$868=0,$869=0,$871=0,$872=0,$873=0,$875=0,$876=0,$877=0,$879=0,$880=0,$881=0,$882=0,$883=0;
 var $884=0,$885=0,$886=0,$888=0,$889=0,$890=0,$891=0,$892=0,$893=0,$894=0,$895=0,$897=0,$898=0,$data_56=0,$900=0,$901=0,$902=0,$903=0,$904=0,$906=0;
 var $907=0,$908=0,$909=0,$911=0,$912=0,$913=0,$915=0,$916=0,$917=0,$918=0,$919=0,$920=0,$921=0,$922=0,$924=0,$925=0,$pc_31=0,$927=0,$928=0,$930=0;
 var $931=0,$932=0,$933=0,$934=0,$935=0,$936=0,$937=0,$938=0,$939=0,$940=0,$941=0,$temp21_0=0,$942=0,$943=0,$extract_t718=0,$945=0,$extract_t719=0,$temp21_1_off0=0,$947=0,$948=0;
 var $949=0,$951=0,$952=0,$953=0,$955=0,$956=0,$957=0,$958=0,$959=0,$961=0,$962=0,$963=0,$964=0,$965=0,$966=0,$967=0,$968=0,$pc_32=0,$sp_0_pn=0,$temp22_0_in=0;
 var $sp_1=0,$temp22_0=0,$970=0,$971=0,$972=0,$973=0,$974=0,$975=0,$976=0,$977=0,$978=0,$980=0,$981=0,$982=0,$983=0,$984=0,$985=0,$986=0,$987=0,$988=0;
 var $temp23_0=0,$989=0,$990=0,$extract_t=0,$992=0,$extract_t717=0,$temp23_1_off0=0,$994=0,$996=0,$997=0,$999=0,$1000=0,$1002=0,$1003=0,$1005=0,$1006=0,$1007=0,$1009=0,$1010=0,$1011=0;
 var $1013=0,$1014=0,$1015=0,$1017=0,$1018=0,$1019=0,$1020=0,$1021=0,$1022=0,$_=0,$1023=0,$1024=0,$1025=0,$1026=0,$1028=0,$1029=0,$1030=0,$1031=0,$1032=0,$1033=0;
 var $1034=0,$1035=0,$1036=0,$1037=0,$temp24_0=0,$1038=0,$1040=0,$1041=0,$1042=0,$1044=0,$1045=0,$1046=0,$1047=0,$1049=0,$1050=0,$1051=0,$1053=0,$1054=0,$1055=0,$1056=0;
 var $1058=0,$1059=0,$1060=0,$1062=0,$1063=0,$1064=0,$1065=0,$1066=0,$1067=0,$1068=0,$1069=0,$1070=0,$1072=0,$1073=0,$1074=0,$1075=0,$1076=0,$1077=0,$1078=0,$1079=0;
 var $1080=0,$1081=0,$1082=0,$1083=0,$1084=0,$1085=0,$1087=0,$1088=0,$1092=0,$1094=0,$1098=0,$1100=0,$extract_t774=0,$extract_t777=0,$extract_t780=0,$extract_t772=0,$extract_t775=0,$extract_t778=0,$sp_0_lcssa=0,$pc_2_lcssa=0;
 var $a_1_lcssa_off0=0,$x_1_lcssa_off0=0,$y_1_lcssa_off0=0,$status_1_lcssa=0,$c_1_lcssa=0,$nz_1_lcssa=0,$dp_0_lcssa=0,$1102=0,$1103=0,$1104=0,$1105=0,$1106=0,$1107=0,$1108=0,$1109=0,$1110=0,$temp28_0=0,$1111=0,$1112=0,$extract_t724=0;
 var $1114=0,$extract_t725=0,$temp28_1_off0=0,$1116=0,$1117=0,$1118=0,$1119=0,$1120=0,$1121=0,label=0;
 $1=(($this+16)|0);
 HEAP32[(($1)>>2)]=$cycle_count;
 $2=(($this)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($this+12)|0);
 $5=((HEAP8[($4)])|0);
 $6=($5&255);
 $_sum=((($6)+(257))|0);
 $7=(($3+$_sum)|0);
 $8=(($this+4)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($this+8)|0);
 $11=((HEAP8[($10)])|0);
 $12=(($this+9)|0);
 $13=((HEAP8[($12)])|0);
 $14=(($this+10)|0);
 $15=((HEAP8[($14)])|0);
 $16=(($this+11)|0);
 $17=((HEAP8[($16)])|0);
 $18=($17&255);
 $19=$18&92;
 $20=$18<<8;
 $21=$18<<4;
 $22=$21&2048;
 $23=$18&2;
 $24=$22|$23;
 $25=$24^2;
 $26=$18<<3;
 $27=$26&256;
 $28=((($9)+(1))|0);
 $29=(($3+$28)|0);
 $30=((HEAP32[(($1)>>2)])|0);
 $31=($30|0)<1;
 do {
  if ($31) {
   $dp_0_lcssa=$27;$nz_1_lcssa=$25;$c_1_lcssa=$20;$status_1_lcssa=$19;$y_1_lcssa_off0=$15;$x_1_lcssa_off0=$13;$a_1_lcssa_off0=$11;$pc_2_lcssa=$9;$sp_0_lcssa=$7;
  } else {
   $32=($15&255);
   $33=($13&255);
   $34=($11&255);
   $35=(($this+20)|0);
   $36=(($this+20)|0);
   $37=(($this+20)|0);
   $38=(($this+20)|0);
   $39=(($this+20)|0);
   $40=(($this+20)|0);
   $41=(($this+20)|0);
   $42=(($this+20)|0);
   $43=(($this+20)|0);
   $44=$3;
   $45=(($this+20)|0);
   $46=(($this+20)|0);
   $47=(($this+20)|0);
   $48=(($this+20)|0);
   $49=(($this+20)|0);
   $50=(($this+20)|0);
   $51=(($this+20)|0);
   $52=(($this+20)|0);
   $53=(($this+20)|0);
   $54=(($this+20)|0);
   $55=(($this+20)|0);
   $56=(($this+20)|0);
   $57=(($this+20)|0);
   $58=(($this+20)|0);
   $59=(($this+20)|0);
   $60=(($this+20)|0);
   $61=(($this+20)|0);
   $62=(($this+20)|0);
   $63=(($this+20)|0);
   $64=(($this+20)|0);
   $65=(($this+20)|0);
   $66=(($this+20)|0);
   $67=(($this+20)|0);
   $68=(($this+20)|0);
   $69=(($this+20)|0);
   $70=(($this+20)|0);
   $71=(($this+20)|0);
   $72=(($this+20)|0);
   $73=(($this+20)|0);
   $74=(($this+20)|0);
   $75=(($this+20)|0);
   $76=(($this+20)|0);
   $77=(($this+20)|0);
   $78=(($this+20)|0);
   $79=(($this+20)|0);
   $80=(($this+20)|0);
   $81=(($3+65502)|0);
   $82=(($this+20)|0);
   $83=(($this+20)|0);
   $84=(($this+20)|0);
   $85=(($this+20)|0);
   $dp_0731=$27;$nz_1732=$25;$c_1734=$20;$status_1736=$19;$y_1738=$32;$x_1744=$33;$a_1757=$34;$sp_0761=$7;$_pn=$9;$102=$28;$101=$29;$_in_in=$29;$100=$30;
   L2928: while(1) {
    $_in=((HEAP8[($_in_in)])|0);
    $_in771_in=(($3+$_pn)|0);
    $_in771=((HEAP8[($_in771_in)])|0);
    $103=($_in771&255);
    $104=($_in&255);
    $105=((18656+$103)|0);
    $106=((HEAP8[($105)])|0);
    $107=($106&255);
    $108=((($100)-($107))|0);
    HEAP32[(($1)>>2)]=$108;
    L2930: do {
     switch (($103|0)) {
     case 22: {
      $339=((($104)+($y_1738))|0);
      $data_21=$339;
      label = 2638;
      break;
     }
     case 21: {
      $341=((($104)+($x_1744))|0);
      $data_21=$341;
      label = 2638;
      break;
     }
     case 5: {
      $data_21=$104;
      label = 2638;
      break;
     }
     case 20: {
      $350=((($104)+($x_1744))|0);
      $351=$350&255;
      $data_22=$351;
      label = 2640;
      break;
     }
     case 4: {
      $data_22=$104;
      label = 2640;
      break;
     }
     case 8: {
      $pc_13=$102;$data_24=$104;
      label = 2642;
      break;
     }
     case 25: {
      $360=((HEAP32[(($51)>>2)])|0);
      $361=((($y_1738)+($dp_0731))|0);
      $362=((__ZN8Snes_Spc4readEj($360,$361))|0);
      $363=((($x_1744)+($dp_0731))|0);
      $pc_14=$_pn;$data_26=$362;$addr3_0=$363;
      label = 2646;
      break;
     }
     case 102: {
      $434=((($x_1744)+($dp_0731))|0);
      $pc_18=$_pn;$data_35=$434;
      label = 2669;
      break;
     }
     case 119: {
      $436=$104|$dp_0731;
      $437=(($3+$436)|0);
      $438=((__Z8get_le16PKv($437))|0);
      $439=((($438)+($y_1738))|0);
      $pc_18=$102;$data_35=$439;
      label = 2669;
      break;
     }
     case 103: {
      $441=((($104)+($x_1744))|0);
      $442=$441&255;
      $443=$442|$dp_0731;
      $444=(($3+$443)|0);
      $445=((__Z8get_le16PKv($444))|0);
      $pc_18=$102;$data_35=$445;
      label = 2669;
      break;
     }
     case 118: {
      $447=((($104)+($y_1738))|0);
      $data_33=$447;
      label = 2666;
      break;
     }
     case 117: {
      $449=((($104)+($x_1744))|0);
      $data_33=$449;
      label = 2666;
      break;
     }
     case 101: {
      $data_33=$104;
      label = 2666;
      break;
     }
     case 156: {
      $606=((($a_1757)-(1))|0);
      $607=$606&255;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$607;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$606;$dp_0_be=$dp_0731;
      break;
     }
     case 29: {
      $609=((($x_1744)-(1))|0);
      $610=$609&255;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$610;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$609;$dp_0_be=$dp_0731;
      break;
     }
     case 220: {
      $612=((($y_1738)-(1))|0);
      $613=$612&255;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$613;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$612;$dp_0_be=$dp_0731;
      break;
     }
     case 155:case 187: {
      $615=((($104)+($x_1744))|0);
      $616=$615&255;
      $data_50=$616;
      label = 2705;
      break;
     }
     case 139:case 171: {
      $data_50=$104;
      label = 2705;
      break;
     }
     case 140:case 172: {
      $620=((__Z8get_le16PKv($101))|0);
      $621=((($_pn)+(2))|0);
      $pc_28=$621;$data_51=$620;
      label = 2707;
      break;
     }
     case 92: {
      $c_2=0;
      label = 2709;
      break;
     }
     case 124: {
      $c_2=$c_1734;
      label = 2709;
      break;
     }
     case 28: {
      $c_3=0;
      label = 2711;
      break;
     }
     case 229: {
      $data_0=$104;
      label = 2580;
      break;
     }
     case 233: {
      $180=((__Z8get_le16PKv($101))|0);
      $181=((($_pn)+(2))|0);
      $pc_4=$181;$data_4=$180;
      label = 2588;
      break;
     }
     case 236: {
      $192=((__Z8get_le16PKv($101))|0);
      $193=((($_pn)+(2))|0);
      $pc_6=$193;$data_7=$192;
      label = 2593;
      break;
     }
     case 40: {
      $pc_10=$102;$data_18=$104;
      label = 2628;
      break;
     }
     case 57: {
      $306=((HEAP32[(($47)>>2)])|0);
      $307=((($y_1738)+($dp_0731))|0);
      $308=((__ZN8Snes_Spc4readEj($306,$307))|0);
      $309=((($x_1744)+($dp_0731))|0);
      $pc_11=$_pn;$data_20=$308;$addr_0=$309;
      label = 2632;
      break;
     }
     case 41: {
      $311=((HEAP32[(($49)>>2)])|0);
      $312=$104|$dp_0731;
      $313=((__ZN8Snes_Spc4readEj($311,$312))|0);
      $data_19=$313;
      label = 2631;
      break;
     }
     case 56: {
      $data_19=$104;
      label = 2631;
      break;
     }
     case 157: {
      $262=((($sp_0761)-(257))|0);
      $263=$262;
      $264=((($263)-($44))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$264;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$264;$dp_0_be=$dp_0731;
      break;
     }
     case 189: {
      $_sum723=((($x_1744)+(257))|0);
      $266=(($3+$_sum723)|0);
      $sp_0_be=$266;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 175: {
      $268=((HEAP32[(($45)>>2)])|0);
      $269=((($x_1744)+($dp_0731))|0);
      __ZN8Snes_Spc5writeEji($268,$269,$a_1757);
      $270=((($x_1744)+(1))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$270;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 68: {
      $data_28=$104;
      label = 2654;
      break;
     }
     case 72: {
      $pc_16=$102;$data_30=$104;
      label = 2656;
      break;
     }
     case 89: {
      $414=((HEAP32[(($55)>>2)])|0);
      $415=((($y_1738)+($dp_0731))|0);
      $416=((__ZN8Snes_Spc4readEj($414,$415))|0);
      $417=((($x_1744)+($dp_0731))|0);
      $pc_17=$_pn;$data_32=$416;$addr4_0=$417;
      label = 2660;
      break;
     }
     case 73: {
      $419=((HEAP32[(($57)>>2)])|0);
      $420=$104|$dp_0731;
      $421=((__ZN8Snes_Spc4readEj($419,$420))|0);
      $data_31=$421;
      label = 2659;
      break;
     }
     case 88: {
      $data_31=$104;
      label = 2659;
      break;
     }
     case 0: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 116: {
      $458=((($104)+($x_1744))|0);
      $459=$458&255;
      $data_34=$459;
      label = 2668;
      break;
     }
     case 100: {
      $data_34=$104;
      label = 2668;
      break;
     }
     case 104: {
      $pc_19=$102;$data_36=$104;
      label = 2670;
      break;
     }
     case 121: {
      $470=((HEAP32[(($59)>>2)])|0);
      $471=((($x_1744)+($dp_0731))|0);
      $472=((__ZN8Snes_Spc4readEj($470,$471))|0);
      $473=((HEAP32[(($59)>>2)])|0);
      $474=((($y_1738)+($dp_0731))|0);
      $475=((__ZN8Snes_Spc4readEj($473,$474))|0);
      $476=((($472)-($475))|0);
      $477=$476^-1;
      $478=$476&255;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$477;$nz_1_be=$478;$dp_0_be=$dp_0731;
      break;
     }
     case 105: {
      $480=((HEAP32[(($60)>>2)])|0);
      $481=$104|$dp_0731;
      $482=((__ZN8Snes_Spc4readEj($480,$481))|0);
      $data_37=$482;
      label = 2673;
      break;
     }
     case 158: {
      $802=$status_1736&-73;
      $803=$y_1738&15;
      $804=$x_1744&15;
      $805=($803>>>0)<($804>>>0);
      $806=$802|8;
      $status_2=($805?$802:$806);
      $807=($y_1738|0)<($x_1744|0);
      $808=$status_2|64;
      $status_2_=($807?$status_2:$808);
      $809=$y_1738<<8;
      $810=((($a_1757)+($809))|0);
      $811=$x_1744<<1;
      $812=($y_1738|0)<($811|0);
      if ($812) {
       $814=(((($810>>>0))/(($x_1744>>>0)))&-1);
       $815=(Math_imul($814,$x_1744)|0);
       $816=((($810)-($815))|0);
       $extract_t792=(($814)&255);
       $y_2=$816;$_sink_off0=$extract_t792;
      } else {
       $818=$x_1744<<9;
       $819=((($810)-($818))|0);
       $820=(((256)-($x_1744))|0);
       $821=(((($819>>>0))/(($820>>>0)))&-1);
       $822=(((255)-($821))|0);
       $823=(((($819>>>0))%(($820>>>0)))&-1);
       $824=((($823)+($x_1744))|0);
       $extract_t793=(($822)&255);
       $y_2=$824;$_sink_off0=$extract_t793;
      }
      $826=($_sink_off0&255);
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$826;$x_1_be=$x_1744;$y_1_be=$y_2;$status_1_be=$status_2_;$c_1_be=$c_1734;$nz_1_be=$826;$dp_0_be=$dp_0731;
      break;
     }
     case 216: {
      $data_12=$104;
      label = 2607;
      break;
     }
     case 219: {
      $241=((($104)+($x_1744))|0);
      $242=$241&255;
      $data_13=$242;
      label = 2609;
      break;
     }
     case 203: {
      $data_13=$104;
      label = 2609;
      break;
     }
     case 247: {
      $141=$104|$dp_0731;
      $142=(($3+$141)|0);
      $143=((__Z8get_le16PKv($142))|0);
      $144=((($143)+($y_1738))|0);
      $pc_3=$102;$x_2=$x_1744;$data_2=$144;
      label = 2583;
      break;
     }
     case 168:case 136: {
      $pc_27=$102;$nz_2=$a_1757;$data_48=$104;$addr5_1=-1;
      label = 2695;
      break;
     }
     case 188: {
      $597=((($a_1757)+(1))|0);
      $598=$597&255;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$598;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$597;$dp_0_be=$dp_0731;
      break;
     }
     case 61: {
      $600=((($x_1744)+(1))|0);
      $601=$600&255;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$601;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$600;$dp_0_be=$dp_0731;
      break;
     }
     case 252: {
      $603=((($y_1738)+(1))|0);
      $604=$603&255;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$604;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$603;$dp_0_be=$dp_0731;
      break;
     }
     case 94: {
      $509=((__Z8get_le16PKv($101))|0);
      $510=((($_pn)+(2))|0);
      $pc_22=$510;$data_40=$509;
      label = 2680;
      break;
     }
     case 173: {
      $pc_23=$102;$data_41=$104;
      label = 2681;
      break;
     }
     case 185:case 153: {
      $519=((HEAP32[(($64)>>2)])|0);
      $520=((($x_1744)+($dp_0731))|0);
      $521=((__ZN8Snes_Spc4readEj($519,$520))|0);
      $522=((($y_1738)+($dp_0731))|0);
      $pc_24=$_pn;$data_43=$521;$addr5_0=$522;
      label = 2685;
      break;
     }
     case 169:case 137: {
      $524=((HEAP32[(($67)>>2)])|0);
      $525=$104|$dp_0731;
      $526=((__ZN8Snes_Spc4readEj($524,$525))|0);
      $data_42=$526;
      label = 2684;
      break;
     }
     case 184:case 152: {
      $data_42=$104;
      label = 2684;
      break;
     }
     case 53: {
      $287=((($104)+($x_1744))|0);
      $data_15=$287;
      label = 2624;
      break;
     }
     case 37: {
      $data_15=$104;
      label = 2624;
      break;
     }
     case 52: {
      $296=((($104)+($x_1744))|0);
      $297=$296&255;
      $data_16=$297;
      label = 2626;
      break;
     }
     case 36: {
      $data_16=$104;
      label = 2626;
      break;
     }
     case 3:case 35:case 67:case 99:case 131:case 163:case 195:case 227: {
      $879=((($_pn)+(2))|0);
      $880=((HEAP32[(($77)>>2)])|0);
      $881=$104|$dp_0731;
      $882=((__ZN8Snes_Spc4readEj($880,$881))|0);
      $883=$103>>>5;
      $884=1<<$883;
      $885=$882&$884;
      $886=($885|0)==0;
      if ($886) {
       $pc_1=$879;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
       label = 2566;
      } else {
       $pc_0=$879;
       label = 2565;
      }
      break;
     }
     case 19:case 51:case 83:case 115:case 147:case 179:case 211:case 243: {
      $888=((($_pn)+(2))|0);
      $889=((HEAP32[(($78)>>2)])|0);
      $890=$104|$dp_0731;
      $891=((__ZN8Snes_Spc4readEj($889,$890))|0);
      $892=$103>>>5;
      $893=1<<$892;
      $894=$891&$893;
      $895=($894|0)==0;
      if ($895) {
       $pc_0=$888;
       label = 2565;
      } else {
       $pc_1=$888;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
       label = 2566;
      }
      break;
     }
     case 222: {
      $897=((($104)+($x_1744))|0);
      $898=$897&255;
      $data_56=$898;
      label = 2755;
      break;
     }
     case 46: {
      $data_56=$104;
      label = 2755;
      break;
     }
     case 254: {
      $906=((($y_1738)+(255))|0);
      $907=$906&255;
      $908=((($_pn)+(2))|0);
      $909=($907|0)==0;
      if ($909) {
       $sp_0_be=$sp_0761;$pc_2_be=$908;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=0;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $911=(($_in<<24)>>24);
      $912=((($911)+($908))|0);
      $913=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$913;
      $sp_0_be=$sp_0761;$pc_2_be=$912;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$907;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 110: {
      $915=((($_pn)+(2))|0);
      $916=((HEAP32[(($80)>>2)])|0);
      $917=$104|$dp_0731;
      $918=((__ZN8Snes_Spc4readEj($916,$917))|0);
      $919=((($918)-(1))|0);
      $920=((HEAP32[(($80)>>2)])|0);
      $921=$919&255;
      __ZN8Snes_Spc5writeEji($920,$917,$921);
      $922=($919|0)==0;
      if ($922) {
       $pc_1=$915;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
       label = 2566;
      } else {
       $pc_0=$915;
       label = 2565;
      }
      break;
     }
     case 31: {
      $924=((__Z8get_le16PKv($101))|0);
      $925=((($924)+($x_1744))|0);
      $pc_31=$925;
      label = 2760;
      break;
     }
     case 95: {
      $pc_31=$102;
      label = 2760;
      break;
     }
     case 6: {
      $326=((($x_1744)+($dp_0731))|0);
      $pc_12=$_pn;$data_23=$326;
      label = 2641;
      break;
     }
     case 23: {
      $328=$104|$dp_0731;
      $329=(($3+$328)|0);
      $330=((__Z8get_le16PKv($329))|0);
      $331=((($330)+($y_1738))|0);
      $pc_12=$102;$data_23=$331;
      label = 2641;
      break;
     }
     case 7: {
      $333=((($104)+($x_1744))|0);
      $334=$333&255;
      $335=$334|$dp_0731;
      $336=(($3+$335)|0);
      $337=((__Z8get_le16PKv($336))|0);
      $pc_12=$102;$data_23=$337;
      label = 2641;
      break;
     }
     case 159: {
      $688=$a_1757>>4;
      $689=$a_1757<<4;
      $690=$689&240;
      $691=$690|$688;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$691;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$691;$dp_0_be=$dp_0731;
      break;
     }
     case 186: {
      $693=((HEAP32[(($72)>>2)])|0);
      $694=$104|$dp_0731;
      $695=((__ZN8Snes_Spc4readEj($693,$694))|0);
      $696=$695&127;
      $697=$695>>1;
      $698=$696|$697;
      $699=((HEAP32[(($72)>>2)])|0);
      $700=((($_in)+(1))&255);
      $701=($700&255);
      $702=$701|$dp_0731;
      $703=((__ZN8Snes_Spc4readEj($699,$702))|0);
      $704=$698|$703;
      $pc_1=$102;$a_0=$695;$x_0=$x_1744;$y_0=$703;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$704;
      label = 2566;
      break;
     }
     case 218: {
      $706=((HEAP32[(($73)>>2)])|0);
      $707=$104|$dp_0731;
      __ZN8Snes_Spc5writeEji($706,$707,$a_1757);
      $708=((HEAP32[(($73)>>2)])|0);
      $709=((($_in)+(1))&255);
      $710=($709&255);
      $711=$710|$dp_0731;
      __ZN8Snes_Spc5writeEji($708,$711,$y_1738);
      $pc_1=$102;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
      label = 2566;
      break;
     }
     case 58:case 26: {
      $713=$104|$dp_0731;
      $714=((HEAP32[(($74)>>2)])|0);
      $715=((__ZN8Snes_Spc4readEj($714,$713))|0);
      $716=$103>>>4;
      $717=$716&2;
      $718=((($717)-(1))|0);
      $719=((($718)+($715))|0);
      $720=$719>>>1;
      $721=$720|$719;
      $722=$721&127;
      $723=((HEAP32[(($74)>>2)])|0);
      $724=$719&255;
      __ZN8Snes_Spc5writeEji($723,$713,$724);
      $725=((($_in)+(1))&255);
      $726=($725&255);
      $727=$726|$dp_0731;
      $728=$719>>>8;
      $729=((HEAP32[(($74)>>2)])|0);
      $730=((__ZN8Snes_Spc4readEj($729,$727))|0);
      $731=((($730)+($728))|0);
      $732=$731&255;
      $733=$732|$722;
      $734=((HEAP32[(($74)>>2)])|0);
      __ZN8Snes_Spc5writeEji($734,$727,$732);
      $pc_1=$102;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$733;
      label = 2566;
      break;
     }
     case 154:case 122: {
      $736=((HEAP32[(($75)>>2)])|0);
      $737=$104|$dp_0731;
      $738=((__ZN8Snes_Spc4readEj($736,$737))|0);
      $739=((HEAP32[(($75)>>2)])|0);
      $740=((($_in)+(1))&255);
      $741=($740&255);
      $742=$741|$dp_0731;
      $743=((__ZN8Snes_Spc4readEj($739,$742))|0);
      $744=$743<<8;
      $745=((($744)+($738))|0);
      $746=$status_1736&-73;
      $747=$103&128;
      $748=($747|0)==0;
      if ($748) {
       $temp9_0=$745;$sign_0=$743;
      } else {
       $750=$745^65535;
       $751=((($750)+(1))|0);
       $752=$751>>8;
       $temp9_0=$751;$sign_0=$752;
      }
      $754=((($temp9_0)+($a_1757))|0);
      $755=$754&255;
      $756=$754>>>1;
      $757=$756|$754;
      $758=$757&127;
      $759=$754>>8;
      $760=((($759)+($y_1738))|0);
      $_masked722=$760&255;
      $761=$758|$_masked722;
      $762=$760&15;
      $763=$y_1738&15;
      $764=((($762)-($763))|0);
      $765=$764>>>4;
      $766=$765&8;
      $767=$766|$746;
      $768=$760^$y_1738;
      $769=$y_1738^128;
      $770=$769^$sign_0;
      $771=$768&$770;
      $772=$771>>>1;
      $773=$772&64;
      $774=$767|$773;
      $pc_1=$102;$a_0=$755;$x_0=$x_1744;$y_0=$_masked722;$status_0=$774;$c_0=$760;$nz_0=$761;
      label = 2566;
      break;
     }
     case 196: {
      $data_10=$104;
      label = 2602;
      break;
     }
     case 201: {
      $temp2_0=$x_1744;
      label = 2605;
      break;
     }
     case 215: {
      $201=$104|$dp_0731;
      $202=(($3+$201)|0);
      $203=((__Z8get_le16PKv($202))|0);
      $204=((($203)+($y_1738))|0);
      $pc_8=$102;$data_11=$204;
      label = 2603;
      break;
     }
     case 199: {
      $206=((($104)+($x_1744))|0);
      $207=$206&255;
      $208=$207|$dp_0731;
      $209=(($3+$208)|0);
      $210=((__Z8get_le16PKv($209))|0);
      $pc_8=$102;$data_11=$210;
      label = 2603;
      break;
     }
     case 244: {
      $163=((($104)+($x_1744))|0);
      $164=$163&255;
      $data_1=$164;
      label = 2582;
      break;
     }
     case 9: {
      $365=((HEAP32[(($53)>>2)])|0);
      $366=$104|$dp_0731;
      $367=((__ZN8Snes_Spc4readEj($365,$366))|0);
      $data_25=$367;
      label = 2645;
      break;
     }
     case 24: {
      $data_25=$104;
      label = 2645;
      break;
     }
     case 70: {
      $380=((($x_1744)+($dp_0731))|0);
      $pc_15=$_pn;$data_29=$380;
      label = 2655;
      break;
     }
     case 214: {
      $212=((($104)+($y_1738))|0);
      $data_9=$212;
      label = 2600;
      break;
     }
     case 213: {
      $214=((($104)+($x_1744))|0);
      $data_9=$214;
      label = 2600;
      break;
     }
     case 231: {
      $146=((($104)+($x_1744))|0);
      $147=$146&255;
      $148=$147|$dp_0731;
      $149=(($3+$148)|0);
      $150=((__Z8get_le16PKv($149))|0);
      $pc_3=$102;$x_2=$x_1744;$data_2=$150;
      label = 2583;
      break;
     }
     case 125: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$x_1744;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$x_1744;$dp_0_be=$dp_0731;
      break;
     }
     case 221: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$y_1738;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$y_1738;$dp_0_be=$dp_0731;
      break;
     }
     case 93: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$a_1757;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$a_1757;$dp_0_be=$dp_0731;
      break;
     }
     case 253: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$a_1757;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$a_1757;$dp_0_be=$dp_0731;
      break;
     }
     case 74: {
      $1040=((__ZN7Spc_Cpu7mem_bitEj($this,$102))|0);
      $1041=$1040&$c_1734;
      $1042=((($_pn)+(3))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$1042;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$1041;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 106: {
      $1044=((__ZN7Spc_Cpu7mem_bitEj($this,$102))|0);
      $1045=$1044^-1;
      $1046=$c_1734&$1045;
      $1047=((($_pn)+(3))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$1047;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$1046;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 10: {
      $1049=((__ZN7Spc_Cpu7mem_bitEj($this,$102))|0);
      $1050=$1049|$c_1734;
      $1051=((($_pn)+(3))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$1051;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$1050;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 42: {
      $1053=((__ZN7Spc_Cpu7mem_bitEj($this,$102))|0);
      $1054=$1053^-1;
      $1055=$c_1734|$1054;
      $1056=((($_pn)+(3))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$1056;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$1055;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 138: {
      $1058=((__ZN7Spc_Cpu7mem_bitEj($this,$102))|0);
      $1059=$1058^$c_1734;
      $1060=((($_pn)+(3))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$1060;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$1059;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 234: {
      $1062=((__Z8get_le16PKv($101))|0);
      $1063=((($_pn)+(3))|0);
      $1064=((HEAP32[(($84)>>2)])|0);
      $1065=$1062&8191;
      $1066=((__ZN8Snes_Spc4readEj($1064,$1065))|0);
      $1067=$1062>>>13;
      $1068=1<<$1067;
      $1069=$1066^$1068;
      $1070=((HEAP32[(($84)>>2)])|0);
      __ZN8Snes_Spc5writeEji($1070,$1065,$1069);
      $sp_0_be=$sp_0761;$pc_2_be=$1063;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 202: {
      $1072=((__Z8get_le16PKv($101))|0);
      $1073=((($_pn)+(3))|0);
      $1074=((HEAP32[(($85)>>2)])|0);
      $1075=$1072&8191;
      $1076=((__ZN8Snes_Spc4readEj($1074,$1075))|0);
      $1077=$1072>>>13;
      $1078=1<<$1077;
      $1079=$1078^-1;
      $1080=$1076&$1079;
      $1081=$c_1734>>>8;
      $1082=$1081&1;
      $1083=$1082<<$1077;
      $1084=$1080|$1083;
      $1085=((HEAP32[(($85)>>2)])|0);
      __ZN8Snes_Spc5writeEji($1085,$1075,$1084);
      $sp_0_be=$sp_0761;$pc_2_be=$1073;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 170: {
      $1087=((__ZN7Spc_Cpu7mem_bitEj($this,$102))|0);
      $1088=((($_pn)+(3))|0);
      $sp_0_be=$sp_0761;$pc_2_be=$1088;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$1087;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 96: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=0;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 128: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=-1;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 237: {
      $1092=$c_1734^256;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$1092;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 38: {
      $272=((($x_1744)+($dp_0731))|0);
      $pc_9=$_pn;$data_17=$272;
      label = 2627;
      break;
     }
     case 55: {
      $274=$104|$dp_0731;
      $275=(($3+$274)|0);
      $276=((__Z8get_le16PKv($275))|0);
      $277=((($276)+($y_1738))|0);
      $pc_9=$102;$data_17=$277;
      label = 2627;
      break;
     }
     case 39: {
      $279=((($104)+($x_1744))|0);
      $280=$279&255;
      $281=$280|$dp_0731;
      $282=(($3+$281)|0);
      $283=((__Z8get_le16PKv($282))|0);
      $pc_9=$102;$data_17=$283;
      label = 2627;
      break;
     }
     case 54: {
      $285=((($104)+($y_1738))|0);
      $data_15=$285;
      label = 2624;
      break;
     }
     case 63: {
      $126=((($sp_0761)-(2))|0);
      $127=((($_pn)+(3))|0);
      __Z8set_le16Pvj($126,$127);
      $128=((__Z8get_le16PKv($101))|0);
      $sp_0_be=$126;$pc_2_be=$128;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 197: {
      $data_9=$104;
      label = 2600;
      break;
     }
     case 212: {
      $223=((($104)+($x_1744))|0);
      $224=$223&255;
      $data_10=$224;
      label = 2602;
      break;
     }
     case 204: {
      $temp2_0=$y_1738;
      label = 2605;
      break;
     }
     case 217: {
      $235=((($104)+($y_1738))|0);
      $236=$235&255;
      $data_12=$236;
      label = 2607;
      break;
     }
     case 245: {
      $154=((($104)+($x_1744))|0);
      $data_0=$154;
      label = 2580;
      break;
     }
     case 15: {
      $930=((($sp_0761)-(2))|0);
      $931=((($_pn)+(2))|0);
      __Z8set_le16Pvj($930,$931);
      $932=((__Z8get_le16PKv($81))|0);
      $933=$status_1736&-132;
      $934=$c_1734>>>8;
      $935=$934&1;
      $936=$dp_0731>>>3;
      $937=$935|$936;
      $938=$937|$933;
      $939=$nz_1732&2176;
      $940=($939|0)==0;
      $941=$938|128;
      $temp21_0=($940?$938:$941);
      $942=$nz_1732&255;
      $943=($942|0)==0;
      $extract_t718=(($temp21_0)&255);
      if ($943) {
       $945=$temp21_0|2;
       $extract_t719=(($945)&255);
       $temp21_1_off0=$extract_t719;
      } else {
       $temp21_1_off0=$extract_t718;
      }
      $947=((($sp_0761)-(3))|0);
      HEAP8[($947)]=$temp21_1_off0;
      $948=$status_1736&-21;
      $949=$948|16;
      $sp_0_be=$947;$pc_2_be=$932;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$949;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 79: {
      $951=((($_pn)+(2))|0);
      $952=((($sp_0761)-(2))|0);
      __Z8set_le16Pvj($952,$951);
      $953=$104|65280;
      $sp_0_be=$952;$pc_2_be=$953;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 1:case 17:case 33:case 49:case 65:case 81:case 97:case 113:case 129:case 145:case 161:case 177:case 193:case 209:case 225:case 241: {
      $955=((($sp_0761)-(2))|0);
      __Z8set_le16Pvj($955,$102);
      $956=$103>>>3;
      $957=(((65502)-($956))|0);
      $958=(($3+$957)|0);
      $959=((__Z8get_le16PKv($958))|0);
      $sp_0_be=$955;$pc_2_be=$959;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 127: {
      $961=(($sp_0761+1)|0);
      $962=(($sp_0761+2)|0);
      $963=((HEAP8[($961)])|0);
      $964=($963&255);
      $965=((HEAP8[($962)])|0);
      $966=($965&255);
      $967=$966<<8;
      $968=$967|$964;
      $sp_0_pn=$962;$pc_32=$968;
      label = 2767;
      break;
     }
     case 142: {
      $sp_0_pn=$sp_0761;$pc_32=$102;
      label = 2767;
      break;
     }
     case 13: {
      $980=$status_1736&-132;
      $981=$c_1734>>>8;
      $982=$981&1;
      $983=$dp_0731>>>3;
      $984=$982|$983;
      $985=$984|$980;
      $986=$nz_1732&2176;
      $987=($986|0)==0;
      $988=$985|128;
      $temp23_0=($987?$985:$988);
      $989=$nz_1732&255;
      $990=($989|0)==0;
      $extract_t=(($temp23_0)&255);
      if ($990) {
       $992=$temp23_0|2;
       $extract_t717=(($992)&255);
       $temp23_1_off0=$extract_t717;
      } else {
       $temp23_1_off0=$extract_t;
      }
      $994=((($sp_0761)-(1))|0);
      HEAP8[($994)]=$temp23_1_off0;
      $sp_0_be=$994;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 191: {
      $171=((($x_1744)+($dp_0731))|0);
      $172=((($x_1744)+(1))|0);
      $173=$172&255;
      $pc_3=$_pn;$x_2=$173;$data_2=$171;
      label = 2583;
      break;
     }
     case 249: {
      $175=((($104)+($y_1738))|0);
      $176=$175&255;
      $data_3=$176;
      label = 2586;
      break;
     }
     case 45: {
      $996=(($a_1757)&255);
      $997=((($sp_0761)-(1))|0);
      HEAP8[($997)]=$996;
      $sp_0_be=$997;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 77: {
      $999=(($x_1744)&255);
      $1000=((($sp_0761)-(1))|0);
      HEAP8[($1000)]=$999;
      $sp_0_be=$1000;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 109: {
      $1002=(($y_1738)&255);
      $1003=((($sp_0761)-(1))|0);
      HEAP8[($1003)]=$1002;
      $sp_0_be=$1003;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 174: {
      $1005=(($sp_0761+1)|0);
      $1006=((HEAP8[($sp_0761)])|0);
      $1007=($1006&255);
      $sp_0_be=$1005;$pc_2_be=$102;$a_1_be=$1007;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 206: {
      $1009=(($sp_0761+1)|0);
      $1010=((HEAP8[($sp_0761)])|0);
      $1011=($1010&255);
      $sp_0_be=$1009;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$1011;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 238: {
      $1013=(($sp_0761+1)|0);
      $1014=((HEAP8[($sp_0761)])|0);
      $1015=($1014&255);
      $sp_0_be=$1013;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$1015;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 2:case 34:case 66:case 98:case 130:case 162:case 194:case 226:case 18:case 50:case 82:case 114:case 146:case 178:case 210:case 242: {
      $1017=$104|$dp_0731;
      $1018=$103>>>5;
      $1019=1<<$1018;
      $1020=$1019^-1;
      $1021=$103&16;
      $1022=($1021|0)==0;
      $_=($1022?$1019:0);
      $1023=((HEAP32[(($82)>>2)])|0);
      $1024=((__ZN8Snes_Spc4readEj($1023,$1017))|0);
      $1025=$1024&$1020;
      $1026=$1025|$_;
      __ZN8Snes_Spc5writeEji($1023,$1017,$1026);
      $pc_1=$102;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
      label = 2566;
      break;
     }
     case 14:case 78: {
      $1028=((__Z8get_le16PKv($101))|0);
      $1029=((($_pn)+(3))|0);
      $1030=((HEAP32[(($83)>>2)])|0);
      $1031=((__ZN8Snes_Spc4readEj($1030,$1028))|0);
      $1032=$1031&$a_1757;
      $1033=$a_1757^-1;
      $1034=$1031&$1033;
      $1035=$103&64;
      $1036=($1035|0)==0;
      $1037=($1036?$a_1757:0);
      $temp24_0=$1034|$1037;
      $1038=((HEAP32[(($83)>>2)])|0);
      __ZN8Snes_Spc5writeEji($1038,$1028,$temp24_0);
      $sp_0_be=$sp_0761;$pc_2_be=$1029;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$1032;$dp_0_be=$dp_0731;
      break;
     }
     case 87: {
      $382=$104|$dp_0731;
      $383=(($3+$382)|0);
      $384=((__Z8get_le16PKv($383))|0);
      $385=((($384)+($y_1738))|0);
      $pc_15=$102;$data_29=$385;
      label = 2655;
      break;
     }
     case 71: {
      $387=((($104)+($x_1744))|0);
      $388=$387&255;
      $389=$388|$dp_0731;
      $390=(($3+$389)|0);
      $391=((__Z8get_le16PKv($390))|0);
      $pc_15=$102;$data_29=$391;
      label = 2655;
      break;
     }
     case 86: {
      $393=((($104)+($y_1738))|0);
      $data_27=$393;
      label = 2652;
      break;
     }
     case 85: {
      $395=((($104)+($x_1744))|0);
      $data_27=$395;
      label = 2652;
      break;
     }
     case 69: {
      $data_27=$104;
      label = 2652;
      break;
     }
     case 84: {
      $404=((($104)+($x_1744))|0);
      $405=$404&255;
      $data_28=$405;
      label = 2654;
      break;
     }
     case 224: {
      $1094=$status_1736&-73;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$1094;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 32: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=0;
      break;
     }
     case 64: {
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=256;
      break;
     }
     case 160: {
      $1098=$status_1736|4;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$1098;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 192: {
      $1100=$status_1736&-5;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$1100;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 134:case 166: {
      $537=((($x_1744)+($dp_0731))|0);
      $pc_25=$_pn;$data_46=$537;
      label = 2694;
      break;
     }
     case 151:case 183: {
      $539=$104|$dp_0731;
      $540=(($3+$539)|0);
      $541=((__Z8get_le16PKv($540))|0);
      $542=((($541)+($y_1738))|0);
      $pc_25=$102;$data_46=$542;
      label = 2694;
      break;
     }
     case 135:case 167: {
      $544=((($104)+($x_1744))|0);
      $545=$544&255;
      $546=$545|$dp_0731;
      $547=(($3+$546)|0);
      $548=((__Z8get_le16PKv($547))|0);
      $pc_25=$102;$data_46=$548;
      label = 2694;
      break;
     }
     case 150:case 182: {
      $550=((($104)+($y_1738))|0);
      $data_44=$550;
      label = 2691;
      break;
     }
     case 149:case 181: {
      $552=((($104)+($x_1744))|0);
      $data_44=$552;
      label = 2691;
      break;
     }
     case 133:case 165: {
      $data_44=$104;
      label = 2691;
      break;
     }
     case 148:case 180: {
      $561=((($104)+($x_1744))|0);
      $562=$561&255;
      $data_45=$562;
      label = 2693;
      break;
     }
     case 132:case 164: {
      $data_45=$104;
      label = 2693;
      break;
     }
     case 246: {
      $152=((($104)+($y_1738))|0);
      $data_0=$152;
      label = 2580;
      break;
     }
     case 230: {
      $139=((($x_1744)+($dp_0731))|0);
      $pc_3=$_pn;$x_2=$x_1744;$data_2=$139;
      label = 2583;
      break;
     }
     case 141: {
      $pc_7=$102;$data_8=$104;
      label = 2594;
      break;
     }
     case 198: {
      $199=((($x_1744)+($dp_0731))|0);
      $pc_8=$_pn;$data_11=$199;
      label = 2603;
      break;
     }
     case 232: {
      $pc_1=$102;$a_0=$104;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$104;
      label = 2566;
      break;
     }
     case 48: {
      $831=((($_pn)+(2))|0);
      $832=$nz_1732&2176;
      $833=($832|0)==0;
      if ($833) {
       $sp_0_be=$sp_0761;$pc_2_be=$831;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $835=(($_in<<24)>>24);
      $836=((($835)+($831))|0);
      $837=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$837;
      $sp_0_be=$sp_0761;$pc_2_be=$836;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 16: {
      $839=((($_pn)+(2))|0);
      $840=$nz_1732&2176;
      $841=($840|0)==0;
      if (!($841)) {
       $sp_0_be=$sp_0761;$pc_2_be=$839;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $843=(($_in<<24)>>24);
      $844=((($843)+($839))|0);
      $845=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$845;
      $sp_0_be=$sp_0761;$pc_2_be=$844;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 176: {
      $847=((($_pn)+(2))|0);
      $848=$c_1734&256;
      $849=($848|0)==0;
      if ($849) {
       $sp_0_be=$sp_0761;$pc_2_be=$847;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $851=(($_in<<24)>>24);
      $852=((($851)+($847))|0);
      $853=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$853;
      $sp_0_be=$sp_0761;$pc_2_be=$852;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 144: {
      $855=((($_pn)+(2))|0);
      $856=$c_1734&256;
      $857=($856|0)==0;
      if (!($857)) {
       $sp_0_be=$sp_0761;$pc_2_be=$855;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $859=(($_in<<24)>>24);
      $860=((($859)+($855))|0);
      $861=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$861;
      $sp_0_be=$sp_0761;$pc_2_be=$860;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 112: {
      $863=((($_pn)+(2))|0);
      $864=$status_1736&64;
      $865=($864|0)==0;
      if ($865) {
       $sp_0_be=$sp_0761;$pc_2_be=$863;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $867=(($_in<<24)>>24);
      $868=((($867)+($863))|0);
      $869=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$869;
      $sp_0_be=$sp_0761;$pc_2_be=$868;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 80: {
      $871=((($_pn)+(2))|0);
      $872=$status_1736&64;
      $873=($872|0)==0;
      if (!($873)) {
       $sp_0_be=$sp_0761;$pc_2_be=$871;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $875=(($_in<<24)>>24);
      $876=((($875)+($871))|0);
      $877=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$877;
      $sp_0_be=$sp_0761;$pc_2_be=$876;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 248: {
      $data_3=$104;
      label = 2586;
      break;
     }
     case 111: {
      $130=(($sp_0761+1)|0);
      $131=((HEAP8[($sp_0761)])|0);
      $132=($131&255);
      $133=(($sp_0761+2)|0);
      $134=((HEAP8[($130)])|0);
      $135=($134&255);
      $136=$135<<8;
      $137=$136|$132;
      $sp_0_be=$133;$pc_2_be=$137;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 228: {
      $data_1=$104;
      label = 2582;
      break;
     }
     case 250: {
      $247=((HEAP32[(($42)>>2)])|0);
      $248=$104|$dp_0731;
      $249=((__ZN8Snes_Spc4readEj($247,$248))|0);
      $data_14=$249;
      label = 2611;
      break;
     }
     case 143: {
      $data_14=$104;
      label = 2611;
      break;
     }
     case 205: {
      $pc_5=$102;$data_5=$104;
      label = 2589;
      break;
     }
     case 251: {
      $187=((($104)+($x_1744))|0);
      $188=$187&255;
      $data_6=$188;
      label = 2591;
      break;
     }
     case 235: {
      $data_6=$104;
      label = 2591;
      break;
     }
     case 120: {
      $data_37=$104;
      label = 2673;
      break;
     }
     case 62: {
      $495=$104|$dp_0731;
      $pc_20=$102;$data_38=$495;
      label = 2676;
      break;
     }
     case 30: {
      $497=((__Z8get_le16PKv($101))|0);
      $498=((($_pn)+(2))|0);
      $pc_20=$498;$data_38=$497;
      label = 2676;
      break;
     }
     case 200: {
      $pc_21=$102;$data_39=$104;
      label = 2677;
      break;
     }
     case 126: {
      $507=$104|$dp_0731;
      $pc_22=$102;$data_40=$507;
      label = 2680;
      break;
     }
     case 240: {
      $110=((($_pn)+(2))|0);
      $111=(($nz_1732)&255);
      $112=(($111<<24)>>24)==0;
      if (!($112)) {
       $sp_0_be=$sp_0761;$pc_2_be=$110;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $114=(($_in<<24)>>24);
      $115=((($114)+($110))|0);
      $116=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$116;
      $sp_0_be=$sp_0761;$pc_2_be=$115;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 208: {
      $118=((($_pn)+(2))|0);
      $119=(($nz_1732)&255);
      $120=(($119<<24)>>24)==0;
      if ($120) {
       $sp_0_be=$sp_0761;$pc_2_be=$118;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
       break L2930;
      }
      $122=(($_in<<24)>>24);
      $123=((($122)+($118))|0);
      $124=((($108)-(2))|0);
      HEAP32[(($1)>>2)]=$124;
      $sp_0_be=$sp_0761;$pc_2_be=$123;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
      break;
     }
     case 90: {
      $776=((HEAP32[(($76)>>2)])|0);
      $777=$104|$dp_0731;
      $778=((__ZN8Snes_Spc4readEj($776,$777))|0);
      $779=((($a_1757)-($778))|0);
      $780=$779>>>1;
      $781=$780|$779;
      $782=$781&127;
      $783=$779>>8;
      $784=((($783)+($y_1738))|0);
      $785=((HEAP32[(($76)>>2)])|0);
      $786=((($_in)+(1))&255);
      $787=($786&255);
      $788=$787|$dp_0731;
      $789=((__ZN8Snes_Spc4readEj($785,$788))|0);
      $790=((($784)-($789))|0);
      $791=$790^-1;
      $_masked=$790&255;
      $792=$_masked|$782;
      $pc_1=$102;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$791;$nz_0=$792;
      label = 2566;
      break;
     }
     case 207: {
      $794=(Math_imul($a_1757,$y_1738)|0);
      $795=$794&255;
      $796=$794>>>1;
      $797=$796|$794;
      $798=$797&127;
      $799=$794>>>8;
      $800=$798|$799;
      $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$795;$x_1_be=$x_1744;$y_1_be=$799;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$800;$dp_0_be=$dp_0731;
      break;
     }
     case 47: {
      $828=(($_in<<24)>>24);
      $829=((($828)+($102))|0);
      $pc_1=$829;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
      label = 2566;
      break;
     }
     case 60: {
      $c_3=$c_1734;
      label = 2711;
      break;
     }
     case 11: {
      $646=$104|$dp_0731;
      $pc_29=$102;$c_7=0;$data_53=$646;
      label = 2718;
      break;
     }
     case 27: {
      $c_4=0;
      label = 2714;
      break;
     }
     case 59: {
      $c_4=$c_1734;
      label = 2714;
      break;
     }
     case 43: {
      $c_5=$c_1734;$data_52=$104;
      label = 2715;
      break;
     }
     case 12: {
      $c_6=0;
      label = 2717;
      break;
     }
     case 44: {
      $c_6=$c_1734;
      label = 2717;
      break;
     }
     case 75: {
      $667=$104|$dp_0731;
      $pc_30=$102;$c_11=0;$data_55=$667;
      label = 2725;
      break;
     }
     case 91: {
      $c_8=0;
      label = 2721;
      break;
     }
     case 123: {
      $c_8=$c_1734;
      label = 2721;
      break;
     }
     case 107: {
      $c_9=$c_1734;$data_54=$104;
      label = 2722;
      break;
     }
     case 76: {
      $c_10=0;
      label = 2724;
      break;
     }
     case 108: {
      $c_10=$c_1734;
      label = 2724;
      break;
     }
     default: {
      label = 2795;
      break L2928;
     }
     }
    } while(0);
    if ((label|0) == 2638) {
     label = 0;
     $343=((($_pn)+(2))|0);
     $344=(($3+$343)|0);
     $345=((HEAP8[($344)])|0);
     $346=($345&255);
     $347=$346<<8;
     $348=((($347)+($data_21))|0);
     $pc_12=$343;$data_23=$348;
     label = 2641;
    }
    else if ((label|0) == 2640) {
     label = 0;
     $353=$data_22|$dp_0731;
     $pc_12=$102;$data_23=$353;
     label = 2641;
    }
    else if ((label|0) == 2666) {
     label = 0;
     $451=((($_pn)+(2))|0);
     $452=(($3+$451)|0);
     $453=((HEAP8[($452)])|0);
     $454=($453&255);
     $455=$454<<8;
     $456=((($455)+($data_33))|0);
     $pc_18=$451;$data_35=$456;
     label = 2669;
    }
    else if ((label|0) == 2705) {
     label = 0;
     $618=$data_50|$dp_0731;
     $pc_28=$102;$data_51=$618;
     label = 2707;
    }
    else if ((label|0) == 2709) {
     label = 0;
     $633=$c_2>>>1;
     $634=$633&128;
     $635=$a_1757>>1;
     $636=$634|$635;
     $637=$a_1757<<8;
     $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$636;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$637;$nz_1_be=$636;$dp_0_be=$dp_0731;
    }
    else if ((label|0) == 2580) {
     label = 0;
     $156=((($_pn)+(2))|0);
     $157=(($3+$156)|0);
     $158=((HEAP8[($157)])|0);
     $159=($158&255);
     $160=$159<<8;
     $161=((($160)+($data_0))|0);
     $pc_3=$156;$x_2=$x_1744;$data_2=$161;
     label = 2583;
    }
    else if ((label|0) == 2631) {
     label = 0;
     $315=((($_pn)+(2))|0);
     $316=(($3+$315)|0);
     $317=((HEAP8[($316)])|0);
     $318=($317&255);
     $319=$318|$dp_0731;
     $pc_11=$315;$data_20=$data_19;$addr_0=$319;
     label = 2632;
    }
    else if ((label|0) == 2654) {
     label = 0;
     $407=$data_28|$dp_0731;
     $pc_15=$102;$data_29=$407;
     label = 2655;
    }
    else if ((label|0) == 2659) {
     label = 0;
     $423=((($_pn)+(2))|0);
     $424=(($3+$423)|0);
     $425=((HEAP8[($424)])|0);
     $426=($425&255);
     $427=$426|$dp_0731;
     $pc_17=$423;$data_32=$data_31;$addr4_0=$427;
     label = 2660;
    }
    else if ((label|0) == 2668) {
     label = 0;
     $461=$data_34|$dp_0731;
     $pc_18=$102;$data_35=$461;
     label = 2669;
    }
    else if ((label|0) == 2607) {
     label = 0;
     $238=((HEAP32[(($40)>>2)])|0);
     $239=$data_12|$dp_0731;
     __ZN8Snes_Spc5writeEji($238,$239,$x_1744);
     $pc_1=$102;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
     label = 2566;
    }
    else if ((label|0) == 2609) {
     label = 0;
     $244=((HEAP32[(($41)>>2)])|0);
     $245=$data_13|$dp_0731;
     __ZN8Snes_Spc5writeEji($244,$245,$y_1738);
     $pc_1=$102;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
     label = 2566;
    }
    else if ((label|0) == 2680) {
     label = 0;
     $512=((HEAP32[(($63)>>2)])|0);
     $513=((__ZN8Snes_Spc4readEj($512,$data_40))|0);
     $pc_23=$pc_22;$data_41=$513;
     label = 2681;
    }
    else if ((label|0) == 2684) {
     label = 0;
     $528=((($_pn)+(2))|0);
     $529=(($3+$528)|0);
     $530=((HEAP8[($529)])|0);
     $531=($530&255);
     $532=$531|$dp_0731;
     $pc_24=$528;$data_43=$data_42;$addr5_0=$532;
     label = 2685;
    }
    else if ((label|0) == 2624) {
     label = 0;
     $289=((($_pn)+(2))|0);
     $290=(($3+$289)|0);
     $291=((HEAP8[($290)])|0);
     $292=($291&255);
     $293=$292<<8;
     $294=((($293)+($data_15))|0);
     $pc_9=$289;$data_17=$294;
     label = 2627;
    }
    else if ((label|0) == 2626) {
     label = 0;
     $299=$data_16|$dp_0731;
     $pc_9=$102;$data_17=$299;
     label = 2627;
    }
    else if ((label|0) == 2755) {
     label = 0;
     $900=((($_pn)+(2))|0);
     $901=((HEAP32[(($79)>>2)])|0);
     $902=$data_56|$dp_0731;
     $903=((__ZN8Snes_Spc4readEj($901,$902))|0);
     $904=($903|0)==($a_1757|0);
     if ($904) {
      $pc_1=$900;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
      label = 2566;
     } else {
      $pc_0=$900;
      label = 2565;
     }
    }
    else if ((label|0) == 2760) {
     label = 0;
     $927=(($3+$pc_31)|0);
     $928=((__Z8get_le16PKv($927))|0);
     $sp_0_be=$sp_0761;$pc_2_be=$928;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
    }
    else if ((label|0) == 2602) {
     label = 0;
     $226=$data_10|$dp_0731;
     $pc_8=$102;$data_11=$226;
     label = 2603;
    }
    else if ((label|0) == 2645) {
     label = 0;
     $369=((($_pn)+(2))|0);
     $370=(($3+$369)|0);
     $371=((HEAP8[($370)])|0);
     $372=($371&255);
     $373=$372|$dp_0731;
     $pc_14=$369;$data_26=$data_25;$addr3_0=$373;
     label = 2646;
    }
    else if ((label|0) == 2600) {
     label = 0;
     $216=((($_pn)+(2))|0);
     $217=(($3+$216)|0);
     $218=((HEAP8[($217)])|0);
     $219=($218&255);
     $220=$219<<8;
     $221=((($220)+($data_9))|0);
     $pc_8=$216;$data_11=$221;
     label = 2603;
    }
    else if ((label|0) == 2605) {
     label = 0;
     $231=((HEAP32[(($39)>>2)])|0);
     $232=((__Z8get_le16PKv($101))|0);
     __ZN8Snes_Spc5writeEji($231,$232,$temp2_0);
     $233=((($_pn)+(3))|0);
     $sp_0_be=$sp_0761;$pc_2_be=$233;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$c_1734;$nz_1_be=$nz_1732;$dp_0_be=$dp_0731;
    }
    else if ((label|0) == 2767) {
     label = 0;
     $temp22_0_in=((HEAP8[($sp_0761)])|0);
     $sp_1=(($sp_0_pn+1)|0);
     $temp22_0=($temp22_0_in&255);
     $970=$temp22_0&92;
     $971=$temp22_0<<8;
     $972=$temp22_0<<4;
     $973=$972&2048;
     $974=$temp22_0&2;
     $975=$973|$974;
     $976=$975^2;
     $977=$temp22_0<<3;
     $978=$977&256;
     $sp_0_be=$sp_1;$pc_2_be=$pc_32;$a_1_be=$a_1757;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$970;$c_1_be=$971;$nz_1_be=$976;$dp_0_be=$978;
    }
    else if ((label|0) == 2652) {
     label = 0;
     $397=((($_pn)+(2))|0);
     $398=(($3+$397)|0);
     $399=((HEAP8[($398)])|0);
     $400=($399&255);
     $401=$400<<8;
     $402=((($401)+($data_27))|0);
     $pc_15=$397;$data_29=$402;
     label = 2655;
    }
    else if ((label|0) == 2691) {
     label = 0;
     $554=((($_pn)+(2))|0);
     $555=(($3+$554)|0);
     $556=((HEAP8[($555)])|0);
     $557=($556&255);
     $558=$557<<8;
     $559=((($558)+($data_44))|0);
     $pc_25=$554;$data_46=$559;
     label = 2694;
    }
    else if ((label|0) == 2693) {
     label = 0;
     $564=$data_45|$dp_0731;
     $pc_25=$102;$data_46=$564;
     label = 2694;
    }
    else if ((label|0) == 2586) {
     label = 0;
     $178=$data_3|$dp_0731;
     $pc_4=$102;$data_4=$178;
     label = 2588;
    }
    else if ((label|0) == 2582) {
     label = 0;
     $166=$data_1|$dp_0731;
     $pc_3=$102;$x_2=$x_1744;$data_2=$166;
     label = 2583;
    }
    else if ((label|0) == 2611) {
     label = 0;
     $251=((($_pn)+(2))|0);
     $252=((HEAP32[(($43)>>2)])|0);
     $253=(($3+$251)|0);
     $254=((HEAP8[($253)])|0);
     $255=($254&255);
     $256=$255|$dp_0731;
     __ZN8Snes_Spc5writeEji($252,$256,$data_14);
     $pc_1=$251;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
     label = 2566;
    }
    else if ((label|0) == 2591) {
     label = 0;
     $190=$data_6|$dp_0731;
     $pc_6=$102;$data_7=$190;
     label = 2593;
    }
    else if ((label|0) == 2673) {
     label = 0;
     $484=((($_pn)+(2))|0);
     $485=((HEAP32[(($61)>>2)])|0);
     $486=(($3+$484)|0);
     $487=((HEAP8[($486)])|0);
     $488=($487&255);
     $489=$488|$dp_0731;
     $490=((__ZN8Snes_Spc4readEj($485,$489))|0);
     $491=((($490)-($data_37))|0);
     $492=$491^-1;
     $493=$491&255;
     $pc_1=$484;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$492;$nz_0=$493;
     label = 2566;
    }
    else if ((label|0) == 2676) {
     label = 0;
     $500=((HEAP32[(($62)>>2)])|0);
     $501=((__ZN8Snes_Spc4readEj($500,$data_38))|0);
     $pc_21=$pc_20;$data_39=$501;
     label = 2677;
    }
    else if ((label|0) == 2711) {
     label = 0;
     $640=$c_3>>>8;
     $641=$640&1;
     $642=$a_1757<<1;
     $643=$641|$642;
     $644=$643&255;
     $sp_0_be=$sp_0761;$pc_2_be=$102;$a_1_be=$644;$x_1_be=$x_1744;$y_1_be=$y_1738;$status_1_be=$status_1736;$c_1_be=$642;$nz_1_be=$643;$dp_0_be=$dp_0731;
    }
    else if ((label|0) == 2714) {
     label = 0;
     $649=((($104)+($x_1744))|0);
     $650=$649&255;
     $c_5=$c_4;$data_52=$650;
     label = 2715;
    }
    else if ((label|0) == 2717) {
     label = 0;
     $655=((__Z8get_le16PKv($101))|0);
     $656=((($_pn)+(2))|0);
     $pc_29=$656;$c_7=$c_6;$data_53=$655;
     label = 2718;
    }
    else if ((label|0) == 2721) {
     label = 0;
     $670=((($104)+($x_1744))|0);
     $671=$670&255;
     $c_9=$c_8;$data_54=$671;
     label = 2722;
    }
    else if ((label|0) == 2724) {
     label = 0;
     $676=((__Z8get_le16PKv($101))|0);
     $677=((($_pn)+(2))|0);
     $pc_30=$677;$c_11=$c_10;$data_55=$676;
     label = 2725;
    }
    if ((label|0) == 2641) {
     label = 0;
     $355=((HEAP32[(($50)>>2)])|0);
     $356=((__ZN8Snes_Spc4readEj($355,$data_23))|0);
     $pc_13=$pc_12;$data_24=$356;
     label = 2642;
    }
    else if ((label|0) == 2707) {
     label = 0;
     $623=$103>>>4;
     $624=$623&2;
     $625=((($624)-(1))|0);
     $626=((HEAP32[(($69)>>2)])|0);
     $627=((__ZN8Snes_Spc4readEj($626,$data_51))|0);
     $628=((($625)+($627))|0);
     $629=((HEAP32[(($69)>>2)])|0);
     $630=$628&255;
     __ZN8Snes_Spc5writeEji($629,$data_51,$630);
     $pc_1=$pc_28;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$628;
     label = 2566;
    }
    else if ((label|0) == 2593) {
     label = 0;
     $195=((HEAP32[(($37)>>2)])|0);
     $196=((__ZN8Snes_Spc4readEj($195,$data_7))|0);
     $pc_7=$pc_6;$data_8=$196;
     label = 2594;
    }
    else if ((label|0) == 2632) {
     label = 0;
     $321=((HEAP32[(($48)>>2)])|0);
     $322=((__ZN8Snes_Spc4readEj($321,$addr_0))|0);
     $323=$322&$data_20;
     $324=((HEAP32[(($48)>>2)])|0);
     __ZN8Snes_Spc5writeEji($324,$addr_0,$323);
     $pc_1=$pc_11;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$323;
     label = 2566;
    }
    else if ((label|0) == 2655) {
     label = 0;
     $409=((HEAP32[(($54)>>2)])|0);
     $410=((__ZN8Snes_Spc4readEj($409,$data_29))|0);
     $pc_16=$pc_15;$data_30=$410;
     label = 2656;
    }
    else if ((label|0) == 2660) {
     label = 0;
     $429=((HEAP32[(($56)>>2)])|0);
     $430=((__ZN8Snes_Spc4readEj($429,$addr4_0))|0);
     $431=$430^$data_32;
     $432=((HEAP32[(($56)>>2)])|0);
     __ZN8Snes_Spc5writeEji($432,$addr4_0,$431);
     $pc_1=$pc_17;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$431;
     label = 2566;
    }
    else if ((label|0) == 2669) {
     label = 0;
     $463=((HEAP32[(($58)>>2)])|0);
     $464=((__ZN8Snes_Spc4readEj($463,$data_35))|0);
     $pc_19=$pc_18;$data_36=$464;
     label = 2670;
    }
    else if ((label|0) == 2694) {
     label = 0;
     $566=((HEAP32[(($68)>>2)])|0);
     $567=((__ZN8Snes_Spc4readEj($566,$data_46))|0);
     $pc_27=$pc_25;$nz_2=$a_1757;$data_48=$567;$addr5_1=-1;
     label = 2695;
    }
    else if ((label|0) == 2681) {
     label = 0;
     $515=((($y_1738)-($data_41))|0);
     $516=$515^-1;
     $517=$515&255;
     $pc_1=$pc_23;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$516;$nz_0=$517;
     label = 2566;
    }
    else if ((label|0) == 2685) {
     label = 0;
     $534=((HEAP32[(($65)>>2)])|0);
     $535=((__ZN8Snes_Spc4readEj($534,$addr5_0))|0);
     $pc_27=$pc_24;$nz_2=$535;$data_48=$data_43;$addr5_1=$addr5_0;
     label = 2695;
    }
    else if ((label|0) == 2627) {
     label = 0;
     $301=((HEAP32[(($46)>>2)])|0);
     $302=((__ZN8Snes_Spc4readEj($301,$data_17))|0);
     $pc_10=$pc_9;$data_18=$302;
     label = 2628;
    }
    else if ((label|0) == 2603) {
     label = 0;
     $228=((HEAP32[(($38)>>2)])|0);
     __ZN8Snes_Spc5writeEji($228,$data_11,$a_1757);
     $pc_1=$pc_8;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
     label = 2566;
    }
    else if ((label|0) == 2646) {
     label = 0;
     $375=((HEAP32[(($52)>>2)])|0);
     $376=((__ZN8Snes_Spc4readEj($375,$addr3_0))|0);
     $377=$376|$data_26;
     $378=((HEAP32[(($52)>>2)])|0);
     __ZN8Snes_Spc5writeEji($378,$addr3_0,$377);
     $pc_1=$pc_14;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$377;
     label = 2566;
    }
    else if ((label|0) == 2588) {
     label = 0;
     $183=((HEAP32[(($36)>>2)])|0);
     $184=((__ZN8Snes_Spc4readEj($183,$data_4))|0);
     $pc_5=$pc_4;$data_5=$184;
     label = 2589;
    }
    else if ((label|0) == 2565) {
     label = 0;
     $87=(($3+$pc_0)|0);
     $88=((HEAP8[($87)])|0);
     $89=(($88<<24)>>24);
     $90=((($89)+($pc_0))|0);
     $91=((HEAP32[(($1)>>2)])|0);
     $92=((($91)-(2))|0);
     HEAP32[(($1)>>2)]=$92;
     $pc_1=$90;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$nz_1732;
     label = 2566;
    }
    else if ((label|0) == 2583) {
     label = 0;
     $168=((HEAP32[(($35)>>2)])|0);
     $169=((__ZN8Snes_Spc4readEj($168,$data_2))|0);
     $pc_1=$pc_3;$a_0=$169;$x_0=$x_2;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$169;
     label = 2566;
    }
    else if ((label|0) == 2677) {
     label = 0;
     $503=((($x_1744)-($data_39))|0);
     $504=$503^-1;
     $505=$503&255;
     $pc_1=$pc_21;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$504;$nz_0=$505;
     label = 2566;
    }
    else if ((label|0) == 2715) {
     label = 0;
     $652=$data_52|$dp_0731;
     $pc_29=$102;$c_7=$c_5;$data_53=$652;
     label = 2718;
    }
    else if ((label|0) == 2722) {
     label = 0;
     $673=$data_54|$dp_0731;
     $pc_30=$102;$c_11=$c_9;$data_55=$673;
     label = 2725;
    }
    do {
     if ((label|0) == 2642) {
      label = 0;
      $358=$data_24|$a_1757;
      $pc_1=$pc_13;$a_0=$358;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$358;
      label = 2566;
     }
     else if ((label|0) == 2628) {
      label = 0;
      $304=$data_18&$a_1757;
      $pc_1=$pc_10;$a_0=$304;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$304;
      label = 2566;
     }
     else if ((label|0) == 2656) {
      label = 0;
      $412=$data_30^$a_1757;
      $pc_1=$pc_16;$a_0=$412;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$412;
      label = 2566;
     }
     else if ((label|0) == 2670) {
      label = 0;
      $466=((($a_1757)-($data_36))|0);
      $467=$466^-1;
      $468=$466&255;
      $pc_1=$pc_19;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$467;$nz_0=$468;
      label = 2566;
     }
     else if ((label|0) == 2695) {
      label = 0;
      $569=$103&32;
      $570=($569|0)==0;
      $571=$data_48^255;
      $data_49=($570?$data_48:$571);
      $572=$c_1734>>>8;
      $573=$572&1;
      $574=$nz_2^128;
      $575=((($574)+($573))|0);
      $sext=$data_49<<24;
      $576=$sext>>24;
      $577=((($575)+($576))|0);
      $578=$nz_2&15;
      $579=((($nz_2)+($573))|0);
      $580=((($579)+($data_49))|0);
      $581=$580&15;
      $sum=((($578)+($573))|0);
      $582=((($581)-($sum))|0);
      $583=$status_1736&-73;
      $584=$577>>>2;
      $585=$584&64;
      $586=$585|$583;
      $587=$582>>>1;
      $588=$587&8;
      $589=$586|$588;
      $590=($addr5_1|0)<0;
      if ($590) {
       $592=$580&255;
       $pc_1=$pc_27;$a_0=$592;$x_0=$x_1744;$y_0=$y_1738;$status_0=$589;$c_0=$580;$nz_0=$580;
       label = 2566;
       break;
      } else {
       $594=((HEAP32[(($66)>>2)])|0);
       $595=$580&255;
       __ZN8Snes_Spc5writeEji($594,$addr5_1,$595);
       $pc_1=$pc_27;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$589;$c_0=$580;$nz_0=$580;
       label = 2566;
       break;
      }
     }
     else if ((label|0) == 2725) {
      label = 0;
      $679=((HEAP32[(($71)>>2)])|0);
      $680=((__ZN8Snes_Spc4readEj($679,$data_55))|0);
      $681=$c_11>>>1;
      $682=$681&128;
      $683=$680>>1;
      $684=$683|$682;
      $685=$680<<8;
      $686=((HEAP32[(($71)>>2)])|0);
      __ZN8Snes_Spc5writeEji($686,$data_55,$684);
      $pc_1=$pc_30;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$685;$nz_0=$684;
      label = 2566;
     }
     else if ((label|0) == 2594) {
      label = 0;
      $pc_1=$pc_7;$a_0=$a_1757;$x_0=$x_1744;$y_0=$data_8;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$data_8;
      label = 2566;
     }
     else if ((label|0) == 2589) {
      label = 0;
      $pc_1=$pc_5;$a_0=$a_1757;$x_0=$data_5;$y_0=$y_1738;$status_0=$status_1736;$c_0=$c_1734;$nz_0=$data_5;
      label = 2566;
     }
     else if ((label|0) == 2718) {
      label = 0;
      $658=$c_7>>>8;
      $659=$658&1;
      $660=((HEAP32[(($70)>>2)])|0);
      $661=((__ZN8Snes_Spc4readEj($660,$data_53))|0);
      $662=$661<<1;
      $663=$662|$659;
      $664=((HEAP32[(($70)>>2)])|0);
      $665=$663&255;
      __ZN8Snes_Spc5writeEji($664,$data_53,$665);
      $pc_1=$pc_29;$a_0=$a_1757;$x_0=$x_1744;$y_0=$y_1738;$status_0=$status_1736;$c_0=$662;$nz_0=$663;
      label = 2566;
     }
    } while(0);
    if ((label|0) == 2566) {
     label = 0;
     $94=((($pc_1)+(1))|0);
     $sp_0_be=$sp_0761;$pc_2_be=$94;$a_1_be=$a_0;$x_1_be=$x_0;$y_1_be=$y_0;$status_1_be=$status_0;$c_1_be=$c_0;$nz_1_be=$nz_0;$dp_0_be=$dp_0731;
    }
    $95=((($pc_2_be)+(1))|0);
    $96=(($3+$95)|0);
    $97=((HEAP32[(($1)>>2)])|0);
    $98=($97|0)<1;
    if ($98) {
     label = 2796;
     break;
    } else {
     $dp_0731=$dp_0_be;$nz_1732=$nz_1_be;$c_1734=$c_1_be;$status_1736=$status_1_be;$y_1738=$y_1_be;$x_1744=$x_1_be;$a_1757=$a_1_be;$sp_0761=$sp_0_be;$_pn=$pc_2_be;$102=$95;$101=$96;$_in_in=$96;$100=$97;
    }
   }
   if ((label|0) == 2795) {
    $extract_t774=(($a_1757)&255);
    $extract_t777=(($x_1744)&255);
    $extract_t780=(($y_1738)&255);
    $dp_0_lcssa=$dp_0731;$nz_1_lcssa=$nz_1732;$c_1_lcssa=$c_1734;$status_1_lcssa=$status_1736;$y_1_lcssa_off0=$extract_t780;$x_1_lcssa_off0=$extract_t777;$a_1_lcssa_off0=$extract_t774;$pc_2_lcssa=$_pn;$sp_0_lcssa=$sp_0761;
    break;
   }
   else if ((label|0) == 2796) {
    $extract_t772=(($a_1_be)&255);
    $extract_t775=(($x_1_be)&255);
    $extract_t778=(($y_1_be)&255);
    $dp_0_lcssa=$dp_0_be;$nz_1_lcssa=$nz_1_be;$c_1_lcssa=$c_1_be;$status_1_lcssa=$status_1_be;$y_1_lcssa_off0=$extract_t778;$x_1_lcssa_off0=$extract_t775;$a_1_lcssa_off0=$extract_t772;$pc_2_lcssa=$pc_2_be;$sp_0_lcssa=$sp_0_be;
    break;
   }
  }
 } while(0);
 $1102=$status_1_lcssa&-132;
 $1103=$c_1_lcssa>>>8;
 $1104=$1103&1;
 $1105=$dp_0_lcssa>>>3;
 $1106=$1104|$1105;
 $1107=$1106|$1102;
 $1108=$nz_1_lcssa&2176;
 $1109=($1108|0)==0;
 $1110=$1107|128;
 $temp28_0=($1109?$1107:$1110);
 $1111=$nz_1_lcssa&255;
 $1112=($1111|0)==0;
 $extract_t724=(($temp28_0)&255);
 if (!($1112)) {
  $temp28_1_off0=$extract_t724;
  HEAP8[($16)]=$temp28_1_off0;
  HEAP32[(($8)>>2)]=$pc_2_lcssa;
  $1116=((($sp_0_lcssa)-(257))|0);
  $1117=$1116;
  $1118=$3;
  $1119=((($1117)-($1118))|0);
  $1120=(($1119)&255);
  HEAP8[($4)]=$1120;
  HEAP8[($10)]=$a_1_lcssa_off0;
  HEAP8[($12)]=$x_1_lcssa_off0;
  HEAP8[($14)]=$y_1_lcssa_off0;
  $1121=((HEAP32[(($1)>>2)])|0);
  return (($1121)|0);
 }
 $1114=$temp28_0|2;
 $extract_t725=(($1114)&255);
 $temp28_1_off0=$extract_t725;
 HEAP8[($16)]=$temp28_1_off0;
 HEAP32[(($8)>>2)]=$pc_2_lcssa;
 $1116=((($sp_0_lcssa)-(257))|0);
 $1117=$1116;
 $1118=$3;
 $1119=((($1117)-($1118))|0);
 $1120=(($1119)&255);
 HEAP8[($4)]=$1120;
 HEAP8[($10)]=$a_1_lcssa_off0;
 HEAP8[($12)]=$x_1_lcssa_off0;
 HEAP8[($14)]=$y_1_lcssa_off0;
 $1121=((HEAP32[(($1)>>2)])|0);
 return (($1121)|0);
}
function __ZN7Spc_DspC2EPh($this,$ram_){
 $this=($this)|0;
 $ram_=($ram_)|0;
 var $1=0,label=0;
 $1=(($this+128)|0);
 HEAP32[(($1)>>2)]=$ram_;
 __ZN7Spc_Dsp8set_gainEd($this,1.0);
 __ZN7Spc_Dsp11mute_voicesEi($this,0);
 __ZN7Spc_Dsp16disable_surroundEb($this,0);
 __Z24blargg_verify_byte_orderv();
 return;
}
function __ZN7Spc_Dsp8set_gainEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=.0,$2=0,$3=0,label=0;
 $1=($v)*((256.0));
 $2=(~~($1));
 $3=(($this+216)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}
function __ZN7Spc_Dsp11mute_voicesEi($this,$mask){
 $this=($this)|0;
 $mask=($mask)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,label=0;
 $1=$mask&1;
 $2=($1|0)!=0;
 $3=($2?31:7);
 $4=(($this+274)|0);
 HEAP16[(($4)>>1)]=$3;
 $5=$mask&2;
 $6=($5|0)!=0;
 $7=($6?31:7);
 $8=(($this+306)|0);
 HEAP16[(($8)>>1)]=$7;
 $9=$mask&4;
 $10=($9|0)!=0;
 $11=($10?31:7);
 $12=(($this+338)|0);
 HEAP16[(($12)>>1)]=$11;
 $13=$mask&8;
 $14=($13|0)!=0;
 $15=($14?31:7);
 $16=(($this+370)|0);
 HEAP16[(($16)>>1)]=$15;
 $17=$mask&16;
 $18=($17|0)!=0;
 $19=($18?31:7);
 $20=(($this+402)|0);
 HEAP16[(($20)>>1)]=$19;
 $21=$mask&32;
 $22=($21|0)!=0;
 $23=($22?31:7);
 $24=(($this+434)|0);
 HEAP16[(($24)>>1)]=$23;
 $25=$mask&64;
 $26=($25|0)!=0;
 $27=($26?31:7);
 $28=(($this+466)|0);
 HEAP16[(($28)>>1)]=$27;
 $29=$mask&128;
 $30=($29|0)!=0;
 $31=($30?31:7);
 $32=(($this+498)|0);
 HEAP16[(($32)>>1)]=$31;
 return;
}
function __ZN7Spc_Dsp16disable_surroundEb($this,$disable){
 $this=($this)|0;
 $disable=($disable)|0;
 var $1=0,$2=0,label=0;
 $1=($disable?0:-32767);
 $2=(($this+244)|0);
 HEAP32[(($2)>>2)]=$1;
 return;
}
function __ZN7Spc_Dsp5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,label=0;
 $1=(($this+224)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+228)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+240)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($this+236)|0);
 HEAP32[(($4)>>2)]=1;
 $5=(($this+212)|0);
 HEAP32[(($5)>>2)]=0;
 $6=(($this+108)|0);
 HEAP8[($6)]=-32;
 $7=(($this+76)|0);
 HEAP8[($7)]=0;
 $8=(($this+272)|0);
 HEAP16[(($8)>>1)]=0;
 $9=(($this+248)|0);
 HEAP16[(($9)>>1)]=0;
 $10=(($this+250)|0);
 HEAP16[(($10)>>1)]=0;
 $11=(($this+276)|0);
 HEAP16[(($11)>>1)]=3;
 $12=(($this+304)|0);
 HEAP16[(($12)>>1)]=0;
 $13=(($this+280)|0);
 HEAP16[(($13)>>1)]=0;
 $14=(($this+282)|0);
 HEAP16[(($14)>>1)]=0;
 $15=(($this+308)|0);
 HEAP16[(($15)>>1)]=3;
 $16=(($this+336)|0);
 HEAP16[(($16)>>1)]=0;
 $17=(($this+312)|0);
 HEAP16[(($17)>>1)]=0;
 $18=(($this+314)|0);
 HEAP16[(($18)>>1)]=0;
 $19=(($this+340)|0);
 HEAP16[(($19)>>1)]=3;
 $20=(($this+368)|0);
 HEAP16[(($20)>>1)]=0;
 $21=(($this+344)|0);
 HEAP16[(($21)>>1)]=0;
 $22=(($this+346)|0);
 HEAP16[(($22)>>1)]=0;
 $23=(($this+372)|0);
 HEAP16[(($23)>>1)]=3;
 $24=(($this+400)|0);
 HEAP16[(($24)>>1)]=0;
 $25=(($this+376)|0);
 HEAP16[(($25)>>1)]=0;
 $26=(($this+378)|0);
 HEAP16[(($26)>>1)]=0;
 $27=(($this+404)|0);
 HEAP16[(($27)>>1)]=3;
 $28=(($this+432)|0);
 HEAP16[(($28)>>1)]=0;
 $29=(($this+408)|0);
 HEAP16[(($29)>>1)]=0;
 $30=(($this+410)|0);
 HEAP16[(($30)>>1)]=0;
 $31=(($this+436)|0);
 HEAP16[(($31)>>1)]=3;
 $32=(($this+464)|0);
 HEAP16[(($32)>>1)]=0;
 $33=(($this+440)|0);
 HEAP16[(($33)>>1)]=0;
 $34=(($this+442)|0);
 HEAP16[(($34)>>1)]=0;
 $35=(($this+468)|0);
 HEAP16[(($35)>>1)]=3;
 $36=(($this+496)|0);
 HEAP16[(($36)>>1)]=0;
 $37=(($this+472)|0);
 HEAP16[(($37)>>1)]=0;
 $38=(($this+474)|0);
 HEAP16[(($38)>>1)]=0;
 $39=(($this+500)|0);
 HEAP16[(($39)>>1)]=3;
 $40=(($this+148)|0);
 $41=$40;
 _memset((((($41)|0))|0), ((((0)|0))|0), ((((64)|0))|0));
 return;
}
function __ZN7Spc_Dsp5writeEii($this,$i,$data){
 $this=($this)|0;
 $i=($i)|0;
 $data=($data)|0;
 var $1=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$29=0,$30=0,$32=0,$33=0,$35=0,$36=0,label=0;
 $1=($i>>>0)<((128)>>>0);
 if (!($1)) {
  ___assert_fail(((1992)|0),((6176)|0),((70)|0),((8752)|0));
 }
 $4=(($data)&255);
 $5=$this;
 $6=(($5+$i)|0);
 HEAP8[($6)]=$4;
 $7=$i>>4;
 $8=$i&15;
 if (((($8|0))|0)==((15)|0)) {
  $35=(($4<<24)>>24);
  $36=(($this+132+($7<<1))|0);
  HEAP16[(($36)>>1)]=$35;
  return;
 } else if (((($8|0))|0)==((0)|0)|((($8|0))|0)==((1)|0)) {
  $10=(($this+248+($7<<5))|0);
  $11=$i&-2;
  $12=(($5+$11)|0);
  $13=((HEAP8[($12)])|0);
  $14=(($13<<24)>>24);
  $15=$i|1;
  $16=(($5+$15)|0);
  $17=((HEAP8[($16)])|0);
  $18=(($17<<24)>>24);
  $19=(($13<<24)>>24);
  HEAP16[(($10)>>1)]=$19;
  $20=(($17<<24)>>24);
  $21=(($this+248+($7<<5)+2)|0);
  HEAP16[(($21)>>1)]=$20;
  $22=(Math_imul($18,$14)|0);
  $23=(($this+244)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=($22|0)<($24|0);
  if (!($25)) {
   return;
  }
  $27=(($13<<24)>>24)<0;
  if ($27) {
   $29=(((-$14))|0);
   $30=(($29)&65535);
   HEAP16[(($10)>>1)]=$30;
   return;
  } else {
   $32=(((-$18))|0);
   $33=(($32)&65535);
   HEAP16[(($21)>>1)]=$33;
   return;
  }
 } else {
  return;
 }
}
function __ZN7Spc_Dsp3runElPs($this,$count,$out_buf){
 $this=($this)|0;
 $count=($count)|0;
 $out_buf=($out_buf)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$right_volume_0=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$_in=0,$_0171203=0,$58=0,$59=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0;
 var $83=0,$84=0,$85=0,$prev_outx_0202=0,$echol_0201=0,$echor_0200=0,$left_0199=0,$right_0198=0,$vidx_0196=0,$86=0,$87=0,$88=0,$89=0,$91=0,$92=0,$94=0,$95=0,$96=0,$97=0,$98=0;
 var $99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0;
 var $121=0,$122=0,$123=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$132=0,$134=0,$135=0,$136=0,$138=0,$139=0,$141=0,$142=0,$144=0,$145=0,$146=0;
 var $147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$_in205=0,$163=0,$164=0,$165=0,$167=0;
 var $168=0,$169=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0;
 var $190=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$201=0,$202=0,$203=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0;
 var $213=0,$214=0,$215=0,$216=0,$_promoted=0,$_promoted192=0,$_promoted193=0,$218=0,$219=0,$220=0,$n_1=0,$221=0,$222=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0;
 var $231=0,$233=0,$234=0,$delta_0_off0=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$245=0,$246=0,$delta_1=0,$248=0,$249=0,$250=0,$251=0,$252=0;
 var $253=0,$254=0,$255=0,$257=0,$258=0,$259=0,$260=0,$261=0,$263=0,$sum=0,$264=0,$265=0,$266=0,$267=0,$268=0,$270=0,$271=0,$272=0,$273=0,$274=0;
 var $275=0,$277=0,$278=0,$280=0,$281=0,$282=0,$283=0,$284=0,$delta_2=0,$286=0,$287=0,$288=0,$289=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=0,$296=0;
 var $297=0,$298=0,$300=0,$301=0,$302=0,$rate_0=0,$304=0,$305=0,$306=0,$307=0,$308=0,$309=0,$310=0,$311=0,$312=0,$313=0,$314=0,$315=0,$316=0,$317=0;
 var $318=0,$319=0,$320=0,$321=0,$322=0,$_sum181182=0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=0,$329=0,$330=0,$331=0,$332=0,$_sum183184=0,$333=0,$334=0,$335=0;
 var $336=0,$337=0,$338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$346=0,$347=0,$348=0,$349=0,$350=0,$351=0,$352=0,$353=0,$354=0,$355=0;
 var $356=0,$357=0,$358=0,$360=0,$output_0=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0;
 var $377=0,$378=0,$379=0,$380=0,$381=0,$382=0,$383=0,$384=0,$386=0,$387=0,$echor_1=0,$echol_1=0,$389=0,$390=0,$right_1=0,$left_1=0,$echor_2=0,$echol_2=0,$prev_outx_1=0,$392=0;
 var $393=0,$395=0,$396=0,$397=0,$398=0,$399=0,$400=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$_=0;
 var $413=0,$sext=0,$414=0,$_sum=0,$415=0,$416=0,$sext172=0,$417=0,$418=0,$419=0,$420=0,$421=0,$422=0,$423=0,$424=0,$_sum173=0,$425=0,$426=0,$427=0,$428=0;
 var $429=0,$_sum174=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$_sum175=0,$437=0,$438=0,$439=0,$440=0,$441=0,$442=0,$443=0,$_sum176=0,$444=0,$445=0;
 var $446=0,$447=0,$448=0,$449=0,$450=0,$_sum177=0,$451=0,$452=0,$453=0,$454=0,$455=0,$456=0,$457=0,$_sum178=0,$458=0,$459=0,$460=0,$461=0,$462=0,$463=0;
 var $464=0,$_sum179=0,$465=0,$466=0,$467=0,$468=0,$469=0,$470=0,$471=0,$_sum180=0,$472=0,$473=0,$474=0,$475=0,$476=0,$477=0,$478=0,$479=0,$480=0,$481=0;
 var $482=0,$483=0,$484=0,$485=0,$486=0,$487=0,$488=0,$489=0,$490=0,$491=0,$492=0,$493=0,$494=0,$495=0,$496=0,$497=0,$498=0,$499=0,$500=0,$501=0;
 var $502=0,$503=0,$504=0,$505=0,$506=0,$507=0,$508=0,$509=0,$510=0,$511=0,$512=0,$513=0,$514=0,$515=0,$516=0,$517=0,$518=0,$519=0,$520=0,$521=0;
 var $522=0,$523=0,$524=0,$525=0,$526=0,$527=0,$529=0,$530=0,$531=0,$532=0,$533=0,$534=0,$535=0,$536=0,$537=0,$538=0,$540=0,$542=0,$543=0,$544=0;
 var $545=0,$546=0,$547=0,$548=0,$549=0,$550=0,$_0171_be=0,$552=0,label=0;
 $1=(($this+108)|0);
 $2=((HEAP8[($1)])|0);
 $3=(($2<<24)>>24)<0;
 if ($3) {
  __ZN7Spc_Dsp5resetEv($this);
 }
 $6=(($this+93)|0);
 $7=((HEAP8[($6)])|0);
 $8=($7&255);
 $9=$8<<8;
 $10=(($this+128)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+$9)|0);
 $13=$12;
 $14=(($this+12)|0);
 $15=((HEAP8[($14)])|0);
 $16=(($15<<24)>>24);
 $17=(($this+28)|0);
 $18=((HEAP8[($17)])|0);
 $19=(($18<<24)>>24);
 $20=(Math_imul($19,$16)|0);
 $21=(($this+244)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($20|0)<($22|0);
 $24=(((-$19))|0);
 $right_volume_0=($23?$24:$19);
 $25=(($this+216)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(Math_imul($26,$16)|0);
 $28=(Math_imul($right_volume_0,$26)|0);
 $29=($count|0)>0;
 if (!($29)) {
  return;
 }
 $30=(($this+76)|0);
 $31=(($this+124)|0);
 $32=(($this+61)|0);
 $33=(($this+240)|0);
 $34=(($this+236)|0);
 $35=(($this+232)|0);
 $36=(($this+92)|0);
 $37=(($this+224)|0);
 $38=(($this+45)|0);
 $39=(($this+77)|0);
 $40=(($this+232)|0);
 $41=(($this+224)|0);
 $42=(($this+228)|0);
 $43=(($this+109)|0);
 $44=(($this+125)|0);
 $45=(($this+212)|0);
 $46=(($this+146)|0);
 $47=(($this+144)|0);
 $48=(($this+142)|0);
 $49=(($this+140)|0);
 $50=(($this+138)|0);
 $51=(($this+136)|0);
 $52=(($this+134)|0);
 $53=(($this+132)|0);
 $54=(($this+44)|0);
 $55=(($this+60)|0);
 $56=(($this+13)|0);
 $_0171203=$out_buf;$_in=$count;
 while(1) {
  $58=((($_in)-(1))|0);
  $59=((HEAP8[($30)])|0);
  $60=$59^-1;
  $61=((HEAP8[($31)])|0);
  $62=$61&$60;
  HEAP8[($31)]=$62;
  $63=((HEAP8[($32)])|0);
  $64=(($63<<24)>>24)==0;
  do {
   if ($64) {
    $vidx_0196=0;$right_0198=0;$left_0199=0;$echor_0200=0;$echol_0201=0;$prev_outx_0202=0;
   } else {
    $66=((HEAP8[($1)])|0);
    $67=($66&255);
    $68=$67&31;
    $69=((17672+($68<<1))|0);
    $70=((HEAP16[(($69)>>1)])|0);
    $71=(($70<<16)>>16);
    $72=((HEAP32[(($33)>>2)])|0);
    $73=((($72)-($71))|0);
    HEAP32[(($33)>>2)]=$73;
    $74=($73|0)<1;
    if (!($74)) {
     $vidx_0196=0;$right_0198=0;$left_0199=0;$echor_0200=0;$echol_0201=0;$prev_outx_0202=0;
     break;
    }
    HEAP32[(($33)>>2)]=30720;
    $76=((HEAP32[(($34)>>2)])|0);
    $77=$76<<17;
    $78=$77>>16;
    HEAP32[(($35)>>2)]=$78;
    $79=((HEAP32[(($34)>>2)])|0);
    $80=$79<<13;
    $81=$79<<14;
    $82=$80^$81;
    $83=$82&16384;
    $84=$79>>1;
    $85=$83|$84;
    HEAP32[(($34)>>2)]=$85;
    $vidx_0196=0;$right_0198=0;$left_0199=0;$echor_0200=0;$echol_0201=0;$prev_outx_0202=0;
   }
  } while(0);
  while(1) {
   $86=1<<$vidx_0196;
   $87=(($this+248+($vidx_0196<<5)+24)|0);
   $88=((HEAP16[(($87)>>1)])|0);
   $89=(($88<<16)>>16)==0;
   do {
    if (!($89)) {
     $91=((($88)-(1))&65535);
     HEAP16[(($87)>>1)]=$91;
     $92=(($91<<16)>>16)==0;
     if (!($92)) {
      break;
     }
     $94=((HEAP32[(($41)>>2)])|0);
     $95=$94|$86;
     HEAP32[(($41)>>2)]=$95;
     $96=(($this+($vidx_0196<<4)+4)|0);
     $97=((HEAP8[($96)])|0);
     $98=($97&255);
     $99=(($13+($98<<2))|0);
     $100=((__Z8get_le16PKv($99))|0);
     $101=(($100)&65535);
     $102=(($this+248+($vidx_0196<<5)+16)|0);
     HEAP16[(($102)>>1)]=$101;
     $103=(($this+248+($vidx_0196<<5)+14)|0);
     HEAP16[(($103)>>1)]=1;
     $104=(($this+248+($vidx_0196<<5)+22)|0);
     HEAP16[(($104)>>1)]=0;
     $105=(($this+248+($vidx_0196<<5)+18)|0);
     HEAP16[(($105)>>1)]=0;
     $106=(($this+248+($vidx_0196<<5)+4)|0);
     HEAP16[(($106)>>1)]=16383;
     $107=(($this+248+($vidx_0196<<5)+12)|0);
     HEAP16[(($107)>>1)]=0;
     $108=(($this+248+($vidx_0196<<5)+10)|0);
     HEAP16[(($108)>>1)]=0;
     $109=(($this+248+($vidx_0196<<5)+20)|0);
     HEAP16[(($109)>>1)]=30720;
     $110=(($this+248+($vidx_0196<<5)+28)|0);
     HEAP16[(($110)>>1)]=0;
    }
   } while(0);
   $112=((HEAP8[($30)])|0);
   $113=($112&255);
   $114=$113&$86;
   $115=((HEAP8[($36)])|0);
   $116=($115&255);
   $117=$116^-1;
   $118=$114&$117;
   $119=($118|0)==0;
   if (!($119)) {
    $121=$86^255;
    $122=$113&$121;
    $123=(($122)&255);
    HEAP8[($30)]=$123;
    HEAP16[(($87)>>1)]=8;
   }
   $125=((HEAP32[(($37)>>2)])|0);
   $126=((HEAP8[($36)])|0);
   $127=($126&255);
   $128=$125&$86;
   $129=$128&$127;
   $130=($129|0)==0;
   if (!($130)) {
    $132=(($this+248+($vidx_0196<<5)+28)|0);
    HEAP16[(($132)>>1)]=3;
    HEAP16[(($87)>>1)]=0;
   }
   $134=((HEAP32[(($37)>>2)])|0);
   $135=$134&$86;
   $136=($135|0)==0;
   do {
    if ($136) {
     label = 2837;
    } else {
     $138=((__ZN7Spc_Dsp14clock_envelopeEi($this,$vidx_0196))|0);
     $139=($138|0)<0;
     if ($139) {
      label = 2837;
      break;
     }
     $144=(($this+248+($vidx_0196<<5)+4)|0);
     $145=((HEAP16[(($144)>>1)])|0);
     $146=(($145<<16)>>16);
     $147=$146>>12;
     $148=($147|0)>0;
     L3226: do {
      if ($148) {
       $149=(($this+248+($vidx_0196<<5)+14)|0);
       $150=(($this+248+($vidx_0196<<5)+16)|0);
       $151=(($this+248+($vidx_0196<<5)+18)|0);
       $152=(($this+248+($vidx_0196<<5)+12)|0);
       $153=(($this+248+($vidx_0196<<5)+10)|0);
       $154=(($this+248+($vidx_0196<<5)+8)|0);
       $155=(($this+248+($vidx_0196<<5)+6)|0);
       $156=(($this+248+($vidx_0196<<5)+18)|0);
       $157=(($this+248+($vidx_0196<<5)+16)|0);
       $158=(($this+($vidx_0196<<4)+4)|0);
       $159=(($this+248+($vidx_0196<<5)+16)|0);
       $160=(($this+248+($vidx_0196<<5)+16)|0);
       $161=(($this+248+($vidx_0196<<5)+18)|0);
       $_in205=$147;
       L3228: while(1) {
        $163=((($_in205)-(1))|0);
        $164=((HEAP16[(($149)>>1)])|0);
        $165=((($164)-(1))&65535);
        HEAP16[(($149)>>1)]=$165;
        do {
         if ((((($164<<16)>>16))|0)==((10)|0)) {
          $192=((HEAP16[(($160)>>1)])|0);
          $193=($192&65535);
          $194=((($193)+(5))|0);
          $195=((HEAP32[(($10)>>2)])|0);
          $196=(($195+$194)|0);
          $197=((HEAP8[($196)])|0);
          $198=$197&3;
          $199=(($198<<24)>>24)==1;
          if (!($199)) {
           break;
          }
          $201=((HEAP16[(($161)>>1)])|0);
          $202=$201&3;
          $203=(($202<<16)>>16)==3;
          if (!($203)) {
           break L3228;
          }
         } else if ((((($164<<16)>>16))|0)==((1)|0)) {
          $167=((HEAP16[(($156)>>1)])|0);
          $168=$167&1;
          $169=(($168<<16)>>16)==0;
          if (!($169)) {
           $171=((HEAP8[($31)])|0);
           $172=($171&255);
           $173=$172|$86;
           $174=(($173)&255);
           HEAP8[($31)]=$174;
           $175=((HEAP16[(($156)>>1)])|0);
           $176=$175&2;
           $177=(($176<<16)>>16)==0;
           if ($177) {
            break L3228;
           }
           $179=((HEAP8[($158)])|0);
           $180=($179&255);
           $181=(($13+($180<<2)+2)|0);
           $182=((__Z8get_le16PKv($181))|0);
           $183=(($182)&65535);
           HEAP16[(($159)>>1)]=$183;
          }
          $184=((HEAP16[(($157)>>1)])|0);
          $185=((($184)+(1))&65535);
          HEAP16[(($157)>>1)]=$185;
          $186=($184&65535);
          $187=((HEAP32[(($10)>>2)])|0);
          $188=(($187+$186)|0);
          $189=((HEAP8[($188)])|0);
          $190=($189&255);
          HEAP16[(($156)>>1)]=$190;
          HEAP16[(($149)>>1)]=16;
         }
        } while(0);
        $224=((HEAP16[(($150)>>1)])|0);
        $225=($224&65535);
        $226=((HEAP32[(($10)>>2)])|0);
        $227=(($226+$225)|0);
        $228=((HEAP8[($227)])|0);
        $229=((HEAP16[(($149)>>1)])|0);
        $230=$229&1;
        $231=(($230<<16)>>16)==0;
        if ($231) {
         $delta_0_off0=$228;
        } else {
         $233=$228<<4;
         $234=((($224)+(1))&65535);
         HEAP16[(($150)>>1)]=$234;
         $delta_0_off0=$233;
        }
        $236=(($delta_0_off0<<24)>>24);
        $237=$236>>4;
        $238=((HEAP16[(($151)>>1)])|0);
        $239=(($238<<16)>>16);
        $240=$239>>4;
        $241=$237<<$240;
        $242=$241>>1;
        $243=($240|0)>12;
        if ($243) {
         $245=$241>>15;
         $246=$245&-2048;
         $delta_1=$246;
        } else {
         $delta_1=$242;
        }
        $248=((HEAP16[(($152)>>1)])|0);
        $249=(($248<<16)>>16);
        $250=((HEAP16[(($153)>>1)])|0);
        $251=(($250<<16)>>16);
        $252=((HEAP16[(($151)>>1)])|0);
        $253=(($252<<16)>>16);
        $254=$253&8;
        $255=($254|0)==0;
        do {
         if ($255) {
          $277=$253&4;
          $278=($277|0)==0;
          if ($278) {
           $delta_2=$delta_1;
           break;
          }
          $280=$249>>1;
          $281=((($280)+($delta_1))|0);
          $282=(((-$249))|0);
          $283=$282>>5;
          $284=((($281)+($283))|0);
          $delta_2=$284;
         } else {
          $257=((($249)+($delta_1))|0);
          $258=$251>>1;
          $259=((($257)-($258))|0);
          $260=$253&4;
          $261=($260|0)==0;
          if ($261) {
           $263=$249>>1;
           $sum=((($263)+($249))|0);
           $264=(((-$sum))|0);
           $265=$264>>5;
           $266=$251>>5;
           $267=((($265)+($266))|0);
           $268=((($267)+($259))|0);
           $delta_2=$268;
           break;
          } else {
           $270=((($249)*(-13))&-1);
           $271=$270>>7;
           $272=((($259)+($271))|0);
           $273=((($258)+($251))|0);
           $274=$273>>4;
           $275=((($272)+($274))|0);
           $delta_2=$275;
           break;
          }
         }
        } while(0);
        $286=((HEAP16[(($154)>>1)])|0);
        HEAP16[(($155)>>1)]=$286;
        HEAP16[(($154)>>1)]=$250;
        HEAP16[(($153)>>1)]=$248;
        $287=((__Z8clamp_16i($delta_2))|0);
        $288=$287<<1;
        $289=(($288)&65535);
        HEAP16[(($152)>>1)]=$289;
        $290=($163|0)>0;
        if ($290) {
         $_in205=$163;
        } else {
         break L3226;
        }
       }
       $205=((HEAP8[($31)])|0);
       $206=($205&255);
       $207=$206|$86;
       $208=(($207)&255);
       HEAP8[($31)]=$208;
       $209=$86^-1;
       $210=((HEAP32[(($37)>>2)])|0);
       $211=$210&$209;
       HEAP32[(($37)>>2)]=$211;
       $212=(($this+($vidx_0196<<4)+8)|0);
       HEAP8[($212)]=0;
       $213=(($this+248+($vidx_0196<<5)+22)|0);
       HEAP16[(($213)>>1)]=0;
       $214=(($this+248+($vidx_0196<<5)+8)|0);
       $215=(($this+248+($vidx_0196<<5)+10)|0);
       $216=(($this+248+($vidx_0196<<5)+12)|0);
       $_promoted=((HEAP16[(($214)>>1)])|0);
       $_promoted192=((HEAP16[(($215)>>1)])|0);
       $_promoted193=((HEAP16[(($216)>>1)])|0);
       $n_1=$163;$220=$_promoted;$219=$_promoted192;$218=$_promoted193;
       while(1) {
        $221=((($n_1)-(1))|0);
        $222=($n_1|0)>0;
        if ($222) {
         $n_1=$221;$220=$219;$219=$218;$218=0;
        } else {
         break;
        }
       }
       $291=(($this+248+($vidx_0196<<5)+6)|0);
       HEAP16[(($214)>>1)]=$219;
       HEAP16[(($291)>>1)]=$220;
       HEAP16[(($215)>>1)]=$218;
       HEAP16[(($216)>>1)]=0;
      }
     } while(0);
     $292=(($this+($vidx_0196<<4)+2)|0);
     $293=((__Z8get_le16PKv($292))|0);
     $294=$293&16383;
     $295=((HEAP8[($38)])|0);
     $296=($295&255);
     $297=$296&$86;
     $298=($297|0)==0;
     if ($298) {
      $rate_0=$294;
     } else {
      $300=((($prev_outx_0202)+(32768))|0);
      $301=(Math_imul($294,$300)|0);
      $302=$301>>15;
      $rate_0=$302;
     }
     $304=((HEAP16[(($144)>>1)])|0);
     $305=(($304<<16)>>16);
     $306=$305>>>2;
     $307=$306&1020;
     $308=$305&4095;
     $309=((($308)+($rate_0))|0);
     $310=(($309)&65535);
     HEAP16[(($144)>>1)]=$310;
     $311=((16592+$307)|0);
     $312=$311;
     $313=(((1020)-($307))|0);
     $314=((16592+$313)|0);
     $315=$314;
     $316=((HEAP16[(($312)>>1)])|0);
     $317=(($316<<16)>>16);
     $318=(($this+248+($vidx_0196<<5)+6)|0);
     $319=((HEAP16[(($318)>>1)])|0);
     $320=(($319<<16)>>16);
     $321=(Math_imul($320,$317)|0);
     $322=$321>>>12;
     $_sum181182=$307|2;
     $323=((16592+$_sum181182)|0);
     $324=$323;
     $325=((HEAP16[(($324)>>1)])|0);
     $326=(($325<<16)>>16);
     $327=(($this+248+($vidx_0196<<5)+8)|0);
     $328=((HEAP16[(($327)>>1)])|0);
     $329=(($328<<16)>>16);
     $330=(Math_imul($329,$326)|0);
     $331=$330>>>12;
     $332=((($331)+($322))|0);
     $_sum183184=$313|2;
     $333=((16592+$_sum183184)|0);
     $334=$333;
     $335=((HEAP16[(($334)>>1)])|0);
     $336=(($335<<16)>>16);
     $337=(($this+248+($vidx_0196<<5)+10)|0);
     $338=((HEAP16[(($337)>>1)])|0);
     $339=(($338<<16)>>16);
     $340=(Math_imul($339,$336)|0);
     $341=$340>>>12;
     $342=((($332)+($341))|0);
     $343=$342<<17;
     $344=$343>>16;
     $345=((HEAP16[(($315)>>1)])|0);
     $346=(($345<<16)>>16);
     $347=(($this+248+($vidx_0196<<5)+12)|0);
     $348=((HEAP16[(($347)>>1)])|0);
     $349=(($348<<16)>>16);
     $350=(Math_imul($349,$346)|0);
     $351=$350>>11;
     $352=$351&-2;
     $353=((($344)+($352))|0);
     $354=((__Z8clamp_16i($353))|0);
     $355=((HEAP8[($32)])|0);
     $356=($355&255);
     $357=$356&$86;
     $358=($357|0)==0;
     if ($358) {
      $output_0=$354;
     } else {
      $360=((HEAP32[(($40)>>2)])|0);
      $output_0=$360;
     }
     $362=(Math_imul($output_0,$138)|0);
     $363=$362>>11;
     $364=$363&-2;
     $365=(($this+248+($vidx_0196<<5))|0);
     $366=((HEAP16[(($365)>>1)])|0);
     $367=(($366<<16)>>16);
     $368=(Math_imul($364,$367)|0);
     $369=(($this+248+($vidx_0196<<5)+26)|0);
     $370=((HEAP16[(($369)>>1)])|0);
     $371=(($370<<16)>>16);
     $372=$368>>($371|0);
     $373=(($this+248+($vidx_0196<<5)+2)|0);
     $374=((HEAP16[(($373)>>1)])|0);
     $375=(($374<<16)>>16);
     $376=(Math_imul($375,$364)|0);
     $377=$376>>($371|0);
     $378=$362>>>19;
     $379=(($378)&255);
     $380=(($this+($vidx_0196<<4)+9)|0);
     HEAP8[($380)]=$379;
     $381=((HEAP8[($39)])|0);
     $382=($381&255);
     $383=$382&$86;
     $384=($383|0)==0;
     if ($384) {
      $echol_1=$echol_0201;$echor_1=$echor_0200;
     } else {
      $386=((($372)+($echol_0201))|0);
      $387=((($377)+($echor_0200))|0);
      $echol_1=$386;$echor_1=$387;
     }
     $389=((($372)+($left_0199))|0);
     $390=((($377)+($right_0198))|0);
     $prev_outx_1=$364;$echol_2=$echol_1;$echor_2=$echor_1;$left_1=$389;$right_1=$390;
    }
   } while(0);
   if ((label|0) == 2837) {
    label = 0;
    $141=(($this+($vidx_0196<<4)+8)|0);
    HEAP8[($141)]=0;
    $142=(($this+($vidx_0196<<4)+9)|0);
    HEAP8[($142)]=0;
    $prev_outx_1=0;$echol_2=$echol_0201;$echor_2=$echor_0200;$left_1=$left_0199;$right_1=$right_0198;
   }
   $392=((($vidx_0196)+(1))|0);
   $393=($392|0)<8;
   if ($393) {
    $vidx_0196=$392;$right_0198=$right_1;$left_0199=$left_1;$echor_0200=$echor_2;$echol_0201=$echol_2;$prev_outx_0202=$prev_outx_1;
   } else {
    break;
   }
  }
  $395=(Math_imul($27,$left_1)|0);
  $396=$395>>15;
  $397=(Math_imul($28,$right_1)|0);
  $398=$397>>15;
  $399=((HEAP32[(($42)>>2)])|0);
  $400=((HEAP8[($43)])|0);
  $401=($400&255);
  $402=$401<<8;
  $403=((($402)+($399))|0);
  $404=$403&65535;
  $405=((HEAP32[(($10)>>2)])|0);
  $406=(($405+$404)|0);
  $407=((($399)+(4))|0);
  $408=((HEAP8[($44)])|0);
  $409=($408&255);
  $410=$409<<11;
  $411=$410&30720;
  $412=($407|0)<($411|0);
  $_=($412?$407:0);
  $413=((__Z8get_le16PKv($406))|0);
  $sext=$413<<16;
  $414=$sext>>16;
  $_sum=((($404)+(2))|0);
  $415=(($405+$_sum)|0);
  $416=((__Z8get_le16PKv($415))|0);
  $sext172=$416<<16;
  $417=$sext172>>16;
  HEAP32[(($42)>>2)]=$_;
  $418=((HEAP32[(($45)>>2)])|0);
  $419=((($418)+(7))|0);
  $420=$419&7;
  HEAP32[(($45)>>2)]=$420;
  $421=(($414)&65535);
  $422=(($this+148+($418<<2))|0);
  HEAP16[(($422)>>1)]=$421;
  $423=(($417)&65535);
  $424=(($this+148+($418<<2)+2)|0);
  HEAP16[(($424)>>1)]=$423;
  $_sum173=((($418)+(8))|0);
  $425=(($this+148+($_sum173<<2))|0);
  HEAP16[(($425)>>1)]=$421;
  $426=(($this+148+($_sum173<<2)+2)|0);
  HEAP16[(($426)>>1)]=$423;
  $427=((HEAP16[(($46)>>1)])|0);
  $428=(($427<<16)>>16);
  $429=(Math_imul($428,$414)|0);
  $_sum174=((($418)+(1))|0);
  $430=(($this+148+($_sum174<<2))|0);
  $431=((HEAP16[(($430)>>1)])|0);
  $432=(($431<<16)>>16);
  $433=((HEAP16[(($47)>>1)])|0);
  $434=(($433<<16)>>16);
  $435=(Math_imul($434,$432)|0);
  $436=((($435)+($429))|0);
  $_sum175=((($418)+(2))|0);
  $437=(($this+148+($_sum175<<2))|0);
  $438=((HEAP16[(($437)>>1)])|0);
  $439=(($438<<16)>>16);
  $440=((HEAP16[(($48)>>1)])|0);
  $441=(($440<<16)>>16);
  $442=(Math_imul($441,$439)|0);
  $443=((($436)+($442))|0);
  $_sum176=((($418)+(3))|0);
  $444=(($this+148+($_sum176<<2))|0);
  $445=((HEAP16[(($444)>>1)])|0);
  $446=(($445<<16)>>16);
  $447=((HEAP16[(($49)>>1)])|0);
  $448=(($447<<16)>>16);
  $449=(Math_imul($448,$446)|0);
  $450=((($443)+($449))|0);
  $_sum177=((($418)+(4))|0);
  $451=(($this+148+($_sum177<<2))|0);
  $452=((HEAP16[(($451)>>1)])|0);
  $453=(($452<<16)>>16);
  $454=((HEAP16[(($50)>>1)])|0);
  $455=(($454<<16)>>16);
  $456=(Math_imul($455,$453)|0);
  $457=((($450)+($456))|0);
  $_sum178=((($418)+(5))|0);
  $458=(($this+148+($_sum178<<2))|0);
  $459=((HEAP16[(($458)>>1)])|0);
  $460=(($459<<16)>>16);
  $461=((HEAP16[(($51)>>1)])|0);
  $462=(($461<<16)>>16);
  $463=(Math_imul($462,$460)|0);
  $464=((($457)+($463))|0);
  $_sum179=((($418)+(6))|0);
  $465=(($this+148+($_sum179<<2))|0);
  $466=((HEAP16[(($465)>>1)])|0);
  $467=(($466<<16)>>16);
  $468=((HEAP16[(($52)>>1)])|0);
  $469=(($468<<16)>>16);
  $470=(Math_imul($469,$467)|0);
  $471=((($464)+($470))|0);
  $_sum180=((($418)+(7))|0);
  $472=(($this+148+($_sum180<<2))|0);
  $473=((HEAP16[(($472)>>1)])|0);
  $474=(($473<<16)>>16);
  $475=((HEAP16[(($53)>>1)])|0);
  $476=(($475<<16)>>16);
  $477=(Math_imul($476,$474)|0);
  $478=((($471)+($477))|0);
  $479=(Math_imul($428,$417)|0);
  $480=(($this+148+($_sum174<<2)+2)|0);
  $481=((HEAP16[(($480)>>1)])|0);
  $482=(($481<<16)>>16);
  $483=(Math_imul($482,$434)|0);
  $484=((($483)+($479))|0);
  $485=(($this+148+($_sum175<<2)+2)|0);
  $486=((HEAP16[(($485)>>1)])|0);
  $487=(($486<<16)>>16);
  $488=(Math_imul($487,$441)|0);
  $489=((($484)+($488))|0);
  $490=(($this+148+($_sum176<<2)+2)|0);
  $491=((HEAP16[(($490)>>1)])|0);
  $492=(($491<<16)>>16);
  $493=(Math_imul($492,$448)|0);
  $494=((($489)+($493))|0);
  $495=(($this+148+($_sum177<<2)+2)|0);
  $496=((HEAP16[(($495)>>1)])|0);
  $497=(($496<<16)>>16);
  $498=(Math_imul($497,$455)|0);
  $499=((($494)+($498))|0);
  $500=(($this+148+($_sum178<<2)+2)|0);
  $501=((HEAP16[(($500)>>1)])|0);
  $502=(($501<<16)>>16);
  $503=(Math_imul($502,$462)|0);
  $504=((($499)+($503))|0);
  $505=(($this+148+($_sum179<<2)+2)|0);
  $506=((HEAP16[(($505)>>1)])|0);
  $507=(($506<<16)>>16);
  $508=(Math_imul($507,$469)|0);
  $509=((($504)+($508))|0);
  $510=(($this+148+($_sum180<<2)+2)|0);
  $511=((HEAP16[(($510)>>1)])|0);
  $512=(($511<<16)>>16);
  $513=(Math_imul($512,$476)|0);
  $514=((($509)+($513))|0);
  $515=((HEAP8[($54)])|0);
  $516=(($515<<24)>>24);
  $517=(Math_imul($516,$478)|0);
  $518=$517>>14;
  $519=((($518)+($396))|0);
  $520=((HEAP8[($55)])|0);
  $521=(($520<<24)>>24);
  $522=(Math_imul($514,$521)|0);
  $523=$522>>14;
  $524=((($523)+($398))|0);
  $525=((HEAP8[($1)])|0);
  $526=$525&32;
  $527=(($526<<24)>>24)==0;
  if ($527) {
   $529=((HEAP8[($56)])|0);
   $530=(($529<<24)>>24);
   $531=(Math_imul($530,$478)|0);
   $532=$531>>14;
   $533=((($532)+($echol_2))|0);
   $534=(Math_imul($530,$514)|0);
   $535=$534>>14;
   $536=((($535)+($echor_2))|0);
   $537=((__Z8clamp_16i($533))|0);
   __Z8set_le16Pvj($406,$537);
   $538=((__Z8clamp_16i($536))|0);
   __Z8set_le16Pvj($415,$538);
  }
  $540=($_0171203|0)==0;
  do {
   if ($540) {
    $_0171_be=0;
   } else {
    $542=((__Z8clamp_16i($519))|0);
    $543=((__Z8clamp_16i($524))|0);
    $544=((HEAP8[($1)])|0);
    $545=(($542)&65535);
    HEAP16[(($_0171203)>>1)]=$545;
    $546=(($543)&65535);
    $547=(($_0171203+2)|0);
    HEAP16[(($547)>>1)]=$546;
    $548=(($_0171203+4)|0);
    $549=$544&64;
    $550=(($549<<24)>>24)==0;
    if ($550) {
     $_0171_be=$548;
     break;
    }
    HEAP16[(($_0171203)>>1)]=0;
    HEAP16[(($547)>>1)]=0;
    $_0171_be=$548;
   }
  } while(0);
  $552=($58|0)>0;
  if ($552) {
   $_0171203=$_0171_be;$_in=$58;
  } else {
   break;
  }
 }
 return;
}
function __ZN7Spc_Dsp14clock_envelopeEi($this,$v){
 $this=($this)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$33=0,$34=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$extract_t86=0,$46=0,$cnt_0=0,$envx_0=0;
 var $48=0,$envx_1=0,$51=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$extract_t=0,$62=0,$63=0,$_neg93=0,$64=0,$65=0,$cnt_1_off0=0,$envx_2=0,$67=0;
 var $68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$extract_t82=0,$86=0,$87=0,$_neg95=0,$88=0;
 var $89=0,$91=0,$92=0,$93=0,$94=0,$96=0,$97=0,$99=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$extract_t92=0,$108=0,$109=0,$111=0,$envx_3=0,$114=0;
 var $116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$extract_t91=0,$123=0,$124=0,$_neg97=0,$125=0,$126=0,$128=0,$envx_4=0,$131=0,$133=0,$134=0,$135=0,$136=0,$137=0;
 var $138=0,$extract_t90=0,$140=0,$141=0,$_=0,$142=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$extract_t89=0,$151=0,$envx_6_v=0,$envx_6=0,$152=0,$_envx_6=0,$153=0,$cnt_2_off0=0;
 var $envx_8=0,$155=0,$156=0,$157=0,$_0=0,label=0;
 $1=(($this+248+($v<<5)+22)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($2<<16)>>16);
 $4=(($this+248+($v<<5)+28)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16);
 $7=(($5<<16)>>16)==3;
 if ($7) {
  $9=((($3)-(8))|0);
  $10=($9|0)<1;
  if ($10) {
   $12=1<<$v;
   $13=$12^-1;
   $14=(($this+224)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=$15&$13;
   HEAP32[(($14)>>2)]=$16;
   $_0=-1;
   return (($_0)|0);
  } else {
   $18=(($9)&65535);
   HEAP16[(($1)>>1)]=$18;
   $19=$9>>>8;
   $20=(($19)&255);
   $21=(($this+($v<<4)+8)|0);
   HEAP8[($21)]=$20;
   $_0=$9;
   return (($_0)|0);
  }
 }
 $23=(($this+248+($v<<5)+20)|0);
 $24=((HEAP16[(($23)>>1)])|0);
 $25=(($24<<16)>>16);
 $26=(($this+($v<<4)+5)|0);
 $27=((HEAP8[($26)])|0);
 $28=($27&255);
 $29=$28&128;
 $30=($29|0)==0;
 do {
  if ($30) {
   $91=(($this+($v<<4)+7)|0);
   $92=((HEAP8[($91)])|0);
   $93=($92&255);
   $94=(($92<<24)>>24)>-1;
   if ($94) {
    $96=$93<<4;
    $97=(($96)&65535);
    HEAP16[(($1)>>1)]=$97;
    $envx_8=$96;$cnt_2_off0=$24;
    break;
   }
   $99=$93>>>5;
   if (((($99|0))|0)==((7)|0)) {
    $144=$93&31;
    $145=((17672+($144<<1))|0);
    $146=((HEAP16[(($145)>>1)])|0);
    $147=(($146<<16)>>16);
    $148=((($25)-($147))|0);
    $149=($148|0)>0;
    $extract_t89=(($148)&65535);
    if ($149) {
     $envx_8=$3;$cnt_2_off0=$extract_t89;
     break;
    }
    $151=(($2<<16)>>16)<1536;
    $envx_6_v=($151?32:8);
    $envx_6=((($envx_6_v)+($3))|0);
    $152=($envx_6|0)>2047;
    $_envx_6=($152?2047:$envx_6);
    $153=(($_envx_6)&65535);
    HEAP16[(($1)>>1)]=$153;
    $envx_8=$_envx_6;$cnt_2_off0=30720;
    break;
   } else if (((($99|0))|0)==((5)|0)) {
    $116=$93&31;
    $117=((17672+($116<<1))|0);
    $118=((HEAP16[(($117)>>1)])|0);
    $119=(($118<<16)>>16);
    $120=((($25)-($119))|0);
    $121=($120|0)>0;
    $extract_t91=(($120)&65535);
    if ($121) {
     $envx_8=$3;$cnt_2_off0=$extract_t91;
     break;
    }
    $123=((($3)-(1))|0);
    $124=$123>>8;
    $_neg97=((($3)-(1))|0);
    $125=((($_neg97)-($124))|0);
    $126=($125|0)<0;
    do {
     if ($126) {
      $128=(($5<<16)>>16)==0;
      if (!($128)) {
       $envx_4=0;
       break;
      }
      HEAP16[(($4)>>1)]=1;
      $envx_4=0;
     } else {
      $envx_4=$125;
     }
    } while(0);
    $131=(($envx_4)&65535);
    HEAP16[(($1)>>1)]=$131;
    $envx_8=$envx_4;$cnt_2_off0=30720;
    break;
   } else if (((($99|0))|0)==((6)|0)) {
    $133=$93&31;
    $134=((17672+($133<<1))|0);
    $135=((HEAP16[(($134)>>1)])|0);
    $136=(($135<<16)>>16);
    $137=((($25)-($136))|0);
    $138=($137|0)>0;
    $extract_t90=(($137)&65535);
    if ($138) {
     $envx_8=$3;$cnt_2_off0=$extract_t90;
     break;
    }
    $140=((($3)+(32))|0);
    $141=($140|0)>2047;
    $_=($141?2047:$140);
    $142=(($_)&65535);
    HEAP16[(($1)>>1)]=$142;
    $envx_8=$_;$cnt_2_off0=30720;
    break;
   } else if (((($99|0))|0)==((4)|0)) {
    $101=$93&31;
    $102=((17672+($101<<1))|0);
    $103=((HEAP16[(($102)>>1)])|0);
    $104=(($103<<16)>>16);
    $105=((($25)-($104))|0);
    $106=($105|0)>0;
    $extract_t92=(($105)&65535);
    if ($106) {
     $envx_8=$3;$cnt_2_off0=$extract_t92;
     break;
    }
    $108=((($3)-(32))|0);
    $109=($108|0)<0;
    do {
     if ($109) {
      $111=(($5<<16)>>16)==0;
      if (!($111)) {
       $envx_3=0;
       break;
      }
      HEAP16[(($4)>>1)]=1;
      $envx_3=0;
     } else {
      $envx_3=$108;
     }
    } while(0);
    $114=(($envx_3)&65535);
    HEAP16[(($1)>>1)]=$114;
    $envx_8=$envx_3;$cnt_2_off0=30720;
    break;
   } else {
    $envx_8=$3;$cnt_2_off0=$24;
    break;
   }
  } else {
   if (((($6|0))|0)==((1)|0)) {
    $53=$28>>>3;
    $54=$53&14;
    $55=$54|16;
    $56=((17672+($55<<1))|0);
    $57=((HEAP16[(($56)>>1)])|0);
    $58=(($57<<16)>>16);
    $59=((($25)-($58))|0);
    $60=($59|0)<1;
    $extract_t=(($59)&65535);
    if ($60) {
     $62=((($3)-(1))|0);
     $63=$62>>8;
     $_neg93=((($3)-(1))|0);
     $64=((($_neg93)-($63))|0);
     $65=(($64)&65535);
     HEAP16[(($1)>>1)]=$65;
     $envx_2=$64;$cnt_1_off0=30720;
    } else {
     $envx_2=$3;$cnt_1_off0=$extract_t;
    }
    $67=(($this+($v<<4)+6)|0);
    $68=((HEAP8[($67)])|0);
    $69=($68&255);
    $70=$69>>>5;
    $71=$70<<8;
    $72=((($71)+(256))|0);
    $73=($envx_2|0)>($72|0);
    if ($73) {
     $envx_8=$envx_2;$cnt_2_off0=$cnt_1_off0;
     break;
    }
    HEAP16[(($4)>>1)]=2;
    $envx_8=$envx_2;$cnt_2_off0=$cnt_1_off0;
    break;
   } else if (((($6|0))|0)==((2)|0)) {
    $76=(($this+($v<<4)+6)|0);
    $77=((HEAP8[($76)])|0);
    $78=($77&255);
    $79=$78&31;
    $80=((17672+($79<<1))|0);
    $81=((HEAP16[(($80)>>1)])|0);
    $82=(($81<<16)>>16);
    $83=((($25)-($82))|0);
    $84=($83|0)<1;
    $extract_t82=(($83)&65535);
    if (!($84)) {
     $envx_8=$3;$cnt_2_off0=$extract_t82;
     break;
    }
    $86=((($3)-(1))|0);
    $87=$86>>8;
    $_neg95=((($3)-(1))|0);
    $88=((($_neg95)-($87))|0);
    $89=(($88)&65535);
    HEAP16[(($1)>>1)]=$89;
    $envx_8=$88;$cnt_2_off0=30720;
    break;
   } else if (((($6|0))|0)==((0)|0)) {
    $33=$28&15;
    $34=($33|0)==15;
    if ($34) {
     $36=((($3)+(1024))|0);
     $envx_0=$36;$cnt_0=$24;
    } else {
     $38=$33<<1;
     $39=$38|1;
     $40=((17672+($39<<1))|0);
     $41=((HEAP16[(($40)>>1)])|0);
     $42=(($41<<16)>>16);
     $43=((($25)-($42))|0);
     $44=($43|0)>0;
     $extract_t86=(($43)&65535);
     if ($44) {
      $envx_8=$3;$cnt_2_off0=$extract_t86;
      break;
     }
     $46=((($3)+(32))|0);
     $envx_0=$46;$cnt_0=30720;
    }
    $48=($envx_0|0)>2047;
    if ($48) {
     HEAP16[(($4)>>1)]=1;
     $envx_1=2047;
    } else {
     $envx_1=$envx_0;
    }
    $51=(($envx_1)&65535);
    HEAP16[(($1)>>1)]=$51;
    $envx_8=$envx_1;$cnt_2_off0=$cnt_0;
    break;
   } else {
    $envx_8=$3;$cnt_2_off0=$24;
    break;
   }
  }
 } while(0);
 HEAP16[(($23)>>1)]=$cnt_2_off0;
 $155=$envx_8>>>4;
 $156=(($155)&255);
 $157=(($this+($v<<4)+8)|0);
 HEAP8[($157)]=$156;
 $_0=$envx_8;
 return (($_0)|0);
}
function __Z8clamp_16i($n){
 $n=($n)|0;
 var $sext=0,$1=0,$2=0,$4=0,$5=0,$sext4=0,$6=0,$_0=0,label=0;
 $sext=$n<<16;
 $1=$sext>>16;
 $2=($1|0)==($n|0);
 if ($2) {
  $_0=$n;
  return (($_0)|0);
 }
 $4=$n>>31;
 $5=(((32767)-($4))|0);
 $sext4=$5<<16;
 $6=$sext4>>16;
 $_0=$6;
 return (($_0)|0);
}
function __ZN7Spc_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$7=0,$11=0,$12=0,$15=0,$16=0,$_03=0,$_0=0,$19$0=0,$19$1=0,$20$0=0,$20$1=0,$10$0=0,$10$1=0,$14$0=0,$14$1=0,$22$0=0;
 var $22$1=0,label=0;
 $1=$this;
 __ZN9Music_EmuC2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=13328;
 $3=(($this+264)|0);
 __ZN13Fir_ResamplerILi24EEC1Ev($3);
 $5=(($this+1856)|0);
 __ZN8Snes_SpcC2Ev($5);
 $7=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($7,104);
 __ZN9Music_Emu15set_voice_namesEPKPKc($1,9952);
 __ZN9Music_Emu8set_gainEd($1,1.4);
 return;
}
function __ZN13Fir_ResamplerILi24EEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13Fir_ResamplerILi24EEC2Ev($this);
 return;
}
function __ZN13Fir_ResamplerILi24EED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN13Fir_ResamplerILi24EED2Ev($this);
 return;
}
function __ZN7Spc_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Spc_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN7Spc_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$4=0,$7=0,$6$0=0,$6$1=0,$10$0=0,$10$1=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=13328;
 $2=(($this+264)|0);
 __ZN13Fir_ResamplerILi24EED1Ev($2);
 $4=$this;
 __ZN9Music_EmuD2Ev($4);
 return;
}
function __ZNK7Spc_Emu7trailerEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 $1=(($this+256)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((__Z3minIlET_S0_S0_($2,66048))|0);
 $4=(($this+252)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+$3)|0);
 return (($6)|0);
}
function __ZNK7Spc_Emu12trailer_sizeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+256)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)-(66048))|0);
 $4=((__Z3maxIlET_S0_S0_(0,$3))|0);
 return (($4)|0);
}
function __Z3maxIlET_S0_S0_($x,$y){
 $x=($x)|0;
 $y=($y)|0;
 var $1=0,$y_x=0,label=0;
 $1=($x|0)<($y|0);
 $y_x=($1?$y:$x);
 return (($y_x)|0);
}
function __ZNK7Spc_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,label=0;
 $2=((__ZNK7Spc_Emu6headerEv($this))|0);
 $3=((__ZNK7Spc_Emu7trailerEv($this))|0);
 $4=((__ZNK7Spc_Emu12trailer_sizeEv($this))|0);
 __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($2,$3,$4,$out);
 return ((0)|0);
}
function __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($h,$xid6,$xid6_size,$out){
 $h=($h)|0;
 $xid6=($xid6)|0;
 $xid6_size=($xid6_size)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$len_secs_035=0,$20=0,$21=0,$or_cond=0;
 var $22=0,$23=0,$len_secs_2=0,$25=0,$27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$phitmp=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,label=0;
 $1=(($h+169)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=((($3)-(48))|0);
 $5=($4>>>0)>((9)>>>0);
 L3350: do {
  if ($5) {
   label = 2952;
  } else {
   $15=(($h+170)|0);
   $16=((HEAP8[($15)])|0);
   $17=($16&255);
   $18=((($17)-(48))|0);
   $19=($18>>>0)>((9)>>>0);
   do {
    if ($19) {
     $7=(($h+176)|0);
     $8=((HEAP8[($7)])|0);
     $9=(($8<<24)>>24)==0;
     if (!($9)) {
      label = 2952;
      break L3350;
     }
     $11=(($h+177)|0);
     $12=((HEAP8[($11)])|0);
     $13=(($12<<24)>>24)==0;
     if ($13) {
      label = 2952;
      break L3350;
     } else {
      $len_secs_035=$4;
     }
    } else {
     $54=((($4)*(10))&-1);
     $55=((($18)+($54))|0);
     $56=(($h+171)|0);
     $57=((HEAP8[($56)])|0);
     $58=($57&255);
     $59=((($58)-(48))|0);
     $60=($59>>>0)>((9)>>>0);
     if ($60) {
      $len_secs_035=$55;
      break;
     }
     $61=((($55)*(10))&-1);
     $62=((($59)+($61))|0);
     $len_secs_035=$62;
    }
   } while(0);
   $20=($len_secs_035|0)==0;
   $21=($len_secs_035|0)>8191;
   $or_cond=$20|$21;
   if ($or_cond) {
    label = 2952;
   } else {
    $len_secs_2=$len_secs_035;
   }
  }
 } while(0);
 if ((label|0) == 2952) {
  $22=(($h+169)|0);
  $23=((__Z8get_le16PKv($22))|0);
  $len_secs_2=$23;
 }
 $25=($len_secs_2|0)<8191;
 if ($25) {
  $27=((($len_secs_2)*(1000))&-1);
  $28=(($out+4)|0);
  HEAP32[(($28)>>2)]=$27;
 }
 $30=(($h+176)|0);
 $31=((HEAP8[($30)])|0);
 $32=(($31<<24)>>24)<32;
 if ($32) {
  $38=1;
 } else {
  $34=(($31<<24)>>24);
  $35=((($34)-(48))|0);
  $36=($35>>>0)<((10)>>>0);
  $phitmp=($36&1);
  $38=$phitmp;
 }
 $39=(($out+784)|0);
 $40=(($h+176+$38)|0);
 $41=(((32)-($38))|0);
 __ZN8Gme_File11copy_field_EPcPKci($39,$40,$41);
 $42=(($out+528)|0);
 $43=(($h+46)|0);
 __ZN8Gme_File11copy_field_EPcPKci($42,$43,32);
 $44=(($out+272)|0);
 $45=(($h+78)|0);
 __ZN8Gme_File11copy_field_EPcPKci($44,$45,32);
 $46=(($out+1552)|0);
 $47=(($h+110)|0);
 __ZN8Gme_File11copy_field_EPcPKci($46,$47,16);
 $48=(($out+1296)|0);
 $49=(($h+126)|0);
 __ZN8Gme_File11copy_field_EPcPKci($48,$49,32);
 $50=($xid6_size|0)==0;
 if ($50) {
  return;
 }
 __ZL12get_spc_xid6PKhlP12track_info_t($xid6,$xid6_size,$out);
 return;
}
function __ZNK7Spc_Emu6headerEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+252)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 return (($3)|0);
}
function __ZL11new_spc_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(68664))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Spc_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL12new_spc_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(520))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Spc_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Spc_Emu16set_sample_rate_El($this,$sample_rate){
 $this=($this)|0;
 $sample_rate=($sample_rate)|0;
 var $1=0,$2=0,$3=.0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=.0,$12=.0,$13=.0,$_0=0,label=0;
 $1=(($this+1856)|0);
 $2=$this;
 $3=(+(__ZNK9Music_Emu4gainEv($2)));
 __ZN8Snes_Spc8set_gainEd($1,$3);
 $4=($sample_rate|0)==32000;
 if ($4) {
  $_0=0;
  return (($_0)|0);
 }
 $6=(($this+264)|0);
 $7=$6;
 $8=((__ZN14Fir_Resampler_11buffer_sizeEi($7,3200))|0);
 $9=($8|0)==0;
 if (!($9)) {
  $_0=$8;
  return (($_0)|0);
 }
 $11=(+((($sample_rate|0))|0));
 $12=((32000.0))/($11);
 $13=(+(__ZN14Fir_Resampler_10time_ratioEddd($7,$12,0.9965,1.0)));
 $_0=0;
 return (($_0)|0);
}
function __ZN8Snes_Spc8set_gainEd($this,$v){
 $this=($this)|0;
 $v=+($v);
 var $1=0,label=0;
 $1=(($this+88)|0);
 __ZN7Spc_Dsp8set_gainEd($1,$v);
 return;
}
function __ZN7Spc_Emu12mute_voices_Ei($this,$m){
 $this=($this)|0;
 $m=($m)|0;
 var $1=0,label=0;
 $1=(($this+1856)|0);
 __ZN8Snes_Spc11mute_voicesEi($1,$m);
 return;
}
function __ZN8Snes_Spc11mute_voicesEi($this,$mask){
 $this=($this)|0;
 $mask=($mask)|0;
 var $1=0,label=0;
 $1=(($this+88)|0);
 __ZN7Spc_Dsp11mute_voicesEi($1,$mask);
 return;
}
function __ZN7Spc_Emu9load_mem_EPKhl($this,$in,$size){
 $this=($this)|0;
 $in=($in)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$_0=0,label=0;
 $1=(($this+252)|0);
 HEAP32[(($1)>>2)]=$in;
 $2=(($this+256)|0);
 HEAP32[(($2)>>2)]=$size;
 $3=$this;
 __ZN9Music_Emu15set_voice_countEi($3,8);
 $4=($size|0)<65920;
 if ($4) {
  $_0=16;
  return (($_0)|0);
 }
 $6=((__ZL16check_spc_headerPKv($in))|0);
 $_0=$6;
 return (($_0)|0);
}
function __ZL16check_spc_headerPKv($header){
 $header=($header)|0;
 var $1=0,$2=0,$_=0,label=0;
 $1=((_memcmp((($header)|0),((6680)|0),((27)|0)))|0);
 $2=($1|0)==0;
 $_=($2?0:16);
 return (($_)|0);
}
function __ZN7Spc_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,label=0;
 $1=(($this+1856)|0);
 __ZN8Snes_Spc9set_tempoEd($1,$t);
 return;
}
function __ZN7Spc_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$_0=0,label=0;
 $1=(($this+264)|0);
 $2=$1;
 __ZN14Fir_Resampler_5clearEv($2);
 $3=(($this+1856)|0);
 $4=(($this+252)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($this+256)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((__ZN8Snes_Spc8load_spcEPKvl($3,$5,$7))|0);
 $9=($8|0)==0;
 if (!($9)) {
  $_0=$8;
  return (($_0)|0);
 }
 __ZN8Snes_Spc10clear_echoEv($3);
 $_0=0;
 return (($_0)|0);
}
function __ZN7Spc_Emu5skip_El($this,$count){
 $this=($this)|0;
 $count=($count)|0;
 var $buf=0,$1=0,$2=0,$3=0,$5=.0,$6=0,$7=0,$8=.0,$9=.0,$10=0,$11=0,$12=0,$13=0,$_08=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+128)|0;
 $buf=((sp)|0);
 $1=$this;
 $2=((__ZNK9Music_Emu11sample_rateEv($1))|0);
 $3=($2|0)==32000;
 if ($3) {
  $_08=$count;
 } else {
  $5=(+((($count|0))|0));
  $6=(($this+264)|0);
  $7=$6;
  $8=(+(__ZNK14Fir_Resampler_5ratioEv($7)));
  $9=($5)*($8);
  $10=(~~($9));
  $11=$10&-2;
  $12=((__ZN14Fir_Resampler_10skip_inputEl($7,$11))|0);
  $13=((($11)-($12))|0);
  $_08=$13;
 }
 $15=($_08|0)>0;
 do {
  if ($15) {
   $17=(($this+1856)|0);
   $18=((__ZN8Snes_Spc4skipEl($17,$_08))|0);
   $19=($18|0)==0;
   if ($19) {
    break;
   } else {
    $_0=$18;
   }
   STACKTOP=sp;return (($_0)|0);
  }
 } while(0);
 $21=$this;
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+60)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($buf)|0);
 $26=((FUNCTION_TABLE_iiii[($24)&127]($this,64,$25))|0);
 $_0=$26;
 STACKTOP=sp;return (($_0)|0);
}
function __ZN7Spc_Emu5play_ElPs($this,$count,$out){
 $this=($this)|0;
 $count=($count)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$remain_013=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $_0=0,label=0;
 $1=$this;
 $2=((__ZNK9Music_Emu11sample_rateEv($1))|0);
 $3=($2|0)==32000;
 if ($3) {
  $9=(($this+1856)|0);
  $10=((__ZN8Snes_Spc4playElPs($9,$count,$out))|0);
  $_0=$10;
  return (($_0)|0);
 }
 $4=(($this+264)|0);
 $5=$4;
 $6=($count|0)>0;
 if (!($6)) {
  $_0=0;
  return (($_0)|0);
 }
 $7=(($this+1856)|0);
 $remain_013=$count;
 while(1) {
  $12=((($count)-($remain_013))|0);
  $13=(($out+($12<<1))|0);
  $14=((__ZN13Fir_ResamplerILi24EE4readEPsi($4,$13,$remain_013))|0);
  $15=((($remain_013)-($14))|0);
  $16=($15|0)>0;
  if (!($16)) {
   $_0=0;
   label = 3014;
   break;
  }
  $18=((__ZNK14Fir_Resampler_9max_writeEv($5))|0);
  $19=((__ZN14Fir_Resampler_6bufferEv($5))|0);
  $20=((__ZN8Snes_Spc4playElPs($7,$18,$19))|0);
  $21=($20|0)==0;
  if (!($21)) {
   $_0=$20;
   label = 3011;
   break;
  }
  __ZN14Fir_Resampler_5writeEl($5,$18);
  $22=($15|0)>0;
  if ($22) {
   $remain_013=$15;
  } else {
   $_0=0;
   label = 3012;
   break;
  }
 }
 if ((label|0) == 3014) {
  return (($_0)|0);
 }
 else if ((label|0) == 3011) {
  return (($_0)|0);
 }
 else if ((label|0) == 3012) {
  return (($_0)|0);
 }
  return 0;
}
function __ZN13Fir_ResamplerILi24EE4readEPsi($this,$out_begin,$count){
 $this=($this)|0;
 $out_begin=($out_begin)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$skip_0=0,$imp_0=0,$remain_0=0,$in_0=0,$out_0=0,$_0=0,$30=0,$31=0,$n_040=0,$i_039=0,$r_038=0,$l_037=0,$imp_136=0;
 var $32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0;
 var $52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$scevgep=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$_sum=0,$67=0,$68=0,$70=0,$71=0;
 var $skip_1=0,$imp_2=0,$remain_1=0,$73=0,$74=0,$75=0,$76=0,$77=0,$remain_2=0,$in_1=0,$out_1=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0;
 var $87=0,$88=0,$89=0,$90=0,$91=0,$92=0,label=0;
 $1=$this;
 $2=((__ZNK13blargg_vectorIsE5beginEv($1))|0);
 $3=(($this+8)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($this+28)|0);
 $7=$6;
 $8=(($this+16)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($this+12)|0);
 $12=$11;
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((($13)-($10))|0);
 $15=(($this+32)|0);
 $16=$15;
 $17=((HEAP32[(($16)>>2)])|0);
 $18=$5;
 $19=$2;
 $20=((($18)-($19))|0);
 $21=($20|0)>94;
 L3429: do {
  if ($21) {
   $23=((HEAP32[(($7)>>2)])|0);
   $24=$count>>1;
   $25=(($this+52+((($10)*(48))&-1))|0);
   $26=$23>>>($10>>>0);
   $27=((($5)-(96))|0);
   $28=(($this+52)|0);
   $_0=$24;$out_0=$out_begin;$in_0=$2;$remain_0=$14;$imp_0=$25;$skip_0=$26;
   while(1) {
    $30=((($_0)-(1))|0);
    $31=($30|0)<0;
    if ($31) {
     $out_1=$out_0;$in_1=$in_0;$remain_2=$remain_0;
     break L3429;
    } else {
     $imp_136=$imp_0;$l_037=0;$r_038=0;$i_039=$in_0;$n_040=12;
    }
    while(1) {
     $32=((HEAP16[(($imp_136)>>1)])|0);
     $33=(($32<<16)>>16);
     $34=((HEAP16[(($i_039)>>1)])|0);
     $35=(($34<<16)>>16);
     $36=(Math_imul($35,$33)|0);
     $37=((($36)+($l_037))|0);
     $38=(($i_039+2)|0);
     $39=((HEAP16[(($38)>>1)])|0);
     $40=(($39<<16)>>16);
     $41=(Math_imul($40,$33)|0);
     $42=((($41)+($r_038))|0);
     $43=(($imp_136+2)|0);
     $44=((HEAP16[(($43)>>1)])|0);
     $45=(($44<<16)>>16);
     $46=(($imp_136+4)|0);
     $47=(($i_039+4)|0);
     $48=((HEAP16[(($47)>>1)])|0);
     $49=(($48<<16)>>16);
     $50=(Math_imul($49,$45)|0);
     $51=((($37)+($50))|0);
     $52=(($i_039+6)|0);
     $53=((HEAP16[(($52)>>1)])|0);
     $54=(($53<<16)>>16);
     $55=(Math_imul($54,$45)|0);
     $56=((($42)+($55))|0);
     $57=(($i_039+8)|0);
     $58=((($n_040)-(1))|0);
     $59=($58|0)==0;
     if ($59) {
      break;
     } else {
      $imp_136=$46;$l_037=$51;$r_038=$56;$i_039=$57;$n_040=$58;
     }
    }
    $scevgep=(($imp_0+48)|0);
    $61=((($remain_0)-(1))|0);
    $62=$51>>>15;
    $63=$56>>>15;
    $64=$skip_0<<1;
    $65=$64&2;
    $66=$skip_0>>>1;
    $_sum=((($65)+($17))|0);
    $67=(($in_0+($_sum<<1))|0);
    $68=($61|0)==0;
    if ($68) {
     $70=((HEAP32[(($7)>>2)])|0);
     $71=((HEAP32[(($12)>>2)])|0);
     $remain_1=$71;$imp_2=$28;$skip_1=$70;
    } else {
     $remain_1=$61;$imp_2=$scevgep;$skip_1=$66;
    }
    $73=(($62)&65535);
    HEAP16[(($out_0)>>1)]=$73;
    $74=(($63)&65535);
    $75=(($out_0+2)|0);
    HEAP16[(($75)>>1)]=$74;
    $76=(($out_0+4)|0);
    $77=($67>>>0)>($27>>>0);
    if ($77) {
     $out_1=$76;$in_1=$67;$remain_2=$remain_1;
     break;
    } else {
     $_0=$30;$out_0=$76;$in_0=$67;$remain_0=$remain_1;$imp_0=$imp_2;$skip_0=$skip_1;
    }
   }
  } else {
   $out_1=$out_begin;$in_1=$2;$remain_2=$14;
  }
 } while(0);
 $78=((HEAP32[(($12)>>2)])|0);
 $79=((($78)-($remain_2))|0);
 HEAP32[(($9)>>2)]=$79;
 $80=((HEAP32[(($4)>>2)])|0);
 $81=$80;
 $82=$in_1;
 $83=((($81)-($82))|0);
 $84=$83>>1;
 $85=((__ZNK13blargg_vectorIsEixEj($1,$84))|0);
 HEAP32[(($4)>>2)]=$85;
 $86=((__ZNK13blargg_vectorIsE5beginEv($1))|0);
 $87=$86;
 $88=$in_1;
 _memmove((($87)|0),(($88)|0),(($83)|0));
 $89=$out_1;
 $90=$out_begin;
 $91=((($89)-($90))|0);
 $92=$91>>1;
 return (($92)|0);
}
function __ZNK14Fir_Resampler_9max_writeEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=(($this)|0);
 $2=((__ZNK13blargg_vectorIsE3endEv($1))|0);
 $3=(($this+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$2;
 $6=$4;
 $7=((($5)-($6))|0);
 $8=$7>>1;
 return (($8)|0);
}
function __ZN13Fir_ResamplerILi24EEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=$this;
 $2=(($this+52)|0);
 __ZN14Fir_Resampler_C2EiPs($1,24,$2);
 return;
}
function __ZN8Spc_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Spc_FileC2Ev($this);
 return;
}
function __ZN8Spc_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12440;
 $3=(($this+508)|0);
 __ZN13blargg_vectorIhEC1Ev($3);
 $4=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($4,104);
 return;
}
function __ZN8Spc_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Spc_FileD2Ev($this);
 return;
}
function __ZN8Spc_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Spc_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Spc_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0,$22=0,$23=0,$24=0;
 var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$_0=0,label=0;
 $1=$in;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+16)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((FUNCTION_TABLE_ii[($4)&31]($in))|0);
 $6=($5|0)<65920;
 if ($6) {
  $_0=16;
  return (($_0)|0);
 }
 $8=$in;
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+12)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($this+252)|0);
 $13=((FUNCTION_TABLE_iiii[($11)&127]($in,$12,256))|0);
 $14=($13|0)==0;
 if (!($14)) {
  $_0=$13;
  return (($_0)|0);
 }
 $16=((__ZL16check_spc_headerPKv($12))|0);
 $17=($16|0)==0;
 if (!($17)) {
  $_0=$16;
  return (($_0)|0);
 }
 $19=((($5)-(66048))|0);
 $20=($19|0)>0;
 do {
  if ($20) {
   $22=(($this+508)|0);
   $23=((__ZN13blargg_vectorIhE6resizeEj($22,$19))|0);
   $24=($23|0)==0;
   if (!($24)) {
    $_0=$23;
    return (($_0)|0);
   }
   $26=$in;
   $27=((HEAP32[(($26)>>2)])|0);
   $28=(($27+20)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=((FUNCTION_TABLE_iii[($29)&127]($in,65792))|0);
   $31=($30|0)==0;
   if (!($31)) {
    $_0=$30;
    return (($_0)|0);
   }
   $33=((HEAP32[(($8)>>2)])|0);
   $34=(($33+12)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=((__ZNK13blargg_vectorIhE5beginEv($22))|0);
   $37=((__ZNK13blargg_vectorIhE4sizeEv($22))|0);
   $38=((FUNCTION_TABLE_iiii[($35)&127]($in,$36,$37))|0);
   $39=($38|0)==0;
   if ($39) {
    break;
   } else {
    $_0=$38;
   }
   return (($_0)|0);
  }
 } while(0);
 $_0=0;
 return (($_0)|0);
}
function __ZNK8Spc_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,label=0;
 $2=(($this+252)|0);
 $3=(($this+508)|0);
 $4=((__ZNK13blargg_vectorIhE5beginEv($3))|0);
 $5=((__ZNK13blargg_vectorIhE4sizeEv($3))|0);
 __ZL12get_spc_infoRKN7Spc_Emu8header_tEPKhlP12track_info_t($2,$4,$5,$out);
 return ((0)|0);
}
function __ZN8Spc_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=12440;
 $2=(($this+508)|0);
 __ZN13blargg_vectorIhED1Ev($2);
 $3=$this;
 __ZN9Gme_Info_D2Ev($3);
 return;
}
function __ZL12get_spc_xid6PKhlP12track_info_t($begin,$size,$out){
 $begin=($begin)|0;
 $size=($size)|0;
 $out=($out)|0;
 var $copyright=0,$copyright60=0,$1=0,$2=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_sum49=0,$15=0,$end_0=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$in_0_ph=0,$28=0,$29=0,$30=0,$in_057=0,$year_056=0,$copyright_len_055=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$57=0,$field_0=0,$59=0,$year_151=0,$copyright_len_150=0,$_sum=0,$61=0,$in_1=0;
 var $63=0,$64=0,$65=0,$66=0,$67=0,$or_cond=0,$69=0,$70=0,$71=0,$year_0_lcssa=0,$copyright_len_0_lcssa=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0;
 var $82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$copyright_len_2=0,$p_1=0,$97=0,$99=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+264)|0;
 $copyright=((sp)|0);
 $copyright60=(($copyright)|0);
 $1=(($begin+$size)|0);
 $2=($size|0)<8;
 if ($2) {
  STACKTOP=sp;return;
 }
 $4=((_memcmp((($begin)|0),((6072)|0),((4)|0)))|0);
 $5=($4|0)==0;
 if (!($5)) {
  STACKTOP=sp;return;
 }
 $7=(($begin+4)|0);
 $8=((__Z8get_le32PKv($7))|0);
 $9=(($begin+8)|0);
 $10=$1;
 $11=$9;
 $12=((($10)-($11))|0);
 $13=($12|0)>($8|0);
 if ($13) {
  $_sum49=((($8)+(8))|0);
  $15=(($begin+$_sum49)|0);
  $end_0=$15;
 } else {
  $end_0=$1;
 }
 $17=$end_0;
 $18=$9;
 $19=((($17)-($18))|0);
 $20=($19|0)>3;
 if (!($20)) {
  STACKTOP=sp;return;
 }
 $21=$begin;
 $22=(($out+528)|0);
 $23=(($out+272)|0);
 $24=(($out+784)|0);
 $25=(($out+1552)|0);
 $26=(($out+1296)|0);
 $27=(($copyright+5)|0);
 $copyright_len_055=0;$year_056=0;$in_057=$9;
 while(1) {
  $32=(($in_057+3)|0);
  $33=((HEAP8[($32)])|0);
  $34=($33&255);
  $35=$34<<8;
  $36=(($in_057+2)|0);
  $37=((HEAP8[($36)])|0);
  $38=($37&255);
  $39=$35|$38;
  $40=(($in_057+1)|0);
  $41=((HEAP8[($40)])|0);
  $42=(($41<<24)>>24)!=0;
  $43=($42?$39:0);
  $44=(($in_057+4)|0);
  $45=$44;
  $46=((($17)-($45))|0);
  $47=($43|0)>($46|0);
  if ($47) {
   $copyright_len_0_lcssa=$copyright_len_055;$year_0_lcssa=$year_056;
   break;
  }
  $49=((HEAP8[($in_057)])|0);
  $50=($49&255);
  switch (($50|0)) {
  case 3: {
   $field_0=$24;
   label = 3065;
   break;
  }
  case 2: {
   $field_0=$23;
   label = 3065;
   break;
  }
  case 20: {
   $copyright_len_150=$copyright_len_055;$year_151=$39;
   break;
  }
  case 19: {
   $57=((__Z3minIiET_S0_S0_($43,256))|0);
   (_memcpy((($27)|0), (($44)|0), $57)|0);
   $copyright_len_150=$57;$year_151=$year_056;
   break;
  }
  case 4: {
   $field_0=$25;
   label = 3065;
   break;
  }
  case 7: {
   $field_0=$26;
   label = 3065;
   break;
  }
  case 1: {
   $field_0=$22;
   label = 3065;
   break;
  }
  default: {
   $copyright_len_150=$copyright_len_055;$year_151=$year_056;
  }
  }
  do {
   if ((label|0) == 3065) {
    label = 0;
    $59=($field_0|0)==0;
    if ($59) {
     $copyright_len_150=$copyright_len_055;$year_151=$year_056;
     break;
    }
    __ZN8Gme_File11copy_field_EPcPKci($field_0,$44,$43);
    $copyright_len_150=$copyright_len_055;$year_151=$year_056;
   }
  } while(0);
  $_sum=((($43)+(4))|0);
  $61=(($in_057+$_sum)|0);
  $in_1=$61;
  while(1) {
   $63=$in_1;
   $64=((($63)-($21))|0);
   $65=$64&3;
   $66=($65|0)!=0;
   $67=($in_1>>>0)<($end_0>>>0);
   $or_cond=$66&$67;
   if (!($or_cond)) {
    $in_0_ph=$in_1;
    break;
   }
   $69=(($in_1+1)|0);
   $70=((HEAP8[($in_1)])|0);
   $71=(($70<<24)>>24)==0;
   if ($71) {
    $in_1=$69;
   } else {
    $in_0_ph=$61;
    break;
   }
  }
  $28=$in_0_ph;
  $29=((($17)-($28))|0);
  $30=($29|0)>3;
  if ($30) {
   $copyright_len_055=$copyright_len_150;$year_056=$year_151;$in_057=$in_0_ph;
  } else {
   $copyright_len_0_lcssa=$copyright_len_150;$year_0_lcssa=$year_151;
   break;
  }
 }
 $72=(($copyright+5)|0);
 $73=($year_0_lcssa|0)==0;
 if ($73) {
  $p_1=$72;$copyright_len_2=$copyright_len_0_lcssa;
 } else {
  $75=(($copyright+4)|0);
  HEAP8[($75)]=32;
  $76=(((($year_0_lcssa|0))%(10))&-1);
  $77=((($76)+(48))|0);
  $78=(($77)&255);
  $79=(($copyright+3)|0);
  HEAP8[($79)]=$78;
  $80=(((($year_0_lcssa|0))/(10))&-1);
  $81=(((($80|0))%(10))&-1);
  $82=((($81)+(48))|0);
  $83=(($82)&255);
  $84=(($copyright+2)|0);
  HEAP8[($84)]=$83;
  $85=(((($year_0_lcssa|0))/(100))&-1);
  $86=(((($85|0))%(10))&-1);
  $87=((($86)+(48))|0);
  $88=(($87)&255);
  $89=(($copyright+1)|0);
  HEAP8[($89)]=$88;
  $90=(((($year_0_lcssa|0))/(1000))&-1);
  $91=(((($90|0))%(10))&-1);
  $92=((($91)+(48))|0);
  $93=(($92)&255);
  $94=(($copyright)|0);
  HEAP8[($94)]=$93;
  $95=((($copyright_len_0_lcssa)+(5))|0);
  $p_1=$copyright60;$copyright_len_2=$95;
 }
 $97=($copyright_len_2|0)==0;
 if ($97) {
  STACKTOP=sp;return;
 }
 $99=(($out+1040)|0);
 __ZN8Gme_File11copy_field_EPcPKci($99,$p_1,$copyright_len_2);
 STACKTOP=sp;return;
}
function __ZN13Fir_ResamplerILi24EED2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZN14Fir_Resampler_D2Ev($1);
 return;
}
function __ZN7Vgm_EmuC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$12$0=0,$12$1=0,$15$0=0,$15$1=0,label=0;
 $1=(($this)|0);
 __ZN12Vgm_Emu_ImplC2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=13208;
 $3=(($this+272)|0);
 $4=$3;
 HEAP32[(($4)>>2)]=13300;
 $5=(($this+3424)|0);
 HEAP8[($5)]=0;
 $6=(($this+3416)|0);
 HEAP32[(($6)>>2)]=0;
 $7=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($7,80);
 $8=(($this)|0);
 __ZN11Classic_Emu15set_voice_typesEPKi($8,9856);
 $9=$this;
 __ZN9Music_Emu21set_silence_lookaheadEi($9,1);
 __ZN9Music_Emu13set_equalizerERK15gme_equalizer_t($9,9888);
 return;
}
function __ZN12Vgm_Emu_ImplC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$10=0,$12=0,$14=0,$18=0,$19=0,$22=0,$23=0,$26=0,$27=0,$30=0,$31=0,$34=0,$35=0;
 var $_03=0,$_0=0,$_14=0,$_1=0,$_25=0,$_2=0,$_47=0,$_4=0,$42$0=0,$42$1=0,$43$0=0,$43$1=0,$17$0=0,$17$1=0,$21$0=0,$21$1=0,$25$0=0,$25$1=0,$29$0=0,$29$1=0;
 var $33$0=0,$33$1=0,$45$0=0,$45$1=0,label=0;
 $1=(($this)|0);
 __ZN11Classic_EmuC2Ev($1);
 $2=(($this+272)|0);
 $3=$2;
 __ZN14Dual_ResamplerC2Ev($3);
 $5=$this;
 HEAP32[(($5)>>2)]=14544;
 $6=$2;
 HEAP32[(($6)>>2)]=14636;
 $7=(($this+1176)|0);
 __ZN6Ym_EmuI10Ym2612_EmuEC1Ev($7);
 $8=(($this+1188)|0);
 __ZN6Ym_EmuI10Ym2413_EmuEC1Ev($8);
 $10=(($this+1200)|0);
 __ZN11Blip_BufferC2Ev($10);
 $12=(($this+1248)|0);
 __ZN7Sms_ApuC2Ev($12);
 $14=(($this+2848)|0);
 __ZN10Blip_SynthILi8ELi1EEC1Ev($14);
 return;
}
function __ZN12Vgm_Emu_ImplD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$10=0,$12=0,$14=0,$17=0,$18=0,$19=0,$22=0,$23=0,$26=0,$27=0,$_03=0,$_0=0,$29=0,$32=0;
 var $33=0,$_14=0,$_1=0,$35=0,$38=0,$39=0,$_25=0,$_2=0,$41=0,$_36=0,$_3=0,$43=0,$45$0=0,$45$1=0,$46$0=0,$46$1=0,$16$0=0,$16$1=0,$21$0=0,$21$1=0;
 var $25$0=0,$25$1=0,$31$0=0,$31$1=0,$37$0=0,$37$1=0,$48$0=0,$48$1=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=14544;
 $2=(($this+272)|0);
 $3=$2;
 HEAP32[(($3)>>2)]=14636;
 $4=(($this+1248)|0);
 __ZN7Sms_ApuD2Ev($4);
 $6=(($this+1200)|0);
 __ZN11Blip_BufferD2Ev($6);
 $8=(($this+1188)|0);
 __ZN6Ym_EmuI10Ym2413_EmuED1Ev($8);
 $10=(($this+1176)|0);
 __ZN6Ym_EmuI10Ym2612_EmuED1Ev($10);
 $12=$2;
 __ZN14Dual_ResamplerD2Ev($12);
 $14=(($this)|0);
 __ZN11Classic_EmuD2Ev($14);
 return;
}
function __ZN7Vgm_EmuD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN7Vgm_EmuD2Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZThn272_N7Vgm_EmuD0Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=((($this)-(272))|0);
 $2=$1;
 __ZN7Vgm_EmuD0Ev($2);
 return;
}
function __ZN7Vgm_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN12Vgm_Emu_ImplD2Ev($1);
 return;
}
function __ZThn272_N7Vgm_EmuD1Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=((($this)-(272))|0);
 $2=$1;
 __ZN7Vgm_EmuD2Ev($2);
 return;
}
function __ZNK7Vgm_Emu8gd3_dataEPi($this,$size){
 $this=($this)|0;
 $size=($size)|0;
 var $1=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$_sum=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$_not=0,$brmerge=0,$_mux=0;
 var $21=0,$_0=0,label=0;
 $1=($size|0)!=0;
 if ($1) {
  HEAP32[(($size)>>2)]=0;
 }
 $4=((__ZNK7Vgm_Emu6headerEv($this))|0);
 $5=(($4+20)|0);
 $6=((__Z8get_le32PKv($5))|0);
 $7=((($6)-(44))|0);
 $8=($7|0)<0;
 if ($8) {
  $_0=0;
  return (($_0)|0);
 }
 $10=(($this+1140)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $_sum=((($6)+(20))|0);
 $12=(($11+$_sum)|0);
 $13=(($this+1148)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=$14;
 $16=$12;
 $17=((($15)-($16))|0);
 $18=((__ZL16check_gd3_headerPKhl($12,$17))|0);
 $19=($18|0)==0;
 $_not=$1^1;
 $brmerge=$19|$_not;
 $_mux=($19?0:$12);
 if ($brmerge) {
  $_0=$_mux;
  return (($_0)|0);
 }
 $21=((($18)+(12))|0);
 HEAP32[(($size)>>2)]=$21;
 $_0=$12;
 return (($_0)|0);
}
function __ZNK7Vgm_Emu6headerEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+1140)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 return (($3)|0);
}
function __ZL16check_gd3_headerPKhl($h,$remain){
 $h=($h)|0;
 $remain=($remain)|0;
 var $1=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$_=0,$_0=0,label=0;
 $1=($remain|0)<12;
 do {
  if ($1) {
   $_0=0;
  } else {
   $3=((_memcmp((($h)|0),((5384)|0),((4)|0)))|0);
   $4=($3|0)==0;
   if (!($4)) {
    $_0=0;
    break;
   }
   $6=(($h+4)|0);
   $7=((__Z8get_le32PKv($6))|0);
   $8=($7>>>0)>((511)>>>0);
   if ($8) {
    $_0=0;
    break;
   }
   $10=(($h+8)|0);
   $11=((__Z8get_le32PKv($10))|0);
   $12=((($remain)-(12))|0);
   $13=($11|0)>($12|0);
   $_=($13?0:$11);
   $_0=$_;
  }
 } while(0);
 return (($_0)|0);
}
function __ZNK7Vgm_Emu11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $size=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $size=((sp)|0);
 $2=((__ZNK7Vgm_Emu6headerEv($this))|0);
 __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($2,$out);
 $3=((__ZNK7Vgm_Emu8gd3_dataEPi($this,$size))|0);
 $4=($3|0)==0;
 if ($4) {
  STACKTOP=sp;return ((0)|0);
 }
 $6=(($3+12)|0);
 $7=((HEAP32[(($size)>>2)])|0);
 $8=(($3+$7)|0);
 __ZL9parse_gd3PKhS0_P12track_info_t($6,$8,$out);
 STACKTOP=sp;return ((0)|0);
}
function __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($h,$out){
 $h=($h)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,label=0;
 $1=(($h+24)|0);
 $2=((__Z8get_le32PKv($1))|0);
 $3=((($2)*(10))&-1);
 $4=(((($3>>>0))/(441))&-1);
 $5=($3>>>0)>((440)>>>0);
 if (!($5)) {
  return;
 }
 $7=(($h+32)|0);
 $8=((__Z8get_le32PKv($7))|0);
 $9=($8|0)>0;
 do {
  if ($9) {
   $11=(($h+28)|0);
   $12=((__Z8get_le32PKv($11))|0);
   $13=($12|0)==0;
   if ($13) {
    break;
   }
   $15=((($8)*(10))&-1);
   $16=(((($15|0))/(441))&-1);
   $17=(($out+12)|0);
   HEAP32[(($17)>>2)]=$16;
   $18=((($4)-($16))|0);
   $19=(($out+8)|0);
   HEAP32[(($19)>>2)]=$18;
   return;
  }
 } while(0);
 $21=(($out+4)|0);
 HEAP32[(($21)>>2)]=$4;
 $22=(($out+8)|0);
 HEAP32[(($22)>>2)]=$4;
 $23=(($out+12)|0);
 HEAP32[(($23)>>2)]=0;
 return;
}
function __ZL9parse_gd3PKhS0_P12track_info_t($in,$end,$out){
 $in=($in)|0;
 $end=($end)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;
 $1=(($out+528)|0);
 $2=((__ZL12get_gd3_pairPKhS0_Pc($in,$end,$1))|0);
 $3=(($out+272)|0);
 $4=((__ZL12get_gd3_pairPKhS0_Pc($2,$end,$3))|0);
 $5=(($out+16)|0);
 $6=((__ZL12get_gd3_pairPKhS0_Pc($4,$end,$5))|0);
 $7=(($out+784)|0);
 $8=((__ZL12get_gd3_pairPKhS0_Pc($6,$end,$7))|0);
 $9=(($out+1040)|0);
 $10=((__ZL11get_gd3_strPKhS0_Pc($8,$end,$9))|0);
 $11=(($out+1552)|0);
 $12=((__ZL12get_gd3_pairPKhS0_Pc($10,$end,$11))|0);
 $13=(($out+1296)|0);
 $14=((__ZL11get_gd3_strPKhS0_Pc($12,$end,$13))|0);
 return;
}
function __ZL11new_vgm_emuv(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(3432))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN7Vgm_EmuC2Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZL12new_vgm_filev(){
 var $1=0,$2=0,$4=0,$6=0,$7=0,$9$0=0,$9$1=0,label=0;
 $1=((__ZN8Gme_FilenwEj(328))|0);
 $2=($1|0)==0;
 if ($2) {
  $6=0;
 } else {
  $4=$1;
  __ZN8Vgm_FileC1Ev($4);
  $6=$4;
 }
 $7=$6;
 return (($7)|0);
}
function __ZN7Vgm_Emu10set_tempo_Ed($this,$t){
 $this=($this)|0;
 $t=+($t);
 var $1=0,$2=0,$3=0,$5=.0,$6=.0,$7=0,$8=0,$9=.0,$10=.0,$11=0,$12=.0,$13=.0,$14=.0,$15=.0,$16=0,$17=0,$18=0,$19=.0,$20=.0,$21=0;
 var $22=.0,$23=.0,$24=.0,$25=.0,$26=0,$27=0,$28=0,label=0;
 $1=(($this+3416)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 }
 $5=($t)*((44100.0));
 $6=($5)+((0.5));
 $7=(~~($6));
 $8=(($this+3420)|0);
 HEAP32[(($8)>>2)]=$7;
 $9=(+((($7|0))|0));
 $10=((4096.0))/($9);
 $11=((HEAP32[(($1)>>2)])|0);
 $12=(+((($11|0))|0));
 $13=($10)*($12);
 $14=($13)+((0.5));
 $15=(+(Math_floor($14)));
 $16=(~~($15));
 $17=(($this+1136)|0);
 HEAP32[(($17)>>2)]=$16;
 $18=(($this+3408)|0);
 $19=(+(HEAPF64[(($18)>>3)]));
 $20=($19)*((4096.0));
 $21=((HEAP32[(($8)>>2)])|0);
 $22=(+((($21|0))|0));
 $23=($20)/($22);
 $24=($23)+((0.5));
 $25=(+(Math_floor($24)));
 $26=(~~($25));
 $27=((($26)+(2))|0);
 $28=(($this+1132)|0);
 HEAP32[(($28)>>2)]=$27;
 return;
}
function __ZN7Vgm_Emu16set_sample_rate_El($this,$sample_rate){
 $this=($this)|0;
 $sample_rate=($sample_rate)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$_0=0,label=0;
 $1=(($this+1200)|0);
 $2=((__ZN11Blip_Buffer15set_sample_rateEli($1,$sample_rate,33))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this)|0);
 $6=((__ZN11Classic_Emu16set_sample_rate_El($5,$sample_rate))|0);
 $_0=$6;
 return (($_0)|0);
}
function __ZN7Vgm_Emu9update_eqERK9blip_eq_t($this,$eq){
 $this=($this)|0;
 $eq=($eq)|0;
 var $1=0,$2=0,label=0;
 $1=(($this+1248)|0);
 __ZN7Sms_Apu9treble_eqERK9blip_eq_t($1,$eq);
 $2=(($this+2848)|0);
 __ZN10Blip_SynthILi8ELi1EE9treble_eqERK9blip_eq_t($2,$eq);
 return;
}
function __ZN7Vgm_Emu9set_voiceEiP11Blip_BufferS1_S1_($this,$i,$c,$l,$r){
 $this=($this)|0;
 $i=($i)|0;
 $c=($c)|0;
 $l=($l)|0;
 $r=($r)|0;
 var $1=0,$3=0,label=0;
 $1=($i|0)<4;
 if (!($1)) {
  return;
 }
 $3=(($this+1248)|0);
 __ZN7Sms_Apu10osc_outputEiP11Blip_BufferS1_S1_($3,$i,$c,$l,$r);
 return;
}
function __ZN7Vgm_Emu12mute_voices_Ei($this,$mask){
 $this=($this)|0;
 $mask=($mask)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$_=0,$12=0,$13=0,$15=0,$16=0,$18=0,$19=.0,$20=.0,$22=.0,$23=0;
 var $25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$m_0=0,$32=0,$33=0,$34=0,$m_0_=0,$35=0,label=0;
 $1=(($this)|0);
 __ZN11Classic_Emu12mute_voices_Ei($1,$mask);
 $2=(($this+2848)|0);
 $3=(($this+1200)|0);
 __ZN10Blip_SynthILi8ELi1EE6outputEP11Blip_Buffer($2,$3);
 $4=(($this+3425)|0);
 $5=((HEAP8[($4)])|0);
 $6=$5&1;
 $7=(($6<<24)>>24)==0;
 if ($7) {
  return;
 }
 $9=(($this+1248)|0);
 $10=$mask&128;
 $11=($10|0)==0;
 $_=($11?$3:0);
 __ZN7Sms_Apu6outputEP11Blip_Buffer($9,$_);
 $12=(($this+1176)|0);
 $13=((__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($12))|0);
 if ($13) {
  $15=$mask&64;
  $16=($15|0)==0;
  if ($16) {
   $18=$this;
   $19=(+(__ZNK9Music_Emu4gainEv($18)));
   $20=($19)*((0.001306640625));
   $22=$20;
  } else {
   $22=0.0;
  }
  __ZN10Blip_SynthILi8ELi1EE6volumeEd($2,$22);
  $23=(($12)|0);
  __ZN10Ym2612_Emu11mute_voicesEi($23,$mask);
 }
 $25=(($this+1188)|0);
 $26=((__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($25))|0);
 if (!($26)) {
  return;
 }
 $28=$mask&63;
 $29=$mask&32;
 $30=($29|0)==0;
 $31=$28|480;
 $m_0=($30?$28:$31);
 $32=$mask&64;
 $33=($32|0)==0;
 $34=$m_0|15872;
 $m_0_=($33?$m_0:$34);
 $35=(($25)|0);
 __ZN10Ym2413_Emu11mute_voicesEi($35,$m_0_);
 return;
}
function __ZN10Blip_SynthILi8ELi1EE6outputEP11Blip_Buffer($this,$b){
 $this=($this)|0;
 $b=($b)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 HEAP32[(($1)>>2)]=$b;
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=0;
 return;
}
function __ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)!=-1;
 return (($3)|0);
}
function __ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)!=-1;
 return (($3)|0);
}
function __ZN7Vgm_Emu9load_mem_EPKhl($this,$new_data,$new_size){
 $this=($this)|0;
 $new_data=($new_data)|0;
 $new_size=($new_size)|0;
 var $1=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$_=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0;
 var $24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$_0=0,label=0;
 $1=($new_size|0)<65;
 if ($1) {
  $_0=16;
  return (($_0)|0);
 }
 $3=$new_data;
 $4=((__ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($3))|0);
 $5=($4|0)==0;
 if (!($5)) {
  $_0=$4;
  return (($_0)|0);
 }
 $7=(($new_data+12)|0);
 $8=((__Z8get_le32PKv($7))|0);
 $9=(($this+3416)|0);
 $10=($8|0)==0;
 $_=($10?3579545:$8);
 HEAP32[(($9)>>2)]=$_;
 $11=(($this+1200)|0);
 __ZN11Blip_Buffer10clock_rateEl($11,$_);
 $12=(($this+1140)|0);
 HEAP32[(($12)>>2)]=$new_data;
 $13=(($new_data+$new_size)|0);
 $14=(($this+1148)|0);
 HEAP32[(($14)>>2)]=$13;
 $15=(($this+1144)|0);
 HEAP32[(($15)>>2)]=$13;
 $16=(($new_data+28)|0);
 $17=((__Z8get_le32PKv($16))|0);
 $18=($17|0)==0;
 if (!($18)) {
  $20=((($17)+(28))|0);
  $21=((HEAP32[(($12)>>2)])|0);
  $22=(($21+$20)|0);
  HEAP32[(($15)>>2)]=$22;
 }
 $24=$this;
 __ZN9Music_Emu15set_voice_countEi($24,4);
 $25=((__ZN7Vgm_Emu8setup_fmEv($this))|0);
 $26=($25|0)==0;
 if (!($26)) {
  $_0=$25;
  return (($_0)|0);
 }
 $28=(($this+3425)|0);
 $29=((HEAP8[($28)])|0);
 $30=$29&1;
 $31=(($30<<24)>>24)!=0;
 $32=($31?9920:9904);
 __ZN9Music_Emu15set_voice_namesEPKPKc($24,$32);
 $33=(($this)|0);
 $34=((HEAP32[(($9)>>2)])|0);
 $35=((__ZN11Classic_Emu12setup_bufferEl($33,$34))|0);
 $_0=$35;
 return (($_0)|0);
}
function __ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($h){
 $h=($h)|0;
 var $1=0,$2=0,$3=0,$_=0,label=0;
 $1=(($h)|0);
 $2=((_memcmp((($1)|0),((5528)|0),((4)|0)))|0);
 $3=($2|0)==0;
 $_=($3?0:16);
 return (($_)|0);
}
function __ZN7Vgm_Emu8setup_fmEv($this){
 $this=($this)|0;
 var $ym2612_rate=0,$ym2413_rate=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$19=.0,$20=.0,$21=0;
 var $22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=.0,$32=.0,$34=0,$35=0,$36=.0,$37=0,$38=.0,$39=.0,$40=0,$41=.0,$42=.0,$43=.0,$44=0;
 var $45=0,$46=.0,$47=0,$48=.0,$49=0,$50=0,$53=0,$54=0,$55=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=.0,$67=.0,$69=0,$70=0;
 var $71=.0,$72=0,$73=.0,$74=.0,$75=0,$76=.0,$77=.0,$78=.0,$79=0,$80=0,$81=.0,$82=0,$83=.0,$84=0,$88=0,$89=0,$90=0,$92=0,$93=0,$94=0;
 var $95=0,$96=0,$97=0,$98=0,$99=0,$101=0,$102=0,$103=.0,$104=.0,$106=0,$107=0,$108=0,$109=0,$110=.0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $ym2612_rate=((sp)|0);
 $ym2413_rate=(((sp)+(8))|0);
 $1=((__ZNK7Vgm_Emu6headerEv($this))|0);
 $2=(($1+44)|0);
 $3=((__Z8get_le32PKv($2))|0);
 HEAP32[(($ym2612_rate)>>2)]=$3;
 $4=((__ZNK7Vgm_Emu6headerEv($this))|0);
 $5=(($4+16)|0);
 $6=((__Z8get_le32PKv($5))|0);
 HEAP32[(($ym2413_rate)>>2)]=$6;
 $7=($6|0)==0;
 do {
  if (!($7)) {
   $9=((__ZNK7Vgm_Emu6headerEv($this))|0);
   $10=(($9+8)|0);
   $11=((__Z8get_le32PKv($10))|0);
   $12=($11>>>0)<((272)>>>0);
   if (!($12)) {
    break;
   }
   $14=(($this)|0);
   __ZNK12Vgm_Emu_Impl15update_fm_ratesEPlS0_($14,$ym2413_rate,$ym2612_rate);
  }
 } while(0);
 $16=(($this+3425)|0);
 HEAP8[($16)]=0;
 $17=(($this+1200)|0);
 $18=((__ZNK11Blip_Buffer11sample_rateEv($17))|0);
 $19=(+((($18|0))|0));
 $20=($19)*((1.5));
 $21=(($this+3408)|0);
 HEAPF64[(($21)>>3)]=$20;
 $22=((HEAP32[(($ym2612_rate)>>2)])|0);
 $23=($22|0)==0;
 do {
  if (!($23)) {
   HEAP8[($16)]=1;
   $25=(($this+3424)|0);
   $26=((HEAP8[($25)])|0);
   $27=$26&1;
   $28=(($27<<24)>>24)==0;
   if (!($28)) {
    $30=((HEAP32[(($ym2612_rate)>>2)])|0);
    $31=(+((($30|0))|0));
    $32=($31)/((144.0));
    HEAPF64[(($21)>>3)]=$32;
   }
   $34=(($this+272)|0);
   $35=$34;
   $36=(+(HEAPF64[(($21)>>3)]));
   $37=((__ZNK11Blip_Buffer11sample_rateEv($17))|0);
   $38=(+((($37|0))|0));
   $39=($36)/($38);
   $40=$this;
   $41=(+(__ZNK9Music_Emu4gainEv($40)));
   $42=($41)*((3.0));
   $43=(+(__ZN14Dual_Resampler5setupEddd($35,$39,0.99,$42)));
   $44=(($this+1176)|0);
   $45=(($44)|0);
   $46=(+(HEAPF64[(($21)>>3)]));
   $47=((HEAP32[(($ym2612_rate)>>2)])|0);
   $48=(+((($47|0))|0));
   $49=((__ZN10Ym2612_Emu8set_rateEdd($45,$46,$48))|0);
   $50=($49|0)==0;
   if ($50) {
    __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($44,1);
    __ZN9Music_Emu15set_voice_countEi($40,8);
    break;
   } else {
    $_0=$49;
    STACKTOP=sp;return (($_0)|0);
   }
  }
 } while(0);
 $53=((HEAP8[($16)])|0);
 $54=$53&1;
 $55=(($54<<24)>>24)==0;
 do {
  if ($55) {
   $57=((HEAP32[(($ym2413_rate)>>2)])|0);
   $58=($57|0)==0;
   if ($58) {
    break;
   }
   HEAP8[($16)]=1;
   $60=(($this+3424)|0);
   $61=((HEAP8[($60)])|0);
   $62=$61&1;
   $63=(($62<<24)>>24)==0;
   if (!($63)) {
    $65=((HEAP32[(($ym2413_rate)>>2)])|0);
    $66=(+((($65|0))|0));
    $67=($66)/((72.0));
    HEAPF64[(($21)>>3)]=$67;
   }
   $69=(($this+272)|0);
   $70=$69;
   $71=(+(HEAPF64[(($21)>>3)]));
   $72=((__ZNK11Blip_Buffer11sample_rateEv($17))|0);
   $73=(+((($72|0))|0));
   $74=($71)/($73);
   $75=$this;
   $76=(+(__ZNK9Music_Emu4gainEv($75)));
   $77=($76)*((3.0));
   $78=(+(__ZN14Dual_Resampler5setupEddd($70,$74,0.99,$77)));
   $79=(($this+1188)|0);
   $80=(($79)|0);
   $81=(+(HEAPF64[(($21)>>3)]));
   $82=((HEAP32[(($ym2413_rate)>>2)])|0);
   $83=(+((($82|0))|0));
   $84=((__ZN10Ym2413_Emu8set_rateEdd($80,$81,$83))|0);
   if (((($84|0))|0)==((0)|0)) {
    __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($79,1);
    __ZN9Music_Emu15set_voice_countEi($75,8);
    break;
   } else if (((($84|0))|0)==((2)|0)) {
    $_0=6304;
    STACKTOP=sp;return (($_0)|0);
   } else {
    $_0=6032;
    STACKTOP=sp;return (($_0)|0);
   }
  }
 } while(0);
 $88=((HEAP8[($16)])|0);
 $89=$88&1;
 $90=(($89<<24)>>24)==0;
 if ($90) {
  $106=(($this+1176)|0);
  __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($106,0);
  $107=(($this+1188)|0);
  __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($107,0);
  $108=(($this+1248)|0);
  $109=$this;
  $110=(+(__ZNK9Music_Emu4gainEv($109)));
  __ZN7Sms_Apu6volumeEd($108,$110);
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $92=(($this+272)|0);
 $93=$92;
 $94=((__ZNK11Blip_Buffer6lengthEv($17))|0);
 $95=((__ZNK11Blip_Buffer11sample_rateEv($17))|0);
 $96=(Math_imul($95,$94)|0);
 $97=(((($96|0))/(1000))&-1);
 $98=((__ZN14Dual_Resampler5resetEi($93,$97))|0);
 $99=($98|0)==0;
 if (!($99)) {
  $_0=$98;
  STACKTOP=sp;return (($_0)|0);
 }
 $101=(($this+1248)|0);
 $102=$this;
 $103=(+(__ZNK9Music_Emu4gainEv($102)));
 $104=($103)*((0.405));
 __ZN7Sms_Apu6volumeEd($101,$104);
 $_0=0;
 STACKTOP=sp;return (($_0)|0);
}
function __ZN6Ym_EmuI10Ym2612_EmuE6enableEb($this,$b){
 $this=($this)|0;
 $b=($b)|0;
 var $not_b=0,$1=0,$2=0,label=0;
 $not_b=$b^1;
 $1=(($not_b<<31)>>31);
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$1;
 return;
}
function __ZN6Ym_EmuI10Ym2413_EmuE6enableEb($this,$b){
 $this=($this)|0;
 $b=($b)|0;
 var $not_b=0,$1=0,$2=0,label=0;
 $not_b=$b^1;
 $1=(($not_b<<31)>>31);
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=$1;
 return;
}
function __ZN7Vgm_Emu12start_track_Ei($this,$track){
 $this=($this)|0;
 $track=($track)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$43=0,$45=0,$46=0,$48=0;
 var $50=0,$51=0,$52=0,$53=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((__ZN11Classic_Emu12start_track_Ei($1,$track))|0);
 $3=($2|0)==0;
 if (!($3)) {
  $_0=$2;
  return (($_0)|0);
 }
 $5=(($this+1248)|0);
 $6=((__ZNK7Vgm_Emu6headerEv($this))|0);
 $7=(($6+40)|0);
 $8=((__Z8get_le16PKv($7))|0);
 $9=(($6+42)|0);
 $10=((HEAP8[($9)])|0);
 $11=($10&255);
 __ZN7Sms_Apu5resetEji($5,$8,$11);
 $12=(($this+1172)|0);
 HEAP32[(($12)>>2)]=-1;
 $13=(($this+1140)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+64)|0);
 $16=(($this+1156)|0);
 HEAP32[(($16)>>2)]=$15;
 $17=(($this+1160)|0);
 HEAP32[(($17)>>2)]=$15;
 $18=((HEAP32[(($16)>>2)])|0);
 $19=(($this+1164)|0);
 HEAP32[(($19)>>2)]=$18;
 $20=(($this+1168)|0);
 HEAP32[(($20)>>2)]=-1;
 $21=(($this+1152)|0);
 HEAP32[(($21)>>2)]=0;
 $22=((__ZNK7Vgm_Emu6headerEv($this))|0);
 $23=(($22+8)|0);
 $24=((__Z8get_le32PKv($23))|0);
 $25=($24>>>0)>((335)>>>0);
 do {
  if ($25) {
   $27=(($22+52)|0);
   $28=((__Z8get_le32PKv($27))|0);
   $29=($28|0)==0;
   if ($29) {
    break;
   }
   $31=((($28)-(12))|0);
   $32=((HEAP32[(($16)>>2)])|0);
   $33=(($32+$31)|0);
   HEAP32[(($16)>>2)]=$33;
  }
 } while(0);
 $35=(($this+3425)|0);
 $36=((HEAP8[($35)])|0);
 $37=$36&1;
 $38=(($37<<24)>>24)==0;
 if ($38) {
  $_0=0;
  return (($_0)|0);
 }
 $40=(($this+1188)|0);
 $41=((__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($40))|0);
 if ($41) {
  $43=(($40)|0);
  __ZN10Ym2413_Emu5resetEv($43);
 }
 $45=(($this+1176)|0);
 $46=((__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($45))|0);
 if ($46) {
  $48=(($45)|0);
  __ZN10Ym2612_Emu5resetEv($48);
 }
 $50=(($this+1128)|0);
 HEAP32[(($50)>>2)]=0;
 $51=(($this+1200)|0);
 __ZN11Blip_Buffer5clearEi($51,1);
 $52=(($this+272)|0);
 $53=$52;
 __ZN14Dual_Resampler5clearEv($53);
 $_0=0;
 return (($_0)|0);
}
function __ZN7Vgm_Emu10run_clocksERii($this,$time_io,$msec){
 $this=($this)|0;
 $time_io=($time_io)|0;
 $msec=($msec)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this)|0);
 $2=(($this+3420)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(Math_imul($3,$msec)|0);
 $5=(((($4|0))/(1000))&-1);
 $6=((__ZN12Vgm_Emu_Impl12run_commandsEi($1,$5))|0);
 HEAP32[(($time_io)>>2)]=$6;
 $7=(($this+1248)|0);
 __ZN7Sms_Apu9end_frameEi($7,$6);
 return ((0)|0);
}
function __ZN7Vgm_Emu5play_ElPs($this,$count,$out){
 $this=($this)|0;
 $count=($count)|0;
 $out=($out)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,$_0=0,label=0;
 $1=(($this+3425)|0);
 $2=((HEAP8[($1)])|0);
 $3=$2&1;
 $4=(($3<<24)>>24)==0;
 if ($4) {
  $6=(($this)|0);
  $7=((__ZN11Classic_Emu5play_ElPs($6,$count,$out))|0);
  $_0=$7;
  return (($_0)|0);
 } else {
  $9=(($this+272)|0);
  $10=$9;
  $11=(($this+1200)|0);
  __ZN14Dual_Resampler9dual_playElPsR11Blip_Buffer($10,$count,$out,$11);
  $_0=0;
  return (($_0)|0);
 }
  return 0;
}
function __ZN8Vgm_FileC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Vgm_FileC2Ev($this);
 return;
}
function __ZN8Vgm_FileC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=$this;
 __ZN9Gme_Info_C2Ev($1);
 $2=$this;
 HEAP32[(($2)>>2)]=12352;
 $3=(($this+316)|0);
 __ZN13blargg_vectorIhEC1Ev($3);
 $4=$this;
 __ZN8Gme_File8set_typeEPK11gme_type_t_($4,80);
 return;
}
function __ZN8Vgm_FileD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN8Vgm_FileD2Ev($this);
 return;
}
function __ZN8Vgm_FileD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN8Vgm_FileD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZN8Vgm_File5load_ER11Data_Reader($this,$in){
 $this=($this)|0;
 $in=($in)|0;
 var $gd3_h=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$20=0,$21=0,$22=0;
 var $23=0,$_neg=0,$24=0,$25=0,$26=0,$or_cond=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0;
 var $45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $gd3_h=((sp)|0);
 $1=$in;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+16)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((FUNCTION_TABLE_ii[($4)&31]($in))|0);
 $6=($5|0)<65;
 if ($6) {
  $_0=16;
  STACKTOP=sp;return (($_0)|0);
 }
 $8=$in;
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+12)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($this+252)|0);
 $13=(($12)|0);
 $14=((FUNCTION_TABLE_iiii[($11)&127]($in,$13,64))|0);
 $15=($14|0)==0;
 if (!($15)) {
  $_0=$14;
  STACKTOP=sp;return (($_0)|0);
 }
 $17=((__ZL16check_vgm_headerRKN7Vgm_Emu8header_tE($12))|0);
 $18=($17|0)==0;
 if (!($18)) {
  $_0=$17;
  STACKTOP=sp;return (($_0)|0);
 }
 $20=(($this+272)|0);
 $21=((__Z8get_le32PKv($20))|0);
 $22=((($21)-(44))|0);
 $23=((($5)-(64))|0);
 $_neg=(((44)-($21))|0);
 $24=((($23)+($_neg))|0);
 $25=($22|0)>0;
 $26=($24|0)>11;
 $or_cond=$25|$26;
 do {
  if ($or_cond) {
   $28=$in;
   $29=((HEAP32[(($28)>>2)])|0);
   $30=(($29+20)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=((FUNCTION_TABLE_iii[($31)&127]($in,$22))|0);
   $33=($32|0)==0;
   if (!($33)) {
    $_0=$32;
    STACKTOP=sp;return (($_0)|0);
   }
   $35=((HEAP32[(($8)>>2)])|0);
   $36=(($35+12)|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $38=(($gd3_h)|0);
   $39=((FUNCTION_TABLE_iiii[($37)&127]($in,$38,12))|0);
   $40=($39|0)==0;
   if (!($40)) {
    $_0=$39;
    STACKTOP=sp;return (($_0)|0);
   }
   $42=((__ZL16check_gd3_headerPKhl($38,$24))|0);
   $43=($42|0)==0;
   if ($43) {
    break;
   }
   $45=(($this+316)|0);
   $46=((__ZN13blargg_vectorIhE6resizeEj($45,$42))|0);
   $47=($46|0)==0;
   if (!($47)) {
    $_0=$46;
    STACKTOP=sp;return (($_0)|0);
   }
   $49=((HEAP32[(($8)>>2)])|0);
   $50=(($49+12)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=((__ZNK13blargg_vectorIhE5beginEv($45))|0);
   $53=((__ZNK13blargg_vectorIhE4sizeEv($45))|0);
   $54=((FUNCTION_TABLE_iiii[($51)&127]($in,$52,$53))|0);
   $55=($54|0)==0;
   if ($55) {
    break;
   } else {
    $_0=$54;
   }
   STACKTOP=sp;return (($_0)|0);
  }
 } while(0);
 $_0=0;
 STACKTOP=sp;return (($_0)|0);
}
function __ZNK8Vgm_File11track_info_EP12track_info_ti($this,$out,$0){
 $this=($this)|0;
 $out=($out)|0;
 $0=($0)|0;
 var $2=0,$3=0,$4=0,$5=0,$7=0,$8=0,label=0;
 $2=(($this+252)|0);
 __ZL14get_vgm_lengthRKN7Vgm_Emu8header_tEP12track_info_t($2,$out);
 $3=(($this+316)|0);
 $4=((__ZNK13blargg_vectorIhE4sizeEv($3))|0);
 $5=($4|0)==0;
 if ($5) {
  return ((0)|0);
 }
 $7=((__ZNK13blargg_vectorIhE5beginEv($3))|0);
 $8=((__ZNK13blargg_vectorIhE3endEv($3))|0);
 __ZL9parse_gd3PKhS0_P12track_info_t($7,$8,$out);
 return ((0)|0);
}
function __ZN8Vgm_FileD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=$this;
 HEAP32[(($1)>>2)]=12352;
 $2=(($this+316)|0);
 __ZN13blargg_vectorIhED1Ev($2);
 $3=$this;
 __ZN9Gme_Info_D2Ev($3);
 return;
}
function __ZL12get_gd3_pairPKhS0_Pc($in,$end,$field){
 $in=($in)|0;
 $end=($end)|0;
 $field=($field)|0;
 var $1=0,$2=0,label=0;
 $1=((__ZL11get_gd3_strPKhS0_Pc($in,$end,$field))|0);
 $2=((__ZL12skip_gd3_strPKhS0_($1,$end))|0);
 return (($2)|0);
}
function __ZL11get_gd3_strPKhS0_Pc($in,$end,$field){
 $in=($in)|0;
 $end=($end)|0;
 $field=($field)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$i_015=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$_off0=0,$21=0;
 var $22=0,$23=0,label=0;
 $1=((__ZL12skip_gd3_strPKhS0_($in,$end))|0);
 $2=$1;
 $3=$in;
 $4=((($2)-($3))|0);
 $5=(((($4|0))/(2))&-1);
 $6=((($5)-(1))|0);
 $7=($6|0)>0;
 if (!($7)) {
  return (($1)|0);
 }
 $9=((__Z3minIiET_S0_S0_($6,255))|0);
 $10=(($field+$9)|0);
 HEAP8[($10)]=0;
 $11=($9|0)>0;
 if ($11) {
  $i_015=0;
 } else {
  return (($1)|0);
 }
 while(1) {
  $12=$i_015<<1;
  $13=$12|1;
  $14=(($in+$13)|0);
  $15=((HEAP8[($14)])|0);
  $16=(($15<<24)>>24)==0;
  if ($16) {
   $18=(($in+$12)|0);
   $19=((HEAP8[($18)])|0);
   $_off0=$19;
  } else {
   $_off0=63;
  }
  $21=(($field+$i_015)|0);
  HEAP8[($21)]=$_off0;
  $22=((($i_015)+(1))|0);
  $23=($22|0)<($9|0);
  if ($23) {
   $i_015=$22;
  } else {
   break;
  }
 }
 return (($1)|0);
}
function __ZL12skip_gd3_strPKhS0_($in,$end){
 $in=($in)|0;
 $end=($end)|0;
 var $1=0,$_0=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_1=0,label=0;
 $1=$end;
 $_0=$in;
 while(1) {
  $3=$_0;
  $4=((($1)-($3))|0);
  $5=($4|0)>1;
  if (!($5)) {
   $_1=$_0;
   label = 181;
   break;
  }
  $7=(($_0+2)|0);
  $8=((HEAP8[($_0)])|0);
  $9=(($_0+1)|0);
  $10=((HEAP8[($9)])|0);
  $11=$10|$8;
  $12=(($11<<24)>>24)==0;
  if ($12) {
   $_1=$7;
   label = 182;
   break;
  } else {
   $_0=$7;
  }
 }
 if ((label|0) == 182) {
  return (($_1)|0);
 }
 else if ((label|0) == 181) {
  return (($_1)|0);
 }
  return 0;
}
function __ZN6Ym_EmuI10Ym2413_EmuED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN6Ym_EmuI10Ym2413_EmuED2Ev($this);
 return;
}
function __ZN6Ym_EmuI10Ym2612_EmuED1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN6Ym_EmuI10Ym2612_EmuED2Ev($this);
 return;
}
function __ZN6Ym_EmuI10Ym2612_EmuED2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN10Ym2612_EmuD2Ev($1);
 return;
}
function __ZN6Ym_EmuI10Ym2413_EmuED2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZN10Ym2413_EmuD2Ev($1);
 return;
}
function __ZN6Ym_EmuI10Ym2612_EmuEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN6Ym_EmuI10Ym2612_EmuEC2Ev($this);
 return;
}
function __ZN6Ym_EmuI10Ym2413_EmuEC1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN6Ym_EmuI10Ym2413_EmuEC2Ev($this);
 return;
}
function __ZN6Ym_EmuI10Ym2413_EmuEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 __ZN10Ym2413_EmuC2Ev($1);
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=-1;
 $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN6Ym_EmuI10Ym2612_EmuEC2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 __ZN10Ym2612_EmuC2Ev($1);
 $2=(($this+4)|0);
 HEAP32[(($2)>>2)]=-1;
 $3=(($this+8)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}
function __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time,$amp){
 $this=($this)|0;
 $vgm_time=($vgm_time)|0;
 $amp=($amp)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,label=0;
 $1=((__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time))|0);
 $2=(($this+1168)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 HEAP32[(($2)>>2)]=$amp;
 $4=($3|0)>-1;
 if ($4) {
  $6=((($amp)-($3))|0);
  $7=(($this+2848)|0);
  $8=(($this+1200)|0);
  __ZNK10Blip_SynthILi8ELi1EE13offset_inlineEiiP11Blip_Buffer($7,$1,$6,$8);
  return;
 } else {
  $10=(($this+1172)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=$11|$amp;
  HEAP32[(($2)>>2)]=$12;
  return;
 }
}
function __ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 $1=(($this+1136)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=$3>>12;
 return (($4)|0);
}
function __ZN12Vgm_Emu_Impl12run_commandsEi($this,$end_time){
 $this=($this)|0;
 $end_time=($end_time)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$vgm_time_064=0,$pos_062=0,$32=0,$33=0,$35=0,$36=0,$37=0,$39=0,$41=0,$43=0,$45=0,$46=0;
 var $47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0,$70=0;
 var $71=0,$72=0,$74=0,$75=0,$76=0,$77=0,$78=0,$80=0,$82=0,$83=0,$85=0,$86=0,$87=0,$89=0,$90=0,$91=0,$93=0,$94=0,$96=0,$97=0;
 var $98=0,$99=0,$100=0,$101=0,$102=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0,$112=0,$113=0,$114=0,$116=0,$117=0,$118=0,$119=0,$120=0,$122=0;
 var $124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$_sum60=0,$132=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$_sum=0,$143=0,$144=0;
 var $145=0,$146=0,$_sum58=0,$147=0,$148=0,$_sum59=0,$149=0,$150=0,$152=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$pos_0_be=0,$vgm_time_0_be=0,$160=0,$162=0,$163=0;
 var $164=0,$166=0,$168=0,$169=0,$vgm_time_0_lcssa=0,$pos_0_lcssa=0,$170=0,$171=0,label=0;
 $1=(($this+1152)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($this+1156)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($this+1148)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($4>>>0)<($6>>>0);
 do {
  if (!($7)) {
   $9=$this;
   __ZN9Music_Emu15set_track_endedEv($9);
   $10=((HEAP32[(($5)>>2)])|0);
   $11=($4>>>0)>($10>>>0);
   if (!($11)) {
    break;
   }
   $13=$this;
   __ZN8Gme_File11set_warningEPKc($13,1712);
  }
 } while(0);
 $14=($2|0)<($end_time|0);
 if (!($14)) {
  $pos_0_lcssa=$4;$vgm_time_0_lcssa=$2;
  $170=((($vgm_time_0_lcssa)-($end_time))|0);
  HEAP32[(($3)>>2)]=$pos_0_lcssa;
  HEAP32[(($1)>>2)]=$170;
  $171=((__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$end_time))|0);
  return (($171)|0);
 }
 $15=$this;
 $16=(($this+1164)|0);
 $17=(($this+1144)|0);
 $18=(($this+1248)|0);
 $19=(($this+1248)|0);
 $20=(($this+1188)|0);
 $21=(($20)|0);
 $22=(($this+1176)|0);
 $23=(($this+1172)|0);
 $24=(($this+1168)|0);
 $25=(($22)|0);
 $26=(($this+1176)|0);
 $27=(($26)|0);
 $28=(($this+1160)|0);
 $29=(($this+1160)|0);
 $30=(($this+1164)|0);
 $pos_062=$4;$vgm_time_064=$2;
 while(1) {
  $32=((HEAP32[(($5)>>2)])|0);
  $33=($pos_062>>>0)<($32>>>0);
  if (!($33)) {
   $pos_0_lcssa=$pos_062;$vgm_time_0_lcssa=$vgm_time_064;
   label = 237;
   break;
  }
  $35=(($pos_062+1)|0);
  $36=((HEAP8[($pos_062)])|0);
  $37=($36&255);
  L238: do {
   switch (($37|0)) {
   case 99: {
    $43=((($vgm_time_064)+(882))|0);
    $vgm_time_0_be=$43;$pos_0_be=$35;
    break;
   }
   case 79: {
    $45=((__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time_064))|0);
    $46=(($pos_062+2)|0);
    $47=((HEAP8[($35)])|0);
    $48=($47&255);
    __ZN7Sms_Apu14write_ggstereoEii($18,$45,$48);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$46;
    break;
   }
   case 83: {
    $112=((__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time_064))|0);
    $113=((__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($26,$112))|0);
    $114=($113|0)==0;
    if (!($114)) {
     $116=((HEAP8[($35)])|0);
     $117=($116&255);
     $118=(($pos_062+2)|0);
     $119=((HEAP8[($118)])|0);
     $120=($119&255);
     __ZN10Ym2612_Emu6write1Eii($27,$117,$120);
    }
    $122=(($pos_062+3)|0);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$122;
    break;
   }
   case 103: {
    $124=(($pos_062+2)|0);
    $125=((HEAP8[($124)])|0);
    $126=(($pos_062+3)|0);
    $127=((__Z8get_le32PKv($126))|0);
    $128=(($125<<24)>>24)==0;
    if ($128) {
     $130=(($pos_062+7)|0);
     HEAP32[(($28)>>2)]=$130;
    }
    $_sum60=((($127)+(7))|0);
    $132=(($pos_062+$_sum60)|0);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$132;
    break;
   }
   case 98: {
    $41=((($vgm_time_064)+(735))|0);
    $vgm_time_0_be=$41;$pos_0_be=$35;
    break;
   }
   case 97: {
    $55=(($pos_062+2)|0);
    $56=((HEAP8[($55)])|0);
    $57=($56&255);
    $58=$57<<8;
    $59=((HEAP8[($35)])|0);
    $60=($59&255);
    $61=$58|$60;
    $62=((($61)+($vgm_time_064))|0);
    $63=(($pos_062+3)|0);
    $vgm_time_0_be=$62;$pos_0_be=$63;
    break;
   }
   case 82: {
    $82=((HEAP8[($35)])|0);
    $83=(($82<<24)>>24)==42;
    do {
     if ($83) {
      $85=(($pos_062+2)|0);
      $86=((HEAP8[($85)])|0);
      $87=($86&255);
      __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time_064,$87);
     } else {
      $89=((__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time_064))|0);
      $90=((__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($22,$89))|0);
      $91=($90|0)==0;
      if ($91) {
       break;
      }
      $93=((HEAP8[($35)])|0);
      $94=(($93<<24)>>24)==43;
      if ($94) {
       $96=(($pos_062+2)|0);
       $97=((HEAP8[($96)])|0);
       $98=($97&255);
       $99=$98>>>7;
       $100=((($99)-(1))|0);
       HEAP32[(($23)>>2)]=$100;
       $101=((HEAP32[(($24)>>2)])|0);
       $102=$100|$101;
       HEAP32[(($24)>>2)]=$102;
      }
      $104=((HEAP8[($35)])|0);
      $105=($104&255);
      $106=(($pos_062+2)|0);
      $107=((HEAP8[($106)])|0);
      $108=($107&255);
      __ZN10Ym2612_Emu6write0Eii($25,$105,$108);
     }
    } while(0);
    $110=(($pos_062+3)|0);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$110;
    break;
   }
   case 102: {
    $39=((HEAP32[(($17)>>2)])|0);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$39;
    break;
   }
   case 81: {
    $70=((__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time_064))|0);
    $71=((__ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($20,$70))|0);
    $72=($71|0)==0;
    if (!($72)) {
     $74=((HEAP8[($35)])|0);
     $75=($74&255);
     $76=(($pos_062+2)|0);
     $77=((HEAP8[($76)])|0);
     $78=($77&255);
     __ZN10Ym2413_Emu5writeEii($21,$75,$78);
    }
    $80=(($pos_062+3)|0);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$80;
    break;
   }
   case 80: {
    $50=((__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$vgm_time_064))|0);
    $51=(($pos_062+2)|0);
    $52=((HEAP8[($35)])|0);
    $53=($52&255);
    __ZN7Sms_Apu10write_dataEii($19,$50,$53);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$51;
    break;
   }
   case 100: {
    $65=(($pos_062+2)|0);
    $66=((HEAP8[($35)])|0);
    $67=($66&255);
    $68=((($67)+($vgm_time_064))|0);
    $vgm_time_0_be=$68;$pos_0_be=$65;
    break;
   }
   case 224: {
    $134=((HEAP32[(($29)>>2)])|0);
    $135=(($pos_062+4)|0);
    $136=((HEAP8[($135)])|0);
    $137=($136&255);
    $138=$137<<24;
    $139=(($pos_062+3)|0);
    $140=((HEAP8[($139)])|0);
    $141=($140&255);
    $142=$141<<16;
    $_sum=$142|$138;
    $143=(($pos_062+2)|0);
    $144=((HEAP8[($143)])|0);
    $145=($144&255);
    $146=$145<<8;
    $_sum58=$_sum|$146;
    $147=((HEAP8[($35)])|0);
    $148=($147&255);
    $_sum59=$_sum58|$148;
    $149=(($134+$_sum59)|0);
    HEAP32[(($30)>>2)]=$149;
    $150=(($pos_062+5)|0);
    $vgm_time_0_be=$vgm_time_064;$pos_0_be=$150;
    break;
   }
   default: {
    $152=$37&240;
    if (((($152|0))|0)==((128)|0)) {
     $154=((HEAP32[(($16)>>2)])|0);
     $155=(($154+1)|0);
     HEAP32[(($16)>>2)]=$155;
     $156=((HEAP8[($154)])|0);
     $157=($156&255);
     __ZN12Vgm_Emu_Impl9write_pcmEii($this,$vgm_time_064,$157);
     $158=$37&15;
     $159=((($158)+($vgm_time_064))|0);
     $vgm_time_0_be=$159;$pos_0_be=$35;
     break L238;
    } else if (((($152|0))|0)==((112)|0)) {
     $162=$37&15;
     $163=((($vgm_time_064)+(1))|0);
     $164=((($163)+($162))|0);
     $vgm_time_0_be=$164;$pos_0_be=$35;
     break L238;
    } else if (((($152|0))|0)==((80)|0)) {
     $166=(($pos_062+3)|0);
     $vgm_time_0_be=$vgm_time_064;$pos_0_be=$166;
     break L238;
    } else {
     $168=((__Z11command_leni($37))|0);
     $169=(($pos_062+$168)|0);
     __ZN8Gme_File11set_warningEPKc($15,6048);
     $vgm_time_0_be=$vgm_time_064;$pos_0_be=$169;
     break L238;
    }
   }
   }
  } while(0);
  $160=($vgm_time_0_be|0)<($end_time|0);
  if ($160) {
   $pos_062=$pos_0_be;$vgm_time_064=$vgm_time_0_be;
  } else {
   $pos_0_lcssa=$pos_0_be;$vgm_time_0_lcssa=$vgm_time_0_be;
   label = 238;
   break;
  }
 }
 if ((label|0) == 237) {
  $170=((($vgm_time_0_lcssa)-($end_time))|0);
  HEAP32[(($3)>>2)]=$pos_0_lcssa;
  HEAP32[(($1)>>2)]=$170;
  $171=((__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$end_time))|0);
  return (($171)|0);
 }
 else if ((label|0) == 238) {
  $170=((($vgm_time_0_lcssa)-($end_time))|0);
  HEAP32[(($3)>>2)]=$pos_0_lcssa;
  HEAP32[(($1)>>2)]=$170;
  $171=((__ZNK12Vgm_Emu_Impl12to_blip_timeEi($this,$end_time))|0);
  return (($171)|0);
 }
  return 0;
}
function __ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($time)-($2))|0);
 $4=($3|0)>0;
 if (!($4)) {
  $_0=1;
  return (($_0)|0);
 }
 $6=($2|0)<0;
 if ($6) {
  $_0=0;
  return (($_0)|0);
 }
 HEAP32[(($1)>>2)]=$time;
 $8=(($this+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$3<<1;
 $11=(($9+($10<<1))|0);
 HEAP32[(($8)>>2)]=$11;
 $12=(($this)|0);
 __ZN10Ym2413_Emu3runEiPs($12,$3,$9);
 $_0=1;
 return (($_0)|0);
}
function __ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$t){
 $this=($this)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;
 $1=(($this+1132)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(Math_imul($2,$t)|0);
 $4=(($this+1128)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($3)+($5))|0);
 $7=$6>>12;
 return (($7)|0);
}
function __ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($this,$time){
 $this=($this)|0;
 $time=($time)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;
 $1=(($this+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($time)-($2))|0);
 $4=($3|0)>0;
 if (!($4)) {
  $_0=1;
  return (($_0)|0);
 }
 $6=($2|0)<0;
 if ($6) {
  $_0=0;
  return (($_0)|0);
 }
 HEAP32[(($1)>>2)]=$time;
 $8=(($this+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$3<<1;
 $11=(($9+($10<<1))|0);
 HEAP32[(($8)>>2)]=$11;
 $12=(($this)|0);
 __ZN10Ym2612_Emu3runEiPs($12,$3,$9);
 $_0=1;
 return (($_0)|0);
}
function __Z11command_leni($command){
 $command=($command)|0;
 var $1=0,$_0=0,label=0;
 $1=$command>>4;
 switch (($1|0)) {
 case 14:case 15: {
  $_0=5;
  break;
 }
 case 5:case 10:case 11: {
  $_0=3;
  break;
 }
 case 3:case 4: {
  $_0=2;
  break;
 }
 case 12:case 13: {
  $_0=4;
  break;
 }
 default: {
  $_0=1;
 }
 }
 return (($_0)|0);
}
function __ZN12Vgm_Emu_Impl10play_frameEiiPs($this,$blip_time,$sample_count,$buf){
 $this=($this)|0;
 $blip_time=($blip_time)|0;
 $sample_count=($sample_count)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$vgm_time_0=0,$10=0,$11=0,$12=0,$14=0,$15=0,$17=0,$18=0,$20=0,$21=0,$24=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,label=0;
 $1=$sample_count>>1;
 $2=$1<<12;
 $3=(($this+1132)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(((($2|0))/(($4|0)))&-1);
 $6=((($5)-(1))|0);
 $7=((__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$6))|0);
 $8=($7|0)>($1|0);
 if ($8) {
  ___assert_fail(((4224)|0),((3304)|0),((243)|0),((9376)|0));
  return ((0)|0);
 } else {
  $vgm_time_0=$6;
 }
 while(1) {
  $10=((__ZNK12Vgm_Emu_Impl10to_fm_timeEi($this,$vgm_time_0))|0);
  $11=($10|0)<($1|0);
  $12=((($vgm_time_0)+(1))|0);
  if ($11) {
   $vgm_time_0=$12;
  } else {
   break;
  }
 }
 $14=(($this+1176)|0);
 $15=((__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($14))|0);
 do {
  if ($15) {
   __ZN6Ym_EmuI10Ym2612_EmuE11begin_frameEPs($14,$buf);
   $17=$buf;
   $18=$10<<2;
   _memset((((($17)|0))|0), ((((0)|0))|0), (((($18)|0))|0));
  } else {
   $20=(($this+1188)|0);
   $21=((__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($20))|0);
   if (!($21)) {
    break;
   }
   __ZN6Ym_EmuI10Ym2413_EmuE11begin_frameEPs($20,$buf);
  }
 } while(0);
 $24=((__ZN12Vgm_Emu_Impl12run_commandsEi($this,$vgm_time_0))|0);
 $25=((__ZN6Ym_EmuI10Ym2612_EmuE9run_untilEi($14,$10))|0);
 $26=(($this+1188)|0);
 $27=((__ZN6Ym_EmuI10Ym2413_EmuE9run_untilEi($26,$10))|0);
 $28=((HEAP32[(($3)>>2)])|0);
 $29=(Math_imul($28,$vgm_time_0)|0);
 $30=(($this+1128)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=$10<<12;
 $33=((($31)-($32))|0);
 $34=((($33)+($29))|0);
 HEAP32[(($30)>>2)]=$34;
 $35=(($this+1248)|0);
 __ZN7Sms_Apu9end_frameEi($35,$blip_time);
 $36=$10<<1;
 return (($36)|0);
}
function __ZN6Ym_EmuI10Ym2612_EmuE11begin_frameEPs($this,$p){
 $this=($this)|0;
 $p=($p)|0;
 var $1=0,$4=0,$5=0,label=0;
 $1=((__ZNK6Ym_EmuI10Ym2612_EmuE7enabledEv($this))|0);
 if ($1) {
  $4=(($this+8)|0);
  HEAP32[(($4)>>2)]=$p;
  $5=(($this+4)|0);
  HEAP32[(($5)>>2)]=0;
  return;
 } else {
  ___assert_fail(((2648)|0),((3304)|0),((72)|0),((9064)|0));
 }
}
function __ZN6Ym_EmuI10Ym2413_EmuE11begin_frameEPs($this,$p){
 $this=($this)|0;
 $p=($p)|0;
 var $1=0,$4=0,$5=0,label=0;
 $1=((__ZNK6Ym_EmuI10Ym2413_EmuE7enabledEv($this))|0);
 if ($1) {
  $4=(($this+8)|0);
  HEAP32[(($4)>>2)]=$p;
  $5=(($this+4)|0);
  HEAP32[(($5)>>2)]=0;
  return;
 } else {
  ___assert_fail(((2648)|0),((3304)|0),((72)|0),((9064)|0));
 }
}
function __ZThn272_N12Vgm_Emu_Impl10play_frameEiiPs($this,$blip_time,$sample_count,$buf){
 $this=($this)|0;
 $blip_time=($blip_time)|0;
 $sample_count=($sample_count)|0;
 $buf=($buf)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=((($this)-(272))|0);
 $2=$1;
 $3=((__ZN12Vgm_Emu_Impl10play_frameEiiPs($2,$blip_time,$sample_count,$buf))|0);
 return (($3)|0);
}
function __ZNK12Vgm_Emu_Impl15update_fm_ratesEPlS0_($this,$ym2413_rate,$ym2612_rate){
 $this=($this)|0;
 $ym2413_rate=($ym2413_rate)|0;
 $ym2612_rate=($ym2612_rate)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$p_014=0,$7=0,$8=0,$10=0,$12=0,$14=0,$15=0,$16=0,$17=0,$20=0,$23=0,$24=0,$p_0_be=0,$25=0;
 var $26=0,label=0;
 $1=(($this+1140)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+64)|0);
 $4=(($this+1148)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)<($5>>>0);
 if ($6) {
  $p_014=$3;
 } else {
  return;
 }
 L325: while(1) {
  $7=((HEAP8[($p_014)])|0);
  $8=($7&255);
  switch (($8|0)) {
  case 102: {
   label = 291;
   break L325;
   break;
  }
  case 97: {
   $12=(($p_014+3)|0);
   $p_0_be=$12;
   break;
  }
  case 103: {
   $14=(($p_014+3)|0);
   $15=((__Z8get_le32PKv($14))|0);
   $16=((($15)+(7))|0);
   $17=(($p_014+$16)|0);
   $p_0_be=$17;
   break;
  }
  case 81: {
   label = 280;
   break L325;
   break;
  }
  case 82:case 83: {
   label = 281;
   break L325;
   break;
  }
  case 84: {
   label = 282;
   break L325;
   break;
  }
  case 80:case 100: {
   $10=(($p_014+2)|0);
   $p_0_be=$10;
   break;
  }
  default: {
   $23=((__Z11command_leni($8))|0);
   $24=(($p_014+$23)|0);
   $p_0_be=$24;
  }
  }
  $25=((HEAP32[(($4)>>2)])|0);
  $26=($p_0_be>>>0)<($25>>>0);
  if ($26) {
   $p_014=$p_0_be;
  } else {
   label = 289;
   break;
  }
 }
 if ((label|0) == 291) {
  return;
 }
 else if ((label|0) == 280) {
  HEAP32[(($ym2612_rate)>>2)]=0;
  return;
 }
 else if ((label|0) == 281) {
  $20=((HEAP32[(($ym2413_rate)>>2)])|0);
  HEAP32[(($ym2612_rate)>>2)]=$20;
  HEAP32[(($ym2413_rate)>>2)]=0;
  return;
 }
 else if ((label|0) == 282) {
  HEAP32[(($ym2413_rate)>>2)]=0;
  HEAP32[(($ym2612_rate)>>2)]=0;
  return;
 }
 else if ((label|0) == 289) {
  return;
 }
}
function __ZN12Vgm_Emu_ImplD1Ev($this){
 $this=($this)|0;
 var label=0;
 __ZN12Vgm_Emu_ImplD2Ev($this);
 return;
}
function __ZN12Vgm_Emu_ImplD0Ev($this){
 $this=($this)|0;
 var $2=0,$5=0,$4$0=0,$4$1=0,label=0;
 __ZN12Vgm_Emu_ImplD1Ev($this);
 $2=(($this)|0);
 __ZN8Gme_FiledlEPv($2);
 return;
}
function __ZThn272_N12Vgm_Emu_ImplD1Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=((($this)-(272))|0);
 $2=$1;
 __ZN12Vgm_Emu_ImplD1Ev($2);
 return;
}
function __ZThn272_N12Vgm_Emu_ImplD0Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=((($this)-(272))|0);
 $2=$1;
 __ZN12Vgm_Emu_ImplD0Ev($2);
 return;
}
function __ZN10Ym2413_EmuC2Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN10Ym2413_EmuD2Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN10Ym2413_Emu8set_rateEdd($this,$0,$1){
 $this=($this)|0;
 $0=+($0);
 $1=+($1);
 var label=0;
 return ((2)|0);
}
function __ZN10Ym2413_Emu5resetEv($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN10Ym2413_Emu5writeEii($this,$0,$1){
 $this=($this)|0;
 $0=($0)|0;
 $1=($1)|0;
 var label=0;
 return;
}
function __ZN10Ym2413_Emu11mute_voicesEi($this,$0){
 $this=($this)|0;
 $0=($0)|0;
 var label=0;
 return;
}
function __ZN10Ym2413_Emu3runEiPs($this,$0,$1){
 $this=($this)|0;
 $0=($0)|0;
 $1=($1)|0;
 var label=0;
 return;
}
function __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$ch,$nsl){
 $this=($this)|0;
 $ch=($ch)|0;
 $nsl=($nsl)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,label=0;
 $1=(($ch+88+((($nsl)*(116))&-1)+64)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==3;
 if (!($3)) {
  return;
 }
 $5=(($ch+88+((($nsl)*(116))&-1)+56)|0);
 HEAP32[(($5)>>2)]=0;
 $6=(($ch+88+((($nsl)*(116))&-1)+68)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$7>>16;
 $9=(($this+15772+($8<<1))|0);
 $10=((HEAP16[(($9)>>1)])|0);
 $11=(($10<<16)>>16);
 $12=(($this+134572+($11<<2))|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($ch+88+((($nsl)*(116))&-1)+104)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=$15&$13;
 HEAP32[(($6)>>2)]=$16;
 HEAP32[(($14)>>2)]=-1;
 $17=(($ch+88+((($nsl)*(116))&-1)+80)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($ch+88+((($nsl)*(116))&-1)+72)|0);
 HEAP32[(($19)>>2)]=$18;
 $20=(($ch+88+((($nsl)*(116))&-1)+76)|0);
 HEAP32[(($20)>>2)]=268435456;
 HEAP32[(($1)>>2)]=0;
 return;
}
function __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$ch,$nsl){
 $this=($this)|0;
 $ch=($ch)|0;
 $nsl=($nsl)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,label=0;
 $1=(($ch+88+((($nsl)*(116))&-1)+64)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==3;
 if ($3) {
  return;
 }
 $5=(($ch+88+((($nsl)*(116))&-1)+68)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)<268435456;
 if ($7) {
  $9=$6>>16;
  $10=(($this+15772+($9<<1))|0);
  $11=((HEAP16[(($10)>>1)])|0);
  $12=($11&65535);
  $13=$12<<16;
  $14=((($13)+(268435456))|0);
  HEAP32[(($5)>>2)]=$14;
 }
 $16=(($ch+88+((($nsl)*(116))&-1)+92)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($ch+88+((($nsl)*(116))&-1)+72)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($ch+88+((($nsl)*(116))&-1)+76)|0);
 HEAP32[(($19)>>2)]=536870912;
 HEAP32[(($1)>>2)]=3;
 return;
}
function __ZN11Ym2612_Impl8SLOT_SETEii($this,$Adr,$data){
 $this=($this)|0;
 $Adr=($Adr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$storemerge=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$39=0,$40=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,$50=0,$51=0,$53=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$63=0,$65=0,$66=0,$68=0,$69=0,$70=0,$72=0,$73=0;
 var $75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$86=0,$88=0,$89=0,$91=0,$92=0,$93=0,$95=0,$96=0,$98=0,$99=0;
 var $100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$109=0,$110=0,$111=0,$113=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0;
 var $123=0,$124=0,$125=0,$_sum=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$133=0,$134=0,$135=0,$137=0,$139=0,$140=0,$141=0,$_=0,$_0=0,label=0;
 $1=$Adr&3;
 $2=($1|0)==3;
 if ($2) {
  $_0=1;
  return (($_0)|0);
 }
 $4=$Adr&256;
 $5=($4|0)!=0;
 $6=($5?3:0);
 $7=((($6)+($1))|0);
 $8=$Adr>>>2;
 $9=$8&3;
 $10=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1))|0);
 $11=$Adr&240;
 switch (($11|0)) {
 case 128: {
  $115=$data>>4;
  $116=(($this+15548+($115<<2))|0);
  $117=((HEAP32[(($116)>>2)])|0);
  $118=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+16)|0);
  HEAP32[(($118)>>2)]=$117;
  $119=$data<<2;
  $120=$119&60;
  $121=$120|2;
  $122=(($this+14140+($121<<2))|0);
  $123=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+52)|0);
  HEAP32[(($123)>>2)]=$122;
  $124=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+24)|0);
  $125=((HEAP32[(($124)>>2)])|0);
  $_sum=((($125)+($121))|0);
  $126=(($this+14140+($_sum<<2))|0);
  $127=((HEAP32[(($126)>>2)])|0);
  $128=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+92)|0);
  HEAP32[(($128)>>2)]=$127;
  $129=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+64)|0);
  $130=((HEAP32[(($129)>>2)])|0);
  $131=($130|0)==3;
  if (!($131)) {
   $_0=0;
   return (($_0)|0);
  }
  $133=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+68)|0);
  $134=((HEAP32[(($133)>>2)])|0);
  $135=($134|0)<536870912;
  if (!($135)) {
   $_0=0;
   return (($_0)|0);
  }
  $137=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+72)|0);
  HEAP32[(($137)>>2)]=$127;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 48: {
  $13=$data&15;
  $14=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+4)|0);
  $15=($13|0)==0;
  $16=$13<<1;
  $storemerge=($15?1:$16);
  HEAP32[(($14)>>2)]=$storemerge;
  $17=$data>>>4;
  $18=$17&7;
  $19=(($this+14524+($18<<7))|0);
  $20=(($10)|0);
  HEAP32[(($20)>>2)]=$19;
  $21=(($this+40+((($7)*(556))&-1)+148)|0);
  HEAP32[(($21)>>2)]=-1;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 112: {
  $88=$data&31;
  $89=($88|0)==0;
  if ($89) {
   $95=(($this+15612)|0);
   $96=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+48)|0);
   HEAP32[(($96)>>2)]=$95;
  } else {
   $91=$88<<1;
   $92=(($this+14140+($91<<2))|0);
   $93=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+48)|0);
   HEAP32[(($93)>>2)]=$92;
  }
  $98=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+24)|0);
  $99=((HEAP32[(($98)>>2)])|0);
  $100=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+48)|0);
  $101=((HEAP32[(($100)>>2)])|0);
  $102=(($101+($99<<2))|0);
  $103=((HEAP32[(($102)>>2)])|0);
  $104=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+88)|0);
  HEAP32[(($104)>>2)]=$103;
  $105=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+64)|0);
  $106=((HEAP32[(($105)>>2)])|0);
  $107=($106|0)==2;
  if (!($107)) {
   $_0=0;
   return (($_0)|0);
  }
  $109=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+68)|0);
  $110=((HEAP32[(($109)>>2)])|0);
  $111=($110|0)<536870912;
  if (!($111)) {
   $_0=0;
   return (($_0)|0);
  }
  $113=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+72)|0);
  HEAP32[(($113)>>2)]=$103;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 64: {
  $23=$data&127;
  $24=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+8)|0);
  HEAP32[(($24)>>2)]=$23;
  $25=$23<<5;
  $26=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+12)|0);
  HEAP32[(($26)>>2)]=$25;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 80: {
  $28=$data>>6;
  $29=(((3)-($28))|0);
  $30=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+20)|0);
  HEAP32[(($30)>>2)]=$29;
  $31=(($this+40+((($7)*(556))&-1)+148)|0);
  HEAP32[(($31)>>2)]=-1;
  $32=$data&31;
  $33=($32|0)==0;
  if ($33) {
   $39=(($this+15612)|0);
   $40=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+40)|0);
   HEAP32[(($40)>>2)]=$39;
  } else {
   $35=$32<<1;
   $36=(($this+13628+($35<<2))|0);
   $37=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+40)|0);
   HEAP32[(($37)>>2)]=$36;
  }
  $42=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+24)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+40)|0);
  $45=((HEAP32[(($44)>>2)])|0);
  $46=(($45+($43<<2))|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+80)|0);
  HEAP32[(($48)>>2)]=$47;
  $49=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+64)|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=($50|0)==0;
  if (!($51)) {
   $_0=0;
   return (($_0)|0);
  }
  $53=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+72)|0);
  HEAP32[(($53)>>2)]=$47;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 96: {
  $55=$data&128;
  $56=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+112)|0);
  HEAP32[(($56)>>2)]=$55;
  $57=($55|0)==0;
  if ($57) {
   $63=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+108)|0);
   HEAP32[(($63)>>2)]=31;
  } else {
   $59=(($this+40+((($7)*(556))&-1)+36)|0);
   $60=((HEAP32[(($59)>>2)])|0);
   $61=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+108)|0);
   HEAP32[(($61)>>2)]=$60;
  }
  $65=$data&31;
  $66=($65|0)==0;
  if ($66) {
   $72=(($this+15612)|0);
   $73=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+44)|0);
   HEAP32[(($73)>>2)]=$72;
  } else {
   $68=$65<<1;
   $69=(($this+14140+($68<<2))|0);
   $70=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+44)|0);
   HEAP32[(($70)>>2)]=$69;
  }
  $75=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+24)|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $77=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+44)|0);
  $78=((HEAP32[(($77)>>2)])|0);
  $79=(($78+($76<<2))|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+84)|0);
  HEAP32[(($81)>>2)]=$80;
  $82=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+64)|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=($83|0)==1;
  if (!($84)) {
   $_0=0;
   return (($_0)|0);
  }
  $86=(($this+40+((($7)*(556))&-1)+88+((($9)*(116))&-1)+72)|0);
  HEAP32[(($86)>>2)]=$80;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 144: {
  $139=$data&8;
  $140=($139|0)==0;
  $141=$data&15;
  $_=($140?0:$141);
  __Z7set_segR6slot_ti($10,$_);
  $_0=0;
  return (($_0)|0);
  break;
 }
 default: {
  $_0=0;
  return (($_0)|0);
 }
 }
  return 0;
}
function __Z7set_segR6slot_ti($s,$seg){
 $s=($s)|0;
 $seg=($seg)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;
 $1=(($s+32)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($s+36)|0);
 HEAP32[(($2)>>2)]=2147483647;
 $3=(($s+28)|0);
 HEAP32[(($3)>>2)]=$seg;
 $4=$seg&4;
 $5=($4|0)==0;
 if ($5) {
  return;
 }
 HEAP32[(($1)>>2)]=4095;
 HEAP32[(($2)>>2)]=4095;
 return;
}
function __ZN11Ym2612_Impl11CHANNEL_SETEii($this,$Adr,$data){
 $this=($this)|0;
 $Adr=($Adr)|0;
 $data=($data)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$64=0,$65=0,$66=0,$67=0;
 var $68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$89=0;
 var $90=0,$91=0,$92=0,$94=0,$95=0,$96=0,$97=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0;
 var $112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$122=0,$124=0,$125=0,$126=0,$127=0,$128=0,$_0=0,$131=0,$133=0,$134=0,$135=0;
 var $136=0,$137=0,$139=0,$141=0,$142=0,$143=0,$144=0,$145=0,$147=0,$148=0,$149=0,label=0;
 $1=$Adr&3;
 $2=($1|0)==3;
 if ($2) {
  $_0=1;
  return (($_0)|0);
 }
 $4=$Adr&256;
 $5=($4|0)!=0;
 $6=($5?3:0);
 $7=((($6)+($1))|0);
 $8=$Adr&252;
 switch (($8|0)) {
 case 180: {
  $99=$data>>>7;
  $100=$99&1;
  $101=(((-$100))|0);
  $102=(($this+40+((($7)*(556))&-1)+16)|0);
  HEAP32[(($102)>>2)]=$101;
  $103=$data>>>6;
  $104=$103&1;
  $105=(((-$104))|0);
  $106=(($this+40+((($7)*(556))&-1)+20)|0);
  HEAP32[(($106)>>2)]=$105;
  $107=$data>>>4;
  $108=$107&3;
  $109=((18952+$108)|0);
  $110=((HEAP8[($109)])|0);
  $111=($110&255);
  $112=(($this+40+((($7)*(556))&-1)+36)|0);
  HEAP32[(($112)>>2)]=$111;
  $113=$data&7;
  $114=((18944+$113)|0);
  $115=((HEAP8[($114)])|0);
  $116=($115&255);
  $117=(($this+40+((($7)*(556))&-1)+32)|0);
  HEAP32[(($117)>>2)]=$116;
  $118=(($this+40+((($7)*(556))&-1)+200)|0);
  $119=((HEAP32[(($118)>>2)])|0);
  $120=($119|0)==0;
  if ($120) {
   $124=31;
  } else {
   $122=((HEAP32[(($112)>>2)])|0);
   $124=$122;
  }
  $125=(($this+40+((($7)*(556))&-1)+196)|0);
  HEAP32[(($125)>>2)]=$124;
  $126=(($this+40+((($7)*(556))&-1)+316)|0);
  $127=((HEAP32[(($126)>>2)])|0);
  $128=($127|0)==0;
  if ($128) {
   $133=31;
  } else {
   $131=((HEAP32[(($112)>>2)])|0);
   $133=$131;
  }
  $134=(($this+40+((($7)*(556))&-1)+312)|0);
  HEAP32[(($134)>>2)]=$133;
  $135=(($this+40+((($7)*(556))&-1)+432)|0);
  $136=((HEAP32[(($135)>>2)])|0);
  $137=($136|0)==0;
  if ($137) {
   $141=31;
  } else {
   $139=((HEAP32[(($112)>>2)])|0);
   $141=$139;
  }
  $142=(($this+40+((($7)*(556))&-1)+428)|0);
  HEAP32[(($142)>>2)]=$141;
  $143=(($this+40+((($7)*(556))&-1)+548)|0);
  $144=((HEAP32[(($143)>>2)])|0);
  $145=($144|0)==0;
  if ($145) {
   $148=31;
  } else {
   $147=((HEAP32[(($112)>>2)])|0);
   $148=$147;
  }
  $149=(($this+40+((($7)*(556))&-1)+544)|0);
  HEAP32[(($149)>>2)]=$148;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 160: {
  $10=(($this+40+((($7)*(556))&-1)+40)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=$11&1792;
  $13=((($12)+($data))|0);
  HEAP32[(($10)>>2)]=$13;
  $14=(($this+40+((($7)*(556))&-1)+56)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=$15<<2;
  $17=$13>>7;
  $18=((17880+$17)|0);
  $19=((HEAP8[($18)])|0);
  $20=($19&255);
  $21=$20|$16;
  $22=(($this+40+((($7)*(556))&-1)+72)|0);
  HEAP32[(($22)>>2)]=$21;
  $23=(($this+40+((($7)*(556))&-1)+148)|0);
  HEAP32[(($23)>>2)]=-1;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 164: {
  $25=(($this+40+((($7)*(556))&-1)+40)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=$26&255;
  $28=$data<<8;
  $29=$28&1792;
  $30=$27|$29;
  HEAP32[(($25)>>2)]=$30;
  $31=$data>>>3;
  $32=$31&7;
  $33=(($this+40+((($7)*(556))&-1)+56)|0);
  HEAP32[(($33)>>2)]=$32;
  $34=$32<<2;
  $35=((HEAP32[(($25)>>2)])|0);
  $36=$35>>7;
  $37=((17880+$36)|0);
  $38=((HEAP8[($37)])|0);
  $39=($38&255);
  $40=$39|$34;
  $41=(($this+40+((($7)*(556))&-1)+72)|0);
  HEAP32[(($41)>>2)]=$40;
  $42=(($this+40+((($7)*(556))&-1)+148)|0);
  HEAP32[(($42)>>2)]=-1;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 172: {
  $62=($Adr|0)<256;
  if (!($62)) {
   $_0=0;
   return (($_0)|0);
  }
  $64=((($1)+(1))|0);
  $65=(($this+1192+($64<<2))|0);
  $66=((HEAP32[(($65)>>2)])|0);
  $67=$66&255;
  $68=$data<<8;
  $69=$68&1792;
  $70=$67|$69;
  HEAP32[(($65)>>2)]=$70;
  $71=$data>>>3;
  $72=$71&7;
  $73=(($this+1208+($64<<2))|0);
  HEAP32[(($73)>>2)]=$72;
  $74=$72<<2;
  $75=((HEAP32[(($65)>>2)])|0);
  $76=$75>>7;
  $77=((17880+$76)|0);
  $78=((HEAP8[($77)])|0);
  $79=($78&255);
  $80=$79|$74;
  $81=(($this+1224+($64<<2))|0);
  HEAP32[(($81)>>2)]=$80;
  $82=(($this+1300)|0);
  HEAP32[(($82)>>2)]=-1;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 168: {
  $44=($Adr|0)<256;
  if (!($44)) {
   $_0=0;
   return (($_0)|0);
  }
  $46=((($1)+(1))|0);
  $47=(($this+1192+($46<<2))|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=$48&1792;
  $50=((($49)+($data))|0);
  HEAP32[(($47)>>2)]=$50;
  $51=(($this+1208+($46<<2))|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=$52<<2;
  $54=$50>>7;
  $55=((17880+$54)|0);
  $56=((HEAP8[($55)])|0);
  $57=($56&255);
  $58=$57|$53;
  $59=(($this+1224+($46<<2))|0);
  HEAP32[(($59)>>2)]=$58;
  $60=(($this+1300)|0);
  HEAP32[(($60)>>2)]=-1;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 176: {
  $84=(($this+40+((($7)*(556))&-1)+24)|0);
  $85=((HEAP32[(($84)>>2)])|0);
  $86=$data&7;
  $87=($85|0)==($86|0);
  if (!($87)) {
   HEAP32[(($84)>>2)]=$86;
   $89=(($this+40+((($7)*(556))&-1)+192)|0);
   HEAP32[(($89)>>2)]=0;
   $90=(($this+40+((($7)*(556))&-1)+308)|0);
   HEAP32[(($90)>>2)]=0;
   $91=(($this+40+((($7)*(556))&-1)+424)|0);
   HEAP32[(($91)>>2)]=0;
   $92=(($this+40+((($7)*(556))&-1)+540)|0);
   HEAP32[(($92)>>2)]=0;
  }
  $94=$data>>>3;
  $95=$94&7;
  $96=(((9)-($95))|0);
  $97=(($this+40+((($7)*(556))&-1)+28)|0);
  HEAP32[(($97)>>2)]=$96;
  $_0=0;
  return (($_0)|0);
  break;
 }
 default: {
  $_0=0;
  return (($_0)|0);
 }
 }
  return 0;
}
function __ZN11Ym2612_Impl6YM_SETEii($this,$Adr,$data){
 $this=($this)|0;
 $Adr=($Adr)|0;
 $data=($data)|0;
 var $2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$24=0,$26=0;
 var $27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0,$48=0,$49=0,$50=0;
 var $51=0,$52=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$64=0,$65=0,$67=0,$68=0,$69=0,$_=0,$70=0,$71=0,$72=0,$76=0;
 var $77=0,$81=0,$82=0,$86=0,$87=0,$91=0,$92=0,$_0=0,label=0;
 switch (($Adr|0)) {
 case 39: {
  $48=(($this+32)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  $50=$49^$data;
  $51=$50&64;
  $52=($51|0)==0;
  if (!($52)) {
   $54=(($this+1300)|0);
   HEAP32[(($54)>>2)]=-1;
  }
  $56=$data^-16;
  $57=$56>>4;
  $58=$data>>2;
  $59=$57&$58;
  $60=(($this+4)|0);
  $61=((HEAP32[(($60)>>2)])|0);
  $62=$59&$61;
  HEAP32[(($60)>>2)]=$62;
  HEAP32[(($48)>>2)]=$data;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 43: {
  $91=(($this+36)|0);
  $92=$data&128;
  HEAP32[(($91)>>2)]=$92;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 36: {
  $13=(($this+8)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$14&3;
  $16=$data<<2;
  $17=$15|$16;
  HEAP32[(($13)>>2)]=$17;
  $18=(($this+12)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(((1024)-($17))|0);
  $21=$20<<12;
  $22=($19|0)==($21|0);
  if ($22) {
   $_0=0;
   return (($_0)|0);
  }
  HEAP32[(($18)>>2)]=$21;
  $24=(($this+16)|0);
  HEAP32[(($24)>>2)]=$21;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 38: {
  $39=(($this+20)|0);
  HEAP32[(($39)>>2)]=$data;
  $40=(($this+24)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=(((256)-($data))|0);
  $43=$42<<16;
  $44=($41|0)==($43|0);
  if ($44) {
   $_0=0;
   return (($_0)|0);
  }
  HEAP32[(($40)>>2)]=$43;
  $46=(($this+28)|0);
  HEAP32[(($46)>>2)]=$43;
  $_0=0;
  return (($_0)|0);
  break;
 }
 case 40: {
  $64=$data&3;
  $65=($64|0)==3;
  if ($65) {
   $_0=1;
   return (($_0)|0);
  }
  $67=$data&4;
  $68=($67|0)==0;
  $69=((($64)+(3))|0);
  $_=($68?$64:$69);
  $70=(($this+40+((($_)*(556))&-1))|0);
  $71=$data&16;
  $72=($71|0)==0;
  if ($72) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$70,0);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$70,0);
  }
  $76=$data&32;
  $77=($76|0)==0;
  if ($77) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$70,2);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$70,2);
  }
  $81=$data&64;
  $82=($81|0)==0;
  if ($82) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$70,1);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$70,1);
  }
  $86=$data&128;
  $87=($86|0)==0;
  if ($87) {
   __ZN11Ym2612_Impl7KEY_OFFER9channel_ti($this,$70,3);
   $_0=0;
   return (($_0)|0);
  } else {
   __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$70,3);
   $_0=0;
   return (($_0)|0);
  }
  break;
 }
 case 34: {
  $2=$data&8;
  $3=($2|0)==0;
  if ($3) {
   $10=(($this+13620)|0);
   HEAP32[(($10)>>2)]=0;
   $11=(($this+13624)|0);
   HEAP32[(($11)>>2)]=0;
   $_0=0;
   return (($_0)|0);
  } else {
   $5=$data&7;
   $6=(($this+15740+($5<<2))|0);
   $7=((HEAP32[(($6)>>2)])|0);
   $8=(($this+13624)|0);
   HEAP32[(($8)>>2)]=$7;
   $_0=0;
   return (($_0)|0);
  }
  break;
 }
 case 37: {
  $26=(($this+8)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=$27&1020;
  $29=$data&3;
  $30=$28|$29;
  HEAP32[(($26)>>2)]=$30;
  $31=(($this+12)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=(((1024)-($30))|0);
  $34=$33<<12;
  $35=($32|0)==($34|0);
  if ($35) {
   $_0=0;
   return (($_0)|0);
  }
  HEAP32[(($31)>>2)]=$34;
  $37=(($this+16)|0);
  HEAP32[(($37)>>2)]=$34;
  $_0=0;
  return (($_0)|0);
  break;
 }
 default: {
  $_0=0;
  return (($_0)|0);
 }
 }
  return 0;
}
function __ZN11Ym2612_Impl8set_rateEdd($this,$sample_rate,$clock_rate){
 $this=($this)|0;
 $sample_rate=+($sample_rate);
 $clock_rate=+($clock_rate);
 var $1=0,$4=0,$7=.0,$8=.0,$9=.0,$10=.0,$11=0,$Frequence_0=.0,$12=.0,$13=0,$14=0,$i_0132=0,$16=0,$18=0,$19=0,$20=0,$22=.0,$23=.0,$24=.0,$25=.0;
 var $26=.0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$36=0,$37=0,$i_1131=0,$39=.0,$40=.0,$41=.0,$42=.0,$43=.0,$44=.0,$45=.0,$46=.0,$47=0;
 var $48=0,$_=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$i_2130=0,$61=.0,$62=.0,$63=.0,$64=.0,$65=.0;
 var $66=.0,$67=.0,$68=0,$69=0,$70=0,$71=.0,$72=0,$73=0,$74=0,$75=0,$76=0,$i_3128=0,$77=0,$78=.0,$79=.0,$80=.0,$81=.0,$82=0,$83=0,$84=0;
 var $85=.0,$86=.0,$87=.0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$scevgep140=0,$scevgep140141=0,$95=0,$i_5124=0,$j4_0123=0,$j4_1=0,$97=0,$99=0,$100=0,$101=0,$102=0;
 var $103=0,$104=0,$105=0,$106=0,$107=0,$i_6121=0,$108=0,$109=.0,$110=.0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$118=0,$i_7119=0,$120=.0,$121=.0,$122=.0;
 var $123=.0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$i_9116=0,$135=0,$136=.0,$137=.0,$138=.0,$139=.0,$140=0,$141=0,$142=.0;
 var $143=.0,$144=.0,$145=.0,$146=0,$147=0,$148=0,$149=.0,$150=0,$151=0,$152=0,$153=0,$i_10114=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0;
 var $scevgep=0,$scevgep133=0,$j8_0108=0,$164=0,$165=0,$166=.0,$167=.0,$168=.0,$169=0,$170=0,$171=.0,$172=0,$173=0,$174=0,$175=0,$j8_0108_1=0,$176=0,$177=0,$178=0,$179=.0;
 var $180=.0,$181=.0,$182=0,$183=0,$184=.0,$185=0,$186=0,$187=0,$188=0,$j8_0108_2=0,$189=0,$190=0,$191=0,$192=.0,$193=.0,$194=.0,$195=0,$196=0,$197=.0,$198=0;
 var $199=0,$200=0,$201=0,$j8_0108_3=0,$202=0,$203=0,$204=0,$205=.0,$206=.0,$207=.0,$208=0,$209=0,$210=.0,$211=0,$212=0,$213=0,$214=0,$216=.0,$217=0,$218=0;
 var $219=.0,$220=0,$221=0,$222=.0,$223=0,$224=0,$225=.0,$226=0,$227=0,$228=.0,$229=0,$230=0,$231=.0,$232=0,$233=0,$234=.0,$235=0,$236=0,$237=.0,$238=0;
 var $239=0,label=0;
 $1=$sample_rate!=(0.0);
 if (!($1)) {
  ___assert_fail(((1576)|0),((5952)|0),((633)|0),((9488)|0));
 }
 $4=$clock_rate>$sample_rate;
 if (!($4)) {
  ___assert_fail(((4184)|0),((5952)|0),((634)|0),((9488)|0));
 }
 $7=($clock_rate)/($sample_rate);
 $8=($7)/((144.0));
 $9=($8)+((-1.0));
 $10=(+(Math_abs((+($9)))));
 $11=$10<(1.0e-7);
 $Frequence_0=($11?(1.0):$8);
 $12=($Frequence_0)*((4096.0));
 $13=(~~($12));
 $14=(($this)|0);
 HEAP32[(($14)>>2)]=$13;
 $i_0132=0;
 while(1) {
  $16=($i_0132|0)>3327;
  if ($16) {
   $18=(($this+36268+($i_0132<<2))|0);
   HEAP32[(($18)>>2)]=0;
   $19=((($i_0132)+(12288))|0);
   $20=(($this+36268+($19<<2))|0);
   HEAP32[(($20)>>2)]=0;
  } else {
   $22=(+((($i_0132|0))|0));
   $23=($22)*((0.0234375));
   $24=($23)/((20.0));
   $25=(+(Math_pow(10.0,(+($24)))));
   $26=((268435455.0))/($25);
   $27=(~~($26));
   $28=(($this+36268+($i_0132<<2))|0);
   HEAP32[(($28)>>2)]=$27;
   $29=(((-$27))|0);
   $30=((($i_0132)+(12288))|0);
   $31=(($this+36268+($30<<2))|0);
   HEAP32[(($31)>>2)]=$29;
  }
  $33=((($i_0132)+(1))|0);
  $34=($33|0)<12288;
  if ($34) {
   $i_0132=$33;
  } else {
   break;
  }
 }
 $36=(($this+9524)|0);
 HEAP16[(($36)>>1)]=3328;
 $37=(($this+5428)|0);
 HEAP16[(($37)>>1)]=3328;
 $i_1131=1;
 while(1) {
  $39=(+((($i_1131|0))|0));
  $40=($39)*((6.283185307179586));
  $41=($40)*((0.000244140625));
  $42=(+(Math_sin($41)));
  $43=((1.0))/($42);
  $44=(+(_log10((+($43)))));
  $45=($44)*((20.0));
  $46=($45)/((0.0234375));
  $47=(~~($46));
  $48=($47|0)>3328;
  $_=($48?3328:$47);
  $49=(($_)&65535);
  $50=(((2048)-($i_1131))|0);
  $51=(($this+5428+($50<<1))|0);
  HEAP16[(($51)>>1)]=$49;
  $52=(($this+5428+($i_1131<<1))|0);
  HEAP16[(($52)>>1)]=$49;
  $53=((($_)+(12288))|0);
  $54=(($53)&65535);
  $55=(((4096)-($i_1131))|0);
  $56=(($this+5428+($55<<1))|0);
  HEAP16[(($56)>>1)]=$54;
  $57=((($i_1131)+(2048))|0);
  $58=(($this+5428+($57<<1))|0);
  HEAP16[(($58)>>1)]=$54;
  $59=((($i_1131)+(1))|0);
  $60=($59|0)<1025;
  if ($60) {
   $i_1131=$59;
  } else {
   $i_2130=0;
   break;
  }
 }
 while(1) {
  $61=(+((($i_2130|0))|0));
  $62=($61)*((6.283185307179586));
  $63=($62)*((0.0009765625));
  $64=(+(Math_sin($63)));
  $65=($64)+((1.0));
  $66=($65)*((0.5));
  $67=($66)*((503.4666666666667));
  $68=(~~($67));
  $69=(($68)&65535);
  $70=(($this+32172+($i_2130<<1))|0);
  HEAP16[(($70)>>1)]=$69;
  $71=($64)*((511.0));
  $72=(~~($71));
  $73=(($72)&65535);
  $74=(($this+34220+($i_2130<<1))|0);
  HEAP16[(($74)>>1)]=$73;
  $75=((($i_2130)+(1))|0);
  $76=($75|0)<1024;
  if ($76) {
   $i_2130=$75;
  } else {
   $i_3128=0;
   break;
  }
 }
 while(1) {
  $77=(((4095)-($i_3128))|0);
  $78=(+((($77|0))|0));
  $79=($78)*((0.000244140625));
  $80=(+(Math_pow((+($79)),8.0)));
  $81=($80)*((4096.0));
  $82=(~~($81));
  $83=(($82)&65535);
  $84=(($this+15772+($i_3128<<1))|0);
  HEAP16[(($84)>>1)]=$83;
  $85=(+((($i_3128|0))|0));
  $86=($85)*((0.000244140625));
  $87=($86)*((4096.0));
  $88=(~~($87));
  $89=(($88)&65535);
  $90=((($i_3128)+(4096))|0);
  $91=(($this+15772+($90<<1))|0);
  HEAP16[(($91)>>1)]=$89;
  $92=((($i_3128)+(1))|0);
  $93=($92|0)<4096;
  if ($93) {
   $i_3128=$92;
  } else {
   break;
  }
 }
 $scevgep140=(($this+32156)|0);
 $scevgep140141=$scevgep140;
 _memset((((($scevgep140141)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 $95=(($this+32156)|0);
 HEAP16[(($95)>>1)]=4095;
 $j4_0123=4095;$i_5124=0;
 while(1) {
  $j4_1=$j4_0123;
  while(1) {
   $97=($j4_1|0)==0;
   if ($97) {
    break;
   }
   $99=(($this+15772+($j4_1<<1))|0);
   $100=((HEAP16[(($99)>>1)])|0);
   $101=(($100<<16)>>16);
   $102=($101|0)<($i_5124|0);
   $103=((($j4_1)-(1))|0);
   if ($102) {
    $j4_1=$103;
   } else {
    break;
   }
  }
  $104=$j4_1<<16;
  $105=(($this+134572+($i_5124<<2))|0);
  HEAP32[(($105)>>2)]=$104;
  $106=((($i_5124)+(1))|0);
  $107=($106|0)<4096;
  if ($107) {
   $j4_0123=$j4_1;$i_5124=$106;
  } else {
   $i_6121=0;
   break;
  }
 }
 while(1) {
  $108=((($i_6121)*(3))&-1);
  $109=(+((($108|0))|0));
  $110=($109)/((0.0234375));
  $111=(~~($110));
  $112=$111<<16;
  $113=((($112)+(268435456))|0);
  $114=(($this+15548+($i_6121<<2))|0);
  HEAP32[(($114)>>2)]=$113;
  $115=((($i_6121)+(1))|0);
  $116=($115|0)<15;
  if ($116) {
   $i_6121=$115;
  } else {
   break;
  }
 }
 $118=(($this+15608)|0);
 HEAP32[(($118)>>2)]=536805376;
 $i_7119=0;
 while(1) {
  $120=(+((($i_7119|0))|0));
  $121=($Frequence_0)*($120);
  $122=($121)*((4096.0));
  $123=($122)*((0.5));
  $124=(~~($123));
  $125=(($this+150956+($i_7119<<2))|0);
  HEAP32[(($125)>>2)]=$124;
  $126=((($i_7119)+(1))|0);
  $127=($126|0)<2048;
  if ($127) {
   $i_7119=$126;
  } else {
   break;
  }
 }
 $128=(($this+13628)|0);
 $129=(($this+14140)|0);
 $130=$128;
 _memset((((($130)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 $131=$129;
 _memset((((($131)|0))|0), ((((0)|0))|0), ((((16)|0))|0));
 $i_9116=0;
 while(1) {
  $135=$i_9116&3;
  $136=(+((($135|0))|0));
  $137=($136)*((0.25));
  $138=($137)+((1.0));
  $139=($Frequence_0)*($138);
  $140=$i_9116>>2;
  $141=1<<$140;
  $142=(+((($141|0))|0));
  $143=($142)*($139);
  $144=($143)*((268435456.0));
  $145=($144)/((399128.0));
  $146=(~~($145));
  $147=((($i_9116)+(4))|0);
  $148=(($this+13628+($147<<2))|0);
  HEAP32[(($148)>>2)]=$146;
  $149=($144)/((5514396.0));
  $150=(~~($149));
  $151=(($this+14140+($147<<2))|0);
  HEAP32[(($151)>>2)]=$150;
  $152=((($i_9116)+(1))|0);
  $153=($152|0)<60;
  if ($153) {
   $i_9116=$152;
  } else {
   break;
  }
 }
 $132=(($this+13880)|0);
 $133=(($this+14392)|0);
 $i_10114=64;
 while(1) {
  $155=((HEAP32[(($132)>>2)])|0);
  $156=(($this+13628+($i_10114<<2))|0);
  HEAP32[(($156)>>2)]=$155;
  $157=((HEAP32[(($133)>>2)])|0);
  $158=(($this+14140+($i_10114<<2))|0);
  HEAP32[(($158)>>2)]=$157;
  $159=((($i_10114)-(64))|0);
  $160=(($this+15612+($159<<2))|0);
  HEAP32[(($160)>>2)]=0;
  $161=((($i_10114)+(1))|0);
  $162=($161|0)<96;
  if ($162) {
   $i_10114=$161;
  } else {
   break;
  }
 }
 $scevgep=(($this+14012)|0);
 $scevgep133=$scevgep;
 _memset((((($scevgep133)|0))|0), ((((0)|0))|0), ((((128)|0))|0));
 $j8_0108=0;
 while(1) {
  $164=((19008+$j8_0108)|0);
  $165=((HEAP8[($164)])|0);
  $166=(+((($165&255))>>>0));
  $167=($Frequence_0)*($166);
  $168=($167)*((32.0));
  $169=(~~($168));
  $170=(($this+14524+($j8_0108<<2))|0);
  HEAP32[(($170)>>2)]=$169;
  $171=((-.0))-($168);
  $172=(~~($171));
  $173=(($this+15036+($j8_0108<<2))|0);
  HEAP32[(($173)>>2)]=$172;
  $174=((($j8_0108)+(1))|0);
  $175=($174|0)<32;
  if ($175) {
   $j8_0108=$174;
  } else {
   $j8_0108_1=0;
   break;
  }
 }
 while(1) {
  $176=((($j8_0108_1)+(32))|0);
  $177=((19008+$176)|0);
  $178=((HEAP8[($177)])|0);
  $179=(+((($178&255))>>>0));
  $180=($Frequence_0)*($179);
  $181=($180)*((32.0));
  $182=(~~($181));
  $183=(($this+14652+($j8_0108_1<<2))|0);
  HEAP32[(($183)>>2)]=$182;
  $184=((-.0))-($181);
  $185=(~~($184));
  $186=(($this+15164+($j8_0108_1<<2))|0);
  HEAP32[(($186)>>2)]=$185;
  $187=((($j8_0108_1)+(1))|0);
  $188=($187|0)<32;
  if ($188) {
   $j8_0108_1=$187;
  } else {
   $j8_0108_2=0;
   break;
  }
 }
 while(1) {
  $189=((($j8_0108_2)+(64))|0);
  $190=((19008+$189)|0);
  $191=((HEAP8[($190)])|0);
  $192=(+((($191&255))>>>0));
  $193=($Frequence_0)*($192);
  $194=($193)*((32.0));
  $195=(~~($194));
  $196=(($this+14780+($j8_0108_2<<2))|0);
  HEAP32[(($196)>>2)]=$195;
  $197=((-.0))-($194);
  $198=(~~($197));
  $199=(($this+15292+($j8_0108_2<<2))|0);
  HEAP32[(($199)>>2)]=$198;
  $200=((($j8_0108_2)+(1))|0);
  $201=($200|0)<32;
  if ($201) {
   $j8_0108_2=$200;
  } else {
   $j8_0108_3=0;
   break;
  }
 }
 while(1) {
  $202=((($j8_0108_3)+(96))|0);
  $203=((19008+$202)|0);
  $204=((HEAP8[($203)])|0);
  $205=(+((($204&255))>>>0));
  $206=($Frequence_0)*($205);
  $207=($206)*((32.0));
  $208=(~~($207));
  $209=(($this+14908+($j8_0108_3<<2))|0);
  HEAP32[(($209)>>2)]=$208;
  $210=((-.0))-($207);
  $211=(~~($210));
  $212=(($this+15420+($j8_0108_3<<2))|0);
  HEAP32[(($212)>>2)]=$211;
  $213=((($j8_0108_3)+(1))|0);
  $214=($213|0)<32;
  if ($214) {
   $j8_0108_3=$213;
  } else {
   break;
  }
 }
 $216=((1068373114.88))/($sample_rate);
 $217=(~~($216));
 $218=(($this+15740)|0);
 HEAP32[(($218)>>2)]=$217;
 $219=((1492501135.36))/($sample_rate);
 $220=(~~($219));
 $221=(($this+15744)|0);
 HEAP32[(($221)>>2)]=$220;
 $222=((1615981445.12))/($sample_rate);
 $223=(~~($222));
 $224=(($this+15748)|0);
 HEAP32[(($224)>>2)]=$223;
 $225=((1709933854.72))/($sample_rate);
 $226=(~~($225));
 $227=(($this+15752)|0);
 HEAP32[(($227)>>2)]=$226;
 $228=((1846835937.28))/($sample_rate);
 $229=(~~($228));
 $230=(($this+15756)|0);
 HEAP32[(($230)>>2)]=$229;
 $231=((2585033441.28))/($sample_rate);
 $232=(~~($231));
 $233=(($this+15760)|0);
 HEAP32[(($233)>>2)]=$232;
 $234=((12911745433.6))/($sample_rate);
 $235=(~~($234));
 $236=(($this+15764)|0);
 HEAP32[(($236)>>2)]=$235;
 $237=((19381039923.2))/($sample_rate);
 $238=(~~($237));
 $239=(($this+15768)|0);
 HEAP32[(($239)>>2)]=$238;
 __ZN11Ym2612_Impl5resetEv($this);
 return;
}
function __ZN11Ym2612_Impl5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,$4=0,$i_049=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$i_147=0,$58=0,$59=0;
 var $60=0,$61=0,$i_343=0,$63=0,$64=0,label=0;
 $1=(($this+13620)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($this+36)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($this+4)|0);
 $4=$3;
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((28)|0))|0));
 $i_049=0;
 while(1) {
  $6=(($this+40+((($i_049)*(556))&-1)+16)|0);
  HEAP32[(($6)>>2)]=-1;
  $7=(($this+40+((($i_049)*(556))&-1)+20)|0);
  HEAP32[(($7)>>2)]=-1;
  $8=(($this+40+((($i_049)*(556))&-1)+24)|0);
  HEAP32[(($8)>>2)]=0;
  $9=(($this+40+((($i_049)*(556))&-1)+28)|0);
  HEAP32[(($9)>>2)]=31;
  $10=(($this+40+((($i_049)*(556))&-1)+32)|0);
  HEAP32[(($10)>>2)]=0;
  $11=(($this+40+((($i_049)*(556))&-1)+36)|0);
  HEAP32[(($11)>>2)]=0;
  $12=(($this+40+((($i_049)*(556))&-1))|0);
  HEAP32[(($12)>>2)]=0;
  $13=(($this+40+((($i_049)*(556))&-1)+40)|0);
  HEAP32[(($13)>>2)]=0;
  $14=(($this+40+((($i_049)*(556))&-1)+56)|0);
  HEAP32[(($14)>>2)]=0;
  $15=(($this+40+((($i_049)*(556))&-1)+72)|0);
  HEAP32[(($15)>>2)]=0;
  $16=(($this+40+((($i_049)*(556))&-1)+144)|0);
  HEAP32[(($16)>>2)]=0;
  $17=(($this+40+((($i_049)*(556))&-1)+148)|0);
  HEAP32[(($17)>>2)]=0;
  $18=(($this+40+((($i_049)*(556))&-1)+156)|0);
  HEAP32[(($18)>>2)]=536870912;
  $19=(($this+40+((($i_049)*(556))&-1)+160)|0);
  HEAP32[(($19)>>2)]=0;
  $20=(($this+40+((($i_049)*(556))&-1)+164)|0);
  HEAP32[(($20)>>2)]=0;
  $21=(($this+40+((($i_049)*(556))&-1)+152)|0);
  HEAP32[(($21)>>2)]=3;
  $22=(($this+40+((($i_049)*(556))&-1)+192)|0);
  HEAP32[(($22)>>2)]=0;
  $23=(($this+40+((($i_049)*(556))&-1)+4)|0);
  HEAP32[(($23)>>2)]=0;
  $24=(($this+40+((($i_049)*(556))&-1)+44)|0);
  HEAP32[(($24)>>2)]=0;
  $25=(($this+40+((($i_049)*(556))&-1)+60)|0);
  HEAP32[(($25)>>2)]=0;
  $26=(($this+40+((($i_049)*(556))&-1)+76)|0);
  HEAP32[(($26)>>2)]=0;
  $27=(($this+40+((($i_049)*(556))&-1)+260)|0);
  HEAP32[(($27)>>2)]=0;
  $28=(($this+40+((($i_049)*(556))&-1)+264)|0);
  HEAP32[(($28)>>2)]=0;
  $29=(($this+40+((($i_049)*(556))&-1)+272)|0);
  HEAP32[(($29)>>2)]=536870912;
  $30=(($this+40+((($i_049)*(556))&-1)+276)|0);
  HEAP32[(($30)>>2)]=0;
  $31=(($this+40+((($i_049)*(556))&-1)+280)|0);
  HEAP32[(($31)>>2)]=0;
  $32=(($this+40+((($i_049)*(556))&-1)+268)|0);
  HEAP32[(($32)>>2)]=3;
  $33=(($this+40+((($i_049)*(556))&-1)+308)|0);
  HEAP32[(($33)>>2)]=0;
  $34=(($this+40+((($i_049)*(556))&-1)+8)|0);
  HEAP32[(($34)>>2)]=0;
  $35=(($this+40+((($i_049)*(556))&-1)+48)|0);
  HEAP32[(($35)>>2)]=0;
  $36=(($this+40+((($i_049)*(556))&-1)+64)|0);
  HEAP32[(($36)>>2)]=0;
  $37=(($this+40+((($i_049)*(556))&-1)+80)|0);
  HEAP32[(($37)>>2)]=0;
  $38=(($this+40+((($i_049)*(556))&-1)+376)|0);
  HEAP32[(($38)>>2)]=0;
  $39=(($this+40+((($i_049)*(556))&-1)+380)|0);
  HEAP32[(($39)>>2)]=0;
  $40=(($this+40+((($i_049)*(556))&-1)+388)|0);
  HEAP32[(($40)>>2)]=536870912;
  $41=(($this+40+((($i_049)*(556))&-1)+392)|0);
  HEAP32[(($41)>>2)]=0;
  $42=(($this+40+((($i_049)*(556))&-1)+396)|0);
  HEAP32[(($42)>>2)]=0;
  $43=(($this+40+((($i_049)*(556))&-1)+384)|0);
  HEAP32[(($43)>>2)]=3;
  $44=(($this+40+((($i_049)*(556))&-1)+424)|0);
  HEAP32[(($44)>>2)]=0;
  $45=(($this+40+((($i_049)*(556))&-1)+12)|0);
  HEAP32[(($45)>>2)]=0;
  $46=(($this+40+((($i_049)*(556))&-1)+52)|0);
  HEAP32[(($46)>>2)]=0;
  $47=(($this+40+((($i_049)*(556))&-1)+68)|0);
  HEAP32[(($47)>>2)]=0;
  $48=(($this+40+((($i_049)*(556))&-1)+84)|0);
  HEAP32[(($48)>>2)]=0;
  $49=(($this+40+((($i_049)*(556))&-1)+492)|0);
  HEAP32[(($49)>>2)]=0;
  $50=(($this+40+((($i_049)*(556))&-1)+496)|0);
  HEAP32[(($50)>>2)]=0;
  $51=(($this+40+((($i_049)*(556))&-1)+504)|0);
  HEAP32[(($51)>>2)]=536870912;
  $52=(($this+40+((($i_049)*(556))&-1)+508)|0);
  HEAP32[(($52)>>2)]=0;
  $53=(($this+40+((($i_049)*(556))&-1)+512)|0);
  HEAP32[(($53)>>2)]=0;
  $54=(($this+40+((($i_049)*(556))&-1)+500)|0);
  HEAP32[(($54)>>2)]=3;
  $55=(($this+40+((($i_049)*(556))&-1)+540)|0);
  HEAP32[(($55)>>2)]=0;
  $56=((($i_049)+(1))|0);
  $57=($56|0)<6;
  if ($57) {
   $i_049=$56;
  } else {
   $i_147=0;
   break;
  }
 }
 while(1) {
  $58=(($this+3376+($i_147<<2))|0);
  HEAP32[(($58)>>2)]=-1;
  $59=(($this+4400+($i_147<<2))|0);
  HEAP32[(($59)>>2)]=-1;
  $60=((($i_147)+(1))|0);
  $61=($60|0)<256;
  if ($61) {
   $i_147=$60;
  } else {
   break;
  }
 }
 __ZN11Ym2612_Impl6write0Eii($this,182,192);
 __ZN11Ym2612_Impl6write1Eii($this,182,192);
 __ZN11Ym2612_Impl6write0Eii($this,181,192);
 __ZN11Ym2612_Impl6write1Eii($this,181,192);
 __ZN11Ym2612_Impl6write0Eii($this,180,192);
 __ZN11Ym2612_Impl6write1Eii($this,180,192);
 $i_343=178;
 while(1) {
  __ZN11Ym2612_Impl6write0Eii($this,$i_343,0);
  __ZN11Ym2612_Impl6write1Eii($this,$i_343,0);
  $63=((($i_343)-(1))|0);
  $64=($63|0)>33;
  if ($64) {
   $i_343=$63;
  } else {
   break;
  }
 }
 __ZN11Ym2612_Impl6write0Eii($this,42,128);
 return;
}
function __ZN10Ym2612_Emu8set_rateEdd($this,$sample_rate,$clock_rate){
 $this=($this)|0;
 $sample_rate=+($sample_rate);
 $clock_rate=+($clock_rate);
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$_0=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 do {
  if ($3) {
   $5=((_malloc(159148))|0);
   $6=$5;
   HEAP32[(($1)>>2)]=$6;
   $7=($5|0)==0;
   if ($7) {
    $_0=3280;
    return (($_0)|0);
   } else {
    $9=(($5+5424)|0);
    $10=$9;
    HEAP32[(($10)>>2)]=0;
    break;
   }
  }
 } while(0);
 $12=((HEAP32[(($1)>>2)])|0);
 $13=$12;
 _memset((((($13)|0))|0), ((((0)|0))|0), ((((5424)|0))|0));
 $14=((HEAP32[(($1)>>2)])|0);
 __ZN11Ym2612_Impl8set_rateEdd($14,$sample_rate,$clock_rate);
 $_0=0;
 return (($_0)|0);
}
function __ZN10Ym2612_EmuD2Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 _free($3);
 return;
}
function __ZN10Ym2612_Emu5resetEv($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 __ZN11Ym2612_Impl5resetEv($2);
 return;
}
function __ZN11Ym2612_Impl6write0Eii($this,$opn_addr,$data){
 $this=($this)|0;
 $opn_addr=($opn_addr)|0;
 $data=($data)|0;
 var $1=0,$4=0,$5=0,$7=0,$9=0,$10=0,$12=0,$14=0,$16=0,label=0;
 $1=($data>>>0)<((256)>>>0);
 if (!($1)) {
  ___assert_fail(((2624)|0),((5952)|0),((850)|0),((9512)|0));
 }
 $4=($opn_addr|0)<48;
 $5=(($this+3376+($opn_addr<<2))|0);
 if ($4) {
  HEAP32[(($5)>>2)]=$data;
  $7=((__ZN11Ym2612_Impl6YM_SETEii($this,$opn_addr,$data))|0);
  return;
 }
 $9=((HEAP32[(($5)>>2)])|0);
 $10=($9|0)==($data|0);
 if ($10) {
  return;
 }
 HEAP32[(($5)>>2)]=$data;
 $12=($opn_addr|0)<160;
 if ($12) {
  $14=((__ZN11Ym2612_Impl8SLOT_SETEii($this,$opn_addr,$data))|0);
  return;
 } else {
  $16=((__ZN11Ym2612_Impl11CHANNEL_SETEii($this,$opn_addr,$data))|0);
  return;
 }
}
function __ZN11Ym2612_Impl6write1Eii($this,$opn_addr,$data){
 $this=($this)|0;
 $opn_addr=($opn_addr)|0;
 $data=($data)|0;
 var $1=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$15=0,label=0;
 $1=($data>>>0)<((256)>>>0);
 if (!($1)) {
  ___assert_fail(((2624)|0),((5952)|0),((870)|0),((9504)|0));
 }
 $4=($opn_addr|0)>47;
 if (!($4)) {
  return;
 }
 $6=(($this+4400+($opn_addr<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==($data|0);
 if ($8) {
  return;
 }
 HEAP32[(($6)>>2)]=$data;
 $10=($opn_addr|0)<160;
 $11=((($opn_addr)+(256))|0);
 if ($10) {
  $13=((__ZN11Ym2612_Impl8SLOT_SETEii($this,$11,$data))|0);
  return;
 } else {
  $15=((__ZN11Ym2612_Impl11CHANNEL_SETEii($this,$11,$data))|0);
  return;
 }
}
function __ZN10Ym2612_Emu6write0Eii($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 __ZN11Ym2612_Impl6write0Eii($2,$addr,$data);
 return;
}
function __ZN10Ym2612_Emu6write1Eii($this,$addr,$data){
 $this=($this)|0;
 $addr=($addr)|0;
 $data=($data)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 __ZN11Ym2612_Impl6write1Eii($2,$addr,$data);
 return;
}
function __ZN10Ym2612_Emu11mute_voicesEi($this,$mask){
 $this=($this)|0;
 $mask=($mask)|0;
 var $1=0,$2=0,$3=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+5424)|0);
 HEAP32[(($3)>>2)]=$mask;
 return;
}
function __ZN11Ym2612_Impl9run_timerEi($this,$length){
 $this=($this)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$remain_0=0,$11=0,$remain_0_=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$44=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$53=0,label=0;
 $1=(($this)|0);
 $2=(($this+32)|0);
 $3=(($this+28)|0);
 $4=(($this+4)|0);
 $5=(($this+24)|0);
 $6=(($this+16)|0);
 $7=(($this+4)|0);
 $8=(($this+12)|0);
 $9=(($this+1152)|0);
 $remain_0=$length;
 while(1) {
  $11=($remain_0|0)<6;
  $remain_0_=($11?$remain_0:6);
  $12=((($remain_0)-($remain_0_))|0);
  $13=((HEAP32[(($1)>>2)])|0);
  $14=(Math_imul($remain_0_,$13)|0);
  $15=((HEAP32[(($2)>>2)])|0);
  $16=$15&1;
  $17=($16|0)==0;
  do {
   if (!($17)) {
    $19=((HEAP32[(($6)>>2)])|0);
    $20=((($19)-($14))|0);
    HEAP32[(($6)>>2)]=$20;
    $21=($20|0)<1;
    if (!($21)) {
     break;
    }
    $23=((HEAP32[(($2)>>2)])|0);
    $24=$23>>>2;
    $25=$24&1;
    $26=((HEAP32[(($7)>>2)])|0);
    $27=$25|$26;
    HEAP32[(($7)>>2)]=$27;
    $28=((HEAP32[(($8)>>2)])|0);
    $29=((HEAP32[(($6)>>2)])|0);
    $30=((($29)+($28))|0);
    HEAP32[(($6)>>2)]=$30;
    $31=((HEAP32[(($2)>>2)])|0);
    $32=$31&128;
    $33=($32|0)==0;
    if ($33) {
     break;
    }
    __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,0);
    __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,1);
    __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,2);
    __ZN11Ym2612_Impl6KEY_ONER9channel_ti($this,$9,3);
   }
  } while(0);
  $36=((HEAP32[(($2)>>2)])|0);
  $37=$36&2;
  $38=($37|0)==0;
  do {
   if (!($38)) {
    $40=((HEAP32[(($3)>>2)])|0);
    $41=((($40)-($14))|0);
    HEAP32[(($3)>>2)]=$41;
    $42=($41|0)<1;
    if (!($42)) {
     break;
    }
    $44=((HEAP32[(($2)>>2)])|0);
    $45=$44>>>2;
    $46=$45&2;
    $47=((HEAP32[(($4)>>2)])|0);
    $48=$46|$47;
    HEAP32[(($4)>>2)]=$48;
    $49=((HEAP32[(($5)>>2)])|0);
    $50=((HEAP32[(($3)>>2)])|0);
    $51=((($50)+($49))|0);
    HEAP32[(($3)>>2)]=$51;
   }
  } while(0);
  $53=($12|0)>0;
  if ($53) {
   $remain_0=$12;
  } else {
   break;
  }
 }
 return;
}
function __ZN11Ym2612_Impl3runEiPs($this,$pair_count,$out){
 $this=($this)|0;
 $pair_count=($pair_count)|0;
 $out=($out)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$chi_061=0,$8=0,$9=0,$10=0,$12=0,$14=0,$15=0,$16=0,$i2_159=0,$i_058=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0;
 var $63=0,$64=0,$66=0,$67=0,$69=0,$70=0,$72=0,$73=0,$74=0,$77=0,$78=0,$80=0,$82=0,$84=0,$85=0,$86=0,$i2_2=0,$88=0,$89=0,$90=0;
 var $91=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$111=0,$112=0,$113=0,$114=0,$115=0;
 var $117=0,$118=0,$119=0,$121=0,$122=0,$123=0,$124=0,$125=0,$127=0,$128=0,$129=0,$131=0,$132=0,$133=0,$134=0,$135=0,$137=0,$138=0,$139=0,$141=0;
 var $142=0,$143=0,$144=0,$145=0,$147=0,$148=0,$149=0,$151=0,$152=0,$154=0,$155=0,$156=0,$157=0,$158=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0;
 var label=0;
 $1=($pair_count|0)<1;
 if ($1) {
  return;
 }
 $3=(($this+32)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$4&3;
 $6=($5|0)==0;
 if ($6) {
  $chi_061=0;
 } else {
  __ZN11Ym2612_Impl9run_timerEi($this,$pair_count);
  $chi_061=0;
 }
 while(1) {
  $8=(($this+40+((($chi_061)*(556))&-1)+148)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=($9|0)==-1;
  if ($10) {
   $12=($chi_061|0)==2;
   if ($12) {
    $14=((HEAP32[(($3)>>2)])|0);
    $15=$14>>>5;
    $16=$15&2;
    $i_058=0;$i2_159=$16;
   } else {
    $i_058=0;$i2_159=0;
   }
   while(1) {
    $17=(($this+40+((($chi_061)*(556))&-1)+40+($i2_159<<2))|0);
    $18=((HEAP32[(($17)>>2)])|0);
    $19=(($this+150956+($18<<2))|0);
    $20=((HEAP32[(($19)>>2)])|0);
    $21=(($this+40+((($chi_061)*(556))&-1)+56+($i2_159<<2))|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=(((7)-($22))|0);
    $24=$20>>>($23>>>0);
    $25=(($this+40+((($chi_061)*(556))&-1)+72+($i2_159<<2))|0);
    $26=((HEAP32[(($25)>>2)])|0);
    $27=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+20)|0);
    $28=((HEAP32[(($27)>>2)])|0);
    $29=$26>>($28|0);
    $30=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1))|0);
    $31=((HEAP32[(($30)>>2)])|0);
    $32=(($31+($26<<2))|0);
    $33=((HEAP32[(($32)>>2)])|0);
    $34=((($33)+($24))|0);
    $35=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+4)|0);
    $36=((HEAP32[(($35)>>2)])|0);
    $37=(Math_imul($34,$36)|0);
    $38=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+60)|0);
    HEAP32[(($38)>>2)]=$37;
    $39=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+24)|0);
    $40=((HEAP32[(($39)>>2)])|0);
    $41=($40|0)==($29|0);
    do {
     if (!($41)) {
      HEAP32[(($39)>>2)]=$29;
      $43=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+40)|0);
      $44=((HEAP32[(($43)>>2)])|0);
      $45=(($44+($29<<2))|0);
      $46=((HEAP32[(($45)>>2)])|0);
      $47=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+80)|0);
      HEAP32[(($47)>>2)]=$46;
      $48=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+44)|0);
      $49=((HEAP32[(($48)>>2)])|0);
      $50=(($49+($29<<2))|0);
      $51=((HEAP32[(($50)>>2)])|0);
      $52=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+84)|0);
      HEAP32[(($52)>>2)]=$51;
      $53=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+48)|0);
      $54=((HEAP32[(($53)>>2)])|0);
      $55=(($54+($29<<2))|0);
      $56=((HEAP32[(($55)>>2)])|0);
      $57=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+88)|0);
      HEAP32[(($57)>>2)]=$56;
      $58=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+52)|0);
      $59=((HEAP32[(($58)>>2)])|0);
      $60=(($59+($29<<2))|0);
      $61=((HEAP32[(($60)>>2)])|0);
      $62=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+92)|0);
      HEAP32[(($62)>>2)]=$61;
      $63=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+64)|0);
      $64=((HEAP32[(($63)>>2)])|0);
      if (((($64|0))|0)==((0)|0)) {
       $66=((HEAP32[(($47)>>2)])|0);
       $67=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+72)|0);
       HEAP32[(($67)>>2)]=$66;
       break;
      } else if (((($64|0))|0)==((1)|0)) {
       $69=((HEAP32[(($52)>>2)])|0);
       $70=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+72)|0);
       HEAP32[(($70)>>2)]=$69;
       break;
      } else {
       $72=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+68)|0);
       $73=((HEAP32[(($72)>>2)])|0);
       $74=($73|0)<536870912;
       if (!($74)) {
        break;
       }
       if (((($64|0))|0)==((2)|0)) {
        $77=((HEAP32[(($57)>>2)])|0);
        $78=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+72)|0);
        HEAP32[(($78)>>2)]=$77;
        break;
       } else if (((($64|0))|0)==((3)|0)) {
        $80=(($this+40+((($chi_061)*(556))&-1)+88+((($i_058)*(116))&-1)+72)|0);
        HEAP32[(($80)>>2)]=$61;
        break;
       } else {
        break;
       }
      }
     }
    } while(0);
    $82=($i2_159|0)==0;
    if ($82) {
     $i2_2=0;
    } else {
     $84=$i2_159^2;
     $85=$i2_159>>1;
     $86=$84^$85;
     $i2_2=$86;
    }
    $88=((($i_058)+(1))|0);
    $89=($88|0)<4;
    if ($89) {
     $i_058=$88;$i2_159=$i2_2;
    } else {
     break;
    }
   }
  }
  $90=((($chi_061)+(1))|0);
  $91=($90|0)<6;
  if ($91) {
   $chi_061=$90;
  } else {
   break;
  }
 }
 $93=(($this+5424)|0);
 $94=(($this+36)|0);
 $95=(($this+5428)|0);
 $96=((HEAP32[(($93)>>2)])|0);
 $97=$96&1;
 $98=($97|0)==0;
 if ($98) {
  $100=(($this+40)|0);
  $101=(($this+64)|0);
  $102=((HEAP32[(($101)>>2)])|0);
  $103=((18912+($102<<2))|0);
  $104=((HEAP32[(($103)>>2)])|0);
  FUNCTION_TABLE_viiii[($104)&31]($95,$100,$out,$pair_count);
 }
 $106=((HEAP32[(($93)>>2)])|0);
 $107=$106&2;
 $108=($107|0)==0;
 if ($108) {
  $111=(($this+596)|0);
  $112=(($this+620)|0);
  $113=((HEAP32[(($112)>>2)])|0);
  $114=((18912+($113<<2))|0);
  $115=((HEAP32[(($114)>>2)])|0);
  FUNCTION_TABLE_viiii[($115)&31]($95,$111,$out,$pair_count);
 }
 $117=((HEAP32[(($93)>>2)])|0);
 $118=$117&4;
 $119=($118|0)==0;
 if ($119) {
  $121=(($this+1152)|0);
  $122=(($this+1176)|0);
  $123=((HEAP32[(($122)>>2)])|0);
  $124=((18912+($123<<2))|0);
  $125=((HEAP32[(($124)>>2)])|0);
  FUNCTION_TABLE_viiii[($125)&31]($95,$121,$out,$pair_count);
 }
 $127=((HEAP32[(($93)>>2)])|0);
 $128=$127&8;
 $129=($128|0)==0;
 if ($129) {
  $131=(($this+1708)|0);
  $132=(($this+1732)|0);
  $133=((HEAP32[(($132)>>2)])|0);
  $134=((18912+($133<<2))|0);
  $135=((HEAP32[(($134)>>2)])|0);
  FUNCTION_TABLE_viiii[($135)&31]($95,$131,$out,$pair_count);
 }
 $137=((HEAP32[(($93)>>2)])|0);
 $138=$137&16;
 $139=($138|0)==0;
 if ($139) {
  $141=(($this+2264)|0);
  $142=(($this+2288)|0);
  $143=((HEAP32[(($142)>>2)])|0);
  $144=((18912+($143<<2))|0);
  $145=((HEAP32[(($144)>>2)])|0);
  FUNCTION_TABLE_viiii[($145)&31]($95,$141,$out,$pair_count);
 }
 $147=((HEAP32[(($93)>>2)])|0);
 $148=$147&32;
 $149=($148|0)==0;
 do {
  if ($149) {
   $151=((HEAP32[(($94)>>2)])|0);
   $152=($151|0)==0;
   if (!($152)) {
    break;
   }
   $154=(($this+2820)|0);
   $155=(($this+2844)|0);
   $156=((HEAP32[(($155)>>2)])|0);
   $157=((18912+($156<<2))|0);
   $158=((HEAP32[(($157)>>2)])|0);
   FUNCTION_TABLE_viiii[($158)&31]($95,$154,$out,$pair_count);
  }
 } while(0);
 $160=(($this+13624)|0);
 $161=((HEAP32[(($160)>>2)])|0);
 $162=(Math_imul($161,$pair_count)|0);
 $163=(($this+13620)|0);
 $164=((HEAP32[(($163)>>2)])|0);
 $165=((($164)+($162))|0);
 HEAP32[(($163)>>2)]=$165;
 return;
}
function __ZN10Ym2612_Emu3runEiPs($this,$pair_count,$out){
 $this=($this)|0;
 $pair_count=($pair_count)|0;
 $out=($out)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 __ZN11Ym2612_Impl3runEiPs($2,$pair_count,$out);
 return;
}
function __ZN18ym2612_update_chanILi0EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$_pn=0,$in3_0=0,$in2_0=0,$in1_0=0,$in0_0=0,$CH_S0_OUT_1_0=0,$_096=0,$_0=0,$YM2612_LFOcnt_0=0,$51=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($ch+4)|0);
 $5=(($ch+88)|0);
 $6=(($ch+144)|0);
 $7=(($ch+320)|0);
 $8=(($ch+376)|0);
 $9=(($ch+204)|0);
 $10=(($ch+260)|0);
 $11=(($ch+492)|0);
 $12=(($g+8196)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($3|0)==536870912;
 if ($14) {
  return;
 }
 $15=(($g+8192)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($11)>>2)])|0);
 $18=((HEAP32[(($10)>>2)])|0);
 $19=((HEAP32[(($8)>>2)])|0);
 $20=((HEAP32[(($6)>>2)])|0);
 $21=((HEAP32[(($4)>>2)])|0);
 $22=(($ch+156)|0);
 $23=(($ch+100)|0);
 $24=(($ch+120)|0);
 $25=(($ch+196)|0);
 $26=(($ch+124)|0);
 $27=(($ch+388)|0);
 $28=(($ch+332)|0);
 $29=(($ch+352)|0);
 $30=(($ch+428)|0);
 $31=(($ch+356)|0);
 $32=(($ch+272)|0);
 $33=(($ch+216)|0);
 $34=(($ch+236)|0);
 $35=(($ch+312)|0);
 $36=(($ch+240)|0);
 $37=(($ch+448)|0);
 $38=(($ch+468)|0);
 $39=(($ch+544)|0);
 $40=(($ch+472)|0);
 $41=(($ch)|0);
 $42=(($ch+28)|0);
 $43=(($ch+32)|0);
 $44=(($ch+148)|0);
 $45=(($ch+380)|0);
 $46=(($ch+264)|0);
 $47=(($ch+496)|0);
 $48=(($ch+16)|0);
 $49=(($ch+20)|0);
 $_0=$buf;$_096=$length;$CH_S0_OUT_1_0=$21;$in0_0=$20;$in1_0=$19;$in2_0=$18;$in3_0=$17;$_pn=$16;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($13))|0);
  $51=$YM2612_LFOcnt_0>>>18;
  $52=$51&1023;
  $53=(($g+26744+($52<<1))|0);
  $54=((HEAP16[(($53)>>1)])|0);
  $55=(($54<<16)>>16);
  $56=((HEAP32[(($22)>>2)])|0);
  $57=$56>>16;
  $58=(($g+10344+($57<<1))|0);
  $59=((HEAP16[(($58)>>1)])|0);
  $60=(($59<<16)>>16);
  $61=((HEAP32[(($23)>>2)])|0);
  $62=((($60)+($61))|0);
  $63=((HEAP32[(($24)>>2)])|0);
  $64=$62^$63;
  $65=((HEAP32[(($25)>>2)])|0);
  $66=$55>>($65|0);
  $67=((($66)+($64))|0);
  $68=((HEAP32[(($26)>>2)])|0);
  $69=((($62)-($68))|0);
  $70=$69>>31;
  $71=$70&$67;
  $72=((HEAP32[(($27)>>2)])|0);
  $73=$72>>16;
  $74=(($g+10344+($73<<1))|0);
  $75=((HEAP16[(($74)>>1)])|0);
  $76=(($75<<16)>>16);
  $77=((HEAP32[(($28)>>2)])|0);
  $78=((($76)+($77))|0);
  $79=((HEAP32[(($29)>>2)])|0);
  $80=$78^$79;
  $81=((HEAP32[(($30)>>2)])|0);
  $82=$55>>($81|0);
  $83=((($82)+($80))|0);
  $84=((HEAP32[(($31)>>2)])|0);
  $85=((($78)-($84))|0);
  $86=$85>>31;
  $87=$86&$83;
  $88=((HEAP32[(($32)>>2)])|0);
  $89=$88>>16;
  $90=(($g+10344+($89<<1))|0);
  $91=((HEAP16[(($90)>>1)])|0);
  $92=(($91<<16)>>16);
  $93=((HEAP32[(($33)>>2)])|0);
  $94=((($92)+($93))|0);
  $95=((HEAP32[(($34)>>2)])|0);
  $96=$94^$95;
  $97=((HEAP32[(($35)>>2)])|0);
  $98=$55>>($97|0);
  $99=((($98)+($96))|0);
  $100=((HEAP32[(($36)>>2)])|0);
  $101=((($94)-($100))|0);
  $102=$101>>31;
  $103=$102&$99;
  $104=((HEAP32[(($2)>>2)])|0);
  $105=$104>>16;
  $106=(($g+10344+($105<<1))|0);
  $107=((HEAP16[(($106)>>1)])|0);
  $108=(($107<<16)>>16);
  $109=((HEAP32[(($37)>>2)])|0);
  $110=((($108)+($109))|0);
  $111=((HEAP32[(($38)>>2)])|0);
  $112=$110^$111;
  $113=((HEAP32[(($39)>>2)])|0);
  $114=$55>>($113|0);
  $115=((($114)+($112))|0);
  $116=((HEAP32[(($40)>>2)])|0);
  $117=((($110)-($116))|0);
  $118=$117>>31;
  $119=$118&$115;
  $120=((HEAP32[(($41)>>2)])|0);
  $121=((($120)+($CH_S0_OUT_1_0))|0);
  $122=((HEAP32[(($42)>>2)])|0);
  $123=$121>>($122|0);
  $124=((($123)+($in0_0))|0);
  $125=$124>>>14;
  $126=$125&4095;
  $127=(($g+($126<<1))|0);
  $128=((HEAP16[(($127)>>1)])|0);
  $129=(($128<<16)>>16);
  $130=((($129)+($71))|0);
  $131=(($g+30840+($130<<2))|0);
  $132=((HEAP32[(($131)>>2)])|0);
  $133=((($120)+($in1_0))|0);
  $134=$133>>>14;
  $135=$134&4095;
  $136=(($g+($135<<1))|0);
  $137=((HEAP16[(($136)>>1)])|0);
  $138=(($137<<16)>>16);
  $139=((($138)+($87))|0);
  $140=(($g+30840+($139<<2))|0);
  $141=((HEAP32[(($140)>>2)])|0);
  $142=((($141)+($in2_0))|0);
  $143=$142>>>14;
  $144=$143&4095;
  $145=(($g+($144<<1))|0);
  $146=((HEAP16[(($145)>>1)])|0);
  $147=(($146<<16)>>16);
  $148=((($147)+($103))|0);
  $149=(($g+30840+($148<<2))|0);
  $150=((HEAP32[(($149)>>2)])|0);
  $151=((($150)+($in3_0))|0);
  $152=$151>>>14;
  $153=$152&4095;
  $154=(($g+($153<<1))|0);
  $155=((HEAP16[(($154)>>1)])|0);
  $156=(($155<<16)>>16);
  $157=((($156)+($119))|0);
  $158=(($g+30840+($157<<2))|0);
  $159=((HEAP32[(($158)>>2)])|0);
  $160=$159>>16;
  $161=(($g+28792+($52<<1))|0);
  $162=((HEAP16[(($161)>>1)])|0);
  $163=(($162<<16)>>16);
  $164=((HEAP32[(($43)>>2)])|0);
  $165=(Math_imul($163,$164)|0);
  $166=$165>>10;
  $167=((($166)+(256))|0);
  $168=((HEAP32[(($44)>>2)])|0);
  $169=(Math_imul($167,$168)|0);
  $170=$169>>>8;
  $171=((($170)+($in0_0))|0);
  $172=((HEAP32[(($45)>>2)])|0);
  $173=(Math_imul($167,$172)|0);
  $174=$173>>>8;
  $175=((($174)+($in1_0))|0);
  $176=((HEAP32[(($46)>>2)])|0);
  $177=(Math_imul($176,$167)|0);
  $178=$177>>>8;
  $179=((($178)+($in2_0))|0);
  $180=((HEAP32[(($47)>>2)])|0);
  $181=(Math_imul($180,$167)|0);
  $182=$181>>>8;
  $183=((($182)+($in3_0))|0);
  $184=((HEAP16[(($_0)>>1)])|0);
  $185=($184&65535);
  $186=((HEAP32[(($48)>>2)])|0);
  $187=$186&$160;
  $188=((($187)+($185))|0);
  $189=(($_0+2)|0);
  $190=((HEAP16[(($189)>>1)])|0);
  $191=($190&65535);
  $192=((HEAP32[(($49)>>2)])|0);
  $193=$192&$160;
  $194=((($193)+($191))|0);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($9);
  __Z15update_envelopeR6slot_t($7);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($41)>>2)]=$132;
  $195=(($188)&65535);
  HEAP16[(($_0)>>1)]=$195;
  $196=(($194)&65535);
  HEAP16[(($189)>>1)]=$196;
  $197=(($_0+4)|0);
  $198=((($_096)-(1))|0);
  $199=($198|0)==0;
  if ($199) {
   break;
  } else {
   $_0=$197;$_096=$198;$CH_S0_OUT_1_0=$120;$in0_0=$171;$in1_0=$175;$in2_0=$179;$in3_0=$183;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($4)>>2)]=$120;
 HEAP32[(($6)>>2)]=$171;
 HEAP32[(($8)>>2)]=$175;
 HEAP32[(($10)>>2)]=$179;
 HEAP32[(($11)>>2)]=$183;
 return;
}
function __ZN18ym2612_update_chanILi1EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$_pn=0,$in3_0=0,$in2_0=0,$in1_0=0,$in0_0=0,$CH_S0_OUT_1_0=0,$_095=0,$_0=0,$YM2612_LFOcnt_0=0,$51=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($ch+4)|0);
 $5=(($ch+88)|0);
 $6=(($ch+144)|0);
 $7=(($ch+320)|0);
 $8=(($ch+376)|0);
 $9=(($ch+204)|0);
 $10=(($ch+260)|0);
 $11=(($ch+492)|0);
 $12=(($g+8196)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($3|0)==536870912;
 if ($14) {
  return;
 }
 $15=(($g+8192)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($11)>>2)])|0);
 $18=((HEAP32[(($10)>>2)])|0);
 $19=((HEAP32[(($8)>>2)])|0);
 $20=((HEAP32[(($6)>>2)])|0);
 $21=((HEAP32[(($4)>>2)])|0);
 $22=(($ch+156)|0);
 $23=(($ch+100)|0);
 $24=(($ch+120)|0);
 $25=(($ch+196)|0);
 $26=(($ch+124)|0);
 $27=(($ch+388)|0);
 $28=(($ch+332)|0);
 $29=(($ch+352)|0);
 $30=(($ch+428)|0);
 $31=(($ch+356)|0);
 $32=(($ch+272)|0);
 $33=(($ch+216)|0);
 $34=(($ch+236)|0);
 $35=(($ch+312)|0);
 $36=(($ch+240)|0);
 $37=(($ch+448)|0);
 $38=(($ch+468)|0);
 $39=(($ch+544)|0);
 $40=(($ch+472)|0);
 $41=(($ch)|0);
 $42=(($ch+28)|0);
 $43=(($ch+32)|0);
 $44=(($ch+148)|0);
 $45=(($ch+380)|0);
 $46=(($ch+264)|0);
 $47=(($ch+496)|0);
 $48=(($ch+16)|0);
 $49=(($ch+20)|0);
 $_0=$buf;$_095=$length;$CH_S0_OUT_1_0=$21;$in0_0=$20;$in1_0=$19;$in2_0=$18;$in3_0=$17;$_pn=$16;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($13))|0);
  $51=$YM2612_LFOcnt_0>>>18;
  $52=$51&1023;
  $53=(($g+26744+($52<<1))|0);
  $54=((HEAP16[(($53)>>1)])|0);
  $55=(($54<<16)>>16);
  $56=((HEAP32[(($22)>>2)])|0);
  $57=$56>>16;
  $58=(($g+10344+($57<<1))|0);
  $59=((HEAP16[(($58)>>1)])|0);
  $60=(($59<<16)>>16);
  $61=((HEAP32[(($23)>>2)])|0);
  $62=((($60)+($61))|0);
  $63=((HEAP32[(($24)>>2)])|0);
  $64=$62^$63;
  $65=((HEAP32[(($25)>>2)])|0);
  $66=$55>>($65|0);
  $67=((($66)+($64))|0);
  $68=((HEAP32[(($26)>>2)])|0);
  $69=((($62)-($68))|0);
  $70=$69>>31;
  $71=$70&$67;
  $72=((HEAP32[(($27)>>2)])|0);
  $73=$72>>16;
  $74=(($g+10344+($73<<1))|0);
  $75=((HEAP16[(($74)>>1)])|0);
  $76=(($75<<16)>>16);
  $77=((HEAP32[(($28)>>2)])|0);
  $78=((($76)+($77))|0);
  $79=((HEAP32[(($29)>>2)])|0);
  $80=$78^$79;
  $81=((HEAP32[(($30)>>2)])|0);
  $82=$55>>($81|0);
  $83=((($82)+($80))|0);
  $84=((HEAP32[(($31)>>2)])|0);
  $85=((($78)-($84))|0);
  $86=$85>>31;
  $87=$86&$83;
  $88=((HEAP32[(($32)>>2)])|0);
  $89=$88>>16;
  $90=(($g+10344+($89<<1))|0);
  $91=((HEAP16[(($90)>>1)])|0);
  $92=(($91<<16)>>16);
  $93=((HEAP32[(($33)>>2)])|0);
  $94=((($92)+($93))|0);
  $95=((HEAP32[(($34)>>2)])|0);
  $96=$94^$95;
  $97=((HEAP32[(($35)>>2)])|0);
  $98=$55>>($97|0);
  $99=((($98)+($96))|0);
  $100=((HEAP32[(($36)>>2)])|0);
  $101=((($94)-($100))|0);
  $102=$101>>31;
  $103=$102&$99;
  $104=((HEAP32[(($2)>>2)])|0);
  $105=$104>>16;
  $106=(($g+10344+($105<<1))|0);
  $107=((HEAP16[(($106)>>1)])|0);
  $108=(($107<<16)>>16);
  $109=((HEAP32[(($37)>>2)])|0);
  $110=((($108)+($109))|0);
  $111=((HEAP32[(($38)>>2)])|0);
  $112=$110^$111;
  $113=((HEAP32[(($39)>>2)])|0);
  $114=$55>>($113|0);
  $115=((($114)+($112))|0);
  $116=((HEAP32[(($40)>>2)])|0);
  $117=((($110)-($116))|0);
  $118=$117>>31;
  $119=$118&$115;
  $120=((HEAP32[(($41)>>2)])|0);
  $121=((($120)+($CH_S0_OUT_1_0))|0);
  $122=((HEAP32[(($42)>>2)])|0);
  $123=$121>>($122|0);
  $124=((($123)+($in0_0))|0);
  $125=$124>>>14;
  $126=$125&4095;
  $127=(($g+($126<<1))|0);
  $128=((HEAP16[(($127)>>1)])|0);
  $129=(($128<<16)>>16);
  $130=((($129)+($71))|0);
  $131=(($g+30840+($130<<2))|0);
  $132=((HEAP32[(($131)>>2)])|0);
  $133=((($120)+($in2_0))|0);
  $134=$in1_0>>>14;
  $135=$134&4095;
  $136=(($g+($135<<1))|0);
  $137=((HEAP16[(($136)>>1)])|0);
  $138=(($137<<16)>>16);
  $139=((($138)+($87))|0);
  $140=(($g+30840+($139<<2))|0);
  $141=((HEAP32[(($140)>>2)])|0);
  $142=((($133)+($141))|0);
  $143=$142>>>14;
  $144=$143&4095;
  $145=(($g+($144<<1))|0);
  $146=((HEAP16[(($145)>>1)])|0);
  $147=(($146<<16)>>16);
  $148=((($147)+($103))|0);
  $149=(($g+30840+($148<<2))|0);
  $150=((HEAP32[(($149)>>2)])|0);
  $151=((($150)+($in3_0))|0);
  $152=$151>>>14;
  $153=$152&4095;
  $154=(($g+($153<<1))|0);
  $155=((HEAP16[(($154)>>1)])|0);
  $156=(($155<<16)>>16);
  $157=((($156)+($119))|0);
  $158=(($g+30840+($157<<2))|0);
  $159=((HEAP32[(($158)>>2)])|0);
  $160=$159>>16;
  $161=(($g+28792+($52<<1))|0);
  $162=((HEAP16[(($161)>>1)])|0);
  $163=(($162<<16)>>16);
  $164=((HEAP32[(($43)>>2)])|0);
  $165=(Math_imul($163,$164)|0);
  $166=$165>>10;
  $167=((($166)+(256))|0);
  $168=((HEAP32[(($44)>>2)])|0);
  $169=(Math_imul($167,$168)|0);
  $170=$169>>>8;
  $171=((($170)+($in0_0))|0);
  $172=((HEAP32[(($45)>>2)])|0);
  $173=(Math_imul($167,$172)|0);
  $174=$173>>>8;
  $175=((($174)+($in1_0))|0);
  $176=((HEAP32[(($46)>>2)])|0);
  $177=(Math_imul($176,$167)|0);
  $178=$177>>>8;
  $179=((($178)+($in2_0))|0);
  $180=((HEAP32[(($47)>>2)])|0);
  $181=(Math_imul($180,$167)|0);
  $182=$181>>>8;
  $183=((($182)+($in3_0))|0);
  $184=((HEAP16[(($_0)>>1)])|0);
  $185=($184&65535);
  $186=((HEAP32[(($48)>>2)])|0);
  $187=$186&$160;
  $188=((($187)+($185))|0);
  $189=(($_0+2)|0);
  $190=((HEAP16[(($189)>>1)])|0);
  $191=($190&65535);
  $192=((HEAP32[(($49)>>2)])|0);
  $193=$192&$160;
  $194=((($193)+($191))|0);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($9);
  __Z15update_envelopeR6slot_t($7);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($41)>>2)]=$132;
  $195=(($188)&65535);
  HEAP16[(($_0)>>1)]=$195;
  $196=(($194)&65535);
  HEAP16[(($189)>>1)]=$196;
  $197=(($_0+4)|0);
  $198=((($_095)-(1))|0);
  $199=($198|0)==0;
  if ($199) {
   break;
  } else {
   $_0=$197;$_095=$198;$CH_S0_OUT_1_0=$120;$in0_0=$171;$in1_0=$175;$in2_0=$179;$in3_0=$183;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($4)>>2)]=$120;
 HEAP32[(($6)>>2)]=$171;
 HEAP32[(($8)>>2)]=$175;
 HEAP32[(($10)>>2)]=$179;
 HEAP32[(($11)>>2)]=$183;
 return;
}
function __ZN18ym2612_update_chanILi2EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$_pn=0,$in3_0=0,$in2_0=0,$in1_0=0,$in0_0=0,$CH_S0_OUT_1_0=0,$_095=0,$_0=0,$YM2612_LFOcnt_0=0,$51=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($ch+4)|0);
 $5=(($ch+88)|0);
 $6=(($ch+144)|0);
 $7=(($ch+320)|0);
 $8=(($ch+376)|0);
 $9=(($ch+204)|0);
 $10=(($ch+260)|0);
 $11=(($ch+492)|0);
 $12=(($g+8196)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($3|0)==536870912;
 if ($14) {
  return;
 }
 $15=(($g+8192)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($11)>>2)])|0);
 $18=((HEAP32[(($10)>>2)])|0);
 $19=((HEAP32[(($8)>>2)])|0);
 $20=((HEAP32[(($6)>>2)])|0);
 $21=((HEAP32[(($4)>>2)])|0);
 $22=(($ch+156)|0);
 $23=(($ch+100)|0);
 $24=(($ch+120)|0);
 $25=(($ch+196)|0);
 $26=(($ch+124)|0);
 $27=(($ch+388)|0);
 $28=(($ch+332)|0);
 $29=(($ch+352)|0);
 $30=(($ch+428)|0);
 $31=(($ch+356)|0);
 $32=(($ch+272)|0);
 $33=(($ch+216)|0);
 $34=(($ch+236)|0);
 $35=(($ch+312)|0);
 $36=(($ch+240)|0);
 $37=(($ch+448)|0);
 $38=(($ch+468)|0);
 $39=(($ch+544)|0);
 $40=(($ch+472)|0);
 $41=(($ch)|0);
 $42=(($ch+28)|0);
 $43=(($ch+32)|0);
 $44=(($ch+148)|0);
 $45=(($ch+380)|0);
 $46=(($ch+264)|0);
 $47=(($ch+496)|0);
 $48=(($ch+16)|0);
 $49=(($ch+20)|0);
 $_0=$buf;$_095=$length;$CH_S0_OUT_1_0=$21;$in0_0=$20;$in1_0=$19;$in2_0=$18;$in3_0=$17;$_pn=$16;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($13))|0);
  $51=$YM2612_LFOcnt_0>>>18;
  $52=$51&1023;
  $53=(($g+26744+($52<<1))|0);
  $54=((HEAP16[(($53)>>1)])|0);
  $55=(($54<<16)>>16);
  $56=((HEAP32[(($22)>>2)])|0);
  $57=$56>>16;
  $58=(($g+10344+($57<<1))|0);
  $59=((HEAP16[(($58)>>1)])|0);
  $60=(($59<<16)>>16);
  $61=((HEAP32[(($23)>>2)])|0);
  $62=((($60)+($61))|0);
  $63=((HEAP32[(($24)>>2)])|0);
  $64=$62^$63;
  $65=((HEAP32[(($25)>>2)])|0);
  $66=$55>>($65|0);
  $67=((($66)+($64))|0);
  $68=((HEAP32[(($26)>>2)])|0);
  $69=((($62)-($68))|0);
  $70=$69>>31;
  $71=$70&$67;
  $72=((HEAP32[(($27)>>2)])|0);
  $73=$72>>16;
  $74=(($g+10344+($73<<1))|0);
  $75=((HEAP16[(($74)>>1)])|0);
  $76=(($75<<16)>>16);
  $77=((HEAP32[(($28)>>2)])|0);
  $78=((($76)+($77))|0);
  $79=((HEAP32[(($29)>>2)])|0);
  $80=$78^$79;
  $81=((HEAP32[(($30)>>2)])|0);
  $82=$55>>($81|0);
  $83=((($82)+($80))|0);
  $84=((HEAP32[(($31)>>2)])|0);
  $85=((($78)-($84))|0);
  $86=$85>>31;
  $87=$86&$83;
  $88=((HEAP32[(($32)>>2)])|0);
  $89=$88>>16;
  $90=(($g+10344+($89<<1))|0);
  $91=((HEAP16[(($90)>>1)])|0);
  $92=(($91<<16)>>16);
  $93=((HEAP32[(($33)>>2)])|0);
  $94=((($92)+($93))|0);
  $95=((HEAP32[(($34)>>2)])|0);
  $96=$94^$95;
  $97=((HEAP32[(($35)>>2)])|0);
  $98=$55>>($97|0);
  $99=((($98)+($96))|0);
  $100=((HEAP32[(($36)>>2)])|0);
  $101=((($94)-($100))|0);
  $102=$101>>31;
  $103=$102&$99;
  $104=((HEAP32[(($2)>>2)])|0);
  $105=$104>>16;
  $106=(($g+10344+($105<<1))|0);
  $107=((HEAP16[(($106)>>1)])|0);
  $108=(($107<<16)>>16);
  $109=((HEAP32[(($37)>>2)])|0);
  $110=((($108)+($109))|0);
  $111=((HEAP32[(($38)>>2)])|0);
  $112=$110^$111;
  $113=((HEAP32[(($39)>>2)])|0);
  $114=$55>>($113|0);
  $115=((($114)+($112))|0);
  $116=((HEAP32[(($40)>>2)])|0);
  $117=((($110)-($116))|0);
  $118=$117>>31;
  $119=$118&$115;
  $120=((HEAP32[(($41)>>2)])|0);
  $121=((($120)+($CH_S0_OUT_1_0))|0);
  $122=((HEAP32[(($42)>>2)])|0);
  $123=$121>>($122|0);
  $124=((($123)+($in0_0))|0);
  $125=$124>>>14;
  $126=$125&4095;
  $127=(($g+($126<<1))|0);
  $128=((HEAP16[(($127)>>1)])|0);
  $129=(($128<<16)>>16);
  $130=((($129)+($71))|0);
  $131=(($g+30840+($130<<2))|0);
  $132=((HEAP32[(($131)>>2)])|0);
  $133=$in1_0>>>14;
  $134=$133&4095;
  $135=(($g+($134<<1))|0);
  $136=((HEAP16[(($135)>>1)])|0);
  $137=(($136<<16)>>16);
  $138=((($137)+($87))|0);
  $139=(($g+30840+($138<<2))|0);
  $140=((HEAP32[(($139)>>2)])|0);
  $141=((($140)+($in2_0))|0);
  $142=((($120)+($in3_0))|0);
  $143=$141>>>14;
  $144=$143&4095;
  $145=(($g+($144<<1))|0);
  $146=((HEAP16[(($145)>>1)])|0);
  $147=(($146<<16)>>16);
  $148=((($147)+($103))|0);
  $149=(($g+30840+($148<<2))|0);
  $150=((HEAP32[(($149)>>2)])|0);
  $151=((($142)+($150))|0);
  $152=$151>>>14;
  $153=$152&4095;
  $154=(($g+($153<<1))|0);
  $155=((HEAP16[(($154)>>1)])|0);
  $156=(($155<<16)>>16);
  $157=((($156)+($119))|0);
  $158=(($g+30840+($157<<2))|0);
  $159=((HEAP32[(($158)>>2)])|0);
  $160=$159>>16;
  $161=(($g+28792+($52<<1))|0);
  $162=((HEAP16[(($161)>>1)])|0);
  $163=(($162<<16)>>16);
  $164=((HEAP32[(($43)>>2)])|0);
  $165=(Math_imul($163,$164)|0);
  $166=$165>>10;
  $167=((($166)+(256))|0);
  $168=((HEAP32[(($44)>>2)])|0);
  $169=(Math_imul($167,$168)|0);
  $170=$169>>>8;
  $171=((($170)+($in0_0))|0);
  $172=((HEAP32[(($45)>>2)])|0);
  $173=(Math_imul($167,$172)|0);
  $174=$173>>>8;
  $175=((($174)+($in1_0))|0);
  $176=((HEAP32[(($46)>>2)])|0);
  $177=(Math_imul($176,$167)|0);
  $178=$177>>>8;
  $179=((($178)+($in2_0))|0);
  $180=((HEAP32[(($47)>>2)])|0);
  $181=(Math_imul($180,$167)|0);
  $182=$181>>>8;
  $183=((($182)+($in3_0))|0);
  $184=((HEAP16[(($_0)>>1)])|0);
  $185=($184&65535);
  $186=((HEAP32[(($48)>>2)])|0);
  $187=$186&$160;
  $188=((($187)+($185))|0);
  $189=(($_0+2)|0);
  $190=((HEAP16[(($189)>>1)])|0);
  $191=($190&65535);
  $192=((HEAP32[(($49)>>2)])|0);
  $193=$192&$160;
  $194=((($193)+($191))|0);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($9);
  __Z15update_envelopeR6slot_t($7);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($41)>>2)]=$132;
  $195=(($188)&65535);
  HEAP16[(($_0)>>1)]=$195;
  $196=(($194)&65535);
  HEAP16[(($189)>>1)]=$196;
  $197=(($_0+4)|0);
  $198=((($_095)-(1))|0);
  $199=($198|0)==0;
  if ($199) {
   break;
  } else {
   $_0=$197;$_095=$198;$CH_S0_OUT_1_0=$120;$in0_0=$171;$in1_0=$175;$in2_0=$179;$in3_0=$183;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($4)>>2)]=$120;
 HEAP32[(($6)>>2)]=$171;
 HEAP32[(($8)>>2)]=$175;
 HEAP32[(($10)>>2)]=$179;
 HEAP32[(($11)>>2)]=$183;
 return;
}
function __ZN18ym2612_update_chanILi3EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$_pn=0,$in3_0=0,$in2_0=0,$in1_0=0,$in0_0=0,$CH_S0_OUT_1_0=0,$_095=0,$_0=0,$YM2612_LFOcnt_0=0,$51=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($ch+4)|0);
 $5=(($ch+88)|0);
 $6=(($ch+144)|0);
 $7=(($ch+320)|0);
 $8=(($ch+376)|0);
 $9=(($ch+204)|0);
 $10=(($ch+260)|0);
 $11=(($ch+492)|0);
 $12=(($g+8196)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($3|0)==536870912;
 if ($14) {
  return;
 }
 $15=(($g+8192)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($11)>>2)])|0);
 $18=((HEAP32[(($10)>>2)])|0);
 $19=((HEAP32[(($8)>>2)])|0);
 $20=((HEAP32[(($6)>>2)])|0);
 $21=((HEAP32[(($4)>>2)])|0);
 $22=(($ch+156)|0);
 $23=(($ch+100)|0);
 $24=(($ch+120)|0);
 $25=(($ch+196)|0);
 $26=(($ch+124)|0);
 $27=(($ch+388)|0);
 $28=(($ch+332)|0);
 $29=(($ch+352)|0);
 $30=(($ch+428)|0);
 $31=(($ch+356)|0);
 $32=(($ch+272)|0);
 $33=(($ch+216)|0);
 $34=(($ch+236)|0);
 $35=(($ch+312)|0);
 $36=(($ch+240)|0);
 $37=(($ch+448)|0);
 $38=(($ch+468)|0);
 $39=(($ch+544)|0);
 $40=(($ch+472)|0);
 $41=(($ch)|0);
 $42=(($ch+28)|0);
 $43=(($ch+32)|0);
 $44=(($ch+148)|0);
 $45=(($ch+380)|0);
 $46=(($ch+264)|0);
 $47=(($ch+496)|0);
 $48=(($ch+16)|0);
 $49=(($ch+20)|0);
 $_0=$buf;$_095=$length;$CH_S0_OUT_1_0=$21;$in0_0=$20;$in1_0=$19;$in2_0=$18;$in3_0=$17;$_pn=$16;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($13))|0);
  $51=$YM2612_LFOcnt_0>>>18;
  $52=$51&1023;
  $53=(($g+26744+($52<<1))|0);
  $54=((HEAP16[(($53)>>1)])|0);
  $55=(($54<<16)>>16);
  $56=((HEAP32[(($22)>>2)])|0);
  $57=$56>>16;
  $58=(($g+10344+($57<<1))|0);
  $59=((HEAP16[(($58)>>1)])|0);
  $60=(($59<<16)>>16);
  $61=((HEAP32[(($23)>>2)])|0);
  $62=((($60)+($61))|0);
  $63=((HEAP32[(($24)>>2)])|0);
  $64=$62^$63;
  $65=((HEAP32[(($25)>>2)])|0);
  $66=$55>>($65|0);
  $67=((($66)+($64))|0);
  $68=((HEAP32[(($26)>>2)])|0);
  $69=((($62)-($68))|0);
  $70=$69>>31;
  $71=$70&$67;
  $72=((HEAP32[(($27)>>2)])|0);
  $73=$72>>16;
  $74=(($g+10344+($73<<1))|0);
  $75=((HEAP16[(($74)>>1)])|0);
  $76=(($75<<16)>>16);
  $77=((HEAP32[(($28)>>2)])|0);
  $78=((($76)+($77))|0);
  $79=((HEAP32[(($29)>>2)])|0);
  $80=$78^$79;
  $81=((HEAP32[(($30)>>2)])|0);
  $82=$55>>($81|0);
  $83=((($82)+($80))|0);
  $84=((HEAP32[(($31)>>2)])|0);
  $85=((($78)-($84))|0);
  $86=$85>>31;
  $87=$86&$83;
  $88=((HEAP32[(($32)>>2)])|0);
  $89=$88>>16;
  $90=(($g+10344+($89<<1))|0);
  $91=((HEAP16[(($90)>>1)])|0);
  $92=(($91<<16)>>16);
  $93=((HEAP32[(($33)>>2)])|0);
  $94=((($92)+($93))|0);
  $95=((HEAP32[(($34)>>2)])|0);
  $96=$94^$95;
  $97=((HEAP32[(($35)>>2)])|0);
  $98=$55>>($97|0);
  $99=((($98)+($96))|0);
  $100=((HEAP32[(($36)>>2)])|0);
  $101=((($94)-($100))|0);
  $102=$101>>31;
  $103=$102&$99;
  $104=((HEAP32[(($2)>>2)])|0);
  $105=$104>>16;
  $106=(($g+10344+($105<<1))|0);
  $107=((HEAP16[(($106)>>1)])|0);
  $108=(($107<<16)>>16);
  $109=((HEAP32[(($37)>>2)])|0);
  $110=((($108)+($109))|0);
  $111=((HEAP32[(($38)>>2)])|0);
  $112=$110^$111;
  $113=((HEAP32[(($39)>>2)])|0);
  $114=$55>>($113|0);
  $115=((($114)+($112))|0);
  $116=((HEAP32[(($40)>>2)])|0);
  $117=((($110)-($116))|0);
  $118=$117>>31;
  $119=$118&$115;
  $120=((HEAP32[(($41)>>2)])|0);
  $121=((($120)+($CH_S0_OUT_1_0))|0);
  $122=((HEAP32[(($42)>>2)])|0);
  $123=$121>>($122|0);
  $124=((($123)+($in0_0))|0);
  $125=$124>>>14;
  $126=$125&4095;
  $127=(($g+($126<<1))|0);
  $128=((HEAP16[(($127)>>1)])|0);
  $129=(($128<<16)>>16);
  $130=((($129)+($71))|0);
  $131=(($g+30840+($130<<2))|0);
  $132=((HEAP32[(($131)>>2)])|0);
  $133=((($120)+($in1_0))|0);
  $134=$133>>>14;
  $135=$134&4095;
  $136=(($g+($135<<1))|0);
  $137=((HEAP16[(($136)>>1)])|0);
  $138=(($137<<16)>>16);
  $139=((($138)+($87))|0);
  $140=(($g+30840+($139<<2))|0);
  $141=((HEAP32[(($140)>>2)])|0);
  $142=((($141)+($in3_0))|0);
  $143=$in2_0>>>14;
  $144=$143&4095;
  $145=(($g+($144<<1))|0);
  $146=((HEAP16[(($145)>>1)])|0);
  $147=(($146<<16)>>16);
  $148=((($147)+($103))|0);
  $149=(($g+30840+($148<<2))|0);
  $150=((HEAP32[(($149)>>2)])|0);
  $151=((($142)+($150))|0);
  $152=$151>>>14;
  $153=$152&4095;
  $154=(($g+($153<<1))|0);
  $155=((HEAP16[(($154)>>1)])|0);
  $156=(($155<<16)>>16);
  $157=((($156)+($119))|0);
  $158=(($g+30840+($157<<2))|0);
  $159=((HEAP32[(($158)>>2)])|0);
  $160=$159>>16;
  $161=(($g+28792+($52<<1))|0);
  $162=((HEAP16[(($161)>>1)])|0);
  $163=(($162<<16)>>16);
  $164=((HEAP32[(($43)>>2)])|0);
  $165=(Math_imul($163,$164)|0);
  $166=$165>>10;
  $167=((($166)+(256))|0);
  $168=((HEAP32[(($44)>>2)])|0);
  $169=(Math_imul($167,$168)|0);
  $170=$169>>>8;
  $171=((($170)+($in0_0))|0);
  $172=((HEAP32[(($45)>>2)])|0);
  $173=(Math_imul($167,$172)|0);
  $174=$173>>>8;
  $175=((($174)+($in1_0))|0);
  $176=((HEAP32[(($46)>>2)])|0);
  $177=(Math_imul($176,$167)|0);
  $178=$177>>>8;
  $179=((($178)+($in2_0))|0);
  $180=((HEAP32[(($47)>>2)])|0);
  $181=(Math_imul($180,$167)|0);
  $182=$181>>>8;
  $183=((($182)+($in3_0))|0);
  $184=((HEAP16[(($_0)>>1)])|0);
  $185=($184&65535);
  $186=((HEAP32[(($48)>>2)])|0);
  $187=$186&$160;
  $188=((($187)+($185))|0);
  $189=(($_0+2)|0);
  $190=((HEAP16[(($189)>>1)])|0);
  $191=($190&65535);
  $192=((HEAP32[(($49)>>2)])|0);
  $193=$192&$160;
  $194=((($193)+($191))|0);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($9);
  __Z15update_envelopeR6slot_t($7);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($41)>>2)]=$132;
  $195=(($188)&65535);
  HEAP16[(($_0)>>1)]=$195;
  $196=(($194)&65535);
  HEAP16[(($189)>>1)]=$196;
  $197=(($_0+4)|0);
  $198=((($_095)-(1))|0);
  $199=($198|0)==0;
  if ($199) {
   break;
  } else {
   $_0=$197;$_095=$198;$CH_S0_OUT_1_0=$120;$in0_0=$171;$in1_0=$175;$in2_0=$179;$in3_0=$183;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($4)>>2)]=$120;
 HEAP32[(($6)>>2)]=$171;
 HEAP32[(($8)>>2)]=$175;
 HEAP32[(($10)>>2)]=$179;
 HEAP32[(($11)>>2)]=$183;
 return;
}
function __ZN18ym2612_update_chanILi4EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$_pn=0,$in3_0=0,$in2_0=0,$in1_0=0,$in0_0=0,$CH_S0_OUT_1_0=0,$_096=0;
 var $_0=0,$YM2612_LFOcnt_0=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($3)-(536870912))|0);
 $5=(($ch+320)|0);
 $6=(($ch+388)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((($7)-(536870912))|0);
 $9=$8|$4;
 $10=(($ch+4)|0);
 $11=(($ch+88)|0);
 $12=(($ch+144)|0);
 $13=(($ch+376)|0);
 $14=(($ch+204)|0);
 $15=(($ch+260)|0);
 $16=(($ch+492)|0);
 $17=(($g+8196)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($9|0)==0;
 if ($19) {
  return;
 }
 $20=(($g+8192)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=((HEAP32[(($16)>>2)])|0);
 $23=((HEAP32[(($15)>>2)])|0);
 $24=((HEAP32[(($13)>>2)])|0);
 $25=((HEAP32[(($12)>>2)])|0);
 $26=((HEAP32[(($10)>>2)])|0);
 $27=(($ch+156)|0);
 $28=(($ch+100)|0);
 $29=(($ch+120)|0);
 $30=(($ch+196)|0);
 $31=(($ch+124)|0);
 $32=(($ch+332)|0);
 $33=(($ch+352)|0);
 $34=(($ch+428)|0);
 $35=(($ch+356)|0);
 $36=(($ch+272)|0);
 $37=(($ch+216)|0);
 $38=(($ch+236)|0);
 $39=(($ch+312)|0);
 $40=(($ch+240)|0);
 $41=(($ch+448)|0);
 $42=(($ch+468)|0);
 $43=(($ch+544)|0);
 $44=(($ch+472)|0);
 $45=(($ch)|0);
 $46=(($ch+28)|0);
 $47=(($ch+32)|0);
 $48=(($ch+148)|0);
 $49=(($ch+380)|0);
 $50=(($ch+264)|0);
 $51=(($ch+496)|0);
 $52=(($ch+16)|0);
 $53=(($ch+20)|0);
 $_0=$buf;$_096=$length;$CH_S0_OUT_1_0=$26;$in0_0=$25;$in1_0=$24;$in2_0=$23;$in3_0=$22;$_pn=$21;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($18))|0);
  $55=$YM2612_LFOcnt_0>>>18;
  $56=$55&1023;
  $57=(($g+26744+($56<<1))|0);
  $58=((HEAP16[(($57)>>1)])|0);
  $59=(($58<<16)>>16);
  $60=((HEAP32[(($27)>>2)])|0);
  $61=$60>>16;
  $62=(($g+10344+($61<<1))|0);
  $63=((HEAP16[(($62)>>1)])|0);
  $64=(($63<<16)>>16);
  $65=((HEAP32[(($28)>>2)])|0);
  $66=((($64)+($65))|0);
  $67=((HEAP32[(($29)>>2)])|0);
  $68=$66^$67;
  $69=((HEAP32[(($30)>>2)])|0);
  $70=$59>>($69|0);
  $71=((($70)+($68))|0);
  $72=((HEAP32[(($31)>>2)])|0);
  $73=((($66)-($72))|0);
  $74=$73>>31;
  $75=$74&$71;
  $76=((HEAP32[(($6)>>2)])|0);
  $77=$76>>16;
  $78=(($g+10344+($77<<1))|0);
  $79=((HEAP16[(($78)>>1)])|0);
  $80=(($79<<16)>>16);
  $81=((HEAP32[(($32)>>2)])|0);
  $82=((($80)+($81))|0);
  $83=((HEAP32[(($33)>>2)])|0);
  $84=$82^$83;
  $85=((HEAP32[(($34)>>2)])|0);
  $86=$59>>($85|0);
  $87=((($86)+($84))|0);
  $88=((HEAP32[(($35)>>2)])|0);
  $89=((($82)-($88))|0);
  $90=$89>>31;
  $91=$90&$87;
  $92=((HEAP32[(($36)>>2)])|0);
  $93=$92>>16;
  $94=(($g+10344+($93<<1))|0);
  $95=((HEAP16[(($94)>>1)])|0);
  $96=(($95<<16)>>16);
  $97=((HEAP32[(($37)>>2)])|0);
  $98=((($96)+($97))|0);
  $99=((HEAP32[(($38)>>2)])|0);
  $100=$98^$99;
  $101=((HEAP32[(($39)>>2)])|0);
  $102=$59>>($101|0);
  $103=((($102)+($100))|0);
  $104=((HEAP32[(($40)>>2)])|0);
  $105=((($98)-($104))|0);
  $106=$105>>31;
  $107=$106&$103;
  $108=((HEAP32[(($2)>>2)])|0);
  $109=$108>>16;
  $110=(($g+10344+($109<<1))|0);
  $111=((HEAP16[(($110)>>1)])|0);
  $112=(($111<<16)>>16);
  $113=((HEAP32[(($41)>>2)])|0);
  $114=((($112)+($113))|0);
  $115=((HEAP32[(($42)>>2)])|0);
  $116=$114^$115;
  $117=((HEAP32[(($43)>>2)])|0);
  $118=$59>>($117|0);
  $119=((($118)+($116))|0);
  $120=((HEAP32[(($44)>>2)])|0);
  $121=((($114)-($120))|0);
  $122=$121>>31;
  $123=$122&$119;
  $124=((HEAP32[(($45)>>2)])|0);
  $125=((($124)+($CH_S0_OUT_1_0))|0);
  $126=((HEAP32[(($46)>>2)])|0);
  $127=$125>>($126|0);
  $128=((($127)+($in0_0))|0);
  $129=$128>>>14;
  $130=$129&4095;
  $131=(($g+($130<<1))|0);
  $132=((HEAP16[(($131)>>1)])|0);
  $133=(($132<<16)>>16);
  $134=((($133)+($75))|0);
  $135=(($g+30840+($134<<2))|0);
  $136=((HEAP32[(($135)>>2)])|0);
  $137=$in2_0>>>14;
  $138=$137&4095;
  $139=(($g+($138<<1))|0);
  $140=((HEAP16[(($139)>>1)])|0);
  $141=(($140<<16)>>16);
  $142=((($141)+($107))|0);
  $143=(($g+30840+($142<<2))|0);
  $144=((HEAP32[(($143)>>2)])|0);
  $145=((($144)+($in3_0))|0);
  $146=$145>>>14;
  $147=$146&4095;
  $148=(($g+($147<<1))|0);
  $149=((HEAP16[(($148)>>1)])|0);
  $150=(($149<<16)>>16);
  $151=((($150)+($123))|0);
  $152=(($g+30840+($151<<2))|0);
  $153=((HEAP32[(($152)>>2)])|0);
  $154=((($124)+($in1_0))|0);
  $155=$154>>>14;
  $156=$155&4095;
  $157=(($g+($156<<1))|0);
  $158=((HEAP16[(($157)>>1)])|0);
  $159=(($158<<16)>>16);
  $160=((($159)+($91))|0);
  $161=(($g+30840+($160<<2))|0);
  $162=((HEAP32[(($161)>>2)])|0);
  $163=((($162)+($153))|0);
  $164=$163>>16;
  $165=(($g+28792+($56<<1))|0);
  $166=((HEAP16[(($165)>>1)])|0);
  $167=(($166<<16)>>16);
  $168=((HEAP32[(($47)>>2)])|0);
  $169=(Math_imul($167,$168)|0);
  $170=$169>>10;
  $171=((($170)+(256))|0);
  $172=((HEAP32[(($48)>>2)])|0);
  $173=(Math_imul($171,$172)|0);
  $174=$173>>>8;
  $175=((($174)+($in0_0))|0);
  $176=((HEAP32[(($49)>>2)])|0);
  $177=(Math_imul($171,$176)|0);
  $178=$177>>>8;
  $179=((($178)+($in1_0))|0);
  $180=((HEAP32[(($50)>>2)])|0);
  $181=(Math_imul($180,$171)|0);
  $182=$181>>>8;
  $183=((($182)+($in2_0))|0);
  $184=((HEAP32[(($51)>>2)])|0);
  $185=(Math_imul($184,$171)|0);
  $186=$185>>>8;
  $187=((($186)+($in3_0))|0);
  $188=((HEAP16[(($_0)>>1)])|0);
  $189=($188&65535);
  $190=((HEAP32[(($52)>>2)])|0);
  $191=$190&$164;
  $192=((($191)+($189))|0);
  $193=(($_0+2)|0);
  $194=((HEAP16[(($193)>>1)])|0);
  $195=($194&65535);
  $196=((HEAP32[(($53)>>2)])|0);
  $197=$196&$164;
  $198=((($197)+($195))|0);
  __Z15update_envelopeR6slot_t($11);
  __Z15update_envelopeR6slot_t($14);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($45)>>2)]=$136;
  $199=(($192)&65535);
  HEAP16[(($_0)>>1)]=$199;
  $200=(($198)&65535);
  HEAP16[(($193)>>1)]=$200;
  $201=(($_0+4)|0);
  $202=((($_096)-(1))|0);
  $203=($202|0)==0;
  if ($203) {
   break;
  } else {
   $_0=$201;$_096=$202;$CH_S0_OUT_1_0=$124;$in0_0=$175;$in1_0=$179;$in2_0=$183;$in3_0=$187;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($10)>>2)]=$124;
 HEAP32[(($12)>>2)]=$175;
 HEAP32[(($13)>>2)]=$179;
 HEAP32[(($15)>>2)]=$183;
 HEAP32[(($16)>>2)]=$187;
 return;
}
function __ZN18ym2612_update_chanILi5EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$_pn=0,$in3_0=0,$in2_0=0,$in1_0=0;
 var $in0_0=0,$CH_S0_OUT_1_0=0,$_0100=0,$_0=0,$YM2612_LFOcnt_0=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($3)-(536870912))|0);
 $5=(($ch+204)|0);
 $6=(($ch+272)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((($7)-(536870912))|0);
 $9=$8|$4;
 $10=(($ch+320)|0);
 $11=(($ch+388)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)-(536870912))|0);
 $14=$9|$13;
 $15=(($ch+4)|0);
 $16=(($ch+88)|0);
 $17=(($ch+144)|0);
 $18=(($ch+376)|0);
 $19=(($ch+260)|0);
 $20=(($ch+492)|0);
 $21=(($g+8196)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($14|0)==0;
 if ($23) {
  return;
 }
 $24=(($g+8192)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((HEAP32[(($20)>>2)])|0);
 $27=((HEAP32[(($19)>>2)])|0);
 $28=((HEAP32[(($18)>>2)])|0);
 $29=((HEAP32[(($17)>>2)])|0);
 $30=((HEAP32[(($15)>>2)])|0);
 $31=(($ch+156)|0);
 $32=(($ch+100)|0);
 $33=(($ch+120)|0);
 $34=(($ch+196)|0);
 $35=(($ch+124)|0);
 $36=(($ch+332)|0);
 $37=(($ch+352)|0);
 $38=(($ch+428)|0);
 $39=(($ch+356)|0);
 $40=(($ch+216)|0);
 $41=(($ch+236)|0);
 $42=(($ch+312)|0);
 $43=(($ch+240)|0);
 $44=(($ch+448)|0);
 $45=(($ch+468)|0);
 $46=(($ch+544)|0);
 $47=(($ch+472)|0);
 $48=(($ch)|0);
 $49=(($ch+28)|0);
 $50=(($ch+32)|0);
 $51=(($ch+148)|0);
 $52=(($ch+380)|0);
 $53=(($ch+264)|0);
 $54=(($ch+496)|0);
 $55=(($ch+16)|0);
 $56=(($ch+20)|0);
 $_0=$buf;$_0100=$length;$CH_S0_OUT_1_0=$30;$in0_0=$29;$in1_0=$28;$in2_0=$27;$in3_0=$26;$_pn=$25;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($22))|0);
  $58=$YM2612_LFOcnt_0>>>18;
  $59=$58&1023;
  $60=(($g+26744+($59<<1))|0);
  $61=((HEAP16[(($60)>>1)])|0);
  $62=(($61<<16)>>16);
  $63=((HEAP32[(($31)>>2)])|0);
  $64=$63>>16;
  $65=(($g+10344+($64<<1))|0);
  $66=((HEAP16[(($65)>>1)])|0);
  $67=(($66<<16)>>16);
  $68=((HEAP32[(($32)>>2)])|0);
  $69=((($67)+($68))|0);
  $70=((HEAP32[(($33)>>2)])|0);
  $71=$69^$70;
  $72=((HEAP32[(($34)>>2)])|0);
  $73=$62>>($72|0);
  $74=((($73)+($71))|0);
  $75=((HEAP32[(($35)>>2)])|0);
  $76=((($69)-($75))|0);
  $77=$76>>31;
  $78=$77&$74;
  $79=((HEAP32[(($11)>>2)])|0);
  $80=$79>>16;
  $81=(($g+10344+($80<<1))|0);
  $82=((HEAP16[(($81)>>1)])|0);
  $83=(($82<<16)>>16);
  $84=((HEAP32[(($36)>>2)])|0);
  $85=((($83)+($84))|0);
  $86=((HEAP32[(($37)>>2)])|0);
  $87=$85^$86;
  $88=((HEAP32[(($38)>>2)])|0);
  $89=$62>>($88|0);
  $90=((($89)+($87))|0);
  $91=((HEAP32[(($39)>>2)])|0);
  $92=((($85)-($91))|0);
  $93=$92>>31;
  $94=$93&$90;
  $95=((HEAP32[(($6)>>2)])|0);
  $96=$95>>16;
  $97=(($g+10344+($96<<1))|0);
  $98=((HEAP16[(($97)>>1)])|0);
  $99=(($98<<16)>>16);
  $100=((HEAP32[(($40)>>2)])|0);
  $101=((($99)+($100))|0);
  $102=((HEAP32[(($41)>>2)])|0);
  $103=$101^$102;
  $104=((HEAP32[(($42)>>2)])|0);
  $105=$62>>($104|0);
  $106=((($105)+($103))|0);
  $107=((HEAP32[(($43)>>2)])|0);
  $108=((($101)-($107))|0);
  $109=$108>>31;
  $110=$109&$106;
  $111=((HEAP32[(($2)>>2)])|0);
  $112=$111>>16;
  $113=(($g+10344+($112<<1))|0);
  $114=((HEAP16[(($113)>>1)])|0);
  $115=(($114<<16)>>16);
  $116=((HEAP32[(($44)>>2)])|0);
  $117=((($115)+($116))|0);
  $118=((HEAP32[(($45)>>2)])|0);
  $119=$117^$118;
  $120=((HEAP32[(($46)>>2)])|0);
  $121=$62>>($120|0);
  $122=((($121)+($119))|0);
  $123=((HEAP32[(($47)>>2)])|0);
  $124=((($117)-($123))|0);
  $125=$124>>31;
  $126=$125&$122;
  $127=((HEAP32[(($48)>>2)])|0);
  $128=((($127)+($CH_S0_OUT_1_0))|0);
  $129=((HEAP32[(($49)>>2)])|0);
  $130=$128>>($129|0);
  $131=((($130)+($in0_0))|0);
  $132=$131>>>14;
  $133=$132&4095;
  $134=(($g+($133<<1))|0);
  $135=((HEAP16[(($134)>>1)])|0);
  $136=(($135<<16)>>16);
  $137=((($136)+($78))|0);
  $138=(($g+30840+($137<<2))|0);
  $139=((HEAP32[(($138)>>2)])|0);
  $140=((($127)+($in3_0))|0);
  $141=$140>>>14;
  $142=$141&4095;
  $143=(($g+($142<<1))|0);
  $144=((HEAP16[(($143)>>1)])|0);
  $145=(($144<<16)>>16);
  $146=((($145)+($126))|0);
  $147=(($g+30840+($146<<2))|0);
  $148=((HEAP32[(($147)>>2)])|0);
  $149=((($127)+($in1_0))|0);
  $150=$149>>>14;
  $151=$150&4095;
  $152=(($g+($151<<1))|0);
  $153=((HEAP16[(($152)>>1)])|0);
  $154=(($153<<16)>>16);
  $155=((($154)+($94))|0);
  $156=(($g+30840+($155<<2))|0);
  $157=((HEAP32[(($156)>>2)])|0);
  $158=((($157)+($148))|0);
  $159=((($127)+($in2_0))|0);
  $160=$159>>>14;
  $161=$160&4095;
  $162=(($g+($161<<1))|0);
  $163=((HEAP16[(($162)>>1)])|0);
  $164=(($163<<16)>>16);
  $165=((($164)+($110))|0);
  $166=(($g+30840+($165<<2))|0);
  $167=((HEAP32[(($166)>>2)])|0);
  $168=((($158)+($167))|0);
  $169=$168>>16;
  $170=(($g+28792+($59<<1))|0);
  $171=((HEAP16[(($170)>>1)])|0);
  $172=(($171<<16)>>16);
  $173=((HEAP32[(($50)>>2)])|0);
  $174=(Math_imul($172,$173)|0);
  $175=$174>>10;
  $176=((($175)+(256))|0);
  $177=((HEAP32[(($51)>>2)])|0);
  $178=(Math_imul($176,$177)|0);
  $179=$178>>>8;
  $180=((($179)+($in0_0))|0);
  $181=((HEAP32[(($52)>>2)])|0);
  $182=(Math_imul($176,$181)|0);
  $183=$182>>>8;
  $184=((($183)+($in1_0))|0);
  $185=((HEAP32[(($53)>>2)])|0);
  $186=(Math_imul($185,$176)|0);
  $187=$186>>>8;
  $188=((($187)+($in2_0))|0);
  $189=((HEAP32[(($54)>>2)])|0);
  $190=(Math_imul($189,$176)|0);
  $191=$190>>>8;
  $192=((($191)+($in3_0))|0);
  $193=((HEAP16[(($_0)>>1)])|0);
  $194=($193&65535);
  $195=((HEAP32[(($55)>>2)])|0);
  $196=$195&$169;
  $197=((($196)+($194))|0);
  $198=(($_0+2)|0);
  $199=((HEAP16[(($198)>>1)])|0);
  $200=($199&65535);
  $201=((HEAP32[(($56)>>2)])|0);
  $202=$201&$169;
  $203=((($202)+($200))|0);
  __Z15update_envelopeR6slot_t($16);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($10);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($48)>>2)]=$139;
  $204=(($197)&65535);
  HEAP16[(($_0)>>1)]=$204;
  $205=(($203)&65535);
  HEAP16[(($198)>>1)]=$205;
  $206=(($_0+4)|0);
  $207=((($_0100)-(1))|0);
  $208=($207|0)==0;
  if ($208) {
   break;
  } else {
   $_0=$206;$_0100=$207;$CH_S0_OUT_1_0=$127;$in0_0=$180;$in1_0=$184;$in2_0=$188;$in3_0=$192;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($15)>>2)]=$127;
 HEAP32[(($17)>>2)]=$180;
 HEAP32[(($18)>>2)]=$184;
 HEAP32[(($19)>>2)]=$188;
 HEAP32[(($20)>>2)]=$192;
 return;
}
function __ZN18ym2612_update_chanILi6EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$_pn=0,$in3_0=0,$in2_0=0,$in1_0=0;
 var $in0_0=0,$CH_S0_OUT_1_0=0,$_098=0,$_0=0,$YM2612_LFOcnt_0=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($3)-(536870912))|0);
 $5=(($ch+204)|0);
 $6=(($ch+272)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((($7)-(536870912))|0);
 $9=$8|$4;
 $10=(($ch+320)|0);
 $11=(($ch+388)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)-(536870912))|0);
 $14=$9|$13;
 $15=(($ch+4)|0);
 $16=(($ch+88)|0);
 $17=(($ch+144)|0);
 $18=(($ch+376)|0);
 $19=(($ch+260)|0);
 $20=(($ch+492)|0);
 $21=(($g+8196)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($14|0)==0;
 if ($23) {
  return;
 }
 $24=(($g+8192)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((HEAP32[(($20)>>2)])|0);
 $27=((HEAP32[(($19)>>2)])|0);
 $28=((HEAP32[(($18)>>2)])|0);
 $29=((HEAP32[(($17)>>2)])|0);
 $30=((HEAP32[(($15)>>2)])|0);
 $31=(($ch+156)|0);
 $32=(($ch+100)|0);
 $33=(($ch+120)|0);
 $34=(($ch+196)|0);
 $35=(($ch+124)|0);
 $36=(($ch+332)|0);
 $37=(($ch+352)|0);
 $38=(($ch+428)|0);
 $39=(($ch+356)|0);
 $40=(($ch+216)|0);
 $41=(($ch+236)|0);
 $42=(($ch+312)|0);
 $43=(($ch+240)|0);
 $44=(($ch+448)|0);
 $45=(($ch+468)|0);
 $46=(($ch+544)|0);
 $47=(($ch+472)|0);
 $48=(($ch)|0);
 $49=(($ch+28)|0);
 $50=(($ch+32)|0);
 $51=(($ch+148)|0);
 $52=(($ch+380)|0);
 $53=(($ch+264)|0);
 $54=(($ch+496)|0);
 $55=(($ch+16)|0);
 $56=(($ch+20)|0);
 $_0=$buf;$_098=$length;$CH_S0_OUT_1_0=$30;$in0_0=$29;$in1_0=$28;$in2_0=$27;$in3_0=$26;$_pn=$25;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($22))|0);
  $58=$YM2612_LFOcnt_0>>>18;
  $59=$58&1023;
  $60=(($g+26744+($59<<1))|0);
  $61=((HEAP16[(($60)>>1)])|0);
  $62=(($61<<16)>>16);
  $63=((HEAP32[(($31)>>2)])|0);
  $64=$63>>16;
  $65=(($g+10344+($64<<1))|0);
  $66=((HEAP16[(($65)>>1)])|0);
  $67=(($66<<16)>>16);
  $68=((HEAP32[(($32)>>2)])|0);
  $69=((($67)+($68))|0);
  $70=((HEAP32[(($33)>>2)])|0);
  $71=$69^$70;
  $72=((HEAP32[(($34)>>2)])|0);
  $73=$62>>($72|0);
  $74=((($73)+($71))|0);
  $75=((HEAP32[(($35)>>2)])|0);
  $76=((($69)-($75))|0);
  $77=$76>>31;
  $78=$77&$74;
  $79=((HEAP32[(($11)>>2)])|0);
  $80=$79>>16;
  $81=(($g+10344+($80<<1))|0);
  $82=((HEAP16[(($81)>>1)])|0);
  $83=(($82<<16)>>16);
  $84=((HEAP32[(($36)>>2)])|0);
  $85=((($83)+($84))|0);
  $86=((HEAP32[(($37)>>2)])|0);
  $87=$85^$86;
  $88=((HEAP32[(($38)>>2)])|0);
  $89=$62>>($88|0);
  $90=((($89)+($87))|0);
  $91=((HEAP32[(($39)>>2)])|0);
  $92=((($85)-($91))|0);
  $93=$92>>31;
  $94=$93&$90;
  $95=((HEAP32[(($6)>>2)])|0);
  $96=$95>>16;
  $97=(($g+10344+($96<<1))|0);
  $98=((HEAP16[(($97)>>1)])|0);
  $99=(($98<<16)>>16);
  $100=((HEAP32[(($40)>>2)])|0);
  $101=((($99)+($100))|0);
  $102=((HEAP32[(($41)>>2)])|0);
  $103=$101^$102;
  $104=((HEAP32[(($42)>>2)])|0);
  $105=$62>>($104|0);
  $106=((($105)+($103))|0);
  $107=((HEAP32[(($43)>>2)])|0);
  $108=((($101)-($107))|0);
  $109=$108>>31;
  $110=$109&$106;
  $111=((HEAP32[(($2)>>2)])|0);
  $112=$111>>16;
  $113=(($g+10344+($112<<1))|0);
  $114=((HEAP16[(($113)>>1)])|0);
  $115=(($114<<16)>>16);
  $116=((HEAP32[(($44)>>2)])|0);
  $117=((($115)+($116))|0);
  $118=((HEAP32[(($45)>>2)])|0);
  $119=$117^$118;
  $120=((HEAP32[(($46)>>2)])|0);
  $121=$62>>($120|0);
  $122=((($121)+($119))|0);
  $123=((HEAP32[(($47)>>2)])|0);
  $124=((($117)-($123))|0);
  $125=$124>>31;
  $126=$125&$122;
  $127=((HEAP32[(($48)>>2)])|0);
  $128=((($127)+($CH_S0_OUT_1_0))|0);
  $129=((HEAP32[(($49)>>2)])|0);
  $130=$128>>($129|0);
  $131=((($130)+($in0_0))|0);
  $132=$131>>>14;
  $133=$132&4095;
  $134=(($g+($133<<1))|0);
  $135=((HEAP16[(($134)>>1)])|0);
  $136=(($135<<16)>>16);
  $137=((($136)+($78))|0);
  $138=(($g+30840+($137<<2))|0);
  $139=((HEAP32[(($138)>>2)])|0);
  $140=$in3_0>>>14;
  $141=$140&4095;
  $142=(($g+($141<<1))|0);
  $143=((HEAP16[(($142)>>1)])|0);
  $144=(($143<<16)>>16);
  $145=((($144)+($126))|0);
  $146=(($g+30840+($145<<2))|0);
  $147=((HEAP32[(($146)>>2)])|0);
  $148=((($127)+($in1_0))|0);
  $149=$148>>>14;
  $150=$149&4095;
  $151=(($g+($150<<1))|0);
  $152=((HEAP16[(($151)>>1)])|0);
  $153=(($152<<16)>>16);
  $154=((($153)+($94))|0);
  $155=(($g+30840+($154<<2))|0);
  $156=((HEAP32[(($155)>>2)])|0);
  $157=((($156)+($147))|0);
  $158=$in2_0>>>14;
  $159=$158&4095;
  $160=(($g+($159<<1))|0);
  $161=((HEAP16[(($160)>>1)])|0);
  $162=(($161<<16)>>16);
  $163=((($162)+($110))|0);
  $164=(($g+30840+($163<<2))|0);
  $165=((HEAP32[(($164)>>2)])|0);
  $166=((($157)+($165))|0);
  $167=$166>>16;
  $168=(($g+28792+($59<<1))|0);
  $169=((HEAP16[(($168)>>1)])|0);
  $170=(($169<<16)>>16);
  $171=((HEAP32[(($50)>>2)])|0);
  $172=(Math_imul($170,$171)|0);
  $173=$172>>10;
  $174=((($173)+(256))|0);
  $175=((HEAP32[(($51)>>2)])|0);
  $176=(Math_imul($174,$175)|0);
  $177=$176>>>8;
  $178=((($177)+($in0_0))|0);
  $179=((HEAP32[(($52)>>2)])|0);
  $180=(Math_imul($174,$179)|0);
  $181=$180>>>8;
  $182=((($181)+($in1_0))|0);
  $183=((HEAP32[(($53)>>2)])|0);
  $184=(Math_imul($183,$174)|0);
  $185=$184>>>8;
  $186=((($185)+($in2_0))|0);
  $187=((HEAP32[(($54)>>2)])|0);
  $188=(Math_imul($187,$174)|0);
  $189=$188>>>8;
  $190=((($189)+($in3_0))|0);
  $191=((HEAP16[(($_0)>>1)])|0);
  $192=($191&65535);
  $193=((HEAP32[(($55)>>2)])|0);
  $194=$193&$167;
  $195=((($194)+($192))|0);
  $196=(($_0+2)|0);
  $197=((HEAP16[(($196)>>1)])|0);
  $198=($197&65535);
  $199=((HEAP32[(($56)>>2)])|0);
  $200=$199&$167;
  $201=((($200)+($198))|0);
  __Z15update_envelopeR6slot_t($16);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($10);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($48)>>2)]=$139;
  $202=(($195)&65535);
  HEAP16[(($_0)>>1)]=$202;
  $203=(($201)&65535);
  HEAP16[(($196)>>1)]=$203;
  $204=(($_0+4)|0);
  $205=((($_098)-(1))|0);
  $206=($205|0)==0;
  if ($206) {
   break;
  } else {
   $_0=$204;$_098=$205;$CH_S0_OUT_1_0=$127;$in0_0=$178;$in1_0=$182;$in2_0=$186;$in3_0=$190;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($15)>>2)]=$127;
 HEAP32[(($17)>>2)]=$178;
 HEAP32[(($18)>>2)]=$182;
 HEAP32[(($19)>>2)]=$186;
 HEAP32[(($20)>>2)]=$190;
 return;
}
function __ZN18ym2612_update_chanILi7EE4funcER8tables_tR9channel_tPsi($g,$ch,$buf,$length){
 $g=($g)|0;
 $ch=($ch)|0;
 $buf=($buf)|0;
 $length=($length)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$_pn=0;
 var $in3_0=0,$in2_0=0,$in1_0=0,$in0_0=0,$CH_S0_OUT_1_0=0,$_0100=0,$_0=0,$YM2612_LFOcnt_0=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0;
 var $133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0;
 var $153=0,$154=0,$155=0,$156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0;
 var $173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0;
 var $193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,label=0;
 $1=(($ch+436)|0);
 $2=(($ch+504)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($3)-(536870912))|0);
 $5=(($ch+88)|0);
 $6=(($ch+156)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((($7)-(536870912))|0);
 $9=$8|$4;
 $10=(($ch+204)|0);
 $11=(($ch+272)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)-(536870912))|0);
 $14=$9|$13;
 $15=(($ch+320)|0);
 $16=(($ch+388)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=((($17)-(536870912))|0);
 $19=$14|$18;
 $20=(($ch+4)|0);
 $21=(($ch+144)|0);
 $22=(($ch+376)|0);
 $23=(($ch+260)|0);
 $24=(($ch+492)|0);
 $25=(($g+8196)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=($19|0)==0;
 if ($27) {
  return;
 }
 $28=(($g+8192)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=((HEAP32[(($24)>>2)])|0);
 $31=((HEAP32[(($23)>>2)])|0);
 $32=((HEAP32[(($22)>>2)])|0);
 $33=((HEAP32[(($21)>>2)])|0);
 $34=((HEAP32[(($20)>>2)])|0);
 $35=(($ch+100)|0);
 $36=(($ch+120)|0);
 $37=(($ch+196)|0);
 $38=(($ch+124)|0);
 $39=(($ch+332)|0);
 $40=(($ch+352)|0);
 $41=(($ch+428)|0);
 $42=(($ch+356)|0);
 $43=(($ch+216)|0);
 $44=(($ch+236)|0);
 $45=(($ch+312)|0);
 $46=(($ch+240)|0);
 $47=(($ch+448)|0);
 $48=(($ch+468)|0);
 $49=(($ch+544)|0);
 $50=(($ch+472)|0);
 $51=(($ch)|0);
 $52=(($ch+28)|0);
 $53=(($ch+32)|0);
 $54=(($ch+148)|0);
 $55=(($ch+380)|0);
 $56=(($ch+264)|0);
 $57=(($ch+496)|0);
 $58=(($ch+16)|0);
 $59=(($ch+20)|0);
 $_0=$buf;$_0100=$length;$CH_S0_OUT_1_0=$34;$in0_0=$33;$in1_0=$32;$in2_0=$31;$in3_0=$30;$_pn=$29;
 while(1) {
  $YM2612_LFOcnt_0=((($_pn)+($26))|0);
  $61=$YM2612_LFOcnt_0>>>18;
  $62=$61&1023;
  $63=(($g+26744+($62<<1))|0);
  $64=((HEAP16[(($63)>>1)])|0);
  $65=(($64<<16)>>16);
  $66=((HEAP32[(($6)>>2)])|0);
  $67=$66>>16;
  $68=(($g+10344+($67<<1))|0);
  $69=((HEAP16[(($68)>>1)])|0);
  $70=(($69<<16)>>16);
  $71=((HEAP32[(($35)>>2)])|0);
  $72=((($70)+($71))|0);
  $73=((HEAP32[(($36)>>2)])|0);
  $74=$72^$73;
  $75=((HEAP32[(($37)>>2)])|0);
  $76=$65>>($75|0);
  $77=((($76)+($74))|0);
  $78=((HEAP32[(($38)>>2)])|0);
  $79=((($72)-($78))|0);
  $80=$79>>31;
  $81=$80&$77;
  $82=((HEAP32[(($16)>>2)])|0);
  $83=$82>>16;
  $84=(($g+10344+($83<<1))|0);
  $85=((HEAP16[(($84)>>1)])|0);
  $86=(($85<<16)>>16);
  $87=((HEAP32[(($39)>>2)])|0);
  $88=((($86)+($87))|0);
  $89=((HEAP32[(($40)>>2)])|0);
  $90=$88^$89;
  $91=((HEAP32[(($41)>>2)])|0);
  $92=$65>>($91|0);
  $93=((($92)+($90))|0);
  $94=((HEAP32[(($42)>>2)])|0);
  $95=((($88)-($94))|0);
  $96=$95>>31;
  $97=$96&$93;
  $98=((HEAP32[(($11)>>2)])|0);
  $99=$98>>16;
  $100=(($g+10344+($99<<1))|0);
  $101=((HEAP16[(($100)>>1)])|0);
  $102=(($101<<16)>>16);
  $103=((HEAP32[(($43)>>2)])|0);
  $104=((($102)+($103))|0);
  $105=((HEAP32[(($44)>>2)])|0);
  $106=$104^$105;
  $107=((HEAP32[(($45)>>2)])|0);
  $108=$65>>($107|0);
  $109=((($108)+($106))|0);
  $110=((HEAP32[(($46)>>2)])|0);
  $111=((($104)-($110))|0);
  $112=$111>>31;
  $113=$112&$109;
  $114=((HEAP32[(($2)>>2)])|0);
  $115=$114>>16;
  $116=(($g+10344+($115<<1))|0);
  $117=((HEAP16[(($116)>>1)])|0);
  $118=(($117<<16)>>16);
  $119=((HEAP32[(($47)>>2)])|0);
  $120=((($118)+($119))|0);
  $121=((HEAP32[(($48)>>2)])|0);
  $122=$120^$121;
  $123=((HEAP32[(($49)>>2)])|0);
  $124=$65>>($123|0);
  $125=((($124)+($122))|0);
  $126=((HEAP32[(($50)>>2)])|0);
  $127=((($120)-($126))|0);
  $128=$127>>31;
  $129=$128&$125;
  $130=((HEAP32[(($51)>>2)])|0);
  $131=((($130)+($CH_S0_OUT_1_0))|0);
  $132=((HEAP32[(($52)>>2)])|0);
  $133=$131>>($132|0);
  $134=((($133)+($in0_0))|0);
  $135=$134>>>14;
  $136=$135&4095;
  $137=(($g+($136<<1))|0);
  $138=((HEAP16[(($137)>>1)])|0);
  $139=(($138<<16)>>16);
  $140=((($139)+($81))|0);
  $141=(($g+30840+($140<<2))|0);
  $142=((HEAP32[(($141)>>2)])|0);
  $143=$in3_0>>>14;
  $144=$143&4095;
  $145=(($g+($144<<1))|0);
  $146=((HEAP16[(($145)>>1)])|0);
  $147=(($146<<16)>>16);
  $148=((($147)+($129))|0);
  $149=(($g+30840+($148<<2))|0);
  $150=((HEAP32[(($149)>>2)])|0);
  $151=$in1_0>>>14;
  $152=$151&4095;
  $153=(($g+($152<<1))|0);
  $154=((HEAP16[(($153)>>1)])|0);
  $155=(($154<<16)>>16);
  $156=((($155)+($97))|0);
  $157=(($g+30840+($156<<2))|0);
  $158=((HEAP32[(($157)>>2)])|0);
  $159=$in2_0>>>14;
  $160=$159&4095;
  $161=(($g+($160<<1))|0);
  $162=((HEAP16[(($161)>>1)])|0);
  $163=(($162<<16)>>16);
  $164=((($163)+($113))|0);
  $165=(($g+30840+($164<<2))|0);
  $166=((HEAP32[(($165)>>2)])|0);
  $167=((($150)+($130))|0);
  $168=((($167)+($158))|0);
  $169=((($168)+($166))|0);
  $170=$169>>16;
  $171=(($g+28792+($62<<1))|0);
  $172=((HEAP16[(($171)>>1)])|0);
  $173=(($172<<16)>>16);
  $174=((HEAP32[(($53)>>2)])|0);
  $175=(Math_imul($173,$174)|0);
  $176=$175>>10;
  $177=((($176)+(256))|0);
  $178=((HEAP32[(($54)>>2)])|0);
  $179=(Math_imul($177,$178)|0);
  $180=$179>>>8;
  $181=((($180)+($in0_0))|0);
  $182=((HEAP32[(($55)>>2)])|0);
  $183=(Math_imul($177,$182)|0);
  $184=$183>>>8;
  $185=((($184)+($in1_0))|0);
  $186=((HEAP32[(($56)>>2)])|0);
  $187=(Math_imul($186,$177)|0);
  $188=$187>>>8;
  $189=((($188)+($in2_0))|0);
  $190=((HEAP32[(($57)>>2)])|0);
  $191=(Math_imul($190,$177)|0);
  $192=$191>>>8;
  $193=((($192)+($in3_0))|0);
  $194=((HEAP16[(($_0)>>1)])|0);
  $195=($194&65535);
  $196=((HEAP32[(($58)>>2)])|0);
  $197=$196&$170;
  $198=((($197)+($195))|0);
  $199=(($_0+2)|0);
  $200=((HEAP16[(($199)>>1)])|0);
  $201=($200&65535);
  $202=((HEAP32[(($59)>>2)])|0);
  $203=$202&$170;
  $204=((($203)+($201))|0);
  __Z15update_envelopeR6slot_t($5);
  __Z15update_envelopeR6slot_t($10);
  __Z15update_envelopeR6slot_t($15);
  __Z15update_envelopeR6slot_t($1);
  HEAP32[(($51)>>2)]=$142;
  $205=(($198)&65535);
  HEAP16[(($_0)>>1)]=$205;
  $206=(($204)&65535);
  HEAP16[(($199)>>1)]=$206;
  $207=(($_0+4)|0);
  $208=((($_0100)-(1))|0);
  $209=($208|0)==0;
  if ($209) {
   break;
  } else {
   $_0=$207;$_0100=$208;$CH_S0_OUT_1_0=$130;$in0_0=$181;$in1_0=$185;$in2_0=$189;$in3_0=$193;$_pn=$YM2612_LFOcnt_0;
  }
 }
 HEAP32[(($20)>>2)]=$130;
 HEAP32[(($21)>>2)]=$181;
 HEAP32[(($22)>>2)]=$185;
 HEAP32[(($23)>>2)]=$189;
 HEAP32[(($24)>>2)]=$193;
 return;
}
function __Z15update_envelopeR6slot_t($sl){
 $sl=($sl)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 $1=(($sl+76)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($sl+72)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($sl+68)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)+($4))|0);
 HEAP32[(($5)>>2)]=$7;
 $8=($7|0)<($2|0);
 if ($8) {
  return;
 }
 __ZL16update_envelope_P6slot_t($sl);
 return;
}
function __ZL16update_envelope_P6slot_t($sl){
 $sl=($sl)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0;
 var $25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,label=0;
 $1=(($sl+64)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 do {
  if (((($2|0))|0)==((2)|0)) {
   $20=(($sl+28)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=$21&8;
   $23=($22|0)==0;
   if ($23) {
    break;
   }
   $25=$21&1;
   $26=($25|0)==0;
   if (!($26)) {
    $36=$21<<1;
    $37=$36&4;
    __Z7set_segR6slot_ti($sl,$37);
    break;
   }
   $28=(($sl+68)|0);
   HEAP32[(($28)>>2)]=0;
   $29=(($sl+80)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $31=(($sl+72)|0);
   HEAP32[(($31)>>2)]=$30;
   $32=(($sl+76)|0);
   HEAP32[(($32)>>2)]=268435456;
   HEAP32[(($1)>>2)]=0;
   $33=((HEAP32[(($20)>>2)])|0);
   $34=$33<<1;
   $35=$34&4;
   __Z7set_segR6slot_ti($sl,$35);
   return;
  } else if (((($2|0))|0)==((1)|0)) {
   $12=(($sl+16)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=(($sl+68)|0);
   HEAP32[(($14)>>2)]=$13;
   $15=(($sl+88)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=(($sl+72)|0);
   HEAP32[(($17)>>2)]=$16;
   $18=(($sl+76)|0);
   HEAP32[(($18)>>2)]=536870912;
   HEAP32[(($1)>>2)]=2;
   return;
  } else if (((($2|0))|0)==((0)|0)) {
   $4=(($sl+68)|0);
   HEAP32[(($4)>>2)]=268435456;
   $5=(($sl+84)|0);
   $6=((HEAP32[(($5)>>2)])|0);
   $7=(($sl+72)|0);
   HEAP32[(($7)>>2)]=$6;
   $8=(($sl+16)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=(($sl+76)|0);
   HEAP32[(($10)>>2)]=$9;
   HEAP32[(($1)>>2)]=1;
   return;
  } else if (!(((($2|0))|0)==((3)|0))) {
   return;
  }
 } while(0);
 $39=(($sl+68)|0);
 HEAP32[(($39)>>2)]=536870912;
 $40=(($sl+72)|0);
 HEAP32[(($40)>>2)]=0;
 $41=(($sl+76)|0);
 HEAP32[(($41)>>2)]=536870913;
 return;
}
function _gme_identify_header($header){
 $header=($header)|0;
 var $1=0,$_0=0,label=0;
 $1=((__Z8get_be32PKv($header))|0);
 if (((($1|0))|0)==((1449618720)|0)) {
  $_0=320;
 } else if (((($1|0))|0)==((1314080325)|0)) {
  $_0=1696;
 } else if (((($1|0))|0)==((1396789261)|0)) {
  $_0=1272;
 } else if (((($1|0))|0)==((1515733337)|0)) {
  $_0=1472;
 } else if (((($1|0))|0)==((1197034840)|0)) {
  $_0=4160;
 } else if (((($1|0))|0)==((1313166157)|0)) {
  $_0=2152;
 } else if (((($1|0))|0)==((1397638483)|0)) {
  $_0=800;
 } else if (((($1|0))|0)==((1212502861)|0)) {
  $_0=3272;
 } else if (((($1|0))|0)==((1263747907)|0)|((($1|0))|0)==((1263752024)|0)) {
  $_0=2616;
 } else if (((($1|0))|0)==((1195528961)|0)) {
  $_0=5920;
 } else {
  $_0=55808;
 }
 return (($_0)|0);
}
function __Z8get_be32PKv($p){
 $p=($p)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;
 $1=((HEAP8[($p)])|0);
 $2=($1&255);
 $3=$2<<24;
 $4=(($p+1)|0);
 $5=((HEAP8[($4)])|0);
 $6=($5&255);
 $7=$6<<16;
 $8=$7|$3;
 $9=(($p+2)|0);
 $10=((HEAP8[($9)])|0);
 $11=($10&255);
 $12=$11<<8;
 $13=$8|$12;
 $14=(($p+3)|0);
 $15=((HEAP8[($14)])|0);
 $16=($15&255);
 $17=$13|$16;
 return (($17)|0);
}
function _gme_identify_extension($extension_){
 $extension_=($extension_)|0;
 var $extension=0,$1=0,$2=0,$3=0,$extension__=0,$4=0,$types_0=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $extension=((sp)|0);
 $1=((_strrchr((($extension_)|0),((46)|0)))|0);
 $2=($1|0)==0;
 $3=(($1+1)|0);
 $extension__=($2?$extension_:$3);
 $4=(($extension)|0);
 __ZL12to_uppercasePKciPc($extension__,$4);
 $types_0=18016;
 while(1) {
  $6=((HEAP32[(($types_0)>>2)])|0);
  $7=($6|0)==0;
  if ($7) {
   $_0=0;
   label = 650;
   break;
  }
  $9=(($6+16)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((_strcmp((($4)|0),(($10)|0)))|0);
  $12=($11|0)==0;
  $13=(($types_0+4)|0);
  if ($12) {
   $_0=$6;
   label = 651;
   break;
  } else {
   $types_0=$13;
  }
 }
 if ((label|0) == 650) {
  STACKTOP=sp;return (($_0)|0);
 }
 else if ((label|0) == 651) {
  STACKTOP=sp;return (($_0)|0);
 }
  return 0;
}
function __ZL12to_uppercasePKciPc($in,$out){
 $in=($in)|0;
 $out=($out)|0;
 var $i_0=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 $i_0=0;
 while(1) {
  $2=($i_0|0)<6;
  if (!($2)) {
   break;
  }
  $4=(($in+$i_0)|0);
  $5=((HEAP8[($4)])|0);
  $6=(($5<<24)>>24);
  $7=((_toupper((($6)|0)))|0);
  $8=(($7)&255);
  $9=(($out+$i_0)|0);
  HEAP8[($9)]=$8;
  $10=(($8<<24)>>24)==0;
  $11=((($i_0)+(1))|0);
  if ($10) {
   label = 658;
   break;
  } else {
   $i_0=$11;
  }
 }
 if ((label|0) == 658) {
  return;
 }
 HEAP8[($out)]=0;
 return;
}
function _gme_new_emu($type,$rate){
 $type=($type)|0;
 $rate=($rate)|0;
 var $1=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$23=0,$25=0,$26=0,$27=0;
 var $28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$40=0,$41=0,$brmerge=0,$_mux=0,$44=0,$45=0,$46=0,$47=0,$_0=0,$50$0=0,$50$1=0;
 var label=0;
 $1=($type|0)==0;
 if ($1) {
  $_0=0;
  return (($_0)|0);
 }
 $3=($rate|0)==-1;
 if ($3) {
  $5=(($type+12)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=((FUNCTION_TABLE_i[($6)&63]())|0);
  $_0=$7;
  return (($_0)|0);
 }
 $9=(($type+8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((FUNCTION_TABLE_i[($10)&63]())|0);
 $12=($11|0)==0;
 if ($12) {
  $_0=0;
  return (($_0)|0);
 }
 $14=(($type+20)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=$15&1;
 $17=($16|0)==0;
 do {
  if (!($17)) {
   $19=((__ZN12Multi_BuffernwEj(512))|0);
   $20=($19|0)==0;
   if ($20) {
    $21=(($11+248)|0);
    HEAP32[(($21)>>2)]=0;
    break;
   }
   $23=$19;
   __ZN14Effects_BufferC2Eb($23,0);
   $25=$19;
   $26=(($11+248)|0);
   HEAP32[(($26)>>2)]=$25;
   $27=$11;
   $28=((HEAP32[(($27)>>2)])|0);
   $29=(($28+36)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   FUNCTION_TABLE_vii[($30)&63]($11,$25);
  }
 } while(0);
 $32=((HEAP32[(($14)>>2)])|0);
 $33=$32&1;
 $34=($33|0)==0;
 do {
  if ($34) {
   label = 670;
  } else {
   $36=(($11+248)|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $38=($37|0)==0;
   if (!($38)) {
    label = 670;
    break;
   }
   if ($12) {
    $_0=0;
   } else {
    break;
   }
   return (($_0)|0);
  }
 } while(0);
 do {
  if ((label|0) == 670) {
   $40=((__ZN9Music_Emu15set_sample_rateEl($11,$rate))|0);
   $41=($40|0)==0;
   $brmerge=$41|$12;
   $_mux=($41?$11:0);
   if ($brmerge) {
    $_0=$_mux;
   } else {
    break;
   }
   return (($_0)|0);
  }
 } while(0);
 $44=$11;
 $45=((HEAP32[(($44)>>2)])|0);
 $46=(($45+4)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 FUNCTION_TABLE_vi[($47)&255]($11);
 $_0=0;
 return (($_0)|0);
}
function _gme_open_file($path,$out,$sample_rate){
 $path=($path)|0;
 $out=($out)|0;
 $sample_rate=($sample_rate)|0;
 var $in=0,$header=0,$rem=0,$1=0,$2=0,$or_cond=0,$5=0,$7=0,$10=0,$12=0,$14=0,$16=0,$17=0,$19=0,$21=0,$22=0,$24=0,$file_type_020=0,$header_size_019=0,$25=0;
 var $27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$37=0,$40=0,$41=0,$42=0,$43=0,$46=0,$_0=0,$_sink$0=0,$_sink$1=0,$_017=0,$51=0,$52$0=0,$52$1=0,$53$0=0;
 var $53$1=0,$9$0=0,$9$1=0,$45$0=0,$45$1=0,$55$0=0,$55$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 $in=((sp)|0);
 $header=(((sp)+(8))|0);
 $rem=(((sp)+(16))|0);
 $1=($path|0)==0;
 $2=($out|0)==0;
 $or_cond=$1|$2;
 if ($or_cond) {
  ___assert_fail(((6648)|0),((7352)|0),((136)|0),((8392)|0));
  return ((0)|0);
 }
 HEAP32[(($out)>>2)]=0;
 __ZN15Std_File_ReaderC2Ev($in);
 $5=((__ZN15Std_File_Reader4openEPKc($in,$path))|0);
 $7=($5|0)==0;
 do {
  if ($7) {
   $12=((_gme_identify_extension($path))|0);
   $14=($12|0)==0;
   if ($14) {
    $16=(($header)|0);
    $17=((__ZN15Std_File_Reader4readEPvl($in,$16,4))|0);
    $19=($17|0)==0;
    if (!($19)) {
     $_0=$17;
     break;
    }
    $21=((_gme_identify_header($16))|0);
    $22=((_gme_identify_extension($21))|0);
    $24=($22|0)==0;
    if ($24) {
     $_0=16;
     break;
    } else {
     $header_size_019=4;$file_type_020=$22;
    }
   } else {
    $header_size_019=0;$file_type_020=$12;
   }
   $25=((_gme_new_emu($file_type_020,$sample_rate))|0);
   $27=($25|0)==0;
   if ($27) {
    $_0=7088;
    break;
   }
   $29=(($header)|0);
   $30=(($in)|0);
   __ZN16Remaining_ReaderC2EPKvlP11Data_Reader($rem,$29,$header_size_019,$30);
   $32=(($25)|0);
   $33=(($rem)|0);
   $34=((__ZN8Gme_File4loadER11Data_Reader($32,$33))|0);
   __ZN15Std_File_Reader5closeEv($in);
   $37=($34|0)==0;
   if ($37) {
    HEAP32[(($out)>>2)]=$25;
    $_0=0;
    break;
   }
   if ($27) {
    $_0=$34;
    break;
   }
   $40=$25;
   $41=((HEAP32[(($40)>>2)])|0);
   $42=(($41+4)|0);
   $43=((HEAP32[(($42)>>2)])|0);
   FUNCTION_TABLE_vi[($43)&255]($25);
   $_0=$34;
  } else {
   $_0=$5;
  }
 } while(0);
 __ZN15Std_File_ReaderD2Ev($in);
 STACKTOP=sp;return (($_0)|0);
}
function _gme_track_info($me,$out,$track){
 $me=($me)|0;
 $out=($out)|0;
 $track=($track)|0;
 var $1=0,$2=0,label=0;
 $1=(($me)|0);
 $2=((__ZNK8Gme_File10track_infoEP12track_info_ti($1,$out,$track))|0);
 return (($2)|0);
}
function _gme_start_track($me,$index){
 $me=($me)|0;
 $index=($index)|0;
 var $1=0,label=0;
 $1=((__ZN9Music_Emu11start_trackEi($me,$index))|0);
 return (($1)|0);
}
function _gme_play($me,$n,$p){
 $me=($me)|0;
 $n=($n)|0;
 $p=($p)|0;
 var $1=0,label=0;
 $1=((__ZN9Music_Emu4playElPs($me,$n,$p))|0);
 return (($1)|0);
}
function __ZNSt9type_infoD2Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 $2=$this;
 __ZdlPv($2);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 $this=($this)|0;
 var $1=0,$2=0,label=0;
 $1=(($this)|0);
 __ZNSt9type_infoD2Ev($1);
 $2=$this;
 __ZdlPv($2);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 $this=($this)|0;
 $thrown_type=($thrown_type)|0;
 $adjustedPtr=($adjustedPtr)|0;
 var $info=0,$1=0,$2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$26=0,$27=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+56)|0;
 $info=((sp)|0);
 $1=(($this)|0);
 $2=(($thrown_type)|0);
 $3=($1|0)==($2|0);
 if ($3) {
  $_0=1;
  STACKTOP=sp;return (($_0)|0);
 }
 $5=($thrown_type|0)==0;
 if ($5) {
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $7=$thrown_type;
 $8=((___dynamic_cast($7,15872,15856,-1))|0);
 $9=$8;
 $10=($8|0)==0;
 if ($10) {
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $12=$info;
 _memset((((($12)|0))|0), ((((0)|0))|0), ((((56)|0))|0));
 $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 $17=$8;
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+28)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=((HEAP32[(($adjustedPtr)>>2)])|0);
 FUNCTION_TABLE_viiii[($20)&31]($9,$info,$21,1);
 $22=(($info+24)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=($23|0)==1;
 if (!($24)) {
  $_0=0;
  STACKTOP=sp;return (($_0)|0);
 }
 $26=(($info+16)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 HEAP32[(($adjustedPtr)>>2)]=$27;
 $_0=1;
 STACKTOP=sp;return (($_0)|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 $this=($this)|0;
 $info=($info)|0;
 $adjustedPtr=($adjustedPtr)|0;
 $path_below=($path_below)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$22=0,$23=0,label=0;
 $1=(($info+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==($this|0);
 if (!($3)) {
  return;
 }
 $5=(($info+16)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==0;
 if ($7) {
  HEAP32[(($5)>>2)]=$adjustedPtr;
  $9=(($info+24)|0);
  HEAP32[(($9)>>2)]=$path_below;
  $10=(($info+36)|0);
  HEAP32[(($10)>>2)]=1;
  return;
 }
 $12=($6|0)==($adjustedPtr|0);
 if (!($12)) {
  $19=(($info+36)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=((($20)+(1))|0);
  HEAP32[(($19)>>2)]=$21;
  $22=(($info+24)|0);
  HEAP32[(($22)>>2)]=2;
  $23=(($info+54)|0);
  HEAP8[($23)]=1;
  return;
 }
 $14=(($info+24)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=($15|0)==2;
 if (!($16)) {
  return;
 }
 HEAP32[(($14)>>2)]=$path_below;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 $this=($this)|0;
 $info=($info)|0;
 $adjustedPtr=($adjustedPtr)|0;
 $path_below=($path_below)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0;
 var $28=0,$29=0,$30=0,$31=0,$32=0,label=0;
 $1=(($this)|0);
 $2=(($info+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3)|0);
 $5=($1|0)==($4|0);
 if (!($5)) {
  $27=(($this+8)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=$28;
  $30=((HEAP32[(($29)>>2)])|0);
  $31=(($30+28)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  FUNCTION_TABLE_viiii[($32)&31]($28,$info,$adjustedPtr,$path_below);
  return;
 }
 $7=(($info+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if ($9) {
  HEAP32[(($7)>>2)]=$adjustedPtr;
  $11=(($info+24)|0);
  HEAP32[(($11)>>2)]=$path_below;
  $12=(($info+36)|0);
  HEAP32[(($12)>>2)]=1;
  return;
 }
 $14=($8|0)==($adjustedPtr|0);
 if (!($14)) {
  $21=(($info+36)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=((($22)+(1))|0);
  HEAP32[(($21)>>2)]=$23;
  $24=(($info+24)|0);
  HEAP32[(($24)>>2)]=2;
  $25=(($info+54)|0);
  HEAP8[($25)]=1;
  return;
 }
 $16=(($info+24)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=($17|0)==2;
 if (!($18)) {
  return;
 }
 HEAP32[(($16)>>2)]=$path_below;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 $this=($this)|0;
 $info=($info)|0;
 $adjustedPtr=($adjustedPtr)|0;
 $path_below=($path_below)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0;
 var $28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$offset_to_base_0_i16=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$p_0=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$65=0,$offset_to_base_0_i=0,$66=0,$67=0;
 var $68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$80=0,$81=0,label=0;
 $1=(($this)|0);
 $2=(($info+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3)|0);
 $5=($1|0)==($4|0);
 if ($5) {
  $7=(($info+16)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=($8|0)==0;
  if ($9) {
   HEAP32[(($7)>>2)]=$adjustedPtr;
   $11=(($info+24)|0);
   HEAP32[(($11)>>2)]=$path_below;
   $12=(($info+36)|0);
   HEAP32[(($12)>>2)]=1;
   return;
  }
  $14=($8|0)==($adjustedPtr|0);
  if (!($14)) {
   $21=(($info+36)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   $23=((($22)+(1))|0);
   HEAP32[(($21)>>2)]=$23;
   $24=(($info+24)|0);
   HEAP32[(($24)>>2)]=2;
   $25=(($info+54)|0);
   HEAP8[($25)]=1;
   return;
  }
  $16=(($info+24)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($17|0)==2;
  if (!($18)) {
   return;
  }
  HEAP32[(($16)>>2)]=$path_below;
  return;
 }
 $27=(($this+12)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($this+16+($28<<3))|0);
 $30=(($this+20)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=$31>>8;
 $33=$31&1;
 $34=($33|0)==0;
 if ($34) {
  $offset_to_base_0_i16=$32;
 } else {
  $36=$adjustedPtr;
  $37=((HEAP32[(($36)>>2)])|0);
  $38=(($37+$32)|0);
  $39=$38;
  $40=((HEAP32[(($39)>>2)])|0);
  $offset_to_base_0_i16=$40;
 }
 $41=(($this+16)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=$42;
 $44=((HEAP32[(($43)>>2)])|0);
 $45=(($44+28)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=(($adjustedPtr+$offset_to_base_0_i16)|0);
 $48=$31&2;
 $49=($48|0)!=0;
 $50=($49?$path_below:2);
 FUNCTION_TABLE_viiii[($46)&31]($42,$info,$47,$50);
 $51=($28|0)>1;
 if (!($51)) {
  return;
 }
 $52=(($this+24)|0);
 $53=(($info+54)|0);
 $54=$adjustedPtr;
 $p_0=$52;
 while(1) {
  $56=(($p_0+4)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $58=$57>>8;
  $59=$57&1;
  $60=($59|0)==0;
  if ($60) {
   $offset_to_base_0_i=$58;
  } else {
   $62=((HEAP32[(($54)>>2)])|0);
   $63=(($62+$58)|0);
   $64=$63;
   $65=((HEAP32[(($64)>>2)])|0);
   $offset_to_base_0_i=$65;
  }
  $66=(($p_0)|0);
  $67=((HEAP32[(($66)>>2)])|0);
  $68=$67;
  $69=((HEAP32[(($68)>>2)])|0);
  $70=(($69+28)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=(($adjustedPtr+$offset_to_base_0_i)|0);
  $73=$57&2;
  $74=($73|0)!=0;
  $75=($74?$path_below:2);
  FUNCTION_TABLE_viiii[($71)&31]($67,$info,$72,$75);
  $76=((HEAP8[($53)])|0);
  $77=$76&1;
  $78=(($77<<24)>>24)==0;
  if (!($78)) {
   label = 770;
   break;
  }
  $80=(($p_0+8)|0);
  $81=($80>>>0)<($29>>>0);
  if ($81) {
   $p_0=$80;
  } else {
   label = 775;
   break;
  }
 }
 if ((label|0) == 770) {
  return;
 }
 else if ((label|0) == 775) {
  return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset){
 $static_ptr=($static_ptr)|0;
 $static_type=($static_type)|0;
 $dst_type=($dst_type)|0;
 $src2dst_offset=($src2dst_offset)|0;
 var $info=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$_=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0;
 var $43=0,$44=0,$46=0,$47=0,$48=0,$_13=0,$50=0,$51=0,$53=0,$54=0,$56=0,$57=0,$59=0,$60=0,$62=0,$dst_ptr_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+56)|0;
 $info=((sp)|0);
 $1=$static_ptr;
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)-(8))|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$4;
 $6=(($static_ptr+$5)|0);
 $7=((($2)-(4))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=$8;
 $10=(($info)|0);
 HEAP32[(($10)>>2)]=$dst_type;
 $11=(($info+4)|0);
 HEAP32[(($11)>>2)]=$static_ptr;
 $12=(($info+8)|0);
 HEAP32[(($12)>>2)]=$static_type;
 $13=(($info+12)|0);
 HEAP32[(($13)>>2)]=$src2dst_offset;
 $14=(($info+16)|0);
 $15=(($info+20)|0);
 $16=(($info+24)|0);
 $17=(($info+28)|0);
 $18=(($info+32)|0);
 $19=(($info+40)|0);
 $20=$8;
 $21=(($dst_type)|0);
 $22=($20|0)==($21|0);
 $23=$14;
 _memset((((($23)|0))|0), ((((0)|0))|0), ((((39)|0))|0));
 if ($22) {
  $25=(($info+48)|0);
  HEAP32[(($25)>>2)]=1;
  $26=$8;
  $27=((HEAP32[(($26)>>2)])|0);
  $28=(($27+20)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  FUNCTION_TABLE_viiiiii[($29)&7]($9,$info,$6,$6,1,0);
  $30=((HEAP32[(($16)>>2)])|0);
  $31=($30|0)==1;
  $_=($31?$6:0);
  STACKTOP=sp;return (($_)|0);
 }
 $33=(($info+36)|0);
 $34=$8;
 $35=((HEAP32[(($34)>>2)])|0);
 $36=(($35+24)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 FUNCTION_TABLE_viiiii[($37)&31]($9,$info,$6,1,0);
 $38=((HEAP32[(($33)>>2)])|0);
 if (((($38|0))|0)==((1)|0)) {
  $50=((HEAP32[(($16)>>2)])|0);
  $51=($50|0)==1;
  do {
   if (!($51)) {
    $53=((HEAP32[(($19)>>2)])|0);
    $54=($53|0)==0;
    if (!($54)) {
     $dst_ptr_0=0;
     STACKTOP=sp;return (($dst_ptr_0)|0);
    }
    $56=((HEAP32[(($17)>>2)])|0);
    $57=($56|0)==1;
    if (!($57)) {
     $dst_ptr_0=0;
     STACKTOP=sp;return (($dst_ptr_0)|0);
    }
    $59=((HEAP32[(($18)>>2)])|0);
    $60=($59|0)==1;
    if ($60) {
     break;
    } else {
     $dst_ptr_0=0;
    }
    STACKTOP=sp;return (($dst_ptr_0)|0);
   }
  } while(0);
  $62=((HEAP32[(($14)>>2)])|0);
  $dst_ptr_0=$62;
  STACKTOP=sp;return (($dst_ptr_0)|0);
 } else if (((($38|0))|0)==((0)|0)) {
  $40=((HEAP32[(($19)>>2)])|0);
  $41=($40|0)==1;
  if (!($41)) {
   $dst_ptr_0=0;
   STACKTOP=sp;return (($dst_ptr_0)|0);
  }
  $43=((HEAP32[(($17)>>2)])|0);
  $44=($43|0)==1;
  if (!($44)) {
   $dst_ptr_0=0;
   STACKTOP=sp;return (($dst_ptr_0)|0);
  }
  $46=((HEAP32[(($18)>>2)])|0);
  $47=($46|0)==1;
  $48=((HEAP32[(($15)>>2)])|0);
  $_13=($47?$48:0);
  $dst_ptr_0=$_13;
  STACKTOP=sp;return (($dst_ptr_0)|0);
 } else {
  $dst_ptr_0=0;
  STACKTOP=sp;return (($dst_ptr_0)|0);
 }
  return 0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 $this=($this)|0;
 $info=($info)|0;
 $current_ptr=($current_ptr)|0;
 $path_below=($path_below)|0;
 $use_strcmp=($use_strcmp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$25=0,$26=0;
 var $27=0,$29=0,$31=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$is_dst_type_derived_from_static_type_0_off089=0,$p_088=0;
 var $does_dst_type_point_to_our_static_type_0_off087=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$offset_to_base_0_i81=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0;
 var $69=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$78=0,$79=0,$80=0,$82=0,$83=0,$85=0,$86=0,$87=0,$89=0,$90=0,$91=0,$does_dst_type_point_to_our_static_type_1_off0=0,$is_dst_type_derived_from_static_type_1_off0=0;
 var $93=0,$94=0,$does_dst_type_point_to_our_static_type_0_off0_lcssa=0,$is_dst_type_derived_from_static_type_2_off0=0,$is_dst_type_derived_from_static_type_2_off098=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$102=0,$103=0,$104=0,$106=0,$is_dst_type_derived_from_static_type_2_off099=0,$110=0,$111=0,$112=0,$113=0;
 var $114=0,$115=0,$116=0,$117=0,$119=0,$120=0,$121=0,$122=0,$123=0,$offset_to_base_0_i82=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0;
 var $134=0,$135=0,$137=0,$138=0,$139=0,$140=0,$142=0,$143=0,$144=0,$145=0,$146=0,$p2_0=0,$148=0,$149=0,$150=0,$152=0,$153=0,$154=0,$155=0,$156=0;
 var $158=0,$159=0,$160=0,$161=0,$offset_to_base_0_i79=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$175=0,$176=0,$177=0;
 var $178=0,$179=0,$180=0,$181=0,$p2_1=0,$183=0,$184=0,$185=0,$187=0,$188=0,$190=0,$191=0,$193=0,$194=0,$195=0,$196=0,$197=0,$199=0,$200=0,$201=0;
 var $202=0,$offset_to_base_0_i77=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$p2_2=0,$216=0,$217=0,$218=0,$220=0,$221=0;
 var $223=0,$224=0,$225=0,$226=0,$227=0,$229=0,$230=0,$231=0,$232=0,$offset_to_base_0_i=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0;
 var $243=0,$244=0,label=0;
 $1=(($this)|0);
 $2=(($info+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3)|0);
 $5=($1|0)==($4|0);
 if ($5) {
  $7=(($info+4)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=($8|0)==($current_ptr|0);
  if (!($9)) {
   return;
  }
  $11=(($info+28)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==1;
  if ($13) {
   return;
  }
  HEAP32[(($11)>>2)]=$path_below;
  return;
 }
 $16=(($info)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17)|0);
 $19=($1|0)==($18|0);
 if ($19) {
  $21=(($info+16)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=($22|0)==($current_ptr|0);
  do {
   if (!($23)) {
    $25=(($info+20)|0);
    $26=((HEAP32[(($25)>>2)])|0);
    $27=($26|0)==($current_ptr|0);
    if ($27) {
     break;
    }
    $33=(($info+32)|0);
    HEAP32[(($33)>>2)]=$path_below;
    $34=(($info+44)|0);
    $35=((HEAP32[(($34)>>2)])|0);
    $36=($35|0)==4;
    if ($36) {
     return;
    }
    $38=(($this+12)|0);
    $39=((HEAP32[(($38)>>2)])|0);
    $40=(($this+16+($39<<3))|0);
    $41=($39|0)>0;
    L979: do {
     if ($41) {
      $42=(($this+16)|0);
      $43=(($info+52)|0);
      $44=(($info+53)|0);
      $45=(($info+54)|0);
      $46=(($this+8)|0);
      $47=(($info+24)|0);
      $48=$current_ptr;
      $does_dst_type_point_to_our_static_type_0_off087=0;$p_088=$42;$is_dst_type_derived_from_static_type_0_off089=0;
      L981: while(1) {
       HEAP8[($43)]=0;
       HEAP8[($44)]=0;
       $50=(($p_088+4)|0);
       $51=((HEAP32[(($50)>>2)])|0);
       $52=$51>>8;
       $53=$51&1;
       $54=($53|0)==0;
       if ($54) {
        $offset_to_base_0_i81=$52;
       } else {
        $56=((HEAP32[(($48)>>2)])|0);
        $57=(($56+$52)|0);
        $58=$57;
        $59=((HEAP32[(($58)>>2)])|0);
        $offset_to_base_0_i81=$59;
       }
       $60=(($p_088)|0);
       $61=((HEAP32[(($60)>>2)])|0);
       $62=$61;
       $63=((HEAP32[(($62)>>2)])|0);
       $64=(($63+20)|0);
       $65=((HEAP32[(($64)>>2)])|0);
       $66=(($current_ptr+$offset_to_base_0_i81)|0);
       $67=$51>>>1;
       $68=$67&1;
       $69=(((2)-($68))|0);
       FUNCTION_TABLE_viiiiii[($65)&7]($61,$info,$current_ptr,$66,$69,$use_strcmp);
       $70=((HEAP8[($45)])|0);
       $71=$70&1;
       $72=(($71<<24)>>24)==0;
       if (!($72)) {
        $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off089;$does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;
        break;
       }
       $74=((HEAP8[($44)])|0);
       $75=$74&1;
       $76=(($75<<24)>>24)==0;
       do {
        if ($76) {
         $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off089;$does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;
        } else {
         $78=((HEAP8[($43)])|0);
         $79=$78&1;
         $80=(($79<<24)>>24)==0;
         if ($80) {
          $89=((HEAP32[(($46)>>2)])|0);
          $90=$89&1;
          $91=($90|0)==0;
          if ($91) {
           $is_dst_type_derived_from_static_type_2_off0=1;$does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off087;
           break L981;
          } else {
           $is_dst_type_derived_from_static_type_1_off0=1;$does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off087;
           break;
          }
         }
         $82=((HEAP32[(($47)>>2)])|0);
         $83=($82|0)==1;
         if ($83) {
          label = 823;
          break L979;
         }
         $85=((HEAP32[(($46)>>2)])|0);
         $86=$85&2;
         $87=($86|0)==0;
         if ($87) {
          label = 823;
          break L979;
         } else {
          $is_dst_type_derived_from_static_type_1_off0=1;$does_dst_type_point_to_our_static_type_1_off0=1;
         }
        }
       } while(0);
       $93=(($p_088+8)|0);
       $94=($93>>>0)<($40>>>0);
       if ($94) {
        $does_dst_type_point_to_our_static_type_0_off087=$does_dst_type_point_to_our_static_type_1_off0;$p_088=$93;$is_dst_type_derived_from_static_type_0_off089=$is_dst_type_derived_from_static_type_1_off0;
       } else {
        $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;$does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type_0_off0_lcssa) {
       $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off0;
       label = 822;
      } else {
       $is_dst_type_derived_from_static_type_2_off098=$is_dst_type_derived_from_static_type_2_off0;
       label = 819;
      }
     } else {
      $is_dst_type_derived_from_static_type_2_off098=0;
      label = 819;
     }
    } while(0);
    do {
     if ((label|0) == 819) {
      HEAP32[(($25)>>2)]=$current_ptr;
      $95=(($info+40)|0);
      $96=((HEAP32[(($95)>>2)])|0);
      $97=((($96)+(1))|0);
      HEAP32[(($95)>>2)]=$97;
      $98=(($info+36)|0);
      $99=((HEAP32[(($98)>>2)])|0);
      $100=($99|0)==1;
      if (!($100)) {
       $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;
       label = 822;
       break;
      }
      $102=(($info+24)|0);
      $103=((HEAP32[(($102)>>2)])|0);
      $104=($103|0)==2;
      if (!($104)) {
       $is_dst_type_derived_from_static_type_2_off099=$is_dst_type_derived_from_static_type_2_off098;
       label = 822;
       break;
      }
      $106=(($info+54)|0);
      HEAP8[($106)]=1;
      if ($is_dst_type_derived_from_static_type_2_off098) {
       label = 823;
      } else {
       label = 824;
      }
     }
    } while(0);
    if ((label|0) == 822) {
     if ($is_dst_type_derived_from_static_type_2_off099) {
      label = 823;
     } else {
      label = 824;
     }
    }
    if ((label|0) == 824) {
     HEAP32[(($34)>>2)]=4;
     return;
    }
    else if ((label|0) == 823) {
     HEAP32[(($34)>>2)]=3;
     return;
    }
   }
  } while(0);
  $29=($path_below|0)==1;
  if (!($29)) {
   return;
  }
  $31=(($info+32)|0);
  HEAP32[(($31)>>2)]=1;
  return;
 }
 $110=(($this+12)|0);
 $111=((HEAP32[(($110)>>2)])|0);
 $112=(($this+16+($111<<3))|0);
 $113=(($this+20)|0);
 $114=((HEAP32[(($113)>>2)])|0);
 $115=$114>>8;
 $116=$114&1;
 $117=($116|0)==0;
 if ($117) {
  $offset_to_base_0_i82=$115;
 } else {
  $119=$current_ptr;
  $120=((HEAP32[(($119)>>2)])|0);
  $121=(($120+$115)|0);
  $122=$121;
  $123=((HEAP32[(($122)>>2)])|0);
  $offset_to_base_0_i82=$123;
 }
 $124=(($this+16)|0);
 $125=((HEAP32[(($124)>>2)])|0);
 $126=$125;
 $127=((HEAP32[(($126)>>2)])|0);
 $128=(($127+24)|0);
 $129=((HEAP32[(($128)>>2)])|0);
 $130=(($current_ptr+$offset_to_base_0_i82)|0);
 $131=$114&2;
 $132=($131|0)!=0;
 $133=($132?$path_below:2);
 FUNCTION_TABLE_viiiii[($129)&31]($125,$info,$130,$133,$use_strcmp);
 $134=(($this+24)|0);
 $135=($111|0)>1;
 if (!($135)) {
  return;
 }
 $137=(($this+8)|0);
 $138=((HEAP32[(($137)>>2)])|0);
 $139=$138&2;
 $140=($139|0)==0;
 do {
  if ($140) {
   $142=(($info+36)|0);
   $143=((HEAP32[(($142)>>2)])|0);
   $144=($143|0)==1;
   if ($144) {
    break;
   }
   $175=$138&1;
   $176=($175|0)==0;
   if ($176) {
    $180=(($info+54)|0);
    $181=$current_ptr;
    $p2_2=$134;
    while(1) {
     $216=((HEAP8[($180)])|0);
     $217=$216&1;
     $218=(($217<<24)>>24)==0;
     if (!($218)) {
      label = 852;
      break;
     }
     $220=((HEAP32[(($142)>>2)])|0);
     $221=($220|0)==1;
     if ($221) {
      label = 865;
      break;
     }
     $223=(($p2_2+4)|0);
     $224=((HEAP32[(($223)>>2)])|0);
     $225=$224>>8;
     $226=$224&1;
     $227=($226|0)==0;
     if ($227) {
      $offset_to_base_0_i=$225;
     } else {
      $229=((HEAP32[(($181)>>2)])|0);
      $230=(($229+$225)|0);
      $231=$230;
      $232=((HEAP32[(($231)>>2)])|0);
      $offset_to_base_0_i=$232;
     }
     $233=(($p2_2)|0);
     $234=((HEAP32[(($233)>>2)])|0);
     $235=$234;
     $236=((HEAP32[(($235)>>2)])|0);
     $237=(($236+24)|0);
     $238=((HEAP32[(($237)>>2)])|0);
     $239=(($current_ptr+$offset_to_base_0_i)|0);
     $240=$224&2;
     $241=($240|0)!=0;
     $242=($241?$path_below:2);
     FUNCTION_TABLE_viiiii[($238)&31]($234,$info,$239,$242,$use_strcmp);
     $243=(($p2_2+8)|0);
     $244=($243>>>0)<($112>>>0);
     if ($244) {
      $p2_2=$243;
     } else {
      label = 866;
      break;
     }
    }
    if ((label|0) == 852) {
     return;
    }
    else if ((label|0) == 865) {
     return;
    }
    else if ((label|0) == 866) {
     return;
    }
   }
   $177=(($info+24)|0);
   $178=(($info+54)|0);
   $179=$current_ptr;
   $p2_1=$134;
   while(1) {
    $183=((HEAP8[($178)])|0);
    $184=$183&1;
    $185=(($184<<24)>>24)==0;
    if (!($185)) {
     label = 856;
     break;
    }
    $187=((HEAP32[(($142)>>2)])|0);
    $188=($187|0)==1;
    if ($188) {
     $190=((HEAP32[(($177)>>2)])|0);
     $191=($190|0)==1;
     if ($191) {
      label = 850;
      break;
     }
    }
    $193=(($p2_1+4)|0);
    $194=((HEAP32[(($193)>>2)])|0);
    $195=$194>>8;
    $196=$194&1;
    $197=($196|0)==0;
    if ($197) {
     $offset_to_base_0_i77=$195;
    } else {
     $199=((HEAP32[(($179)>>2)])|0);
     $200=(($199+$195)|0);
     $201=$200;
     $202=((HEAP32[(($201)>>2)])|0);
     $offset_to_base_0_i77=$202;
    }
    $203=(($p2_1)|0);
    $204=((HEAP32[(($203)>>2)])|0);
    $205=$204;
    $206=((HEAP32[(($205)>>2)])|0);
    $207=(($206+24)|0);
    $208=((HEAP32[(($207)>>2)])|0);
    $209=(($current_ptr+$offset_to_base_0_i77)|0);
    $210=$194&2;
    $211=($210|0)!=0;
    $212=($211?$path_below:2);
    FUNCTION_TABLE_viiiii[($208)&31]($204,$info,$209,$212,$use_strcmp);
    $213=(($p2_1+8)|0);
    $214=($213>>>0)<($112>>>0);
    if ($214) {
     $p2_1=$213;
    } else {
     label = 851;
     break;
    }
   }
   if ((label|0) == 850) {
    return;
   }
   else if ((label|0) == 851) {
    return;
   }
   else if ((label|0) == 856) {
    return;
   }
  }
 } while(0);
 $145=(($info+54)|0);
 $146=$current_ptr;
 $p2_0=$134;
 while(1) {
  $148=((HEAP8[($145)])|0);
  $149=$148&1;
  $150=(($149<<24)>>24)==0;
  if (!($150)) {
   label = 864;
   break;
  }
  $152=(($p2_0+4)|0);
  $153=((HEAP32[(($152)>>2)])|0);
  $154=$153>>8;
  $155=$153&1;
  $156=($155|0)==0;
  if ($156) {
   $offset_to_base_0_i79=$154;
  } else {
   $158=((HEAP32[(($146)>>2)])|0);
   $159=(($158+$154)|0);
   $160=$159;
   $161=((HEAP32[(($160)>>2)])|0);
   $offset_to_base_0_i79=$161;
  }
  $162=(($p2_0)|0);
  $163=((HEAP32[(($162)>>2)])|0);
  $164=$163;
  $165=((HEAP32[(($164)>>2)])|0);
  $166=(($165+24)|0);
  $167=((HEAP32[(($166)>>2)])|0);
  $168=(($current_ptr+$offset_to_base_0_i79)|0);
  $169=$153&2;
  $170=($169|0)!=0;
  $171=($170?$path_below:2);
  FUNCTION_TABLE_viiiii[($167)&31]($163,$info,$168,$171,$use_strcmp);
  $172=(($p2_0+8)|0);
  $173=($172>>>0)<($112>>>0);
  if ($173) {
   $p2_0=$172;
  } else {
   label = 863;
   break;
  }
 }
 if ((label|0) == 863) {
  return;
 }
 else if ((label|0) == 864) {
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 $this=($this)|0;
 $info=($info)|0;
 $current_ptr=($current_ptr)|0;
 $path_below=($path_below)|0;
 $use_strcmp=($use_strcmp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$25=0,$26=0;
 var $27=0,$29=0,$31=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0;
 var $not_=0,$is_dst_type_derived_from_static_type_0_off036=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$63=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,label=0;
 $1=(($this)|0);
 $2=(($info+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3)|0);
 $5=($1|0)==($4|0);
 if ($5) {
  $7=(($info+4)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=($8|0)==($current_ptr|0);
  if (!($9)) {
   return;
  }
  $11=(($info+28)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==1;
  if ($13) {
   return;
  }
  HEAP32[(($11)>>2)]=$path_below;
  return;
 }
 $16=(($info)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17)|0);
 $19=($1|0)==($18|0);
 if (!($19)) {
  $67=(($this+8)|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $69=$68;
  $70=((HEAP32[(($69)>>2)])|0);
  $71=(($70+24)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  FUNCTION_TABLE_viiiii[($72)&31]($68,$info,$current_ptr,$path_below,$use_strcmp);
  return;
 }
 $21=(($info+16)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)==($current_ptr|0);
 do {
  if (!($23)) {
   $25=(($info+20)|0);
   $26=((HEAP32[(($25)>>2)])|0);
   $27=($26|0)==($current_ptr|0);
   if ($27) {
    break;
   }
   $33=(($info+32)|0);
   HEAP32[(($33)>>2)]=$path_below;
   $34=(($info+44)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=($35|0)==4;
   if ($36) {
    return;
   }
   $38=(($info+52)|0);
   HEAP8[($38)]=0;
   $39=(($info+53)|0);
   HEAP8[($39)]=0;
   $40=(($this+8)|0);
   $41=((HEAP32[(($40)>>2)])|0);
   $42=$41;
   $43=((HEAP32[(($42)>>2)])|0);
   $44=(($43+20)|0);
   $45=((HEAP32[(($44)>>2)])|0);
   FUNCTION_TABLE_viiiiii[($45)&7]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $46=((HEAP8[($39)])|0);
   $47=$46&1;
   $48=(($47<<24)>>24)==0;
   if ($48) {
    $is_dst_type_derived_from_static_type_0_off036=0;
    label = 879;
   } else {
    $50=((HEAP8[($38)])|0);
    $51=$50&1;
    $not_=(($51<<24)>>24)==0;
    if ($not_) {
     $is_dst_type_derived_from_static_type_0_off036=1;
     label = 879;
    }
   }
   L1081: do {
    if ((label|0) == 879) {
     HEAP32[(($25)>>2)]=$current_ptr;
     $52=(($info+40)|0);
     $53=((HEAP32[(($52)>>2)])|0);
     $54=((($53)+(1))|0);
     HEAP32[(($52)>>2)]=$54;
     $55=(($info+36)|0);
     $56=((HEAP32[(($55)>>2)])|0);
     $57=($56|0)==1;
     do {
      if ($57) {
       $59=(($info+24)|0);
       $60=((HEAP32[(($59)>>2)])|0);
       $61=($60|0)==2;
       if (!($61)) {
        label = 882;
        break;
       }
       $63=(($info+54)|0);
       HEAP8[($63)]=1;
       if ($is_dst_type_derived_from_static_type_0_off036) {
        break L1081;
       }
      } else {
       label = 882;
      }
     } while(0);
     if ((label|0) == 882) {
      if ($is_dst_type_derived_from_static_type_0_off036) {
       break;
      }
     }
     HEAP32[(($34)>>2)]=4;
     return;
    }
   } while(0);
   HEAP32[(($34)>>2)]=3;
   return;
  }
 } while(0);
 $29=($path_below|0)==1;
 if (!($29)) {
  return;
 }
 $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 $this=($this)|0;
 $info=($info)|0;
 $current_ptr=($current_ptr)|0;
 $path_below=($path_below)|0;
 $use_strcmp=($use_strcmp)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$26=0,$28=0;
 var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$42=0,$44=0,label=0;
 $1=(($info+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==($this|0);
 if ($3) {
  $5=(($info+4)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=($6|0)==($current_ptr|0);
  if (!($7)) {
   return;
  }
  $9=(($info+28)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=($10|0)==1;
  if ($11) {
   return;
  }
  HEAP32[(($9)>>2)]=$path_below;
  return;
 }
 $14=(($info)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=($15|0)==($this|0);
 if (!($16)) {
  return;
 }
 $18=(($info+16)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($19|0)==($current_ptr|0);
 do {
  if (!($20)) {
   $22=(($info+20)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=($23|0)==($current_ptr|0);
   if ($24) {
    break;
   }
   $30=(($info+32)|0);
   HEAP32[(($30)>>2)]=$path_below;
   HEAP32[(($22)>>2)]=$current_ptr;
   $31=(($info+40)|0);
   $32=((HEAP32[(($31)>>2)])|0);
   $33=((($32)+(1))|0);
   HEAP32[(($31)>>2)]=$33;
   $34=(($info+36)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=($35|0)==1;
   do {
    if ($36) {
     $38=(($info+24)|0);
     $39=((HEAP32[(($38)>>2)])|0);
     $40=($39|0)==2;
     if (!($40)) {
      break;
     }
     $42=(($info+54)|0);
     HEAP8[($42)]=1;
    }
   } while(0);
   $44=(($info+44)|0);
   HEAP32[(($44)>>2)]=4;
   return;
  }
 } while(0);
 $26=($path_below|0)==1;
 if (!($26)) {
  return;
 }
 $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 $this=($this)|0;
 $info=($info)|0;
 $dst_ptr=($dst_ptr)|0;
 $current_ptr=($current_ptr)|0;
 $path_below=($path_below)|0;
 $use_strcmp=($use_strcmp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$or_cond_i=0;
 var $24=0,$26=0,$28=0,$29=0,$30=0,$33=0,$34=0,$35=0,$36=0,$37=0,$or_cond23_i=0,$39=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=0,$offset_to_base_0_i32=0,$66=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$p_0=0,$83=0,$84=0,$85=0,$87=0,$88=0,$89=0,$91=0;
 var $92=0,$94=0,$95=0,$96=0,$98=0,$99=0,$100=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$109=0,$110=0,$112=0,$113=0,$114=0,$115=0,$offset_to_base_0_i=0;
 var $116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,label=0;
 $1=(($this)|0);
 $2=(($info+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3)|0);
 $5=($1|0)==($4|0);
 if (!($5)) {
  $46=(($info+52)|0);
  $47=((HEAP8[($46)])|0);
  $48=$47&1;
  $49=(($info+53)|0);
  $50=((HEAP8[($49)])|0);
  $51=$50&1;
  $52=(($this+12)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=(($this+16+($53<<3))|0);
  HEAP8[($46)]=0;
  HEAP8[($49)]=0;
  $55=(($this+20)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=$56>>8;
  $58=$56&1;
  $59=($58|0)==0;
  if ($59) {
   $offset_to_base_0_i32=$57;
  } else {
   $61=$current_ptr;
   $62=((HEAP32[(($61)>>2)])|0);
   $63=(($62+$57)|0);
   $64=$63;
   $65=((HEAP32[(($64)>>2)])|0);
   $offset_to_base_0_i32=$65;
  }
  $66=(($this+16)|0);
  $67=((HEAP32[(($66)>>2)])|0);
  $68=$67;
  $69=((HEAP32[(($68)>>2)])|0);
  $70=(($69+20)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=(($current_ptr+$offset_to_base_0_i32)|0);
  $73=$56&2;
  $74=($73|0)!=0;
  $75=($74?$path_below:2);
  FUNCTION_TABLE_viiiiii[($71)&7]($67,$info,$dst_ptr,$72,$75,$use_strcmp);
  $76=($53|0)>1;
  L1130: do {
   if ($76) {
    $77=(($this+24)|0);
    $78=(($info+24)|0);
    $79=(($this+8)|0);
    $80=(($info+54)|0);
    $81=$current_ptr;
    $p_0=$77;
    while(1) {
     $83=((HEAP8[($80)])|0);
     $84=$83&1;
     $85=(($84<<24)>>24)==0;
     if (!($85)) {
      break L1130;
     }
     $87=((HEAP8[($46)])|0);
     $88=$87&1;
     $89=(($88<<24)>>24)==0;
     do {
      if ($89) {
       $98=((HEAP8[($49)])|0);
       $99=$98&1;
       $100=(($99<<24)>>24)==0;
       if ($100) {
        break;
       }
       $102=((HEAP32[(($79)>>2)])|0);
       $103=$102&1;
       $104=($103|0)==0;
       if ($104) {
        break L1130;
       }
      } else {
       $91=((HEAP32[(($78)>>2)])|0);
       $92=($91|0)==1;
       if ($92) {
        break L1130;
       }
       $94=((HEAP32[(($79)>>2)])|0);
       $95=$94&2;
       $96=($95|0)==0;
       if ($96) {
        break L1130;
       }
      }
     } while(0);
     HEAP8[($46)]=0;
     HEAP8[($49)]=0;
     $106=(($p_0+4)|0);
     $107=((HEAP32[(($106)>>2)])|0);
     $108=$107>>8;
     $109=$107&1;
     $110=($109|0)==0;
     if ($110) {
      $offset_to_base_0_i=$108;
     } else {
      $112=((HEAP32[(($81)>>2)])|0);
      $113=(($112+$108)|0);
      $114=$113;
      $115=((HEAP32[(($114)>>2)])|0);
      $offset_to_base_0_i=$115;
     }
     $116=(($p_0)|0);
     $117=((HEAP32[(($116)>>2)])|0);
     $118=$117;
     $119=((HEAP32[(($118)>>2)])|0);
     $120=(($119+20)|0);
     $121=((HEAP32[(($120)>>2)])|0);
     $122=(($current_ptr+$offset_to_base_0_i)|0);
     $123=$107&2;
     $124=($123|0)!=0;
     $125=($124?$path_below:2);
     FUNCTION_TABLE_viiiiii[($121)&7]($117,$info,$dst_ptr,$122,$125,$use_strcmp);
     $126=(($p_0+8)|0);
     $127=($126>>>0)<($54>>>0);
     if ($127) {
      $p_0=$126;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[($46)]=$48;
  HEAP8[($49)]=$51;
  return;
 }
 $7=(($info+53)|0);
 HEAP8[($7)]=1;
 $8=(($info+4)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==($current_ptr|0);
 if (!($10)) {
  return;
 }
 $12=(($info+52)|0);
 HEAP8[($12)]=1;
 $13=(($info+16)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)==0;
 if ($15) {
  HEAP32[(($13)>>2)]=$dst_ptr;
  $17=(($info+24)|0);
  HEAP32[(($17)>>2)]=$path_below;
  $18=(($info+36)|0);
  HEAP32[(($18)>>2)]=1;
  $19=(($info+48)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=($20|0)==1;
  $22=($path_below|0)==1;
  $or_cond_i=$21&$22;
  if (!($or_cond_i)) {
   return;
  }
  $24=(($info+54)|0);
  HEAP8[($24)]=1;
  return;
 }
 $26=($14|0)==($dst_ptr|0);
 if (!($26)) {
  $41=(($info+36)|0);
  $42=((HEAP32[(($41)>>2)])|0);
  $43=((($42)+(1))|0);
  HEAP32[(($41)>>2)]=$43;
  $44=(($info+54)|0);
  HEAP8[($44)]=1;
  return;
 }
 $28=(($info+24)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=($29|0)==2;
 if ($30) {
  HEAP32[(($28)>>2)]=$path_below;
  $33=$path_below;
 } else {
  $33=$29;
 }
 $34=(($info+48)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=($35|0)==1;
 $37=($33|0)==1;
 $or_cond23_i=$36&$37;
 if (!($or_cond23_i)) {
  return;
 }
 $39=(($info+54)|0);
 HEAP8[($39)]=1;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 $this=($this)|0;
 $info=($info)|0;
 $dst_ptr=($dst_ptr)|0;
 $current_ptr=($current_ptr)|0;
 $path_below=($path_below)|0;
 $use_strcmp=($use_strcmp)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$or_cond_i=0;
 var $24=0,$26=0,$28=0,$29=0,$30=0,$33=0,$34=0,$35=0,$36=0,$37=0,$or_cond23_i=0,$39=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,label=0;
 $1=(($this)|0);
 $2=(($info+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3)|0);
 $5=($1|0)==($4|0);
 if (!($5)) {
  $46=(($this+8)|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=$47;
  $49=((HEAP32[(($48)>>2)])|0);
  $50=(($49+20)|0);
  $51=((HEAP32[(($50)>>2)])|0);
  FUNCTION_TABLE_viiiiii[($51)&7]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  return;
 }
 $7=(($info+53)|0);
 HEAP8[($7)]=1;
 $8=(($info+4)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==($current_ptr|0);
 if (!($10)) {
  return;
 }
 $12=(($info+52)|0);
 HEAP8[($12)]=1;
 $13=(($info+16)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)==0;
 if ($15) {
  HEAP32[(($13)>>2)]=$dst_ptr;
  $17=(($info+24)|0);
  HEAP32[(($17)>>2)]=$path_below;
  $18=(($info+36)|0);
  HEAP32[(($18)>>2)]=1;
  $19=(($info+48)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=($20|0)==1;
  $22=($path_below|0)==1;
  $or_cond_i=$21&$22;
  if (!($or_cond_i)) {
   return;
  }
  $24=(($info+54)|0);
  HEAP8[($24)]=1;
  return;
 }
 $26=($14|0)==($dst_ptr|0);
 if (!($26)) {
  $41=(($info+36)|0);
  $42=((HEAP32[(($41)>>2)])|0);
  $43=((($42)+(1))|0);
  HEAP32[(($41)>>2)]=$43;
  $44=(($info+54)|0);
  HEAP8[($44)]=1;
  return;
 }
 $28=(($info+24)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=($29|0)==2;
 if ($30) {
  HEAP32[(($28)>>2)]=$path_below;
  $33=$path_below;
 } else {
  $33=$29;
 }
 $34=(($info+48)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=($35|0)==1;
 $37=($33|0)==1;
 $or_cond23_i=$36&$37;
 if (!($or_cond23_i)) {
  return;
 }
 $39=(($info+54)|0);
 HEAP8[($39)]=1;
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 $this=($this)|0;
 $info=($info)|0;
 $dst_ptr=($dst_ptr)|0;
 $current_ptr=($current_ptr)|0;
 $path_below=($path_below)|0;
 $use_strcmp=($use_strcmp)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$or_cond_i=0,$22=0,$24=0;
 var $26=0,$27=0,$28=0,$31=0,$32=0,$33=0,$34=0,$35=0,$or_cond23_i=0,$37=0,$39=0,$40=0,$41=0,$42=0,label=0;
 $1=(($info+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==($this|0);
 if (!($3)) {
  return;
 }
 $5=(($info+53)|0);
 HEAP8[($5)]=1;
 $6=(($info+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==($current_ptr|0);
 if (!($8)) {
  return;
 }
 $10=(($info+52)|0);
 HEAP8[($10)]=1;
 $11=(($info+16)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($12|0)==0;
 if ($13) {
  HEAP32[(($11)>>2)]=$dst_ptr;
  $15=(($info+24)|0);
  HEAP32[(($15)>>2)]=$path_below;
  $16=(($info+36)|0);
  HEAP32[(($16)>>2)]=1;
  $17=(($info+48)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=($18|0)==1;
  $20=($path_below|0)==1;
  $or_cond_i=$19&$20;
  if (!($or_cond_i)) {
   return;
  }
  $22=(($info+54)|0);
  HEAP8[($22)]=1;
  return;
 }
 $24=($12|0)==($dst_ptr|0);
 if (!($24)) {
  $39=(($info+36)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=((($40)+(1))|0);
  HEAP32[(($39)>>2)]=$41;
  $42=(($info+54)|0);
  HEAP8[($42)]=1;
  return;
 }
 $26=(($info+24)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($27|0)==2;
 if ($28) {
  HEAP32[(($26)>>2)]=$path_below;
  $31=$path_below;
 } else {
  $31=$27;
 }
 $32=(($info+48)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=($33|0)==1;
 $35=($31|0)==1;
 $or_cond23_i=$34&$35;
 if (!($or_cond23_i)) {
  return;
 }
 $37=(($info+54)|0);
 HEAP8[($37)]=1;
 return;
}
function _malloc($bytes){
 $bytes=($bytes)|0;
 var $1=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$_sum111=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$40=0,$41=0,$42=0,$43=0,$_sum113114=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$50=0,$51=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0;
 var $71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$_sum104=0,$86=0,$87=0,$88=0,$89=0;
 var $90=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$_sum106107=0,$113=0;
 var $114=0,$115=0,$116=0,$117=0,$118=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$_sum109_pre=0,$_pre=0,$_sum110=0,$132=0,$133=0;
 var $134=0,$135=0,$136=0,$_pre_phi=0,$F4_0=0,$139=0,$140=0,$141=0,$143=0,$145=0,$146=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0;
 var $157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0;
 var $rsize_0_i=0,$v_0_i=0,$t_0_i=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$_rsize_0_i=0,$_v_0_i=0,$192=0,$193=0,$194=0;
 var $196=0,$197=0,$198=0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$211=0,$212=0,$213=0,$215=0,$216=0,$217=0,$220=0,$221=0;
 var $222=0,$224=0,$225=0,$226=0,$RP_0_i=0,$R_0_i=0,$227=0,$228=0,$229=0,$231=0,$232=0,$233=0,$235=0,$236=0,$R_1_i=0,$240=0,$242=0,$243=0,$244=0,$245=0;
 var $246=0,$cond_i=0,$248=0,$249=0,$250=0,$251=0,$252=0,$254=0,$255=0,$256=0,$258=0,$259=0,$260=0,$263=0,$266=0,$268=0,$269=0,$270=0,$272=0,$273=0;
 var $274=0,$275=0,$277=0,$278=0,$279=0,$281=0,$282=0,$285=0,$286=0,$287=0,$289=0,$290=0,$291=0,$293=0,$294=0,$298=0,$300=0,$301=0,$302=0,$_sum4_i=0;
 var $303=0,$304=0,$305=0,$306=0,$308=0,$309=0,$310=0,$_sum_i137=0,$311=0,$312=0,$_sum1_i=0,$313=0,$314=0,$315=0,$316=0,$318=0,$319=0,$320=0,$321=0,$322=0;
 var $323=0,$324=0,$325=0,$326=0,$328=0,$_sum2_pre_i=0,$_pre_i=0,$_sum3_i=0,$330=0,$331=0,$332=0,$333=0,$334=0,$_pre_phi_i=0,$F1_0_i=0,$337=0,$338=0,$339=0,$342=0,$343=0;
 var $344=0,$346=0,$348=0,$349=0,$350=0,$351=0,$353=0,$354=0,$355=0,$357=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0;
 var $369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$378=0,$379=0,$380=0,$idx_0_i=0,$382=0,$383=0,$384=0,$386=0,$388=0,$389=0,$391=0;
 var $392=0,$rst_0_i=0,$sizebits_0_i=0,$t_0_i116=0,$rsize_0_i117=0,$v_0_i118=0,$394=0,$395=0,$396=0,$397=0,$398=0,$400=0,$rsize_1_i=0,$v_1_i=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0;
 var $408=0,$or_cond_i=0,$rst_1_i=0,$409=0,$410=0,$t_1_i=0,$rsize_2_i=0,$v_2_i=0,$411=0,$412=0,$or_cond21_i=0,$414=0,$415=0,$416=0,$417=0,$418=0,$420=0,$421=0,$422=0,$423=0;
 var $424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$437=0,$438=0,$439=0,$440=0,$441=0,$442=0,$443=0;
 var $444=0,$t_2_ph_i=0,$445=0,$v_330_i=0,$rsize_329_i=0,$t_228_i=0,$446=0,$447=0,$448=0,$449=0,$450=0,$_rsize_3_i=0,$t_2_v_3_i=0,$451=0,$452=0,$453=0,$454=0,$455=0,$456=0,$v_3_lcssa_i=0;
 var $rsize_3_lcssa_i=0,$457=0,$459=0,$460=0,$461=0,$463=0,$464=0,$465=0,$467=0,$468=0,$469=0,$471=0,$472=0,$473=0,$474=0,$475=0,$477=0,$478=0,$479=0,$480=0;
 var $482=0,$483=0,$484=0,$486=0,$487=0,$488=0,$491=0,$492=0,$493=0,$495=0,$496=0,$497=0,$RP_0_i119=0,$R_0_i120=0,$498=0,$499=0,$500=0,$502=0,$503=0,$504=0;
 var $506=0,$507=0,$R_1_i122=0,$511=0,$513=0,$514=0,$515=0,$516=0,$517=0,$cond_i123=0,$519=0,$520=0,$521=0,$522=0,$523=0,$525=0,$526=0,$527=0,$529=0,$530=0;
 var $531=0,$534=0,$537=0,$539=0,$540=0,$541=0,$543=0,$544=0,$545=0,$546=0,$548=0,$549=0,$550=0,$552=0,$553=0,$556=0,$557=0,$558=0,$560=0,$561=0;
 var $562=0,$564=0,$565=0,$569=0,$571=0,$572=0,$573=0,$_sum19_i=0,$574=0,$575=0,$576=0,$577=0,$579=0,$580=0,$581=0,$_sum_i125136=0,$582=0,$583=0,$_sum1_i126=0,$584=0;
 var $585=0,$586=0,$587=0,$589=0,$590=0,$591=0,$592=0,$593=0,$594=0,$595=0,$597=0,$_sum15_pre_i=0,$_pre_i127=0,$_sum18_i=0,$599=0,$600=0,$601=0,$602=0,$603=0,$_pre_phi_i128=0;
 var $F5_0_i=0,$606=0,$_sum16_i=0,$607=0,$608=0,$_sum17_i=0,$609=0,$610=0,$612=0,$613=0,$614=0,$616=0,$618=0,$619=0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0;
 var $626=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$635=0,$636=0,$637=0,$638=0,$639=0,$I7_0_i=0,$641=0,$_sum2_i=0,$642=0,$643=0,$_sum3_i129=0;
 var $644=0,$_sum4_i130=0,$645=0,$646=0,$647=0,$648=0,$649=0,$650=0,$651=0,$653=0,$654=0,$_sum5_i=0,$655=0,$656=0,$_sum6_i=0,$657=0,$658=0,$_sum7_i=0,$659=0,$660=0;
 var $662=0,$663=0,$665=0,$666=0,$668=0,$669=0,$T_0_i=0,$K12_0_i=0,$671=0,$672=0,$673=0,$674=0,$676=0,$677=0,$678=0,$679=0,$680=0,$682=0,$683=0,$684=0;
 var $_sum12_i=0,$686=0,$687=0,$_sum13_i=0,$688=0,$689=0,$_sum14_i=0,$690=0,$691=0,$694=0,$695=0,$696=0,$697=0,$698=0,$700=0,$701=0,$703=0,$_sum9_i=0,$704=0,$705=0;
 var $_sum10_i=0,$706=0,$707=0,$_sum11_i=0,$708=0,$709=0,$711=0,$712=0,$713=0,$nb_0=0,$714=0,$715=0,$717=0,$718=0,$719=0,$721=0,$722=0,$723=0,$724=0,$_sum102=0;
 var $725=0,$726=0,$727=0,$728=0,$729=0,$730=0,$732=0,$733=0,$734=0,$_sum101=0,$735=0,$736=0,$737=0,$738=0,$740=0,$741=0,$743=0,$744=0,$746=0,$747=0;
 var $748=0,$749=0,$750=0,$751=0,$_sum=0,$752=0,$753=0,$754=0,$755=0,$756=0,$757=0,$759=0,$760=0,$762=0,$763=0,$764=0,$765=0,$767=0,$768=0,$769=0;
 var $771=0,$772=0,$773=0,$774=0,$775=0,$776=0,$777=0,$779=0,$780=0,$782=0,$783=0,$784=0,$785=0,$or_cond1_i=0,$787=0,$788=0,$789=0,$791=0,$792=0,$794=0;
 var $sp_0_i_i=0,$796=0,$797=0,$798=0,$800=0,$801=0,$802=0,$803=0,$805=0,$806=0,$807=0,$808=0,$809=0,$810=0,$812=0,$813=0,$814=0,$815=0,$816=0,$818=0;
 var $819=0,$820=0,$821=0,$822=0,$ssize_0_i=0,$824=0,$825=0,$826=0,$827=0,$or_cond_i131=0,$829=0,$830=0,$832=0,$833=0,$or_cond2_i=0,$835=0,$836=0,$ssize_0__i=0,$__i=0,$838=0;
 var $839=0,$840=0,$841=0,$843=0,$844=0,$845=0,$846=0,$847=0,$_3_i=0,$_4_i=0,$ssize_1_i=0,$br_0_i=0,$tsize_0_i=0,$tbase_0_i=0,$849=0,$850=0,$852=0,$853=0,$or_cond5_i=0,$854=0;
 var $or_cond6_i=0,$856=0,$857=0,$858=0,$859=0,$860=0,$861=0,$863=0,$864=0,$866=0,$868=0,$ssize_2_i=0,$870=0,$tsize_0303639_i=0,$871=0,$872=0,$tsize_1_i=0,$874=0,$876=0,$877=0;
 var $notlhs_i=0,$notrhs_i=0,$or_cond8_not_i=0,$878=0,$or_cond9_i=0,$879=0,$880=0,$881=0,$882=0,$883=0,$_tsize_1_i=0,$_tbase_1_i=0,$884=0,$tbase_245_i=0,$tsize_244_i=0,$885=0,$886=0,$887=0,$888=0,$890=0;
 var $891=0,$893=0,$894=0,$895=0,$or_cond10_i=0,$897=0,$i_02_i_i=0,$899=0,$900=0,$901=0,$_sum_i_i=0,$902=0,$_sum1_i_i=0,$903=0,$904=0,$905=0,$906=0,$907=0,$908=0,$909=0;
 var $910=0,$912=0,$913=0,$914=0,$915=0,$916=0,$917=0,$918=0,$_sum_i14_i=0,$919=0,$920=0,$_sum2_i_i=0,$921=0,$922=0,$923=0,$sp_067_i=0,$924=0,$925=0,$926=0,$927=0;
 var $928=0,$929=0,$931=0,$932=0,$933=0,$934=0,$935=0,$936=0,$937=0,$939=0,$940=0,$941=0,$or_cond47_i=0,$943=0,$944=0,$945=0,$946=0,$947=0,$948=0,$949=0;
 var $950=0,$951=0,$953=0,$954=0,$955=0,$956=0,$957=0,$958=0,$959=0,$_sum_i18_i=0,$960=0,$961=0,$_sum2_i19_i=0,$962=0,$963=0,$964=0,$965=0,$966=0,$968=0,$sp_160_i=0;
 var $970=0,$971=0,$972=0,$974=0,$975=0,$976=0,$977=0,$978=0,$979=0,$980=0,$982=0,$983=0,$984=0,$985=0,$986=0,$987=0,$988=0,$990=0,$991=0,$993=0;
 var $994=0,$_sum93_i=0,$995=0,$996=0,$997=0,$998=0,$1000=0,$1001=0,$1003=0,$_sum94_i=0,$1004=0,$1005=0,$1006=0,$1007=0,$1008=0,$_sum_i21_i=0,$1009=0,$1010=0,$1011=0,$1012=0;
 var $_sum1_i22_i=0,$1013=0,$1014=0,$1015=0,$1016=0,$1018=0,$1019=0,$1020=0,$_sum46_i_i=0,$1021=0,$1022=0,$1024=0,$1025=0,$1027=0,$1028=0,$1029=0,$_sum44_i_i=0,$1030=0,$1031=0,$_sum45_i_i=0;
 var $1032=0,$1033=0,$_sum2_i23_i=0,$_sum95_i=0,$1035=0,$1036=0,$1037=0,$1038=0,$1039=0,$1041=0,$1042=0,$1043=0,$_sum3940_i_i=0,$_sum105_i=0,$1045=0,$1046=0,$1047=0,$_sum41_i_i=0,$_sum106_i=0,$1048=0;
 var $1049=0,$1050=0,$1051=0,$1052=0,$1053=0,$1054=0,$1056=0,$1057=0,$1058=0,$1060=0,$1061=0,$1062=0,$1063=0,$1065=0,$1066=0,$1067=0,$1068=0,$1070=0,$_pre56_i_i=0,$1072=0;
 var $1073=0,$1074=0,$1076=0,$1077=0,$1078=0,$_pre_phi57_i_i=0,$1079=0,$1081=0,$_sum34_i_i=0,$_sum96_i=0,$1082=0,$1083=0,$1084=0,$_sum5_i_i=0,$_sum97_i=0,$1085=0,$1086=0,$1087=0,$1088=0,$_sum3637_i_i=0;
 var $_sum98_i=0,$1090=0,$1091=0,$1092=0,$1093=0,$1094=0,$1095=0,$1097=0,$1098=0,$1099=0,$1101=0,$1102=0,$1103=0,$_sum67_i_i=0,$_sum103_i=0,$1106=0,$1107=0,$1108=0,$1109=0,$_sum104_i=0;
 var $1111=0,$1112=0,$1113=0,$1114=0,$RP_0_i_i=0,$R_0_i_i=0,$1115=0,$1116=0,$1117=0,$1119=0,$1120=0,$1121=0,$1123=0,$1124=0,$1125=0,$R_1_i_i=0,$1129=0,$_sum31_i_i=0,$_sum99_i=0,$1131=0;
 var $1132=0,$1133=0,$1134=0,$1135=0,$1136=0,$cond_i_i=0,$1138=0,$1139=0,$1140=0,$1141=0,$1142=0,$1144=0,$1145=0,$1146=0,$1148=0,$1149=0,$1150=0,$1153=0,$1156=0,$1158=0;
 var $1159=0,$1160=0,$1162=0,$_sum3233_i_i=0,$_sum100_i=0,$1163=0,$1164=0,$1165=0,$1166=0,$1168=0,$1169=0,$1170=0,$1172=0,$1173=0,$_sum101_i=0,$1176=0,$1177=0,$1178=0,$1179=0,$1181=0;
 var $1182=0,$1183=0,$1185=0,$1186=0,$_sum9_i_i=0,$_sum102_i=0,$1190=0,$1191=0,$1192=0,$qsize_0_i_i=0,$oldfirst_0_i_i=0,$1194=0,$1195=0,$1196=0,$1197=0,$_sum10_i_i=0,$1198=0,$1199=0,$_sum11_i_i=0,$1200=0;
 var $1201=0,$1202=0,$1203=0,$1205=0,$1206=0,$1207=0,$1208=0,$1209=0,$1210=0,$1211=0,$1213=0,$_sum27_pre_i_i=0,$_pre_i24_i=0,$_sum30_i_i=0,$1215=0,$1216=0,$1217=0,$1218=0,$1219=0,$_pre_phi_i25_i=0;
 var $F4_0_i_i=0,$1222=0,$_sum28_i_i=0,$1223=0,$1224=0,$_sum29_i_i=0,$1225=0,$1226=0,$1228=0,$1229=0,$1230=0,$1232=0,$1234=0,$1235=0,$1236=0,$1237=0,$1238=0,$1239=0,$1240=0,$1241=0;
 var $1242=0,$1243=0,$1244=0,$1245=0,$1246=0,$1247=0,$1248=0,$1249=0,$1250=0,$1251=0,$1252=0,$1253=0,$1254=0,$1255=0,$I7_0_i_i=0,$1257=0,$_sum12_i26_i=0,$1258=0,$1259=0,$_sum13_i_i=0;
 var $1260=0,$_sum14_i_i=0,$1261=0,$1262=0,$1263=0,$1264=0,$1265=0,$1266=0,$1267=0,$1269=0,$1270=0,$_sum15_i_i=0,$1271=0,$1272=0,$_sum16_i_i=0,$1273=0,$1274=0,$_sum17_i_i=0,$1275=0,$1276=0;
 var $1278=0,$1279=0,$1281=0,$1282=0,$1284=0,$1285=0,$T_0_i27_i=0,$K8_0_i_i=0,$1287=0,$1288=0,$1289=0,$1290=0,$1292=0,$1293=0,$1294=0,$1295=0,$1296=0,$1298=0,$1299=0,$1300=0;
 var $_sum24_i_i=0,$1302=0,$1303=0,$_sum25_i_i=0,$1304=0,$1305=0,$_sum26_i_i=0,$1306=0,$1307=0,$1310=0,$1311=0,$1312=0,$1313=0,$1314=0,$1316=0,$1317=0,$1319=0,$_sum21_i_i=0,$1320=0,$1321=0;
 var $_sum22_i_i=0,$1322=0,$1323=0,$_sum23_i_i=0,$1324=0,$1325=0,$_sum1819_i_i=0,$1326=0,$1327=0,$sp_0_i_i_i=0,$1329=0,$1330=0,$1331=0,$1333=0,$1334=0,$1335=0,$1336=0,$1338=0,$1339=0,$_sum_i15_i=0;
 var $_sum1_i16_i=0,$1340=0,$1341=0,$1342=0,$1343=0,$1345=0,$1346=0,$1348=0,$_sum2_i17_i=0,$1349=0,$1350=0,$1351=0,$1352=0,$1353=0,$1354=0,$1355=0,$1356=0,$1357=0,$1358=0,$1359=0;
 var $1360=0,$1362=0,$1363=0,$1364=0,$1365=0,$1366=0,$1367=0,$1368=0,$_sum_i_i_i=0,$1369=0,$1370=0,$_sum2_i_i_i=0,$1371=0,$1372=0,$1373=0,$1374=0,$1375=0,$1376=0,$1377=0,$1378=0;
 var $1379=0,$1380=0,$1381=0,$1382=0,$1383=0,$1384=0,$1385=0,$1387=0,$1388=0,$1389=0,$1390=0,$_sum3_i_i=0,$1391=0,$1392=0,$1393=0,$1394=0,$1395=0,$1396=0,$1397=0,$1398=0;
 var $1399=0,$1401=0,$1402=0,$1403=0,$1404=0,$1405=0,$1406=0,$1407=0,$1409=0,$_sum11_pre_i_i=0,$_pre_i_i=0,$_sum12_i_i=0,$1411=0,$1412=0,$1413=0,$1414=0,$1415=0,$_pre_phi_i_i=0,$F_0_i_i=0,$1418=0;
 var $1419=0,$1420=0,$1422=0,$1423=0,$1424=0,$1426=0,$1428=0,$1429=0,$1430=0,$1431=0,$1432=0,$1433=0,$1434=0,$1435=0,$1436=0,$1437=0,$1438=0,$1439=0,$1440=0,$1441=0;
 var $1442=0,$1443=0,$1444=0,$1445=0,$1446=0,$1447=0,$1448=0,$1449=0,$I1_0_i_i=0,$1451=0,$1452=0,$I1_0_c_i_i=0,$1453=0,$1454=0,$1455=0,$1456=0,$1457=0,$1458=0,$1460=0,$1461=0;
 var $_c_i_i=0,$1462=0,$1463=0,$1465=0,$1466=0,$1468=0,$1469=0,$1471=0,$1472=0,$T_0_i_i=0,$K2_0_i_i=0,$1474=0,$1475=0,$1476=0,$1477=0,$1479=0,$1480=0,$1481=0,$1482=0,$1483=0;
 var $1485=0,$1486=0,$1487=0,$1489=0,$T_0_c8_i_i=0,$1490=0,$1491=0,$1494=0,$1495=0,$1496=0,$1497=0,$1498=0,$1500=0,$1501=0,$1503=0,$1504=0,$_c7_i_i=0,$1505=0,$T_0_c_i_i=0,$1506=0;
 var $1507=0,$1508=0,$1510=0,$1511=0,$1512=0,$1513=0,$1514=0,$1515=0,$_sum_i134=0,$1516=0,$1517=0,$1518=0,$1519=0,$1520=0,$1521=0,$1522=0,$mem_0=0,label=0;
 $1=($bytes>>>0)<((245)>>>0);
 do {
  if ($1) {
   $3=($bytes>>>0)<((11)>>>0);
   if ($3) {
    $8=16;
   } else {
    $5=((($bytes)+(11))|0);
    $6=$5&-8;
    $8=$6;
   }
   $9=$8>>>3;
   $10=((HEAP32[((55816)>>2)])|0);
   $11=$10>>>($9>>>0);
   $12=$11&3;
   $13=($12|0)==0;
   if (!($13)) {
    $15=$11&1;
    $16=$15^1;
    $17=((($16)+($9))|0);
    $18=$17<<1;
    $19=((55856+($18<<2))|0);
    $20=$19;
    $_sum111=((($18)+(2))|0);
    $21=((55856+($_sum111<<2))|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=(($22+8)|0);
    $24=((HEAP32[(($23)>>2)])|0);
    $25=($20|0)==($24|0);
    do {
     if ($25) {
      $27=1<<$17;
      $28=$27^-1;
      $29=$10&$28;
      HEAP32[((55816)>>2)]=$29;
     } else {
      $31=$24;
      $32=((HEAP32[((55832)>>2)])|0);
      $33=($31>>>0)<($32>>>0);
      if ($33) {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
      $35=(($24+12)|0);
      $36=((HEAP32[(($35)>>2)])|0);
      $37=($36|0)==($22|0);
      if ($37) {
       HEAP32[(($35)>>2)]=$20;
       HEAP32[(($21)>>2)]=$24;
       break;
      } else {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     }
    } while(0);
    $40=$17<<3;
    $41=$40|3;
    $42=(($22+4)|0);
    HEAP32[(($42)>>2)]=$41;
    $43=$22;
    $_sum113114=$40|4;
    $44=(($43+$_sum113114)|0);
    $45=$44;
    $46=((HEAP32[(($45)>>2)])|0);
    $47=$46|1;
    HEAP32[(($45)>>2)]=$47;
    $48=$23;
    $mem_0=$48;
    return (($mem_0)|0);
   }
   $50=((HEAP32[((55824)>>2)])|0);
   $51=($8>>>0)>($50>>>0);
   if (!($51)) {
    $nb_0=$8;
    break;
   }
   $53=($11|0)==0;
   if (!($53)) {
    $55=$11<<$9;
    $56=2<<$9;
    $57=(((-$56))|0);
    $58=$56|$57;
    $59=$55&$58;
    $60=(((-$59))|0);
    $61=$59&$60;
    $62=((($61)-(1))|0);
    $63=$62>>>12;
    $64=$63&16;
    $65=$62>>>($64>>>0);
    $66=$65>>>5;
    $67=$66&8;
    $68=$67|$64;
    $69=$65>>>($67>>>0);
    $70=$69>>>2;
    $71=$70&4;
    $72=$68|$71;
    $73=$69>>>($71>>>0);
    $74=$73>>>1;
    $75=$74&2;
    $76=$72|$75;
    $77=$73>>>($75>>>0);
    $78=$77>>>1;
    $79=$78&1;
    $80=$76|$79;
    $81=$77>>>($79>>>0);
    $82=((($80)+($81))|0);
    $83=$82<<1;
    $84=((55856+($83<<2))|0);
    $85=$84;
    $_sum104=((($83)+(2))|0);
    $86=((55856+($_sum104<<2))|0);
    $87=((HEAP32[(($86)>>2)])|0);
    $88=(($87+8)|0);
    $89=((HEAP32[(($88)>>2)])|0);
    $90=($85|0)==($89|0);
    do {
     if ($90) {
      $92=1<<$82;
      $93=$92^-1;
      $94=$10&$93;
      HEAP32[((55816)>>2)]=$94;
     } else {
      $96=$89;
      $97=((HEAP32[((55832)>>2)])|0);
      $98=($96>>>0)<($97>>>0);
      if ($98) {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
      $100=(($89+12)|0);
      $101=((HEAP32[(($100)>>2)])|0);
      $102=($101|0)==($87|0);
      if ($102) {
       HEAP32[(($100)>>2)]=$85;
       HEAP32[(($86)>>2)]=$89;
       break;
      } else {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     }
    } while(0);
    $105=$82<<3;
    $106=((($105)-($8))|0);
    $107=$8|3;
    $108=(($87+4)|0);
    HEAP32[(($108)>>2)]=$107;
    $109=$87;
    $110=(($109+$8)|0);
    $111=$110;
    $112=$106|1;
    $_sum106107=$8|4;
    $113=(($109+$_sum106107)|0);
    $114=$113;
    HEAP32[(($114)>>2)]=$112;
    $115=(($109+$105)|0);
    $116=$115;
    HEAP32[(($116)>>2)]=$106;
    $117=((HEAP32[((55824)>>2)])|0);
    $118=($117|0)==0;
    if (!($118)) {
     $120=((HEAP32[((55836)>>2)])|0);
     $121=$117>>>3;
     $122=$121<<1;
     $123=((55856+($122<<2))|0);
     $124=$123;
     $125=((HEAP32[((55816)>>2)])|0);
     $126=1<<$121;
     $127=$125&$126;
     $128=($127|0)==0;
     do {
      if ($128) {
       $130=$125|$126;
       HEAP32[((55816)>>2)]=$130;
       $_sum109_pre=((($122)+(2))|0);
       $_pre=((55856+($_sum109_pre<<2))|0);
       $F4_0=$124;$_pre_phi=$_pre;
      } else {
       $_sum110=((($122)+(2))|0);
       $132=((55856+($_sum110<<2))|0);
       $133=((HEAP32[(($132)>>2)])|0);
       $134=$133;
       $135=((HEAP32[((55832)>>2)])|0);
       $136=($134>>>0)<($135>>>0);
       if (!($136)) {
        $F4_0=$133;$_pre_phi=$132;
        break;
       }
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     } while(0);
     HEAP32[(($_pre_phi)>>2)]=$120;
     $139=(($F4_0+12)|0);
     HEAP32[(($139)>>2)]=$120;
     $140=(($120+8)|0);
     HEAP32[(($140)>>2)]=$F4_0;
     $141=(($120+12)|0);
     HEAP32[(($141)>>2)]=$124;
    }
    HEAP32[((55824)>>2)]=$106;
    HEAP32[((55836)>>2)]=$111;
    $143=$88;
    $mem_0=$143;
    return (($mem_0)|0);
   }
   $145=((HEAP32[((55820)>>2)])|0);
   $146=($145|0)==0;
   if ($146) {
    $nb_0=$8;
    break;
   }
   $148=(((-$145))|0);
   $149=$145&$148;
   $150=((($149)-(1))|0);
   $151=$150>>>12;
   $152=$151&16;
   $153=$150>>>($152>>>0);
   $154=$153>>>5;
   $155=$154&8;
   $156=$155|$152;
   $157=$153>>>($155>>>0);
   $158=$157>>>2;
   $159=$158&4;
   $160=$156|$159;
   $161=$157>>>($159>>>0);
   $162=$161>>>1;
   $163=$162&2;
   $164=$160|$163;
   $165=$161>>>($163>>>0);
   $166=$165>>>1;
   $167=$166&1;
   $168=$164|$167;
   $169=$165>>>($167>>>0);
   $170=((($168)+($169))|0);
   $171=((56120+($170<<2))|0);
   $172=((HEAP32[(($171)>>2)])|0);
   $173=(($172+4)|0);
   $174=((HEAP32[(($173)>>2)])|0);
   $175=$174&-8;
   $176=((($175)-($8))|0);
   $t_0_i=$172;$v_0_i=$172;$rsize_0_i=$176;
   while(1) {
    $178=(($t_0_i+16)|0);
    $179=((HEAP32[(($178)>>2)])|0);
    $180=($179|0)==0;
    if ($180) {
     $182=(($t_0_i+20)|0);
     $183=((HEAP32[(($182)>>2)])|0);
     $184=($183|0)==0;
     if ($184) {
      break;
     } else {
      $185=$183;
     }
    } else {
     $185=$179;
    }
    $186=(($185+4)|0);
    $187=((HEAP32[(($186)>>2)])|0);
    $188=$187&-8;
    $189=((($188)-($8))|0);
    $190=($189>>>0)<($rsize_0_i>>>0);
    $_rsize_0_i=($190?$189:$rsize_0_i);
    $_v_0_i=($190?$185:$v_0_i);
    $t_0_i=$185;$v_0_i=$_v_0_i;$rsize_0_i=$_rsize_0_i;
   }
   $192=$v_0_i;
   $193=((HEAP32[((55832)>>2)])|0);
   $194=($192>>>0)<($193>>>0);
   if ($194) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $196=(($192+$8)|0);
   $197=$196;
   $198=($192>>>0)<($196>>>0);
   if (!($198)) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $200=(($v_0_i+24)|0);
   $201=((HEAP32[(($200)>>2)])|0);
   $202=(($v_0_i+12)|0);
   $203=((HEAP32[(($202)>>2)])|0);
   $204=($203|0)==($v_0_i|0);
   do {
    if ($204) {
     $220=(($v_0_i+20)|0);
     $221=((HEAP32[(($220)>>2)])|0);
     $222=($221|0)==0;
     if ($222) {
      $224=(($v_0_i+16)|0);
      $225=((HEAP32[(($224)>>2)])|0);
      $226=($225|0)==0;
      if ($226) {
       $R_1_i=0;
       break;
      } else {
       $R_0_i=$225;$RP_0_i=$224;
      }
     } else {
      $R_0_i=$221;$RP_0_i=$220;
     }
     while(1) {
      $227=(($R_0_i+20)|0);
      $228=((HEAP32[(($227)>>2)])|0);
      $229=($228|0)==0;
      if (!($229)) {
       $R_0_i=$228;$RP_0_i=$227;
       continue;
      }
      $231=(($R_0_i+16)|0);
      $232=((HEAP32[(($231)>>2)])|0);
      $233=($232|0)==0;
      if ($233) {
       break;
      } else {
       $R_0_i=$232;$RP_0_i=$231;
      }
     }
     $235=$RP_0_i;
     $236=($235>>>0)<($193>>>0);
     if ($236) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0_i)>>2)]=0;
      $R_1_i=$R_0_i;
      break;
     }
    } else {
     $206=(($v_0_i+8)|0);
     $207=((HEAP32[(($206)>>2)])|0);
     $208=$207;
     $209=($208>>>0)<($193>>>0);
     if ($209) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $211=(($207+12)|0);
     $212=((HEAP32[(($211)>>2)])|0);
     $213=($212|0)==($v_0_i|0);
     if (!($213)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $215=(($203+8)|0);
     $216=((HEAP32[(($215)>>2)])|0);
     $217=($216|0)==($v_0_i|0);
     if ($217) {
      HEAP32[(($211)>>2)]=$203;
      HEAP32[(($215)>>2)]=$207;
      $R_1_i=$203;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);
   $240=($201|0)==0;
   L1297: do {
    if (!($240)) {
     $242=(($v_0_i+28)|0);
     $243=((HEAP32[(($242)>>2)])|0);
     $244=((56120+($243<<2))|0);
     $245=((HEAP32[(($244)>>2)])|0);
     $246=($v_0_i|0)==($245|0);
     do {
      if ($246) {
       HEAP32[(($244)>>2)]=$R_1_i;
       $cond_i=($R_1_i|0)==0;
       if (!($cond_i)) {
        break;
       }
       $248=((HEAP32[(($242)>>2)])|0);
       $249=1<<$248;
       $250=$249^-1;
       $251=((HEAP32[((55820)>>2)])|0);
       $252=$251&$250;
       HEAP32[((55820)>>2)]=$252;
       break L1297;
      } else {
       $254=$201;
       $255=((HEAP32[((55832)>>2)])|0);
       $256=($254>>>0)<($255>>>0);
       if ($256) {
        _abort(); return ((0)|0);
        return ((0)|0);
       }
       $258=(($201+16)|0);
       $259=((HEAP32[(($258)>>2)])|0);
       $260=($259|0)==($v_0_i|0);
       if ($260) {
        HEAP32[(($258)>>2)]=$R_1_i;
       } else {
        $263=(($201+20)|0);
        HEAP32[(($263)>>2)]=$R_1_i;
       }
       $266=($R_1_i|0)==0;
       if ($266) {
        break L1297;
       }
      }
     } while(0);
     $268=$R_1_i;
     $269=((HEAP32[((55832)>>2)])|0);
     $270=($268>>>0)<($269>>>0);
     if ($270) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $272=(($R_1_i+24)|0);
     HEAP32[(($272)>>2)]=$201;
     $273=(($v_0_i+16)|0);
     $274=((HEAP32[(($273)>>2)])|0);
     $275=($274|0)==0;
     do {
      if (!($275)) {
       $277=$274;
       $278=((HEAP32[((55832)>>2)])|0);
       $279=($277>>>0)<($278>>>0);
       if ($279) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        $281=(($R_1_i+16)|0);
        HEAP32[(($281)>>2)]=$274;
        $282=(($274+24)|0);
        HEAP32[(($282)>>2)]=$R_1_i;
        break;
       }
      }
     } while(0);
     $285=(($v_0_i+20)|0);
     $286=((HEAP32[(($285)>>2)])|0);
     $287=($286|0)==0;
     if ($287) {
      break;
     }
     $289=$286;
     $290=((HEAP32[((55832)>>2)])|0);
     $291=($289>>>0)<($290>>>0);
     if ($291) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $293=(($R_1_i+20)|0);
      HEAP32[(($293)>>2)]=$286;
      $294=(($286+24)|0);
      HEAP32[(($294)>>2)]=$R_1_i;
      break;
     }
    }
   } while(0);
   $298=($rsize_0_i>>>0)<((16)>>>0);
   if ($298) {
    $300=((($rsize_0_i)+($8))|0);
    $301=$300|3;
    $302=(($v_0_i+4)|0);
    HEAP32[(($302)>>2)]=$301;
    $_sum4_i=((($300)+(4))|0);
    $303=(($192+$_sum4_i)|0);
    $304=$303;
    $305=((HEAP32[(($304)>>2)])|0);
    $306=$305|1;
    HEAP32[(($304)>>2)]=$306;
   } else {
    $308=$8|3;
    $309=(($v_0_i+4)|0);
    HEAP32[(($309)>>2)]=$308;
    $310=$rsize_0_i|1;
    $_sum_i137=$8|4;
    $311=(($192+$_sum_i137)|0);
    $312=$311;
    HEAP32[(($312)>>2)]=$310;
    $_sum1_i=((($rsize_0_i)+($8))|0);
    $313=(($192+$_sum1_i)|0);
    $314=$313;
    HEAP32[(($314)>>2)]=$rsize_0_i;
    $315=((HEAP32[((55824)>>2)])|0);
    $316=($315|0)==0;
    if (!($316)) {
     $318=((HEAP32[((55836)>>2)])|0);
     $319=$315>>>3;
     $320=$319<<1;
     $321=((55856+($320<<2))|0);
     $322=$321;
     $323=((HEAP32[((55816)>>2)])|0);
     $324=1<<$319;
     $325=$323&$324;
     $326=($325|0)==0;
     do {
      if ($326) {
       $328=$323|$324;
       HEAP32[((55816)>>2)]=$328;
       $_sum2_pre_i=((($320)+(2))|0);
       $_pre_i=((55856+($_sum2_pre_i<<2))|0);
       $F1_0_i=$322;$_pre_phi_i=$_pre_i;
      } else {
       $_sum3_i=((($320)+(2))|0);
       $330=((55856+($_sum3_i<<2))|0);
       $331=((HEAP32[(($330)>>2)])|0);
       $332=$331;
       $333=((HEAP32[((55832)>>2)])|0);
       $334=($332>>>0)<($333>>>0);
       if (!($334)) {
        $F1_0_i=$331;$_pre_phi_i=$330;
        break;
       }
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     } while(0);
     HEAP32[(($_pre_phi_i)>>2)]=$318;
     $337=(($F1_0_i+12)|0);
     HEAP32[(($337)>>2)]=$318;
     $338=(($318+8)|0);
     HEAP32[(($338)>>2)]=$F1_0_i;
     $339=(($318+12)|0);
     HEAP32[(($339)>>2)]=$322;
    }
    HEAP32[((55824)>>2)]=$rsize_0_i;
    HEAP32[((55836)>>2)]=$197;
   }
   $342=(($v_0_i+8)|0);
   $343=$342;
   $344=($342|0)==0;
   if ($344) {
    $nb_0=$8;
    break;
   } else {
    $mem_0=$343;
   }
   return (($mem_0)|0);
  } else {
   $346=($bytes>>>0)>((4294967231)>>>0);
   if ($346) {
    $nb_0=-1;
    break;
   }
   $348=((($bytes)+(11))|0);
   $349=$348&-8;
   $350=((HEAP32[((55820)>>2)])|0);
   $351=($350|0)==0;
   if ($351) {
    $nb_0=$349;
    break;
   }
   $353=(((-$349))|0);
   $354=$348>>>8;
   $355=($354|0)==0;
   do {
    if ($355) {
     $idx_0_i=0;
    } else {
     $357=($349>>>0)>((16777215)>>>0);
     if ($357) {
      $idx_0_i=31;
      break;
     }
     $359=((($354)+(1048320))|0);
     $360=$359>>>16;
     $361=$360&8;
     $362=$354<<$361;
     $363=((($362)+(520192))|0);
     $364=$363>>>16;
     $365=$364&4;
     $366=$365|$361;
     $367=$362<<$365;
     $368=((($367)+(245760))|0);
     $369=$368>>>16;
     $370=$369&2;
     $371=$366|$370;
     $372=(((14)-($371))|0);
     $373=$367<<$370;
     $374=$373>>>15;
     $375=((($372)+($374))|0);
     $376=$375<<1;
     $377=((($375)+(7))|0);
     $378=$349>>>($377>>>0);
     $379=$378&1;
     $380=$379|$376;
     $idx_0_i=$380;
    }
   } while(0);
   $382=((56120+($idx_0_i<<2))|0);
   $383=((HEAP32[(($382)>>2)])|0);
   $384=($383|0)==0;
   L1345: do {
    if ($384) {
     $v_2_i=0;$rsize_2_i=$353;$t_1_i=0;
    } else {
     $386=($idx_0_i|0)==31;
     if ($386) {
      $391=0;
     } else {
      $388=$idx_0_i>>>1;
      $389=(((25)-($388))|0);
      $391=$389;
     }
     $392=$349<<$391;
     $v_0_i118=0;$rsize_0_i117=$353;$t_0_i116=$383;$sizebits_0_i=$392;$rst_0_i=0;
     while(1) {
      $394=(($t_0_i116+4)|0);
      $395=((HEAP32[(($394)>>2)])|0);
      $396=$395&-8;
      $397=((($396)-($349))|0);
      $398=($397>>>0)<($rsize_0_i117>>>0);
      if ($398) {
       $400=($396|0)==($349|0);
       if ($400) {
        $v_2_i=$t_0_i116;$rsize_2_i=$397;$t_1_i=$t_0_i116;
        break L1345;
       } else {
        $v_1_i=$t_0_i116;$rsize_1_i=$397;
       }
      } else {
       $v_1_i=$v_0_i118;$rsize_1_i=$rsize_0_i117;
      }
      $402=(($t_0_i116+20)|0);
      $403=((HEAP32[(($402)>>2)])|0);
      $404=$sizebits_0_i>>>31;
      $405=(($t_0_i116+16+($404<<2))|0);
      $406=((HEAP32[(($405)>>2)])|0);
      $407=($403|0)==0;
      $408=($403|0)==($406|0);
      $or_cond_i=$407|$408;
      $rst_1_i=($or_cond_i?$rst_0_i:$403);
      $409=($406|0)==0;
      $410=$sizebits_0_i<<1;
      if ($409) {
       $v_2_i=$v_1_i;$rsize_2_i=$rsize_1_i;$t_1_i=$rst_1_i;
       break;
      } else {
       $v_0_i118=$v_1_i;$rsize_0_i117=$rsize_1_i;$t_0_i116=$406;$sizebits_0_i=$410;$rst_0_i=$rst_1_i;
      }
     }
    }
   } while(0);
   $411=($t_1_i|0)==0;
   $412=($v_2_i|0)==0;
   $or_cond21_i=$411&$412;
   if ($or_cond21_i) {
    $414=2<<$idx_0_i;
    $415=(((-$414))|0);
    $416=$414|$415;
    $417=$350&$416;
    $418=($417|0)==0;
    if ($418) {
     $nb_0=$349;
     break;
    }
    $420=(((-$417))|0);
    $421=$417&$420;
    $422=((($421)-(1))|0);
    $423=$422>>>12;
    $424=$423&16;
    $425=$422>>>($424>>>0);
    $426=$425>>>5;
    $427=$426&8;
    $428=$427|$424;
    $429=$425>>>($427>>>0);
    $430=$429>>>2;
    $431=$430&4;
    $432=$428|$431;
    $433=$429>>>($431>>>0);
    $434=$433>>>1;
    $435=$434&2;
    $436=$432|$435;
    $437=$433>>>($435>>>0);
    $438=$437>>>1;
    $439=$438&1;
    $440=$436|$439;
    $441=$437>>>($439>>>0);
    $442=((($440)+($441))|0);
    $443=((56120+($442<<2))|0);
    $444=((HEAP32[(($443)>>2)])|0);
    $t_2_ph_i=$444;
   } else {
    $t_2_ph_i=$t_1_i;
   }
   $445=($t_2_ph_i|0)==0;
   if ($445) {
    $rsize_3_lcssa_i=$rsize_2_i;$v_3_lcssa_i=$v_2_i;
   } else {
    $t_228_i=$t_2_ph_i;$rsize_329_i=$rsize_2_i;$v_330_i=$v_2_i;
    while(1) {
     $446=(($t_228_i+4)|0);
     $447=((HEAP32[(($446)>>2)])|0);
     $448=$447&-8;
     $449=((($448)-($349))|0);
     $450=($449>>>0)<($rsize_329_i>>>0);
     $_rsize_3_i=($450?$449:$rsize_329_i);
     $t_2_v_3_i=($450?$t_228_i:$v_330_i);
     $451=(($t_228_i+16)|0);
     $452=((HEAP32[(($451)>>2)])|0);
     $453=($452|0)==0;
     if (!($453)) {
      $t_228_i=$452;$rsize_329_i=$_rsize_3_i;$v_330_i=$t_2_v_3_i;
      continue;
     }
     $454=(($t_228_i+20)|0);
     $455=((HEAP32[(($454)>>2)])|0);
     $456=($455|0)==0;
     if ($456) {
      $rsize_3_lcssa_i=$_rsize_3_i;$v_3_lcssa_i=$t_2_v_3_i;
      break;
     } else {
      $t_228_i=$455;$rsize_329_i=$_rsize_3_i;$v_330_i=$t_2_v_3_i;
     }
    }
   }
   $457=($v_3_lcssa_i|0)==0;
   if ($457) {
    $nb_0=$349;
    break;
   }
   $459=((HEAP32[((55824)>>2)])|0);
   $460=((($459)-($349))|0);
   $461=($rsize_3_lcssa_i>>>0)<($460>>>0);
   if (!($461)) {
    $nb_0=$349;
    break;
   }
   $463=$v_3_lcssa_i;
   $464=((HEAP32[((55832)>>2)])|0);
   $465=($463>>>0)<($464>>>0);
   if ($465) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $467=(($463+$349)|0);
   $468=$467;
   $469=($463>>>0)<($467>>>0);
   if (!($469)) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $471=(($v_3_lcssa_i+24)|0);
   $472=((HEAP32[(($471)>>2)])|0);
   $473=(($v_3_lcssa_i+12)|0);
   $474=((HEAP32[(($473)>>2)])|0);
   $475=($474|0)==($v_3_lcssa_i|0);
   do {
    if ($475) {
     $491=(($v_3_lcssa_i+20)|0);
     $492=((HEAP32[(($491)>>2)])|0);
     $493=($492|0)==0;
     if ($493) {
      $495=(($v_3_lcssa_i+16)|0);
      $496=((HEAP32[(($495)>>2)])|0);
      $497=($496|0)==0;
      if ($497) {
       $R_1_i122=0;
       break;
      } else {
       $R_0_i120=$496;$RP_0_i119=$495;
      }
     } else {
      $R_0_i120=$492;$RP_0_i119=$491;
     }
     while(1) {
      $498=(($R_0_i120+20)|0);
      $499=((HEAP32[(($498)>>2)])|0);
      $500=($499|0)==0;
      if (!($500)) {
       $R_0_i120=$499;$RP_0_i119=$498;
       continue;
      }
      $502=(($R_0_i120+16)|0);
      $503=((HEAP32[(($502)>>2)])|0);
      $504=($503|0)==0;
      if ($504) {
       break;
      } else {
       $R_0_i120=$503;$RP_0_i119=$502;
      }
     }
     $506=$RP_0_i119;
     $507=($506>>>0)<($464>>>0);
     if ($507) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0_i119)>>2)]=0;
      $R_1_i122=$R_0_i120;
      break;
     }
    } else {
     $477=(($v_3_lcssa_i+8)|0);
     $478=((HEAP32[(($477)>>2)])|0);
     $479=$478;
     $480=($479>>>0)<($464>>>0);
     if ($480) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $482=(($478+12)|0);
     $483=((HEAP32[(($482)>>2)])|0);
     $484=($483|0)==($v_3_lcssa_i|0);
     if (!($484)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $486=(($474+8)|0);
     $487=((HEAP32[(($486)>>2)])|0);
     $488=($487|0)==($v_3_lcssa_i|0);
     if ($488) {
      HEAP32[(($482)>>2)]=$474;
      HEAP32[(($486)>>2)]=$478;
      $R_1_i122=$474;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);
   $511=($472|0)==0;
   L1395: do {
    if (!($511)) {
     $513=(($v_3_lcssa_i+28)|0);
     $514=((HEAP32[(($513)>>2)])|0);
     $515=((56120+($514<<2))|0);
     $516=((HEAP32[(($515)>>2)])|0);
     $517=($v_3_lcssa_i|0)==($516|0);
     do {
      if ($517) {
       HEAP32[(($515)>>2)]=$R_1_i122;
       $cond_i123=($R_1_i122|0)==0;
       if (!($cond_i123)) {
        break;
       }
       $519=((HEAP32[(($513)>>2)])|0);
       $520=1<<$519;
       $521=$520^-1;
       $522=((HEAP32[((55820)>>2)])|0);
       $523=$522&$521;
       HEAP32[((55820)>>2)]=$523;
       break L1395;
      } else {
       $525=$472;
       $526=((HEAP32[((55832)>>2)])|0);
       $527=($525>>>0)<($526>>>0);
       if ($527) {
        _abort(); return ((0)|0);
        return ((0)|0);
       }
       $529=(($472+16)|0);
       $530=((HEAP32[(($529)>>2)])|0);
       $531=($530|0)==($v_3_lcssa_i|0);
       if ($531) {
        HEAP32[(($529)>>2)]=$R_1_i122;
       } else {
        $534=(($472+20)|0);
        HEAP32[(($534)>>2)]=$R_1_i122;
       }
       $537=($R_1_i122|0)==0;
       if ($537) {
        break L1395;
       }
      }
     } while(0);
     $539=$R_1_i122;
     $540=((HEAP32[((55832)>>2)])|0);
     $541=($539>>>0)<($540>>>0);
     if ($541) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $543=(($R_1_i122+24)|0);
     HEAP32[(($543)>>2)]=$472;
     $544=(($v_3_lcssa_i+16)|0);
     $545=((HEAP32[(($544)>>2)])|0);
     $546=($545|0)==0;
     do {
      if (!($546)) {
       $548=$545;
       $549=((HEAP32[((55832)>>2)])|0);
       $550=($548>>>0)<($549>>>0);
       if ($550) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        $552=(($R_1_i122+16)|0);
        HEAP32[(($552)>>2)]=$545;
        $553=(($545+24)|0);
        HEAP32[(($553)>>2)]=$R_1_i122;
        break;
       }
      }
     } while(0);
     $556=(($v_3_lcssa_i+20)|0);
     $557=((HEAP32[(($556)>>2)])|0);
     $558=($557|0)==0;
     if ($558) {
      break;
     }
     $560=$557;
     $561=((HEAP32[((55832)>>2)])|0);
     $562=($560>>>0)<($561>>>0);
     if ($562) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $564=(($R_1_i122+20)|0);
      HEAP32[(($564)>>2)]=$557;
      $565=(($557+24)|0);
      HEAP32[(($565)>>2)]=$R_1_i122;
      break;
     }
    }
   } while(0);
   $569=($rsize_3_lcssa_i>>>0)<((16)>>>0);
   do {
    if ($569) {
     $571=((($rsize_3_lcssa_i)+($349))|0);
     $572=$571|3;
     $573=(($v_3_lcssa_i+4)|0);
     HEAP32[(($573)>>2)]=$572;
     $_sum19_i=((($571)+(4))|0);
     $574=(($463+$_sum19_i)|0);
     $575=$574;
     $576=((HEAP32[(($575)>>2)])|0);
     $577=$576|1;
     HEAP32[(($575)>>2)]=$577;
    } else {
     $579=$349|3;
     $580=(($v_3_lcssa_i+4)|0);
     HEAP32[(($580)>>2)]=$579;
     $581=$rsize_3_lcssa_i|1;
     $_sum_i125136=$349|4;
     $582=(($463+$_sum_i125136)|0);
     $583=$582;
     HEAP32[(($583)>>2)]=$581;
     $_sum1_i126=((($rsize_3_lcssa_i)+($349))|0);
     $584=(($463+$_sum1_i126)|0);
     $585=$584;
     HEAP32[(($585)>>2)]=$rsize_3_lcssa_i;
     $586=$rsize_3_lcssa_i>>>3;
     $587=($rsize_3_lcssa_i>>>0)<((256)>>>0);
     if ($587) {
      $589=$586<<1;
      $590=((55856+($589<<2))|0);
      $591=$590;
      $592=((HEAP32[((55816)>>2)])|0);
      $593=1<<$586;
      $594=$592&$593;
      $595=($594|0)==0;
      do {
       if ($595) {
        $597=$592|$593;
        HEAP32[((55816)>>2)]=$597;
        $_sum15_pre_i=((($589)+(2))|0);
        $_pre_i127=((55856+($_sum15_pre_i<<2))|0);
        $F5_0_i=$591;$_pre_phi_i128=$_pre_i127;
       } else {
        $_sum18_i=((($589)+(2))|0);
        $599=((55856+($_sum18_i<<2))|0);
        $600=((HEAP32[(($599)>>2)])|0);
        $601=$600;
        $602=((HEAP32[((55832)>>2)])|0);
        $603=($601>>>0)<($602>>>0);
        if (!($603)) {
         $F5_0_i=$600;$_pre_phi_i128=$599;
         break;
        }
        _abort(); return ((0)|0);
        return ((0)|0);
       }
      } while(0);
      HEAP32[(($_pre_phi_i128)>>2)]=$468;
      $606=(($F5_0_i+12)|0);
      HEAP32[(($606)>>2)]=$468;
      $_sum16_i=((($349)+(8))|0);
      $607=(($463+$_sum16_i)|0);
      $608=$607;
      HEAP32[(($608)>>2)]=$F5_0_i;
      $_sum17_i=((($349)+(12))|0);
      $609=(($463+$_sum17_i)|0);
      $610=$609;
      HEAP32[(($610)>>2)]=$591;
      break;
     }
     $612=$467;
     $613=$rsize_3_lcssa_i>>>8;
     $614=($613|0)==0;
     do {
      if ($614) {
       $I7_0_i=0;
      } else {
       $616=($rsize_3_lcssa_i>>>0)>((16777215)>>>0);
       if ($616) {
        $I7_0_i=31;
        break;
       }
       $618=((($613)+(1048320))|0);
       $619=$618>>>16;
       $620=$619&8;
       $621=$613<<$620;
       $622=((($621)+(520192))|0);
       $623=$622>>>16;
       $624=$623&4;
       $625=$624|$620;
       $626=$621<<$624;
       $627=((($626)+(245760))|0);
       $628=$627>>>16;
       $629=$628&2;
       $630=$625|$629;
       $631=(((14)-($630))|0);
       $632=$626<<$629;
       $633=$632>>>15;
       $634=((($631)+($633))|0);
       $635=$634<<1;
       $636=((($634)+(7))|0);
       $637=$rsize_3_lcssa_i>>>($636>>>0);
       $638=$637&1;
       $639=$638|$635;
       $I7_0_i=$639;
      }
     } while(0);
     $641=((56120+($I7_0_i<<2))|0);
     $_sum2_i=((($349)+(28))|0);
     $642=(($463+$_sum2_i)|0);
     $643=$642;
     HEAP32[(($643)>>2)]=$I7_0_i;
     $_sum3_i129=((($349)+(16))|0);
     $644=(($463+$_sum3_i129)|0);
     $_sum4_i130=((($349)+(20))|0);
     $645=(($463+$_sum4_i130)|0);
     $646=$645;
     HEAP32[(($646)>>2)]=0;
     $647=$644;
     HEAP32[(($647)>>2)]=0;
     $648=((HEAP32[((55820)>>2)])|0);
     $649=1<<$I7_0_i;
     $650=$648&$649;
     $651=($650|0)==0;
     if ($651) {
      $653=$648|$649;
      HEAP32[((55820)>>2)]=$653;
      HEAP32[(($641)>>2)]=$612;
      $654=$641;
      $_sum5_i=((($349)+(24))|0);
      $655=(($463+$_sum5_i)|0);
      $656=$655;
      HEAP32[(($656)>>2)]=$654;
      $_sum6_i=((($349)+(12))|0);
      $657=(($463+$_sum6_i)|0);
      $658=$657;
      HEAP32[(($658)>>2)]=$612;
      $_sum7_i=((($349)+(8))|0);
      $659=(($463+$_sum7_i)|0);
      $660=$659;
      HEAP32[(($660)>>2)]=$612;
      break;
     }
     $662=((HEAP32[(($641)>>2)])|0);
     $663=($I7_0_i|0)==31;
     if ($663) {
      $668=0;
     } else {
      $665=$I7_0_i>>>1;
      $666=(((25)-($665))|0);
      $668=$666;
     }
     $669=$rsize_3_lcssa_i<<$668;
     $K12_0_i=$669;$T_0_i=$662;
     while(1) {
      $671=(($T_0_i+4)|0);
      $672=((HEAP32[(($671)>>2)])|0);
      $673=$672&-8;
      $674=($673|0)==($rsize_3_lcssa_i|0);
      if ($674) {
       break;
      }
      $676=$K12_0_i>>>31;
      $677=(($T_0_i+16+($676<<2))|0);
      $678=((HEAP32[(($677)>>2)])|0);
      $679=($678|0)==0;
      $680=$K12_0_i<<1;
      if ($679) {
       label = 1139;
       break;
      } else {
       $K12_0_i=$680;$T_0_i=$678;
      }
     }
     if ((label|0) == 1139) {
      $682=$677;
      $683=((HEAP32[((55832)>>2)])|0);
      $684=($682>>>0)<($683>>>0);
      if ($684) {
       _abort(); return ((0)|0);
       return ((0)|0);
      } else {
       HEAP32[(($677)>>2)]=$612;
       $_sum12_i=((($349)+(24))|0);
       $686=(($463+$_sum12_i)|0);
       $687=$686;
       HEAP32[(($687)>>2)]=$T_0_i;
       $_sum13_i=((($349)+(12))|0);
       $688=(($463+$_sum13_i)|0);
       $689=$688;
       HEAP32[(($689)>>2)]=$612;
       $_sum14_i=((($349)+(8))|0);
       $690=(($463+$_sum14_i)|0);
       $691=$690;
       HEAP32[(($691)>>2)]=$612;
       break;
      }
     }
     $694=(($T_0_i+8)|0);
     $695=((HEAP32[(($694)>>2)])|0);
     $696=$T_0_i;
     $697=((HEAP32[((55832)>>2)])|0);
     $698=($696>>>0)<($697>>>0);
     if ($698) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $700=$695;
     $701=($700>>>0)<($697>>>0);
     if ($701) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $703=(($695+12)|0);
      HEAP32[(($703)>>2)]=$612;
      HEAP32[(($694)>>2)]=$612;
      $_sum9_i=((($349)+(8))|0);
      $704=(($463+$_sum9_i)|0);
      $705=$704;
      HEAP32[(($705)>>2)]=$695;
      $_sum10_i=((($349)+(12))|0);
      $706=(($463+$_sum10_i)|0);
      $707=$706;
      HEAP32[(($707)>>2)]=$T_0_i;
      $_sum11_i=((($349)+(24))|0);
      $708=(($463+$_sum11_i)|0);
      $709=$708;
      HEAP32[(($709)>>2)]=0;
      break;
     }
    }
   } while(0);
   $711=(($v_3_lcssa_i+8)|0);
   $712=$711;
   $713=($711|0)==0;
   if ($713) {
    $nb_0=$349;
    break;
   } else {
    $mem_0=$712;
   }
   return (($mem_0)|0);
  }
 } while(0);
 $714=((HEAP32[((55824)>>2)])|0);
 $715=($nb_0>>>0)>($714>>>0);
 if (!($715)) {
  $717=((($714)-($nb_0))|0);
  $718=((HEAP32[((55836)>>2)])|0);
  $719=($717>>>0)>((15)>>>0);
  if ($719) {
   $721=$718;
   $722=(($721+$nb_0)|0);
   $723=$722;
   HEAP32[((55836)>>2)]=$723;
   HEAP32[((55824)>>2)]=$717;
   $724=$717|1;
   $_sum102=((($nb_0)+(4))|0);
   $725=(($721+$_sum102)|0);
   $726=$725;
   HEAP32[(($726)>>2)]=$724;
   $727=(($721+$714)|0);
   $728=$727;
   HEAP32[(($728)>>2)]=$717;
   $729=$nb_0|3;
   $730=(($718+4)|0);
   HEAP32[(($730)>>2)]=$729;
  } else {
   HEAP32[((55824)>>2)]=0;
   HEAP32[((55836)>>2)]=0;
   $732=$714|3;
   $733=(($718+4)|0);
   HEAP32[(($733)>>2)]=$732;
   $734=$718;
   $_sum101=((($714)+(4))|0);
   $735=(($734+$_sum101)|0);
   $736=$735;
   $737=((HEAP32[(($736)>>2)])|0);
   $738=$737|1;
   HEAP32[(($736)>>2)]=$738;
  }
  $740=(($718+8)|0);
  $741=$740;
  $mem_0=$741;
  return (($mem_0)|0);
 }
 $743=((HEAP32[((55828)>>2)])|0);
 $744=($nb_0>>>0)<($743>>>0);
 if ($744) {
  $746=((($743)-($nb_0))|0);
  HEAP32[((55828)>>2)]=$746;
  $747=((HEAP32[((55840)>>2)])|0);
  $748=$747;
  $749=(($748+$nb_0)|0);
  $750=$749;
  HEAP32[((55840)>>2)]=$750;
  $751=$746|1;
  $_sum=((($nb_0)+(4))|0);
  $752=(($748+$_sum)|0);
  $753=$752;
  HEAP32[(($753)>>2)]=$751;
  $754=$nb_0|3;
  $755=(($747+4)|0);
  HEAP32[(($755)>>2)]=$754;
  $756=(($747+8)|0);
  $757=$756;
  $mem_0=$757;
  return (($mem_0)|0);
 }
 $759=((HEAP32[((20944)>>2)])|0);
 $760=($759|0)==0;
 do {
  if ($760) {
   $762=((_sysconf(((30)|0)))|0);
   $763=((($762)-(1))|0);
   $764=$763&$762;
   $765=($764|0)==0;
   if ($765) {
    HEAP32[((20952)>>2)]=$762;
    HEAP32[((20948)>>2)]=$762;
    HEAP32[((20956)>>2)]=-1;
    HEAP32[((20960)>>2)]=-1;
    HEAP32[((20964)>>2)]=0;
    HEAP32[((56260)>>2)]=0;
    $767=((_time(((0)|0)))|0);
    $768=$767&-16;
    $769=$768^1431655768;
    HEAP32[((20944)>>2)]=$769;
    break;
   } else {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
  }
 } while(0);
 $771=((($nb_0)+(48))|0);
 $772=((HEAP32[((20952)>>2)])|0);
 $773=((($nb_0)+(47))|0);
 $774=((($772)+($773))|0);
 $775=(((-$772))|0);
 $776=$774&$775;
 $777=($776>>>0)>($nb_0>>>0);
 if (!($777)) {
  $mem_0=0;
  return (($mem_0)|0);
 }
 $779=((HEAP32[((56256)>>2)])|0);
 $780=($779|0)==0;
 do {
  if (!($780)) {
   $782=((HEAP32[((56248)>>2)])|0);
   $783=((($782)+($776))|0);
   $784=($783>>>0)<=($782>>>0);
   $785=($783>>>0)>($779>>>0);
   $or_cond1_i=$784|$785;
   if ($or_cond1_i) {
    $mem_0=0;
   } else {
    break;
   }
   return (($mem_0)|0);
  }
 } while(0);
 $787=((HEAP32[((56260)>>2)])|0);
 $788=$787&4;
 $789=($788|0)==0;
 L1487: do {
  if ($789) {
   $791=((HEAP32[((55840)>>2)])|0);
   $792=($791|0)==0;
   L1489: do {
    if ($792) {
     label = 1169;
    } else {
     $794=$791;
     $sp_0_i_i=56264;
     while(1) {
      $796=(($sp_0_i_i)|0);
      $797=((HEAP32[(($796)>>2)])|0);
      $798=($797>>>0)>($794>>>0);
      if (!($798)) {
       $800=(($sp_0_i_i+4)|0);
       $801=((HEAP32[(($800)>>2)])|0);
       $802=(($797+$801)|0);
       $803=($802>>>0)>($794>>>0);
       if ($803) {
        break;
       }
      }
      $805=(($sp_0_i_i+8)|0);
      $806=((HEAP32[(($805)>>2)])|0);
      $807=($806|0)==0;
      if ($807) {
       label = 1169;
       break L1489;
      } else {
       $sp_0_i_i=$806;
      }
     }
     $808=($sp_0_i_i|0)==0;
     if ($808) {
      label = 1169;
      break;
     }
     $838=((HEAP32[((55828)>>2)])|0);
     $839=((($774)-($838))|0);
     $840=$839&$775;
     $841=($840>>>0)<((2147483647)>>>0);
     if (!($841)) {
      $tsize_0303639_i=0;
      break;
     }
     $843=((_sbrk((($840)|0)))|0);
     $844=((HEAP32[(($796)>>2)])|0);
     $845=((HEAP32[(($800)>>2)])|0);
     $846=(($844+$845)|0);
     $847=($843|0)==($846|0);
     $_3_i=($847?$840:0);
     $_4_i=($847?$843:-1);
     $tbase_0_i=$_4_i;$tsize_0_i=$_3_i;$br_0_i=$843;$ssize_1_i=$840;
     label = 1178;
    }
   } while(0);
   do {
    if ((label|0) == 1169) {
     $809=((_sbrk(((0)|0)))|0);
     $810=($809|0)==-1;
     if ($810) {
      $tsize_0303639_i=0;
      break;
     }
     $812=$809;
     $813=((HEAP32[((20948)>>2)])|0);
     $814=((($813)-(1))|0);
     $815=$814&$812;
     $816=($815|0)==0;
     if ($816) {
      $ssize_0_i=$776;
     } else {
      $818=((($814)+($812))|0);
      $819=(((-$813))|0);
      $820=$818&$819;
      $821=((($776)-($812))|0);
      $822=((($821)+($820))|0);
      $ssize_0_i=$822;
     }
     $824=((HEAP32[((56248)>>2)])|0);
     $825=((($824)+($ssize_0_i))|0);
     $826=($ssize_0_i>>>0)>($nb_0>>>0);
     $827=($ssize_0_i>>>0)<((2147483647)>>>0);
     $or_cond_i131=$826&$827;
     if (!($or_cond_i131)) {
      $tsize_0303639_i=0;
      break;
     }
     $829=((HEAP32[((56256)>>2)])|0);
     $830=($829|0)==0;
     if (!($830)) {
      $832=($825>>>0)<=($824>>>0);
      $833=($825>>>0)>($829>>>0);
      $or_cond2_i=$832|$833;
      if ($or_cond2_i) {
       $tsize_0303639_i=0;
       break;
      }
     }
     $835=((_sbrk((($ssize_0_i)|0)))|0);
     $836=($835|0)==($809|0);
     $ssize_0__i=($836?$ssize_0_i:0);
     $__i=($836?$809:-1);
     $tbase_0_i=$__i;$tsize_0_i=$ssize_0__i;$br_0_i=$835;$ssize_1_i=$ssize_0_i;
     label = 1178;
    }
   } while(0);
   L1509: do {
    if ((label|0) == 1178) {
     $849=(((-$ssize_1_i))|0);
     $850=($tbase_0_i|0)==-1;
     if (!($850)) {
      $tsize_244_i=$tsize_0_i;$tbase_245_i=$tbase_0_i;
      label = 1189;
      break L1487;
     }
     $852=($br_0_i|0)!=-1;
     $853=($ssize_1_i>>>0)<((2147483647)>>>0);
     $or_cond5_i=$852&$853;
     $854=($ssize_1_i>>>0)<($771>>>0);
     $or_cond6_i=$or_cond5_i&$854;
     do {
      if ($or_cond6_i) {
       $856=((HEAP32[((20952)>>2)])|0);
       $857=((($773)-($ssize_1_i))|0);
       $858=((($857)+($856))|0);
       $859=(((-$856))|0);
       $860=$858&$859;
       $861=($860>>>0)<((2147483647)>>>0);
       if (!($861)) {
        $ssize_2_i=$ssize_1_i;
        break;
       }
       $863=((_sbrk((($860)|0)))|0);
       $864=($863|0)==-1;
       if ($864) {
        $868=((_sbrk((($849)|0)))|0);
        $tsize_0303639_i=$tsize_0_i;
        break L1509;
       } else {
        $866=((($860)+($ssize_1_i))|0);
        $ssize_2_i=$866;
        break;
       }
      } else {
       $ssize_2_i=$ssize_1_i;
      }
     } while(0);
     $870=($br_0_i|0)==-1;
     if ($870) {
      $tsize_0303639_i=$tsize_0_i;
     } else {
      $tsize_244_i=$ssize_2_i;$tbase_245_i=$br_0_i;
      label = 1189;
      break L1487;
     }
    }
   } while(0);
   $871=((HEAP32[((56260)>>2)])|0);
   $872=$871|4;
   HEAP32[((56260)>>2)]=$872;
   $tsize_1_i=$tsize_0303639_i;
   label = 1186;
  } else {
   $tsize_1_i=0;
   label = 1186;
  }
 } while(0);
 do {
  if ((label|0) == 1186) {
   $874=($776>>>0)<((2147483647)>>>0);
   if (!($874)) {
    break;
   }
   $876=((_sbrk((($776)|0)))|0);
   $877=((_sbrk(((0)|0)))|0);
   $notlhs_i=($876|0)!=-1;
   $notrhs_i=($877|0)!=-1;
   $or_cond8_not_i=$notrhs_i&$notlhs_i;
   $878=($876>>>0)<($877>>>0);
   $or_cond9_i=$or_cond8_not_i&$878;
   if (!($or_cond9_i)) {
    break;
   }
   $879=$877;
   $880=$876;
   $881=((($879)-($880))|0);
   $882=((($nb_0)+(40))|0);
   $883=($881>>>0)>($882>>>0);
   $_tsize_1_i=($883?$881:$tsize_1_i);
   $_tbase_1_i=($883?$876:-1);
   $884=($_tbase_1_i|0)==-1;
   if (!($884)) {
    $tsize_244_i=$_tsize_1_i;$tbase_245_i=$_tbase_1_i;
    label = 1189;
   }
  }
 } while(0);
 do {
  if ((label|0) == 1189) {
   $885=((HEAP32[((56248)>>2)])|0);
   $886=((($885)+($tsize_244_i))|0);
   HEAP32[((56248)>>2)]=$886;
   $887=((HEAP32[((56252)>>2)])|0);
   $888=($886>>>0)>($887>>>0);
   if ($888) {
    HEAP32[((56252)>>2)]=$886;
   }
   $890=((HEAP32[((55840)>>2)])|0);
   $891=($890|0)==0;
   L1529: do {
    if ($891) {
     $893=((HEAP32[((55832)>>2)])|0);
     $894=($893|0)==0;
     $895=($tbase_245_i>>>0)<($893>>>0);
     $or_cond10_i=$894|$895;
     if ($or_cond10_i) {
      HEAP32[((55832)>>2)]=$tbase_245_i;
     }
     HEAP32[((56264)>>2)]=$tbase_245_i;
     HEAP32[((56268)>>2)]=$tsize_244_i;
     HEAP32[((56276)>>2)]=0;
     $897=((HEAP32[((20944)>>2)])|0);
     HEAP32[((55852)>>2)]=$897;
     HEAP32[((55848)>>2)]=-1;
     $i_02_i_i=0;
     while(1) {
      $899=$i_02_i_i<<1;
      $900=((55856+($899<<2))|0);
      $901=$900;
      $_sum_i_i=((($899)+(3))|0);
      $902=((55856+($_sum_i_i<<2))|0);
      HEAP32[(($902)>>2)]=$901;
      $_sum1_i_i=((($899)+(2))|0);
      $903=((55856+($_sum1_i_i<<2))|0);
      HEAP32[(($903)>>2)]=$901;
      $904=((($i_02_i_i)+(1))|0);
      $905=($904>>>0)<((32)>>>0);
      if ($905) {
       $i_02_i_i=$904;
      } else {
       break;
      }
     }
     $906=((($tsize_244_i)-(40))|0);
     $907=(($tbase_245_i+8)|0);
     $908=$907;
     $909=$908&7;
     $910=($909|0)==0;
     if ($910) {
      $914=0;
     } else {
      $912=(((-$908))|0);
      $913=$912&7;
      $914=$913;
     }
     $915=(($tbase_245_i+$914)|0);
     $916=$915;
     $917=((($906)-($914))|0);
     HEAP32[((55840)>>2)]=$916;
     HEAP32[((55828)>>2)]=$917;
     $918=$917|1;
     $_sum_i14_i=((($914)+(4))|0);
     $919=(($tbase_245_i+$_sum_i14_i)|0);
     $920=$919;
     HEAP32[(($920)>>2)]=$918;
     $_sum2_i_i=((($tsize_244_i)-(36))|0);
     $921=(($tbase_245_i+$_sum2_i_i)|0);
     $922=$921;
     HEAP32[(($922)>>2)]=40;
     $923=((HEAP32[((20960)>>2)])|0);
     HEAP32[((55844)>>2)]=$923;
    } else {
     $sp_067_i=56264;
     while(1) {
      $924=(($sp_067_i)|0);
      $925=((HEAP32[(($924)>>2)])|0);
      $926=(($sp_067_i+4)|0);
      $927=((HEAP32[(($926)>>2)])|0);
      $928=(($925+$927)|0);
      $929=($tbase_245_i|0)==($928|0);
      if ($929) {
       label = 1201;
       break;
      }
      $931=(($sp_067_i+8)|0);
      $932=((HEAP32[(($931)>>2)])|0);
      $933=($932|0)==0;
      if ($933) {
       break;
      } else {
       $sp_067_i=$932;
      }
     }
     do {
      if ((label|0) == 1201) {
       $934=(($sp_067_i+12)|0);
       $935=((HEAP32[(($934)>>2)])|0);
       $936=$935&8;
       $937=($936|0)==0;
       if (!($937)) {
        break;
       }
       $939=$890;
       $940=($939>>>0)>=($925>>>0);
       $941=($939>>>0)<($tbase_245_i>>>0);
       $or_cond47_i=$940&$941;
       if (!($or_cond47_i)) {
        break;
       }
       $943=((($927)+($tsize_244_i))|0);
       HEAP32[(($926)>>2)]=$943;
       $944=((HEAP32[((55840)>>2)])|0);
       $945=((HEAP32[((55828)>>2)])|0);
       $946=((($945)+($tsize_244_i))|0);
       $947=$944;
       $948=(($944+8)|0);
       $949=$948;
       $950=$949&7;
       $951=($950|0)==0;
       if ($951) {
        $955=0;
       } else {
        $953=(((-$949))|0);
        $954=$953&7;
        $955=$954;
       }
       $956=(($947+$955)|0);
       $957=$956;
       $958=((($946)-($955))|0);
       HEAP32[((55840)>>2)]=$957;
       HEAP32[((55828)>>2)]=$958;
       $959=$958|1;
       $_sum_i18_i=((($955)+(4))|0);
       $960=(($947+$_sum_i18_i)|0);
       $961=$960;
       HEAP32[(($961)>>2)]=$959;
       $_sum2_i19_i=((($946)+(4))|0);
       $962=(($947+$_sum2_i19_i)|0);
       $963=$962;
       HEAP32[(($963)>>2)]=40;
       $964=((HEAP32[((20960)>>2)])|0);
       HEAP32[((55844)>>2)]=$964;
       break L1529;
      }
     } while(0);
     $965=((HEAP32[((55832)>>2)])|0);
     $966=($tbase_245_i>>>0)<($965>>>0);
     if ($966) {
      HEAP32[((55832)>>2)]=$tbase_245_i;
     }
     $968=(($tbase_245_i+$tsize_244_i)|0);
     $sp_160_i=56264;
     while(1) {
      $970=(($sp_160_i)|0);
      $971=((HEAP32[(($970)>>2)])|0);
      $972=($971|0)==($968|0);
      if ($972) {
       label = 1211;
       break;
      }
      $974=(($sp_160_i+8)|0);
      $975=((HEAP32[(($974)>>2)])|0);
      $976=($975|0)==0;
      if ($976) {
       break;
      } else {
       $sp_160_i=$975;
      }
     }
     do {
      if ((label|0) == 1211) {
       $977=(($sp_160_i+12)|0);
       $978=((HEAP32[(($977)>>2)])|0);
       $979=$978&8;
       $980=($979|0)==0;
       if (!($980)) {
        break;
       }
       HEAP32[(($970)>>2)]=$tbase_245_i;
       $982=(($sp_160_i+4)|0);
       $983=((HEAP32[(($982)>>2)])|0);
       $984=((($983)+($tsize_244_i))|0);
       HEAP32[(($982)>>2)]=$984;
       $985=(($tbase_245_i+8)|0);
       $986=$985;
       $987=$986&7;
       $988=($987|0)==0;
       if ($988) {
        $993=0;
       } else {
        $990=(((-$986))|0);
        $991=$990&7;
        $993=$991;
       }
       $994=(($tbase_245_i+$993)|0);
       $_sum93_i=((($tsize_244_i)+(8))|0);
       $995=(($tbase_245_i+$_sum93_i)|0);
       $996=$995;
       $997=$996&7;
       $998=($997|0)==0;
       if ($998) {
        $1003=0;
       } else {
        $1000=(((-$996))|0);
        $1001=$1000&7;
        $1003=$1001;
       }
       $_sum94_i=((($1003)+($tsize_244_i))|0);
       $1004=(($tbase_245_i+$_sum94_i)|0);
       $1005=$1004;
       $1006=$1004;
       $1007=$994;
       $1008=((($1006)-($1007))|0);
       $_sum_i21_i=((($993)+($nb_0))|0);
       $1009=(($tbase_245_i+$_sum_i21_i)|0);
       $1010=$1009;
       $1011=((($1008)-($nb_0))|0);
       $1012=$nb_0|3;
       $_sum1_i22_i=((($993)+(4))|0);
       $1013=(($tbase_245_i+$_sum1_i22_i)|0);
       $1014=$1013;
       HEAP32[(($1014)>>2)]=$1012;
       $1015=((HEAP32[((55840)>>2)])|0);
       $1016=($1005|0)==($1015|0);
       do {
        if ($1016) {
         $1018=((HEAP32[((55828)>>2)])|0);
         $1019=((($1018)+($1011))|0);
         HEAP32[((55828)>>2)]=$1019;
         HEAP32[((55840)>>2)]=$1010;
         $1020=$1019|1;
         $_sum46_i_i=((($_sum_i21_i)+(4))|0);
         $1021=(($tbase_245_i+$_sum46_i_i)|0);
         $1022=$1021;
         HEAP32[(($1022)>>2)]=$1020;
        } else {
         $1024=((HEAP32[((55836)>>2)])|0);
         $1025=($1005|0)==($1024|0);
         if ($1025) {
          $1027=((HEAP32[((55824)>>2)])|0);
          $1028=((($1027)+($1011))|0);
          HEAP32[((55824)>>2)]=$1028;
          HEAP32[((55836)>>2)]=$1010;
          $1029=$1028|1;
          $_sum44_i_i=((($_sum_i21_i)+(4))|0);
          $1030=(($tbase_245_i+$_sum44_i_i)|0);
          $1031=$1030;
          HEAP32[(($1031)>>2)]=$1029;
          $_sum45_i_i=((($1028)+($_sum_i21_i))|0);
          $1032=(($tbase_245_i+$_sum45_i_i)|0);
          $1033=$1032;
          HEAP32[(($1033)>>2)]=$1028;
          break;
         }
         $_sum2_i23_i=((($tsize_244_i)+(4))|0);
         $_sum95_i=((($_sum2_i23_i)+($1003))|0);
         $1035=(($tbase_245_i+$_sum95_i)|0);
         $1036=$1035;
         $1037=((HEAP32[(($1036)>>2)])|0);
         $1038=$1037&3;
         $1039=($1038|0)==1;
         if ($1039) {
          $1041=$1037&-8;
          $1042=$1037>>>3;
          $1043=($1037>>>0)<((256)>>>0);
          L1574: do {
           if ($1043) {
            $_sum3940_i_i=$1003|8;
            $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);
            $1045=(($tbase_245_i+$_sum105_i)|0);
            $1046=$1045;
            $1047=((HEAP32[(($1046)>>2)])|0);
            $_sum41_i_i=((($tsize_244_i)+(12))|0);
            $_sum106_i=((($_sum41_i_i)+($1003))|0);
            $1048=(($tbase_245_i+$_sum106_i)|0);
            $1049=$1048;
            $1050=((HEAP32[(($1049)>>2)])|0);
            $1051=$1042<<1;
            $1052=((55856+($1051<<2))|0);
            $1053=$1052;
            $1054=($1047|0)==($1053|0);
            do {
             if (!($1054)) {
              $1056=$1047;
              $1057=((HEAP32[((55832)>>2)])|0);
              $1058=($1056>>>0)<($1057>>>0);
              if ($1058) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1060=(($1047+12)|0);
              $1061=((HEAP32[(($1060)>>2)])|0);
              $1062=($1061|0)==($1005|0);
              if ($1062) {
               break;
              }
              _abort(); return ((0)|0);
              return ((0)|0);
             }
            } while(0);
            $1063=($1050|0)==($1047|0);
            if ($1063) {
             $1065=1<<$1042;
             $1066=$1065^-1;
             $1067=((HEAP32[((55816)>>2)])|0);
             $1068=$1067&$1066;
             HEAP32[((55816)>>2)]=$1068;
             break;
            }
            $1070=($1050|0)==($1053|0);
            do {
             if ($1070) {
              $_pre56_i_i=(($1050+8)|0);
              $_pre_phi57_i_i=$_pre56_i_i;
             } else {
              $1072=$1050;
              $1073=((HEAP32[((55832)>>2)])|0);
              $1074=($1072>>>0)<($1073>>>0);
              if ($1074) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1076=(($1050+8)|0);
              $1077=((HEAP32[(($1076)>>2)])|0);
              $1078=($1077|0)==($1005|0);
              if ($1078) {
               $_pre_phi57_i_i=$1076;
               break;
              }
              _abort(); return ((0)|0);
              return ((0)|0);
             }
            } while(0);
            $1079=(($1047+12)|0);
            HEAP32[(($1079)>>2)]=$1050;
            HEAP32[(($_pre_phi57_i_i)>>2)]=$1047;
           } else {
            $1081=$1004;
            $_sum34_i_i=$1003|24;
            $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);
            $1082=(($tbase_245_i+$_sum96_i)|0);
            $1083=$1082;
            $1084=((HEAP32[(($1083)>>2)])|0);
            $_sum5_i_i=((($tsize_244_i)+(12))|0);
            $_sum97_i=((($_sum5_i_i)+($1003))|0);
            $1085=(($tbase_245_i+$_sum97_i)|0);
            $1086=$1085;
            $1087=((HEAP32[(($1086)>>2)])|0);
            $1088=($1087|0)==($1081|0);
            do {
             if ($1088) {
              $_sum67_i_i=$1003|16;
              $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
              $1106=(($tbase_245_i+$_sum103_i)|0);
              $1107=$1106;
              $1108=((HEAP32[(($1107)>>2)])|0);
              $1109=($1108|0)==0;
              if ($1109) {
               $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);
               $1111=(($tbase_245_i+$_sum104_i)|0);
               $1112=$1111;
               $1113=((HEAP32[(($1112)>>2)])|0);
               $1114=($1113|0)==0;
               if ($1114) {
                $R_1_i_i=0;
                break;
               } else {
                $R_0_i_i=$1113;$RP_0_i_i=$1112;
               }
              } else {
               $R_0_i_i=$1108;$RP_0_i_i=$1107;
              }
              while(1) {
               $1115=(($R_0_i_i+20)|0);
               $1116=((HEAP32[(($1115)>>2)])|0);
               $1117=($1116|0)==0;
               if (!($1117)) {
                $R_0_i_i=$1116;$RP_0_i_i=$1115;
                continue;
               }
               $1119=(($R_0_i_i+16)|0);
               $1120=((HEAP32[(($1119)>>2)])|0);
               $1121=($1120|0)==0;
               if ($1121) {
                break;
               } else {
                $R_0_i_i=$1120;$RP_0_i_i=$1119;
               }
              }
              $1123=$RP_0_i_i;
              $1124=((HEAP32[((55832)>>2)])|0);
              $1125=($1123>>>0)<($1124>>>0);
              if ($1125) {
               _abort(); return ((0)|0);
               return ((0)|0);
              } else {
               HEAP32[(($RP_0_i_i)>>2)]=0;
               $R_1_i_i=$R_0_i_i;
               break;
              }
             } else {
              $_sum3637_i_i=$1003|8;
              $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);
              $1090=(($tbase_245_i+$_sum98_i)|0);
              $1091=$1090;
              $1092=((HEAP32[(($1091)>>2)])|0);
              $1093=$1092;
              $1094=((HEAP32[((55832)>>2)])|0);
              $1095=($1093>>>0)<($1094>>>0);
              if ($1095) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1097=(($1092+12)|0);
              $1098=((HEAP32[(($1097)>>2)])|0);
              $1099=($1098|0)==($1081|0);
              if (!($1099)) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1101=(($1087+8)|0);
              $1102=((HEAP32[(($1101)>>2)])|0);
              $1103=($1102|0)==($1081|0);
              if ($1103) {
               HEAP32[(($1097)>>2)]=$1087;
               HEAP32[(($1101)>>2)]=$1092;
               $R_1_i_i=$1087;
               break;
              } else {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
             }
            } while(0);
            $1129=($1084|0)==0;
            if ($1129) {
             break;
            }
            $_sum31_i_i=((($tsize_244_i)+(28))|0);
            $_sum99_i=((($_sum31_i_i)+($1003))|0);
            $1131=(($tbase_245_i+$_sum99_i)|0);
            $1132=$1131;
            $1133=((HEAP32[(($1132)>>2)])|0);
            $1134=((56120+($1133<<2))|0);
            $1135=((HEAP32[(($1134)>>2)])|0);
            $1136=($1081|0)==($1135|0);
            do {
             if ($1136) {
              HEAP32[(($1134)>>2)]=$R_1_i_i;
              $cond_i_i=($R_1_i_i|0)==0;
              if (!($cond_i_i)) {
               break;
              }
              $1138=((HEAP32[(($1132)>>2)])|0);
              $1139=1<<$1138;
              $1140=$1139^-1;
              $1141=((HEAP32[((55820)>>2)])|0);
              $1142=$1141&$1140;
              HEAP32[((55820)>>2)]=$1142;
              break L1574;
             } else {
              $1144=$1084;
              $1145=((HEAP32[((55832)>>2)])|0);
              $1146=($1144>>>0)<($1145>>>0);
              if ($1146) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1148=(($1084+16)|0);
              $1149=((HEAP32[(($1148)>>2)])|0);
              $1150=($1149|0)==($1081|0);
              if ($1150) {
               HEAP32[(($1148)>>2)]=$R_1_i_i;
              } else {
               $1153=(($1084+20)|0);
               HEAP32[(($1153)>>2)]=$R_1_i_i;
              }
              $1156=($R_1_i_i|0)==0;
              if ($1156) {
               break L1574;
              }
             }
            } while(0);
            $1158=$R_1_i_i;
            $1159=((HEAP32[((55832)>>2)])|0);
            $1160=($1158>>>0)<($1159>>>0);
            if ($1160) {
             _abort(); return ((0)|0);
             return ((0)|0);
            }
            $1162=(($R_1_i_i+24)|0);
            HEAP32[(($1162)>>2)]=$1084;
            $_sum3233_i_i=$1003|16;
            $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);
            $1163=(($tbase_245_i+$_sum100_i)|0);
            $1164=$1163;
            $1165=((HEAP32[(($1164)>>2)])|0);
            $1166=($1165|0)==0;
            do {
             if (!($1166)) {
              $1168=$1165;
              $1169=((HEAP32[((55832)>>2)])|0);
              $1170=($1168>>>0)<($1169>>>0);
              if ($1170) {
               _abort(); return ((0)|0);
               return ((0)|0);
              } else {
               $1172=(($R_1_i_i+16)|0);
               HEAP32[(($1172)>>2)]=$1165;
               $1173=(($1165+24)|0);
               HEAP32[(($1173)>>2)]=$R_1_i_i;
               break;
              }
             }
            } while(0);
            $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
            $1176=(($tbase_245_i+$_sum101_i)|0);
            $1177=$1176;
            $1178=((HEAP32[(($1177)>>2)])|0);
            $1179=($1178|0)==0;
            if ($1179) {
             break;
            }
            $1181=$1178;
            $1182=((HEAP32[((55832)>>2)])|0);
            $1183=($1181>>>0)<($1182>>>0);
            if ($1183) {
             _abort(); return ((0)|0);
             return ((0)|0);
            } else {
             $1185=(($R_1_i_i+20)|0);
             HEAP32[(($1185)>>2)]=$1178;
             $1186=(($1178+24)|0);
             HEAP32[(($1186)>>2)]=$R_1_i_i;
             break;
            }
           }
          } while(0);
          $_sum9_i_i=$1041|$1003;
          $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);
          $1190=(($tbase_245_i+$_sum102_i)|0);
          $1191=$1190;
          $1192=((($1041)+($1011))|0);
          $oldfirst_0_i_i=$1191;$qsize_0_i_i=$1192;
         } else {
          $oldfirst_0_i_i=$1005;$qsize_0_i_i=$1011;
         }
         $1194=(($oldfirst_0_i_i+4)|0);
         $1195=((HEAP32[(($1194)>>2)])|0);
         $1196=$1195&-2;
         HEAP32[(($1194)>>2)]=$1196;
         $1197=$qsize_0_i_i|1;
         $_sum10_i_i=((($_sum_i21_i)+(4))|0);
         $1198=(($tbase_245_i+$_sum10_i_i)|0);
         $1199=$1198;
         HEAP32[(($1199)>>2)]=$1197;
         $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
         $1200=(($tbase_245_i+$_sum11_i_i)|0);
         $1201=$1200;
         HEAP32[(($1201)>>2)]=$qsize_0_i_i;
         $1202=$qsize_0_i_i>>>3;
         $1203=($qsize_0_i_i>>>0)<((256)>>>0);
         if ($1203) {
          $1205=$1202<<1;
          $1206=((55856+($1205<<2))|0);
          $1207=$1206;
          $1208=((HEAP32[((55816)>>2)])|0);
          $1209=1<<$1202;
          $1210=$1208&$1209;
          $1211=($1210|0)==0;
          do {
           if ($1211) {
            $1213=$1208|$1209;
            HEAP32[((55816)>>2)]=$1213;
            $_sum27_pre_i_i=((($1205)+(2))|0);
            $_pre_i24_i=((55856+($_sum27_pre_i_i<<2))|0);
            $F4_0_i_i=$1207;$_pre_phi_i25_i=$_pre_i24_i;
           } else {
            $_sum30_i_i=((($1205)+(2))|0);
            $1215=((55856+($_sum30_i_i<<2))|0);
            $1216=((HEAP32[(($1215)>>2)])|0);
            $1217=$1216;
            $1218=((HEAP32[((55832)>>2)])|0);
            $1219=($1217>>>0)<($1218>>>0);
            if (!($1219)) {
             $F4_0_i_i=$1216;$_pre_phi_i25_i=$1215;
             break;
            }
            _abort(); return ((0)|0);
            return ((0)|0);
           }
          } while(0);
          HEAP32[(($_pre_phi_i25_i)>>2)]=$1010;
          $1222=(($F4_0_i_i+12)|0);
          HEAP32[(($1222)>>2)]=$1010;
          $_sum28_i_i=((($_sum_i21_i)+(8))|0);
          $1223=(($tbase_245_i+$_sum28_i_i)|0);
          $1224=$1223;
          HEAP32[(($1224)>>2)]=$F4_0_i_i;
          $_sum29_i_i=((($_sum_i21_i)+(12))|0);
          $1225=(($tbase_245_i+$_sum29_i_i)|0);
          $1226=$1225;
          HEAP32[(($1226)>>2)]=$1207;
          break;
         }
         $1228=$1009;
         $1229=$qsize_0_i_i>>>8;
         $1230=($1229|0)==0;
         do {
          if ($1230) {
           $I7_0_i_i=0;
          } else {
           $1232=($qsize_0_i_i>>>0)>((16777215)>>>0);
           if ($1232) {
            $I7_0_i_i=31;
            break;
           }
           $1234=((($1229)+(1048320))|0);
           $1235=$1234>>>16;
           $1236=$1235&8;
           $1237=$1229<<$1236;
           $1238=((($1237)+(520192))|0);
           $1239=$1238>>>16;
           $1240=$1239&4;
           $1241=$1240|$1236;
           $1242=$1237<<$1240;
           $1243=((($1242)+(245760))|0);
           $1244=$1243>>>16;
           $1245=$1244&2;
           $1246=$1241|$1245;
           $1247=(((14)-($1246))|0);
           $1248=$1242<<$1245;
           $1249=$1248>>>15;
           $1250=((($1247)+($1249))|0);
           $1251=$1250<<1;
           $1252=((($1250)+(7))|0);
           $1253=$qsize_0_i_i>>>($1252>>>0);
           $1254=$1253&1;
           $1255=$1254|$1251;
           $I7_0_i_i=$1255;
          }
         } while(0);
         $1257=((56120+($I7_0_i_i<<2))|0);
         $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
         $1258=(($tbase_245_i+$_sum12_i26_i)|0);
         $1259=$1258;
         HEAP32[(($1259)>>2)]=$I7_0_i_i;
         $_sum13_i_i=((($_sum_i21_i)+(16))|0);
         $1260=(($tbase_245_i+$_sum13_i_i)|0);
         $_sum14_i_i=((($_sum_i21_i)+(20))|0);
         $1261=(($tbase_245_i+$_sum14_i_i)|0);
         $1262=$1261;
         HEAP32[(($1262)>>2)]=0;
         $1263=$1260;
         HEAP32[(($1263)>>2)]=0;
         $1264=((HEAP32[((55820)>>2)])|0);
         $1265=1<<$I7_0_i_i;
         $1266=$1264&$1265;
         $1267=($1266|0)==0;
         if ($1267) {
          $1269=$1264|$1265;
          HEAP32[((55820)>>2)]=$1269;
          HEAP32[(($1257)>>2)]=$1228;
          $1270=$1257;
          $_sum15_i_i=((($_sum_i21_i)+(24))|0);
          $1271=(($tbase_245_i+$_sum15_i_i)|0);
          $1272=$1271;
          HEAP32[(($1272)>>2)]=$1270;
          $_sum16_i_i=((($_sum_i21_i)+(12))|0);
          $1273=(($tbase_245_i+$_sum16_i_i)|0);
          $1274=$1273;
          HEAP32[(($1274)>>2)]=$1228;
          $_sum17_i_i=((($_sum_i21_i)+(8))|0);
          $1275=(($tbase_245_i+$_sum17_i_i)|0);
          $1276=$1275;
          HEAP32[(($1276)>>2)]=$1228;
          break;
         }
         $1278=((HEAP32[(($1257)>>2)])|0);
         $1279=($I7_0_i_i|0)==31;
         if ($1279) {
          $1284=0;
         } else {
          $1281=$I7_0_i_i>>>1;
          $1282=(((25)-($1281))|0);
          $1284=$1282;
         }
         $1285=$qsize_0_i_i<<$1284;
         $K8_0_i_i=$1285;$T_0_i27_i=$1278;
         while(1) {
          $1287=(($T_0_i27_i+4)|0);
          $1288=((HEAP32[(($1287)>>2)])|0);
          $1289=$1288&-8;
          $1290=($1289|0)==($qsize_0_i_i|0);
          if ($1290) {
           break;
          }
          $1292=$K8_0_i_i>>>31;
          $1293=(($T_0_i27_i+16+($1292<<2))|0);
          $1294=((HEAP32[(($1293)>>2)])|0);
          $1295=($1294|0)==0;
          $1296=$K8_0_i_i<<1;
          if ($1295) {
           label = 1284;
           break;
          } else {
           $K8_0_i_i=$1296;$T_0_i27_i=$1294;
          }
         }
         if ((label|0) == 1284) {
          $1298=$1293;
          $1299=((HEAP32[((55832)>>2)])|0);
          $1300=($1298>>>0)<($1299>>>0);
          if ($1300) {
           _abort(); return ((0)|0);
           return ((0)|0);
          } else {
           HEAP32[(($1293)>>2)]=$1228;
           $_sum24_i_i=((($_sum_i21_i)+(24))|0);
           $1302=(($tbase_245_i+$_sum24_i_i)|0);
           $1303=$1302;
           HEAP32[(($1303)>>2)]=$T_0_i27_i;
           $_sum25_i_i=((($_sum_i21_i)+(12))|0);
           $1304=(($tbase_245_i+$_sum25_i_i)|0);
           $1305=$1304;
           HEAP32[(($1305)>>2)]=$1228;
           $_sum26_i_i=((($_sum_i21_i)+(8))|0);
           $1306=(($tbase_245_i+$_sum26_i_i)|0);
           $1307=$1306;
           HEAP32[(($1307)>>2)]=$1228;
           break;
          }
         }
         $1310=(($T_0_i27_i+8)|0);
         $1311=((HEAP32[(($1310)>>2)])|0);
         $1312=$T_0_i27_i;
         $1313=((HEAP32[((55832)>>2)])|0);
         $1314=($1312>>>0)<($1313>>>0);
         if ($1314) {
          _abort(); return ((0)|0);
          return ((0)|0);
         }
         $1316=$1311;
         $1317=($1316>>>0)<($1313>>>0);
         if ($1317) {
          _abort(); return ((0)|0);
          return ((0)|0);
         } else {
          $1319=(($1311+12)|0);
          HEAP32[(($1319)>>2)]=$1228;
          HEAP32[(($1310)>>2)]=$1228;
          $_sum21_i_i=((($_sum_i21_i)+(8))|0);
          $1320=(($tbase_245_i+$_sum21_i_i)|0);
          $1321=$1320;
          HEAP32[(($1321)>>2)]=$1311;
          $_sum22_i_i=((($_sum_i21_i)+(12))|0);
          $1322=(($tbase_245_i+$_sum22_i_i)|0);
          $1323=$1322;
          HEAP32[(($1323)>>2)]=$T_0_i27_i;
          $_sum23_i_i=((($_sum_i21_i)+(24))|0);
          $1324=(($tbase_245_i+$_sum23_i_i)|0);
          $1325=$1324;
          HEAP32[(($1325)>>2)]=0;
          break;
         }
        }
       } while(0);
       $_sum1819_i_i=$993|8;
       $1326=(($tbase_245_i+$_sum1819_i_i)|0);
       $mem_0=$1326;
       return (($mem_0)|0);
      }
     } while(0);
     $1327=$890;
     $sp_0_i_i_i=56264;
     while(1) {
      $1329=(($sp_0_i_i_i)|0);
      $1330=((HEAP32[(($1329)>>2)])|0);
      $1331=($1330>>>0)>($1327>>>0);
      if (!($1331)) {
       $1333=(($sp_0_i_i_i+4)|0);
       $1334=((HEAP32[(($1333)>>2)])|0);
       $1335=(($1330+$1334)|0);
       $1336=($1335>>>0)>($1327>>>0);
       if ($1336) {
        break;
       }
      }
      $1338=(($sp_0_i_i_i+8)|0);
      $1339=((HEAP32[(($1338)>>2)])|0);
      $sp_0_i_i_i=$1339;
     }
     $_sum_i15_i=((($1334)-(47))|0);
     $_sum1_i16_i=((($1334)-(39))|0);
     $1340=(($1330+$_sum1_i16_i)|0);
     $1341=$1340;
     $1342=$1341&7;
     $1343=($1342|0)==0;
     if ($1343) {
      $1348=0;
     } else {
      $1345=(((-$1341))|0);
      $1346=$1345&7;
      $1348=$1346;
     }
     $_sum2_i17_i=((($_sum_i15_i)+($1348))|0);
     $1349=(($1330+$_sum2_i17_i)|0);
     $1350=(($890+16)|0);
     $1351=$1350;
     $1352=($1349>>>0)<($1351>>>0);
     $1353=($1352?$1327:$1349);
     $1354=(($1353+8)|0);
     $1355=$1354;
     $1356=((($tsize_244_i)-(40))|0);
     $1357=(($tbase_245_i+8)|0);
     $1358=$1357;
     $1359=$1358&7;
     $1360=($1359|0)==0;
     if ($1360) {
      $1364=0;
     } else {
      $1362=(((-$1358))|0);
      $1363=$1362&7;
      $1364=$1363;
     }
     $1365=(($tbase_245_i+$1364)|0);
     $1366=$1365;
     $1367=((($1356)-($1364))|0);
     HEAP32[((55840)>>2)]=$1366;
     HEAP32[((55828)>>2)]=$1367;
     $1368=$1367|1;
     $_sum_i_i_i=((($1364)+(4))|0);
     $1369=(($tbase_245_i+$_sum_i_i_i)|0);
     $1370=$1369;
     HEAP32[(($1370)>>2)]=$1368;
     $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
     $1371=(($tbase_245_i+$_sum2_i_i_i)|0);
     $1372=$1371;
     HEAP32[(($1372)>>2)]=40;
     $1373=((HEAP32[((20960)>>2)])|0);
     HEAP32[((55844)>>2)]=$1373;
     $1374=(($1353+4)|0);
     $1375=$1374;
     HEAP32[(($1375)>>2)]=27;
     HEAP32[(($1354)>>2)]=((HEAP32[((56264)>>2)])|0);HEAP32[((($1354)+(4))>>2)]=((HEAP32[((56268)>>2)])|0);HEAP32[((($1354)+(8))>>2)]=((HEAP32[((56272)>>2)])|0);HEAP32[((($1354)+(12))>>2)]=((HEAP32[((56276)>>2)])|0);
     HEAP32[((56264)>>2)]=$tbase_245_i;
     HEAP32[((56268)>>2)]=$tsize_244_i;
     HEAP32[((56276)>>2)]=0;
     HEAP32[((56272)>>2)]=$1355;
     $1376=(($1353+28)|0);
     $1377=$1376;
     HEAP32[(($1377)>>2)]=7;
     $1378=(($1353+32)|0);
     $1379=($1378>>>0)<($1335>>>0);
     if ($1379) {
      $1380=$1377;
      while(1) {
       $1381=(($1380+4)|0);
       HEAP32[(($1381)>>2)]=7;
       $1382=(($1380+8)|0);
       $1383=$1382;
       $1384=($1383>>>0)<($1335>>>0);
       if ($1384) {
        $1380=$1381;
       } else {
        break;
       }
      }
     }
     $1385=($1353|0)==($1327|0);
     if ($1385) {
      break;
     }
     $1387=$1353;
     $1388=$890;
     $1389=((($1387)-($1388))|0);
     $1390=(($1327+$1389)|0);
     $_sum3_i_i=((($1389)+(4))|0);
     $1391=(($1327+$_sum3_i_i)|0);
     $1392=$1391;
     $1393=((HEAP32[(($1392)>>2)])|0);
     $1394=$1393&-2;
     HEAP32[(($1392)>>2)]=$1394;
     $1395=$1389|1;
     $1396=(($890+4)|0);
     HEAP32[(($1396)>>2)]=$1395;
     $1397=$1390;
     HEAP32[(($1397)>>2)]=$1389;
     $1398=$1389>>>3;
     $1399=($1389>>>0)<((256)>>>0);
     if ($1399) {
      $1401=$1398<<1;
      $1402=((55856+($1401<<2))|0);
      $1403=$1402;
      $1404=((HEAP32[((55816)>>2)])|0);
      $1405=1<<$1398;
      $1406=$1404&$1405;
      $1407=($1406|0)==0;
      do {
       if ($1407) {
        $1409=$1404|$1405;
        HEAP32[((55816)>>2)]=$1409;
        $_sum11_pre_i_i=((($1401)+(2))|0);
        $_pre_i_i=((55856+($_sum11_pre_i_i<<2))|0);
        $F_0_i_i=$1403;$_pre_phi_i_i=$_pre_i_i;
       } else {
        $_sum12_i_i=((($1401)+(2))|0);
        $1411=((55856+($_sum12_i_i<<2))|0);
        $1412=((HEAP32[(($1411)>>2)])|0);
        $1413=$1412;
        $1414=((HEAP32[((55832)>>2)])|0);
        $1415=($1413>>>0)<($1414>>>0);
        if (!($1415)) {
         $F_0_i_i=$1412;$_pre_phi_i_i=$1411;
         break;
        }
        _abort(); return ((0)|0);
        return ((0)|0);
       }
      } while(0);
      HEAP32[(($_pre_phi_i_i)>>2)]=$890;
      $1418=(($F_0_i_i+12)|0);
      HEAP32[(($1418)>>2)]=$890;
      $1419=(($890+8)|0);
      HEAP32[(($1419)>>2)]=$F_0_i_i;
      $1420=(($890+12)|0);
      HEAP32[(($1420)>>2)]=$1403;
      break;
     }
     $1422=$890;
     $1423=$1389>>>8;
     $1424=($1423|0)==0;
     do {
      if ($1424) {
       $I1_0_i_i=0;
      } else {
       $1426=($1389>>>0)>((16777215)>>>0);
       if ($1426) {
        $I1_0_i_i=31;
        break;
       }
       $1428=((($1423)+(1048320))|0);
       $1429=$1428>>>16;
       $1430=$1429&8;
       $1431=$1423<<$1430;
       $1432=((($1431)+(520192))|0);
       $1433=$1432>>>16;
       $1434=$1433&4;
       $1435=$1434|$1430;
       $1436=$1431<<$1434;
       $1437=((($1436)+(245760))|0);
       $1438=$1437>>>16;
       $1439=$1438&2;
       $1440=$1435|$1439;
       $1441=(((14)-($1440))|0);
       $1442=$1436<<$1439;
       $1443=$1442>>>15;
       $1444=((($1441)+($1443))|0);
       $1445=$1444<<1;
       $1446=((($1444)+(7))|0);
       $1447=$1389>>>($1446>>>0);
       $1448=$1447&1;
       $1449=$1448|$1445;
       $I1_0_i_i=$1449;
      }
     } while(0);
     $1451=((56120+($I1_0_i_i<<2))|0);
     $1452=(($890+28)|0);
     $I1_0_c_i_i=$I1_0_i_i;
     HEAP32[(($1452)>>2)]=$I1_0_c_i_i;
     $1453=(($890+20)|0);
     HEAP32[(($1453)>>2)]=0;
     $1454=(($890+16)|0);
     HEAP32[(($1454)>>2)]=0;
     $1455=((HEAP32[((55820)>>2)])|0);
     $1456=1<<$I1_0_i_i;
     $1457=$1455&$1456;
     $1458=($1457|0)==0;
     if ($1458) {
      $1460=$1455|$1456;
      HEAP32[((55820)>>2)]=$1460;
      HEAP32[(($1451)>>2)]=$1422;
      $1461=(($890+24)|0);
      $_c_i_i=$1451;
      HEAP32[(($1461)>>2)]=$_c_i_i;
      $1462=(($890+12)|0);
      HEAP32[(($1462)>>2)]=$890;
      $1463=(($890+8)|0);
      HEAP32[(($1463)>>2)]=$890;
      break;
     }
     $1465=((HEAP32[(($1451)>>2)])|0);
     $1466=($I1_0_i_i|0)==31;
     if ($1466) {
      $1471=0;
     } else {
      $1468=$I1_0_i_i>>>1;
      $1469=(((25)-($1468))|0);
      $1471=$1469;
     }
     $1472=$1389<<$1471;
     $K2_0_i_i=$1472;$T_0_i_i=$1465;
     while(1) {
      $1474=(($T_0_i_i+4)|0);
      $1475=((HEAP32[(($1474)>>2)])|0);
      $1476=$1475&-8;
      $1477=($1476|0)==($1389|0);
      if ($1477) {
       break;
      }
      $1479=$K2_0_i_i>>>31;
      $1480=(($T_0_i_i+16+($1479<<2))|0);
      $1481=((HEAP32[(($1480)>>2)])|0);
      $1482=($1481|0)==0;
      $1483=$K2_0_i_i<<1;
      if ($1482) {
       label = 1319;
       break;
      } else {
       $K2_0_i_i=$1483;$T_0_i_i=$1481;
      }
     }
     if ((label|0) == 1319) {
      $1485=$1480;
      $1486=((HEAP32[((55832)>>2)])|0);
      $1487=($1485>>>0)<($1486>>>0);
      if ($1487) {
       _abort(); return ((0)|0);
       return ((0)|0);
      } else {
       HEAP32[(($1480)>>2)]=$1422;
       $1489=(($890+24)|0);
       $T_0_c8_i_i=$T_0_i_i;
       HEAP32[(($1489)>>2)]=$T_0_c8_i_i;
       $1490=(($890+12)|0);
       HEAP32[(($1490)>>2)]=$890;
       $1491=(($890+8)|0);
       HEAP32[(($1491)>>2)]=$890;
       break;
      }
     }
     $1494=(($T_0_i_i+8)|0);
     $1495=((HEAP32[(($1494)>>2)])|0);
     $1496=$T_0_i_i;
     $1497=((HEAP32[((55832)>>2)])|0);
     $1498=($1496>>>0)<($1497>>>0);
     if ($1498) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $1500=$1495;
     $1501=($1500>>>0)<($1497>>>0);
     if ($1501) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $1503=(($1495+12)|0);
      HEAP32[(($1503)>>2)]=$1422;
      HEAP32[(($1494)>>2)]=$1422;
      $1504=(($890+8)|0);
      $_c7_i_i=$1495;
      HEAP32[(($1504)>>2)]=$_c7_i_i;
      $1505=(($890+12)|0);
      $T_0_c_i_i=$T_0_i_i;
      HEAP32[(($1505)>>2)]=$T_0_c_i_i;
      $1506=(($890+24)|0);
      HEAP32[(($1506)>>2)]=0;
      break;
     }
    }
   } while(0);
   $1507=((HEAP32[((55828)>>2)])|0);
   $1508=($1507>>>0)>($nb_0>>>0);
   if (!($1508)) {
    break;
   }
   $1510=((($1507)-($nb_0))|0);
   HEAP32[((55828)>>2)]=$1510;
   $1511=((HEAP32[((55840)>>2)])|0);
   $1512=$1511;
   $1513=(($1512+$nb_0)|0);
   $1514=$1513;
   HEAP32[((55840)>>2)]=$1514;
   $1515=$1510|1;
   $_sum_i134=((($nb_0)+(4))|0);
   $1516=(($1512+$_sum_i134)|0);
   $1517=$1516;
   HEAP32[(($1517)>>2)]=$1515;
   $1518=$nb_0|3;
   $1519=(($1511+4)|0);
   HEAP32[(($1519)>>2)]=$1518;
   $1520=(($1511+8)|0);
   $1521=$1520;
   $mem_0=$1521;
   return (($mem_0)|0);
  }
 } while(0);
 $1522=((___errno_location())|0);
 HEAP32[(($1522)>>2)]=12;
 $mem_0=0;
 return (($mem_0)|0);
}
function _free($mem){
 $mem=($mem)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$_sum=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$_sum232=0;
 var $24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$_sum276=0,$35=0,$36=0,$37=0,$_sum277=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$59=0,$_pre305=0,$61=0,$62=0,$64=0,$65=0,$66=0,$_pre_phi306=0,$67=0,$69=0;
 var $_sum266=0,$70=0,$71=0,$72=0,$_sum267=0,$73=0,$74=0,$75=0,$76=0,$_sum273=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$88=0,$89=0;
 var $90=0,$_sum269=0,$93=0,$94=0,$95=0,$96=0,$_sum268=0,$98=0,$99=0,$100=0,$101=0,$RP_0=0,$R_0=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$110=0;
 var $111=0,$R_1=0,$115=0,$_sum270=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$cond=0,$124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$131=0,$132=0,$134=0;
 var $135=0,$136=0,$139=0,$142=0,$144=0,$145=0,$146=0,$148=0,$_sum271=0,$149=0,$150=0,$151=0,$152=0,$154=0,$155=0,$156=0,$158=0,$159=0,$_sum272=0,$162=0;
 var $163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$171=0,$172=0,$_sum233=0,$176=0,$177=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$_sum264=0,$185=0,$186=0;
 var $187=0,$psize_0=0,$p_0=0,$189=0,$190=0,$_sum263=0,$192=0,$193=0,$194=0,$195=0,$phitmp=0,$197=0,$198=0,$200=0,$201=0,$203=0,$204=0,$205=0,$206=0,$207=0;
 var $208=0,$211=0,$212=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$221=0,$222=0,$223=0,$224=0,$226=0,$227=0,$228=0,$_sum257258=0,$229=0,$230=0,$231=0;
 var $232=0,$233=0,$234=0,$235=0,$237=0,$238=0,$239=0,$241=0,$242=0,$243=0,$244=0,$246=0,$247=0,$248=0,$249=0,$251=0,$_pre303=0,$253=0,$254=0,$255=0;
 var $257=0,$258=0,$259=0,$_pre_phi304=0,$260=0,$262=0,$_sum235=0,$263=0,$264=0,$265=0,$_sum236237=0,$266=0,$267=0,$268=0,$269=0,$271=0,$272=0,$273=0,$274=0,$275=0;
 var $276=0,$278=0,$279=0,$280=0,$282=0,$283=0,$284=0,$_sum239=0,$287=0,$288=0,$289=0,$290=0,$_sum238=0,$292=0,$293=0,$294=0,$295=0,$RP9_0=0,$R7_0=0,$296=0;
 var $297=0,$298=0,$300=0,$301=0,$302=0,$304=0,$305=0,$306=0,$R7_1=0,$310=0,$_sum250=0,$312=0,$313=0,$314=0,$315=0,$316=0,$317=0,$cond298=0,$319=0,$320=0;
 var $321=0,$322=0,$323=0,$325=0,$326=0,$327=0,$329=0,$330=0,$331=0,$334=0,$337=0,$339=0,$340=0,$341=0,$343=0,$_sum251=0,$344=0,$345=0,$346=0,$347=0;
 var $349=0,$350=0,$351=0,$353=0,$354=0,$_sum252=0,$357=0,$358=0,$359=0,$360=0,$362=0,$363=0,$364=0,$366=0,$367=0,$371=0,$372=0,$373=0,$374=0,$375=0;
 var $376=0,$379=0,$380=0,$381=0,$382=0,$383=0,$psize_1=0,$385=0,$386=0,$388=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0,$396=0,$_sum248_pre=0,$_pre=0,$_sum249=0;
 var $398=0,$399=0,$400=0,$401=0,$402=0,$_pre_phi=0,$F16_0=0,$405=0,$406=0,$407=0,$409=0,$410=0,$411=0,$413=0,$415=0,$416=0,$417=0,$418=0,$419=0,$420=0;
 var $421=0,$422=0,$423=0,$424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$I18_0=0,$438=0,$439=0,$I18_0_c=0;
 var $440=0,$441=0,$442=0,$443=0,$444=0,$445=0,$447=0,$448=0,$_c=0,$449=0,$450=0,$452=0,$453=0,$455=0,$456=0,$458=0,$459=0,$T_0=0,$K19_0=0,$461=0;
 var $462=0,$463=0,$464=0,$466=0,$467=0,$468=0,$469=0,$470=0,$472=0,$473=0,$474=0,$476=0,$T_0_c245=0,$477=0,$478=0,$481=0,$482=0,$483=0,$484=0,$485=0;
 var $487=0,$488=0,$490=0,$491=0,$_c244=0,$492=0,$T_0_c=0,$493=0,$495=0,$496=0,$497=0,$sp_0_in_i=0,$sp_0_i=0,$498=0,$499=0,label=0;
 $1=($mem|0)==0;
 if ($1) {
  return;
 }
 $3=((($mem)-(8))|0);
 $4=$3;
 $5=((HEAP32[((55832)>>2)])|0);
 $6=($3>>>0)<($5>>>0);
 if ($6) {
  _abort();
 }
 $8=((($mem)-(4))|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10&3;
 $12=($11|0)==1;
 if ($12) {
  _abort();
 }
 $14=$10&-8;
 $_sum=((($14)-(8))|0);
 $15=(($mem+$_sum)|0);
 $16=$15;
 $17=$10&1;
 $18=($17|0)==0;
 L1746: do {
  if ($18) {
   $20=$3;
   $21=((HEAP32[(($20)>>2)])|0);
   $22=($11|0)==0;
   if ($22) {
    return;
   }
   $_sum232=(((-8)-($21))|0);
   $24=(($mem+$_sum232)|0);
   $25=$24;
   $26=((($21)+($14))|0);
   $27=($24>>>0)<($5>>>0);
   if ($27) {
    _abort();
   }
   $29=((HEAP32[((55836)>>2)])|0);
   $30=($25|0)==($29|0);
   if ($30) {
    $_sum233=((($14)-(4))|0);
    $176=(($mem+$_sum233)|0);
    $177=$176;
    $178=((HEAP32[(($177)>>2)])|0);
    $179=$178&3;
    $180=($179|0)==3;
    if (!($180)) {
     $p_0=$25;$psize_0=$26;
     break;
    }
    HEAP32[((55824)>>2)]=$26;
    $182=((HEAP32[(($177)>>2)])|0);
    $183=$182&-2;
    HEAP32[(($177)>>2)]=$183;
    $184=$26|1;
    $_sum264=((($_sum232)+(4))|0);
    $185=(($mem+$_sum264)|0);
    $186=$185;
    HEAP32[(($186)>>2)]=$184;
    $187=$15;
    HEAP32[(($187)>>2)]=$26;
    return;
   }
   $32=$21>>>3;
   $33=($21>>>0)<((256)>>>0);
   if ($33) {
    $_sum276=((($_sum232)+(8))|0);
    $35=(($mem+$_sum276)|0);
    $36=$35;
    $37=((HEAP32[(($36)>>2)])|0);
    $_sum277=((($_sum232)+(12))|0);
    $38=(($mem+$_sum277)|0);
    $39=$38;
    $40=((HEAP32[(($39)>>2)])|0);
    $41=$32<<1;
    $42=((55856+($41<<2))|0);
    $43=$42;
    $44=($37|0)==($43|0);
    do {
     if (!($44)) {
      $46=$37;
      $47=($46>>>0)<($5>>>0);
      if ($47) {
       _abort();
      }
      $49=(($37+12)|0);
      $50=((HEAP32[(($49)>>2)])|0);
      $51=($50|0)==($25|0);
      if ($51) {
       break;
      }
      _abort();
     }
    } while(0);
    $52=($40|0)==($37|0);
    if ($52) {
     $54=1<<$32;
     $55=$54^-1;
     $56=((HEAP32[((55816)>>2)])|0);
     $57=$56&$55;
     HEAP32[((55816)>>2)]=$57;
     $p_0=$25;$psize_0=$26;
     break;
    }
    $59=($40|0)==($43|0);
    do {
     if ($59) {
      $_pre305=(($40+8)|0);
      $_pre_phi306=$_pre305;
     } else {
      $61=$40;
      $62=($61>>>0)<($5>>>0);
      if ($62) {
       _abort();
      }
      $64=(($40+8)|0);
      $65=((HEAP32[(($64)>>2)])|0);
      $66=($65|0)==($25|0);
      if ($66) {
       $_pre_phi306=$64;
       break;
      }
      _abort();
     }
    } while(0);
    $67=(($37+12)|0);
    HEAP32[(($67)>>2)]=$40;
    HEAP32[(($_pre_phi306)>>2)]=$37;
    $p_0=$25;$psize_0=$26;
    break;
   }
   $69=$24;
   $_sum266=((($_sum232)+(24))|0);
   $70=(($mem+$_sum266)|0);
   $71=$70;
   $72=((HEAP32[(($71)>>2)])|0);
   $_sum267=((($_sum232)+(12))|0);
   $73=(($mem+$_sum267)|0);
   $74=$73;
   $75=((HEAP32[(($74)>>2)])|0);
   $76=($75|0)==($69|0);
   do {
    if ($76) {
     $_sum269=((($_sum232)+(20))|0);
     $93=(($mem+$_sum269)|0);
     $94=$93;
     $95=((HEAP32[(($94)>>2)])|0);
     $96=($95|0)==0;
     if ($96) {
      $_sum268=((($_sum232)+(16))|0);
      $98=(($mem+$_sum268)|0);
      $99=$98;
      $100=((HEAP32[(($99)>>2)])|0);
      $101=($100|0)==0;
      if ($101) {
       $R_1=0;
       break;
      } else {
       $R_0=$100;$RP_0=$99;
      }
     } else {
      $R_0=$95;$RP_0=$94;
     }
     while(1) {
      $102=(($R_0+20)|0);
      $103=((HEAP32[(($102)>>2)])|0);
      $104=($103|0)==0;
      if (!($104)) {
       $R_0=$103;$RP_0=$102;
       continue;
      }
      $106=(($R_0+16)|0);
      $107=((HEAP32[(($106)>>2)])|0);
      $108=($107|0)==0;
      if ($108) {
       break;
      } else {
       $R_0=$107;$RP_0=$106;
      }
     }
     $110=$RP_0;
     $111=($110>>>0)<($5>>>0);
     if ($111) {
      _abort();
     } else {
      HEAP32[(($RP_0)>>2)]=0;
      $R_1=$R_0;
      break;
     }
    } else {
     $_sum273=((($_sum232)+(8))|0);
     $78=(($mem+$_sum273)|0);
     $79=$78;
     $80=((HEAP32[(($79)>>2)])|0);
     $81=$80;
     $82=($81>>>0)<($5>>>0);
     if ($82) {
      _abort();
     }
     $84=(($80+12)|0);
     $85=((HEAP32[(($84)>>2)])|0);
     $86=($85|0)==($69|0);
     if (!($86)) {
      _abort();
     }
     $88=(($75+8)|0);
     $89=((HEAP32[(($88)>>2)])|0);
     $90=($89|0)==($69|0);
     if ($90) {
      HEAP32[(($84)>>2)]=$75;
      HEAP32[(($88)>>2)]=$80;
      $R_1=$75;
      break;
     } else {
      _abort();
     }
    }
   } while(0);
   $115=($72|0)==0;
   if ($115) {
    $p_0=$25;$psize_0=$26;
    break;
   }
   $_sum270=((($_sum232)+(28))|0);
   $117=(($mem+$_sum270)|0);
   $118=$117;
   $119=((HEAP32[(($118)>>2)])|0);
   $120=((56120+($119<<2))|0);
   $121=((HEAP32[(($120)>>2)])|0);
   $122=($69|0)==($121|0);
   do {
    if ($122) {
     HEAP32[(($120)>>2)]=$R_1;
     $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     $124=((HEAP32[(($118)>>2)])|0);
     $125=1<<$124;
     $126=$125^-1;
     $127=((HEAP32[((55820)>>2)])|0);
     $128=$127&$126;
     HEAP32[((55820)>>2)]=$128;
     $p_0=$25;$psize_0=$26;
     break L1746;
    } else {
     $130=$72;
     $131=((HEAP32[((55832)>>2)])|0);
     $132=($130>>>0)<($131>>>0);
     if ($132) {
      _abort();
     }
     $134=(($72+16)|0);
     $135=((HEAP32[(($134)>>2)])|0);
     $136=($135|0)==($69|0);
     if ($136) {
      HEAP32[(($134)>>2)]=$R_1;
     } else {
      $139=(($72+20)|0);
      HEAP32[(($139)>>2)]=$R_1;
     }
     $142=($R_1|0)==0;
     if ($142) {
      $p_0=$25;$psize_0=$26;
      break L1746;
     }
    }
   } while(0);
   $144=$R_1;
   $145=((HEAP32[((55832)>>2)])|0);
   $146=($144>>>0)<($145>>>0);
   if ($146) {
    _abort();
   }
   $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   $_sum271=((($_sum232)+(16))|0);
   $149=(($mem+$_sum271)|0);
   $150=$149;
   $151=((HEAP32[(($150)>>2)])|0);
   $152=($151|0)==0;
   do {
    if (!($152)) {
     $154=$151;
     $155=((HEAP32[((55832)>>2)])|0);
     $156=($154>>>0)<($155>>>0);
     if ($156) {
      _abort();
     } else {
      $158=(($R_1+16)|0);
      HEAP32[(($158)>>2)]=$151;
      $159=(($151+24)|0);
      HEAP32[(($159)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   $_sum272=((($_sum232)+(20))|0);
   $162=(($mem+$_sum272)|0);
   $163=$162;
   $164=((HEAP32[(($163)>>2)])|0);
   $165=($164|0)==0;
   if ($165) {
    $p_0=$25;$psize_0=$26;
    break;
   }
   $167=$164;
   $168=((HEAP32[((55832)>>2)])|0);
   $169=($167>>>0)<($168>>>0);
   if ($169) {
    _abort();
   } else {
    $171=(($R_1+20)|0);
    HEAP32[(($171)>>2)]=$164;
    $172=(($164+24)|0);
    HEAP32[(($172)>>2)]=$R_1;
    $p_0=$25;$psize_0=$26;
    break;
   }
  } else {
   $p_0=$4;$psize_0=$14;
  }
 } while(0);
 $189=$p_0;
 $190=($189>>>0)<($15>>>0);
 if (!($190)) {
  _abort();
 }
 $_sum263=((($14)-(4))|0);
 $192=(($mem+$_sum263)|0);
 $193=$192;
 $194=((HEAP32[(($193)>>2)])|0);
 $195=$194&1;
 $phitmp=($195|0)==0;
 if ($phitmp) {
  _abort();
 }
 $197=$194&2;
 $198=($197|0)==0;
 do {
  if ($198) {
   $200=((HEAP32[((55840)>>2)])|0);
   $201=($16|0)==($200|0);
   if ($201) {
    $203=((HEAP32[((55828)>>2)])|0);
    $204=((($203)+($psize_0))|0);
    HEAP32[((55828)>>2)]=$204;
    HEAP32[((55840)>>2)]=$p_0;
    $205=$204|1;
    $206=(($p_0+4)|0);
    HEAP32[(($206)>>2)]=$205;
    $207=((HEAP32[((55836)>>2)])|0);
    $208=($p_0|0)==($207|0);
    if (!($208)) {
     return;
    }
    HEAP32[((55836)>>2)]=0;
    HEAP32[((55824)>>2)]=0;
    return;
   }
   $211=((HEAP32[((55836)>>2)])|0);
   $212=($16|0)==($211|0);
   if ($212) {
    $214=((HEAP32[((55824)>>2)])|0);
    $215=((($214)+($psize_0))|0);
    HEAP32[((55824)>>2)]=$215;
    HEAP32[((55836)>>2)]=$p_0;
    $216=$215|1;
    $217=(($p_0+4)|0);
    HEAP32[(($217)>>2)]=$216;
    $218=(($189+$215)|0);
    $219=$218;
    HEAP32[(($219)>>2)]=$215;
    return;
   }
   $221=$194&-8;
   $222=((($221)+($psize_0))|0);
   $223=$194>>>3;
   $224=($194>>>0)<((256)>>>0);
   L1848: do {
    if ($224) {
     $226=(($mem+$14)|0);
     $227=$226;
     $228=((HEAP32[(($227)>>2)])|0);
     $_sum257258=$14|4;
     $229=(($mem+$_sum257258)|0);
     $230=$229;
     $231=((HEAP32[(($230)>>2)])|0);
     $232=$223<<1;
     $233=((55856+($232<<2))|0);
     $234=$233;
     $235=($228|0)==($234|0);
     do {
      if (!($235)) {
       $237=$228;
       $238=((HEAP32[((55832)>>2)])|0);
       $239=($237>>>0)<($238>>>0);
       if ($239) {
        _abort();
       }
       $241=(($228+12)|0);
       $242=((HEAP32[(($241)>>2)])|0);
       $243=($242|0)==($16|0);
       if ($243) {
        break;
       }
       _abort();
      }
     } while(0);
     $244=($231|0)==($228|0);
     if ($244) {
      $246=1<<$223;
      $247=$246^-1;
      $248=((HEAP32[((55816)>>2)])|0);
      $249=$248&$247;
      HEAP32[((55816)>>2)]=$249;
      break;
     }
     $251=($231|0)==($234|0);
     do {
      if ($251) {
       $_pre303=(($231+8)|0);
       $_pre_phi304=$_pre303;
      } else {
       $253=$231;
       $254=((HEAP32[((55832)>>2)])|0);
       $255=($253>>>0)<($254>>>0);
       if ($255) {
        _abort();
       }
       $257=(($231+8)|0);
       $258=((HEAP32[(($257)>>2)])|0);
       $259=($258|0)==($16|0);
       if ($259) {
        $_pre_phi304=$257;
        break;
       }
       _abort();
      }
     } while(0);
     $260=(($228+12)|0);
     HEAP32[(($260)>>2)]=$231;
     HEAP32[(($_pre_phi304)>>2)]=$228;
    } else {
     $262=$15;
     $_sum235=((($14)+(16))|0);
     $263=(($mem+$_sum235)|0);
     $264=$263;
     $265=((HEAP32[(($264)>>2)])|0);
     $_sum236237=$14|4;
     $266=(($mem+$_sum236237)|0);
     $267=$266;
     $268=((HEAP32[(($267)>>2)])|0);
     $269=($268|0)==($262|0);
     do {
      if ($269) {
       $_sum239=((($14)+(12))|0);
       $287=(($mem+$_sum239)|0);
       $288=$287;
       $289=((HEAP32[(($288)>>2)])|0);
       $290=($289|0)==0;
       if ($290) {
        $_sum238=((($14)+(8))|0);
        $292=(($mem+$_sum238)|0);
        $293=$292;
        $294=((HEAP32[(($293)>>2)])|0);
        $295=($294|0)==0;
        if ($295) {
         $R7_1=0;
         break;
        } else {
         $R7_0=$294;$RP9_0=$293;
        }
       } else {
        $R7_0=$289;$RP9_0=$288;
       }
       while(1) {
        $296=(($R7_0+20)|0);
        $297=((HEAP32[(($296)>>2)])|0);
        $298=($297|0)==0;
        if (!($298)) {
         $R7_0=$297;$RP9_0=$296;
         continue;
        }
        $300=(($R7_0+16)|0);
        $301=((HEAP32[(($300)>>2)])|0);
        $302=($301|0)==0;
        if ($302) {
         break;
        } else {
         $R7_0=$301;$RP9_0=$300;
        }
       }
       $304=$RP9_0;
       $305=((HEAP32[((55832)>>2)])|0);
       $306=($304>>>0)<($305>>>0);
       if ($306) {
        _abort();
       } else {
        HEAP32[(($RP9_0)>>2)]=0;
        $R7_1=$R7_0;
        break;
       }
      } else {
       $271=(($mem+$14)|0);
       $272=$271;
       $273=((HEAP32[(($272)>>2)])|0);
       $274=$273;
       $275=((HEAP32[((55832)>>2)])|0);
       $276=($274>>>0)<($275>>>0);
       if ($276) {
        _abort();
       }
       $278=(($273+12)|0);
       $279=((HEAP32[(($278)>>2)])|0);
       $280=($279|0)==($262|0);
       if (!($280)) {
        _abort();
       }
       $282=(($268+8)|0);
       $283=((HEAP32[(($282)>>2)])|0);
       $284=($283|0)==($262|0);
       if ($284) {
        HEAP32[(($278)>>2)]=$268;
        HEAP32[(($282)>>2)]=$273;
        $R7_1=$268;
        break;
       } else {
        _abort();
       }
      }
     } while(0);
     $310=($265|0)==0;
     if ($310) {
      break;
     }
     $_sum250=((($14)+(20))|0);
     $312=(($mem+$_sum250)|0);
     $313=$312;
     $314=((HEAP32[(($313)>>2)])|0);
     $315=((56120+($314<<2))|0);
     $316=((HEAP32[(($315)>>2)])|0);
     $317=($262|0)==($316|0);
     do {
      if ($317) {
       HEAP32[(($315)>>2)]=$R7_1;
       $cond298=($R7_1|0)==0;
       if (!($cond298)) {
        break;
       }
       $319=((HEAP32[(($313)>>2)])|0);
       $320=1<<$319;
       $321=$320^-1;
       $322=((HEAP32[((55820)>>2)])|0);
       $323=$322&$321;
       HEAP32[((55820)>>2)]=$323;
       break L1848;
      } else {
       $325=$265;
       $326=((HEAP32[((55832)>>2)])|0);
       $327=($325>>>0)<($326>>>0);
       if ($327) {
        _abort();
       }
       $329=(($265+16)|0);
       $330=((HEAP32[(($329)>>2)])|0);
       $331=($330|0)==($262|0);
       if ($331) {
        HEAP32[(($329)>>2)]=$R7_1;
       } else {
        $334=(($265+20)|0);
        HEAP32[(($334)>>2)]=$R7_1;
       }
       $337=($R7_1|0)==0;
       if ($337) {
        break L1848;
       }
      }
     } while(0);
     $339=$R7_1;
     $340=((HEAP32[((55832)>>2)])|0);
     $341=($339>>>0)<($340>>>0);
     if ($341) {
      _abort();
     }
     $343=(($R7_1+24)|0);
     HEAP32[(($343)>>2)]=$265;
     $_sum251=((($14)+(8))|0);
     $344=(($mem+$_sum251)|0);
     $345=$344;
     $346=((HEAP32[(($345)>>2)])|0);
     $347=($346|0)==0;
     do {
      if (!($347)) {
       $349=$346;
       $350=((HEAP32[((55832)>>2)])|0);
       $351=($349>>>0)<($350>>>0);
       if ($351) {
        _abort();
       } else {
        $353=(($R7_1+16)|0);
        HEAP32[(($353)>>2)]=$346;
        $354=(($346+24)|0);
        HEAP32[(($354)>>2)]=$R7_1;
        break;
       }
      }
     } while(0);
     $_sum252=((($14)+(12))|0);
     $357=(($mem+$_sum252)|0);
     $358=$357;
     $359=((HEAP32[(($358)>>2)])|0);
     $360=($359|0)==0;
     if ($360) {
      break;
     }
     $362=$359;
     $363=((HEAP32[((55832)>>2)])|0);
     $364=($362>>>0)<($363>>>0);
     if ($364) {
      _abort();
     } else {
      $366=(($R7_1+20)|0);
      HEAP32[(($366)>>2)]=$359;
      $367=(($359+24)|0);
      HEAP32[(($367)>>2)]=$R7_1;
      break;
     }
    }
   } while(0);
   $371=$222|1;
   $372=(($p_0+4)|0);
   HEAP32[(($372)>>2)]=$371;
   $373=(($189+$222)|0);
   $374=$373;
   HEAP32[(($374)>>2)]=$222;
   $375=((HEAP32[((55836)>>2)])|0);
   $376=($p_0|0)==($375|0);
   if (!($376)) {
    $psize_1=$222;
    break;
   }
   HEAP32[((55824)>>2)]=$222;
   return;
  } else {
   $379=$194&-2;
   HEAP32[(($193)>>2)]=$379;
   $380=$psize_0|1;
   $381=(($p_0+4)|0);
   HEAP32[(($381)>>2)]=$380;
   $382=(($189+$psize_0)|0);
   $383=$382;
   HEAP32[(($383)>>2)]=$psize_0;
   $psize_1=$psize_0;
  }
 } while(0);
 $385=$psize_1>>>3;
 $386=($psize_1>>>0)<((256)>>>0);
 if ($386) {
  $388=$385<<1;
  $389=((55856+($388<<2))|0);
  $390=$389;
  $391=((HEAP32[((55816)>>2)])|0);
  $392=1<<$385;
  $393=$391&$392;
  $394=($393|0)==0;
  do {
   if ($394) {
    $396=$391|$392;
    HEAP32[((55816)>>2)]=$396;
    $_sum248_pre=((($388)+(2))|0);
    $_pre=((55856+($_sum248_pre<<2))|0);
    $F16_0=$390;$_pre_phi=$_pre;
   } else {
    $_sum249=((($388)+(2))|0);
    $398=((55856+($_sum249<<2))|0);
    $399=((HEAP32[(($398)>>2)])|0);
    $400=$399;
    $401=((HEAP32[((55832)>>2)])|0);
    $402=($400>>>0)<($401>>>0);
    if (!($402)) {
     $F16_0=$399;$_pre_phi=$398;
     break;
    }
    _abort();
   }
  } while(0);
  HEAP32[(($_pre_phi)>>2)]=$p_0;
  $405=(($F16_0+12)|0);
  HEAP32[(($405)>>2)]=$p_0;
  $406=(($p_0+8)|0);
  HEAP32[(($406)>>2)]=$F16_0;
  $407=(($p_0+12)|0);
  HEAP32[(($407)>>2)]=$390;
  return;
 }
 $409=$p_0;
 $410=$psize_1>>>8;
 $411=($410|0)==0;
 do {
  if ($411) {
   $I18_0=0;
  } else {
   $413=($psize_1>>>0)>((16777215)>>>0);
   if ($413) {
    $I18_0=31;
    break;
   }
   $415=((($410)+(1048320))|0);
   $416=$415>>>16;
   $417=$416&8;
   $418=$410<<$417;
   $419=((($418)+(520192))|0);
   $420=$419>>>16;
   $421=$420&4;
   $422=$421|$417;
   $423=$418<<$421;
   $424=((($423)+(245760))|0);
   $425=$424>>>16;
   $426=$425&2;
   $427=$422|$426;
   $428=(((14)-($427))|0);
   $429=$423<<$426;
   $430=$429>>>15;
   $431=((($428)+($430))|0);
   $432=$431<<1;
   $433=((($431)+(7))|0);
   $434=$psize_1>>>($433>>>0);
   $435=$434&1;
   $436=$435|$432;
   $I18_0=$436;
  }
 } while(0);
 $438=((56120+($I18_0<<2))|0);
 $439=(($p_0+28)|0);
 $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 $442=((HEAP32[((55820)>>2)])|0);
 $443=1<<$I18_0;
 $444=$442&$443;
 $445=($444|0)==0;
 do {
  if ($445) {
   $447=$442|$443;
   HEAP32[((55820)>>2)]=$447;
   HEAP32[(($438)>>2)]=$409;
   $448=(($p_0+24)|0);
   $_c=$438;
   HEAP32[(($448)>>2)]=$_c;
   $449=(($p_0+12)|0);
   HEAP32[(($449)>>2)]=$p_0;
   $450=(($p_0+8)|0);
   HEAP32[(($450)>>2)]=$p_0;
  } else {
   $452=((HEAP32[(($438)>>2)])|0);
   $453=($I18_0|0)==31;
   if ($453) {
    $458=0;
   } else {
    $455=$I18_0>>>1;
    $456=(((25)-($455))|0);
    $458=$456;
   }
   $459=$psize_1<<$458;
   $K19_0=$459;$T_0=$452;
   while(1) {
    $461=(($T_0+4)|0);
    $462=((HEAP32[(($461)>>2)])|0);
    $463=$462&-8;
    $464=($463|0)==($psize_1|0);
    if ($464) {
     break;
    }
    $466=$K19_0>>>31;
    $467=(($T_0+16+($466<<2))|0);
    $468=((HEAP32[(($467)>>2)])|0);
    $469=($468|0)==0;
    $470=$K19_0<<1;
    if ($469) {
     label = 1496;
     break;
    } else {
     $K19_0=$470;$T_0=$468;
    }
   }
   if ((label|0) == 1496) {
    $472=$467;
    $473=((HEAP32[((55832)>>2)])|0);
    $474=($472>>>0)<($473>>>0);
    if ($474) {
     _abort();
    } else {
     HEAP32[(($467)>>2)]=$409;
     $476=(($p_0+24)|0);
     $T_0_c245=$T_0;
     HEAP32[(($476)>>2)]=$T_0_c245;
     $477=(($p_0+12)|0);
     HEAP32[(($477)>>2)]=$p_0;
     $478=(($p_0+8)|0);
     HEAP32[(($478)>>2)]=$p_0;
     break;
    }
   }
   $481=(($T_0+8)|0);
   $482=((HEAP32[(($481)>>2)])|0);
   $483=$T_0;
   $484=((HEAP32[((55832)>>2)])|0);
   $485=($483>>>0)<($484>>>0);
   if ($485) {
    _abort();
   }
   $487=$482;
   $488=($487>>>0)<($484>>>0);
   if ($488) {
    _abort();
   } else {
    $490=(($482+12)|0);
    HEAP32[(($490)>>2)]=$409;
    HEAP32[(($481)>>2)]=$409;
    $491=(($p_0+8)|0);
    $_c244=$482;
    HEAP32[(($491)>>2)]=$_c244;
    $492=(($p_0+12)|0);
    $T_0_c=$T_0;
    HEAP32[(($492)>>2)]=$T_0_c;
    $493=(($p_0+24)|0);
    HEAP32[(($493)>>2)]=0;
    break;
   }
  }
 } while(0);
 $495=((HEAP32[((55848)>>2)])|0);
 $496=((($495)-(1))|0);
 HEAP32[((55848)>>2)]=$496;
 $497=($496|0)==0;
 if ($497) {
  $sp_0_in_i=56272;
 } else {
  return;
 }
 while(1) {
  $sp_0_i=((HEAP32[(($sp_0_in_i)>>2)])|0);
  $498=($sp_0_i|0)==0;
  $499=(($sp_0_i+8)|0);
  if ($498) {
   break;
  } else {
   $sp_0_in_i=$499;
  }
 }
 HEAP32[((55848)>>2)]=-1;
 return;
}
function _realloc($oldmem,$bytes){
 $oldmem=($oldmem)|0;
 $bytes=($bytes)|0;
 var $1=0,$3=0,$5=0,$7=0,$9=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0;
 var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$mem_0=0,label=0;
 $1=($oldmem|0)==0;
 if ($1) {
  $3=((_malloc($bytes))|0);
  $mem_0=$3;
  return (($mem_0)|0);
 }
 $5=($bytes>>>0)>((4294967231)>>>0);
 if ($5) {
  $7=((___errno_location())|0);
  HEAP32[(($7)>>2)]=12;
  $mem_0=0;
  return (($mem_0)|0);
 }
 $9=($bytes>>>0)<((11)>>>0);
 if ($9) {
  $14=16;
 } else {
  $11=((($bytes)+(11))|0);
  $12=$11&-8;
  $14=$12;
 }
 $15=((($oldmem)-(8))|0);
 $16=$15;
 $17=((_try_realloc_chunk($16,$14))|0);
 $18=($17|0)==0;
 if (!($18)) {
  $20=(($17+8)|0);
  $21=$20;
  $mem_0=$21;
  return (($mem_0)|0);
 }
 $23=((_malloc($bytes))|0);
 $24=($23|0)==0;
 if ($24) {
  $mem_0=0;
  return (($mem_0)|0);
 }
 $26=((($oldmem)-(4))|0);
 $27=$26;
 $28=((HEAP32[(($27)>>2)])|0);
 $29=$28&-8;
 $30=$28&3;
 $31=($30|0)==0;
 $32=($31?8:4);
 $33=((($29)-($32))|0);
 $34=($33>>>0)<($bytes>>>0);
 $35=($34?$33:$bytes);
 (_memcpy((($23)|0), (($oldmem)|0), $35)|0);
 _free($oldmem);
 $mem_0=$23;
 return (($mem_0)|0);
}
function _try_realloc_chunk($p,$nb){
 $p=($p)|0;
 $nb=($nb)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$or_cond=0,$_sum3334=0,$14=0,$15=0,$16=0,$17=0,$phitmp=0,$19=0,$21=0;
 var $23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$32=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$_sum29=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $48=0,$49=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$_sum28=0,$61=0,$62=0,$63=0,$65=0,$66=0,$68=0,$69=0,$70=0;
 var $72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$_sum25=0,$81=0,$82=0,$83=0,$84=0,$_sum26=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0;
 var $92=0,$_sum23=0,$93=0,$94=0,$95=0,$96=0,$storemerge27=0,$storemerge=0,$99=0,$100=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$_sum17=0,$110=0,$111=0,$112=0;
 var $_sum18=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$121=0,$122=0,$124=0,$125=0,$126=0,$127=0,$129=0,$130=0,$131=0,$132=0,$134=0,$_pre=0;
 var $136=0,$137=0,$139=0,$140=0,$141=0,$_pre_phi=0,$142=0,$144=0,$_sum=0,$145=0,$146=0,$147=0,$_sum2=0,$148=0,$149=0,$150=0,$151=0,$_sum14=0,$153=0,$154=0;
 var $155=0,$156=0,$157=0,$159=0,$160=0,$161=0,$163=0,$164=0,$165=0,$_sum4=0,$168=0,$169=0,$170=0,$171=0,$_sum3=0,$173=0,$174=0,$175=0,$176=0,$RP_0=0;
 var $R_0=0,$177=0,$178=0,$179=0,$181=0,$182=0,$183=0,$185=0,$186=0,$R_1=0,$190=0,$_sum11=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$cond=0,$199=0;
 var $200=0,$201=0,$202=0,$203=0,$205=0,$206=0,$207=0,$209=0,$210=0,$211=0,$214=0,$217=0,$219=0,$220=0,$221=0,$223=0,$_sum12=0,$224=0,$225=0,$226=0;
 var $227=0,$229=0,$230=0,$231=0,$233=0,$234=0,$_sum13=0,$237=0,$238=0,$239=0,$240=0,$242=0,$243=0,$244=0,$246=0,$247=0,$251=0,$253=0,$254=0,$255=0;
 var $256=0,$_sum910=0,$257=0,$258=0,$259=0,$260=0,$262=0,$263=0,$264=0,$265=0,$266=0,$267=0,$_sum5=0,$268=0,$269=0,$270=0,$_sum78=0,$271=0,$272=0,$273=0;
 var $274=0,$newp_0=0,label=0;
 $1=(($p+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&-8;
 $4=$p;
 $5=(($4+$3)|0);
 $6=$5;
 $7=((HEAP32[((55832)>>2)])|0);
 $8=($4>>>0)<($7>>>0);
 if ($8) {
  _abort(); return ((0)|0);
  return ((0)|0);
 }
 $10=$2&3;
 $11=($10|0)!=1;
 $12=($4>>>0)<($5>>>0);
 $or_cond=$11&$12;
 if (!($or_cond)) {
  _abort(); return ((0)|0);
  return ((0)|0);
 }
 $_sum3334=$3|4;
 $14=(($4+$_sum3334)|0);
 $15=$14;
 $16=((HEAP32[(($15)>>2)])|0);
 $17=$16&1;
 $phitmp=($17|0)==0;
 if ($phitmp) {
  _abort(); return ((0)|0);
  return ((0)|0);
 }
 $19=($10|0)==0;
 if ($19) {
  $21=($nb>>>0)<((256)>>>0);
  if ($21) {
   $newp_0=0;
   return (($newp_0)|0);
  }
  $23=((($nb)+(4))|0);
  $24=($3>>>0)<($23>>>0);
  do {
   if (!($24)) {
    $26=((($3)-($nb))|0);
    $27=((HEAP32[((20952)>>2)])|0);
    $28=$27<<1;
    $29=($26>>>0)>($28>>>0);
    if ($29) {
     break;
    } else {
     $newp_0=$p;
    }
    return (($newp_0)|0);
   }
  } while(0);
  $newp_0=0;
  return (($newp_0)|0);
 }
 $32=($3>>>0)<($nb>>>0);
 if (!($32)) {
  $34=((($3)-($nb))|0);
  $35=($34>>>0)>((15)>>>0);
  if (!($35)) {
   $newp_0=$p;
   return (($newp_0)|0);
  }
  $37=(($4+$nb)|0);
  $38=$37;
  $39=$2&1;
  $40=$39|$nb;
  $41=$40|2;
  HEAP32[(($1)>>2)]=$41;
  $_sum29=((($nb)+(4))|0);
  $42=(($4+$_sum29)|0);
  $43=$42;
  $44=$34|3;
  HEAP32[(($43)>>2)]=$44;
  $45=((HEAP32[(($15)>>2)])|0);
  $46=$45|1;
  HEAP32[(($15)>>2)]=$46;
  _dispose_chunk($38,$34);
  $newp_0=$p;
  return (($newp_0)|0);
 }
 $48=((HEAP32[((55840)>>2)])|0);
 $49=($6|0)==($48|0);
 if ($49) {
  $51=((HEAP32[((55828)>>2)])|0);
  $52=((($51)+($3))|0);
  $53=($52>>>0)>($nb>>>0);
  if (!($53)) {
   $newp_0=0;
   return (($newp_0)|0);
  }
  $55=((($52)-($nb))|0);
  $56=(($4+$nb)|0);
  $57=$56;
  $58=$2&1;
  $59=$58|$nb;
  $60=$59|2;
  HEAP32[(($1)>>2)]=$60;
  $_sum28=((($nb)+(4))|0);
  $61=(($4+$_sum28)|0);
  $62=$61;
  $63=$55|1;
  HEAP32[(($62)>>2)]=$63;
  HEAP32[((55840)>>2)]=$57;
  HEAP32[((55828)>>2)]=$55;
  $newp_0=$p;
  return (($newp_0)|0);
 }
 $65=((HEAP32[((55836)>>2)])|0);
 $66=($6|0)==($65|0);
 if ($66) {
  $68=((HEAP32[((55824)>>2)])|0);
  $69=((($68)+($3))|0);
  $70=($69>>>0)<($nb>>>0);
  if ($70) {
   $newp_0=0;
   return (($newp_0)|0);
  }
  $72=((($69)-($nb))|0);
  $73=($72>>>0)>((15)>>>0);
  if ($73) {
   $75=(($4+$nb)|0);
   $76=$75;
   $77=(($4+$69)|0);
   $78=$2&1;
   $79=$78|$nb;
   $80=$79|2;
   HEAP32[(($1)>>2)]=$80;
   $_sum25=((($nb)+(4))|0);
   $81=(($4+$_sum25)|0);
   $82=$81;
   $83=$72|1;
   HEAP32[(($82)>>2)]=$83;
   $84=$77;
   HEAP32[(($84)>>2)]=$72;
   $_sum26=((($69)+(4))|0);
   $85=(($4+$_sum26)|0);
   $86=$85;
   $87=((HEAP32[(($86)>>2)])|0);
   $88=$87&-2;
   HEAP32[(($86)>>2)]=$88;
   $storemerge=$76;$storemerge27=$72;
  } else {
   $90=$2&1;
   $91=$90|$69;
   $92=$91|2;
   HEAP32[(($1)>>2)]=$92;
   $_sum23=((($69)+(4))|0);
   $93=(($4+$_sum23)|0);
   $94=$93;
   $95=((HEAP32[(($94)>>2)])|0);
   $96=$95|1;
   HEAP32[(($94)>>2)]=$96;
   $storemerge=0;$storemerge27=0;
  }
  HEAP32[((55824)>>2)]=$storemerge27;
  HEAP32[((55836)>>2)]=$storemerge;
  $newp_0=$p;
  return (($newp_0)|0);
 }
 $99=$16&2;
 $100=($99|0)==0;
 if (!($100)) {
  $newp_0=0;
  return (($newp_0)|0);
 }
 $102=$16&-8;
 $103=((($102)+($3))|0);
 $104=($103>>>0)<($nb>>>0);
 if ($104) {
  $newp_0=0;
  return (($newp_0)|0);
 }
 $106=((($103)-($nb))|0);
 $107=$16>>>3;
 $108=($16>>>0)<((256)>>>0);
 L2035: do {
  if ($108) {
   $_sum17=((($3)+(8))|0);
   $110=(($4+$_sum17)|0);
   $111=$110;
   $112=((HEAP32[(($111)>>2)])|0);
   $_sum18=((($3)+(12))|0);
   $113=(($4+$_sum18)|0);
   $114=$113;
   $115=((HEAP32[(($114)>>2)])|0);
   $116=$107<<1;
   $117=((55856+($116<<2))|0);
   $118=$117;
   $119=($112|0)==($118|0);
   do {
    if (!($119)) {
     $121=$112;
     $122=($121>>>0)<($7>>>0);
     if ($122) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $124=(($112+12)|0);
     $125=((HEAP32[(($124)>>2)])|0);
     $126=($125|0)==($6|0);
     if ($126) {
      break;
     }
     _abort(); return ((0)|0);
     return ((0)|0);
    }
   } while(0);
   $127=($115|0)==($112|0);
   if ($127) {
    $129=1<<$107;
    $130=$129^-1;
    $131=((HEAP32[((55816)>>2)])|0);
    $132=$131&$130;
    HEAP32[((55816)>>2)]=$132;
    break;
   }
   $134=($115|0)==($118|0);
   do {
    if ($134) {
     $_pre=(($115+8)|0);
     $_pre_phi=$_pre;
    } else {
     $136=$115;
     $137=($136>>>0)<($7>>>0);
     if ($137) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $139=(($115+8)|0);
     $140=((HEAP32[(($139)>>2)])|0);
     $141=($140|0)==($6|0);
     if ($141) {
      $_pre_phi=$139;
      break;
     }
     _abort(); return ((0)|0);
     return ((0)|0);
    }
   } while(0);
   $142=(($112+12)|0);
   HEAP32[(($142)>>2)]=$115;
   HEAP32[(($_pre_phi)>>2)]=$112;
  } else {
   $144=$5;
   $_sum=((($3)+(24))|0);
   $145=(($4+$_sum)|0);
   $146=$145;
   $147=((HEAP32[(($146)>>2)])|0);
   $_sum2=((($3)+(12))|0);
   $148=(($4+$_sum2)|0);
   $149=$148;
   $150=((HEAP32[(($149)>>2)])|0);
   $151=($150|0)==($144|0);
   do {
    if ($151) {
     $_sum4=((($3)+(20))|0);
     $168=(($4+$_sum4)|0);
     $169=$168;
     $170=((HEAP32[(($169)>>2)])|0);
     $171=($170|0)==0;
     if ($171) {
      $_sum3=((($3)+(16))|0);
      $173=(($4+$_sum3)|0);
      $174=$173;
      $175=((HEAP32[(($174)>>2)])|0);
      $176=($175|0)==0;
      if ($176) {
       $R_1=0;
       break;
      } else {
       $R_0=$175;$RP_0=$174;
      }
     } else {
      $R_0=$170;$RP_0=$169;
     }
     while(1) {
      $177=(($R_0+20)|0);
      $178=((HEAP32[(($177)>>2)])|0);
      $179=($178|0)==0;
      if (!($179)) {
       $R_0=$178;$RP_0=$177;
       continue;
      }
      $181=(($R_0+16)|0);
      $182=((HEAP32[(($181)>>2)])|0);
      $183=($182|0)==0;
      if ($183) {
       break;
      } else {
       $R_0=$182;$RP_0=$181;
      }
     }
     $185=$RP_0;
     $186=($185>>>0)<($7>>>0);
     if ($186) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0)>>2)]=0;
      $R_1=$R_0;
      break;
     }
    } else {
     $_sum14=((($3)+(8))|0);
     $153=(($4+$_sum14)|0);
     $154=$153;
     $155=((HEAP32[(($154)>>2)])|0);
     $156=$155;
     $157=($156>>>0)<($7>>>0);
     if ($157) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $159=(($155+12)|0);
     $160=((HEAP32[(($159)>>2)])|0);
     $161=($160|0)==($144|0);
     if (!($161)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $163=(($150+8)|0);
     $164=((HEAP32[(($163)>>2)])|0);
     $165=($164|0)==($144|0);
     if ($165) {
      HEAP32[(($159)>>2)]=$150;
      HEAP32[(($163)>>2)]=$155;
      $R_1=$150;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);
   $190=($147|0)==0;
   if ($190) {
    break;
   }
   $_sum11=((($3)+(28))|0);
   $192=(($4+$_sum11)|0);
   $193=$192;
   $194=((HEAP32[(($193)>>2)])|0);
   $195=((56120+($194<<2))|0);
   $196=((HEAP32[(($195)>>2)])|0);
   $197=($144|0)==($196|0);
   do {
    if ($197) {
     HEAP32[(($195)>>2)]=$R_1;
     $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     $199=((HEAP32[(($193)>>2)])|0);
     $200=1<<$199;
     $201=$200^-1;
     $202=((HEAP32[((55820)>>2)])|0);
     $203=$202&$201;
     HEAP32[((55820)>>2)]=$203;
     break L2035;
    } else {
     $205=$147;
     $206=((HEAP32[((55832)>>2)])|0);
     $207=($205>>>0)<($206>>>0);
     if ($207) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $209=(($147+16)|0);
     $210=((HEAP32[(($209)>>2)])|0);
     $211=($210|0)==($144|0);
     if ($211) {
      HEAP32[(($209)>>2)]=$R_1;
     } else {
      $214=(($147+20)|0);
      HEAP32[(($214)>>2)]=$R_1;
     }
     $217=($R_1|0)==0;
     if ($217) {
      break L2035;
     }
    }
   } while(0);
   $219=$R_1;
   $220=((HEAP32[((55832)>>2)])|0);
   $221=($219>>>0)<($220>>>0);
   if ($221) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $223=(($R_1+24)|0);
   HEAP32[(($223)>>2)]=$147;
   $_sum12=((($3)+(16))|0);
   $224=(($4+$_sum12)|0);
   $225=$224;
   $226=((HEAP32[(($225)>>2)])|0);
   $227=($226|0)==0;
   do {
    if (!($227)) {
     $229=$226;
     $230=((HEAP32[((55832)>>2)])|0);
     $231=($229>>>0)<($230>>>0);
     if ($231) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $233=(($R_1+16)|0);
      HEAP32[(($233)>>2)]=$226;
      $234=(($226+24)|0);
      HEAP32[(($234)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   $_sum13=((($3)+(20))|0);
   $237=(($4+$_sum13)|0);
   $238=$237;
   $239=((HEAP32[(($238)>>2)])|0);
   $240=($239|0)==0;
   if ($240) {
    break;
   }
   $242=$239;
   $243=((HEAP32[((55832)>>2)])|0);
   $244=($242>>>0)<($243>>>0);
   if ($244) {
    _abort(); return ((0)|0);
    return ((0)|0);
   } else {
    $246=(($R_1+20)|0);
    HEAP32[(($246)>>2)]=$239;
    $247=(($239+24)|0);
    HEAP32[(($247)>>2)]=$R_1;
    break;
   }
  }
 } while(0);
 $251=($106>>>0)<((16)>>>0);
 if ($251) {
  $253=((HEAP32[(($1)>>2)])|0);
  $254=$253&1;
  $255=$103|$254;
  $256=$255|2;
  HEAP32[(($1)>>2)]=$256;
  $_sum910=$103|4;
  $257=(($4+$_sum910)|0);
  $258=$257;
  $259=((HEAP32[(($258)>>2)])|0);
  $260=$259|1;
  HEAP32[(($258)>>2)]=$260;
  $newp_0=$p;
  return (($newp_0)|0);
 } else {
  $262=(($4+$nb)|0);
  $263=$262;
  $264=((HEAP32[(($1)>>2)])|0);
  $265=$264&1;
  $266=$265|$nb;
  $267=$266|2;
  HEAP32[(($1)>>2)]=$267;
  $_sum5=((($nb)+(4))|0);
  $268=(($4+$_sum5)|0);
  $269=$268;
  $270=$106|3;
  HEAP32[(($269)>>2)]=$270;
  $_sum78=$103|4;
  $271=(($4+$_sum78)|0);
  $272=$271;
  $273=((HEAP32[(($272)>>2)])|0);
  $274=$273|1;
  HEAP32[(($272)>>2)]=$274;
  _dispose_chunk($263,$106);
  $newp_0=$p;
  return (($newp_0)|0);
 }
  return 0;
}
function _dispose_chunk($p,$psize){
 $p=($p)|0;
 $psize=($psize)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0;
 var $25=0,$_sum35=0,$27=0,$28=0,$29=0,$_sum36=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$46=0;
 var $47=0,$48=0,$49=0,$51=0,$_pre62=0,$53=0,$54=0,$56=0,$57=0,$58=0,$_pre_phi63=0,$59=0,$61=0,$_sum26=0,$62=0,$63=0,$64=0,$_sum27=0,$65=0,$66=0;
 var $67=0,$68=0,$_sum33=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$_sum28=0,$_sum29=0,$85=0,$86=0,$87=0,$88=0;
 var $90=0,$91=0,$92=0,$93=0,$RP_0=0,$R_0=0,$94=0,$95=0,$96=0,$98=0,$99=0,$100=0,$102=0,$103=0,$R_1=0,$107=0,$_sum30=0,$109=0,$110=0,$111=0;
 var $112=0,$113=0,$114=0,$cond=0,$116=0,$117=0,$118=0,$119=0,$120=0,$122=0,$123=0,$124=0,$126=0,$127=0,$128=0,$131=0,$134=0,$136=0,$137=0,$138=0;
 var $140=0,$_sum31=0,$141=0,$142=0,$143=0,$144=0,$146=0,$147=0,$148=0,$150=0,$151=0,$_sum32=0,$154=0,$155=0,$156=0,$157=0,$159=0,$160=0,$161=0,$163=0;
 var $164=0,$_sum=0,$168=0,$169=0,$170=0,$171=0,$172=0,$174=0,$175=0,$176=0,$_sum24=0,$177=0,$178=0,$179=0,$_0277=0,$_0=0,$181=0,$182=0,$_sum1=0,$184=0;
 var $185=0,$186=0,$187=0,$188=0,$190=0,$191=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$201=0,$202=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0;
 var $210=0,$212=0,$213=0,$214=0,$215=0,$_sum20=0,$217=0,$218=0,$219=0,$_sum21=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$228=0,$229=0,$231=0;
 var $232=0,$233=0,$234=0,$236=0,$237=0,$238=0,$239=0,$241=0,$_pre60=0,$243=0,$244=0,$246=0,$247=0,$248=0,$_pre_phi61=0,$249=0,$251=0,$_sum2=0,$252=0,$253=0;
 var $254=0,$_sum3=0,$255=0,$256=0,$257=0,$258=0,$_sum18=0,$260=0,$261=0,$262=0,$263=0,$264=0,$266=0,$267=0,$268=0,$270=0,$271=0,$272=0,$_sum5=0,$275=0;
 var $276=0,$277=0,$278=0,$_sum4=0,$280=0,$281=0,$282=0,$283=0,$RP9_0=0,$R7_0=0,$284=0,$285=0,$286=0,$288=0,$289=0,$290=0,$292=0,$293=0,$R7_1=0,$297=0;
 var $_sum15=0,$299=0,$300=0,$301=0,$302=0,$303=0,$304=0,$cond53=0,$306=0,$307=0,$308=0,$309=0,$310=0,$312=0,$313=0,$314=0,$316=0,$317=0,$318=0,$321=0;
 var $324=0,$326=0,$327=0,$328=0,$330=0,$_sum16=0,$331=0,$332=0,$333=0,$334=0,$336=0,$337=0,$338=0,$340=0,$341=0,$_sum17=0,$344=0,$345=0,$346=0,$347=0;
 var $349=0,$350=0,$351=0,$353=0,$354=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$_1=0,$374=0;
 var $375=0,$377=0,$378=0,$379=0,$380=0,$381=0,$382=0,$383=0,$385=0,$_sum13_pre=0,$_pre=0,$_sum14=0,$387=0,$388=0,$389=0,$390=0,$391=0,$_pre_phi=0,$F16_0=0,$394=0;
 var $395=0,$396=0,$398=0,$399=0,$400=0,$402=0,$404=0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0,$414=0,$415=0,$416=0,$417=0;
 var $418=0,$419=0,$420=0,$421=0,$422=0,$423=0,$424=0,$425=0,$I19_0=0,$427=0,$428=0,$I19_0_c=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$436=0,$437=0;
 var $_c=0,$438=0,$439=0,$441=0,$442=0,$444=0,$445=0,$447=0,$448=0,$T_0=0,$K20_0=0,$450=0,$451=0,$452=0,$453=0,$455=0,$456=0,$457=0,$458=0,$459=0;
 var $461=0,$462=0,$463=0,$465=0,$T_0_c10=0,$466=0,$467=0,$470=0,$471=0,$472=0,$473=0,$474=0,$476=0,$477=0,$479=0,$480=0,$_c9=0,$481=0,$T_0_c=0,$482=0;
 var label=0;
 $1=$p;
 $2=(($1+$psize)|0);
 $3=$2;
 $4=(($p+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5&1;
 $7=($6|0)==0;
 L2111: do {
  if ($7) {
   $9=(($p)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=$5&3;
   $12=($11|0)==0;
   if ($12) {
    return;
   }
   $14=(((-$10))|0);
   $15=(($1+$14)|0);
   $16=$15;
   $17=((($10)+($psize))|0);
   $18=((HEAP32[((55832)>>2)])|0);
   $19=($15>>>0)<($18>>>0);
   if ($19) {
    _abort();
   }
   $21=((HEAP32[((55836)>>2)])|0);
   $22=($16|0)==($21|0);
   if ($22) {
    $_sum=((($psize)+(4))|0);
    $168=(($1+$_sum)|0);
    $169=$168;
    $170=((HEAP32[(($169)>>2)])|0);
    $171=$170&3;
    $172=($171|0)==3;
    if (!($172)) {
     $_0=$16;$_0277=$17;
     break;
    }
    HEAP32[((55824)>>2)]=$17;
    $174=((HEAP32[(($169)>>2)])|0);
    $175=$174&-2;
    HEAP32[(($169)>>2)]=$175;
    $176=$17|1;
    $_sum24=(((4)-($10))|0);
    $177=(($1+$_sum24)|0);
    $178=$177;
    HEAP32[(($178)>>2)]=$176;
    $179=$2;
    HEAP32[(($179)>>2)]=$17;
    return;
   }
   $24=$10>>>3;
   $25=($10>>>0)<((256)>>>0);
   if ($25) {
    $_sum35=(((8)-($10))|0);
    $27=(($1+$_sum35)|0);
    $28=$27;
    $29=((HEAP32[(($28)>>2)])|0);
    $_sum36=(((12)-($10))|0);
    $30=(($1+$_sum36)|0);
    $31=$30;
    $32=((HEAP32[(($31)>>2)])|0);
    $33=$24<<1;
    $34=((55856+($33<<2))|0);
    $35=$34;
    $36=($29|0)==($35|0);
    do {
     if (!($36)) {
      $38=$29;
      $39=($38>>>0)<($18>>>0);
      if ($39) {
       _abort();
      }
      $41=(($29+12)|0);
      $42=((HEAP32[(($41)>>2)])|0);
      $43=($42|0)==($16|0);
      if ($43) {
       break;
      }
      _abort();
     }
    } while(0);
    $44=($32|0)==($29|0);
    if ($44) {
     $46=1<<$24;
     $47=$46^-1;
     $48=((HEAP32[((55816)>>2)])|0);
     $49=$48&$47;
     HEAP32[((55816)>>2)]=$49;
     $_0=$16;$_0277=$17;
     break;
    }
    $51=($32|0)==($35|0);
    do {
     if ($51) {
      $_pre62=(($32+8)|0);
      $_pre_phi63=$_pre62;
     } else {
      $53=$32;
      $54=($53>>>0)<($18>>>0);
      if ($54) {
       _abort();
      }
      $56=(($32+8)|0);
      $57=((HEAP32[(($56)>>2)])|0);
      $58=($57|0)==($16|0);
      if ($58) {
       $_pre_phi63=$56;
       break;
      }
      _abort();
     }
    } while(0);
    $59=(($29+12)|0);
    HEAP32[(($59)>>2)]=$32;
    HEAP32[(($_pre_phi63)>>2)]=$29;
    $_0=$16;$_0277=$17;
    break;
   }
   $61=$15;
   $_sum26=(((24)-($10))|0);
   $62=(($1+$_sum26)|0);
   $63=$62;
   $64=((HEAP32[(($63)>>2)])|0);
   $_sum27=(((12)-($10))|0);
   $65=(($1+$_sum27)|0);
   $66=$65;
   $67=((HEAP32[(($66)>>2)])|0);
   $68=($67|0)==($61|0);
   do {
    if ($68) {
     $_sum28=(((16)-($10))|0);
     $_sum29=((($_sum28)+(4))|0);
     $85=(($1+$_sum29)|0);
     $86=$85;
     $87=((HEAP32[(($86)>>2)])|0);
     $88=($87|0)==0;
     if ($88) {
      $90=(($1+$_sum28)|0);
      $91=$90;
      $92=((HEAP32[(($91)>>2)])|0);
      $93=($92|0)==0;
      if ($93) {
       $R_1=0;
       break;
      } else {
       $R_0=$92;$RP_0=$91;
      }
     } else {
      $R_0=$87;$RP_0=$86;
     }
     while(1) {
      $94=(($R_0+20)|0);
      $95=((HEAP32[(($94)>>2)])|0);
      $96=($95|0)==0;
      if (!($96)) {
       $R_0=$95;$RP_0=$94;
       continue;
      }
      $98=(($R_0+16)|0);
      $99=((HEAP32[(($98)>>2)])|0);
      $100=($99|0)==0;
      if ($100) {
       break;
      } else {
       $R_0=$99;$RP_0=$98;
      }
     }
     $102=$RP_0;
     $103=($102>>>0)<($18>>>0);
     if ($103) {
      _abort();
     } else {
      HEAP32[(($RP_0)>>2)]=0;
      $R_1=$R_0;
      break;
     }
    } else {
     $_sum33=(((8)-($10))|0);
     $70=(($1+$_sum33)|0);
     $71=$70;
     $72=((HEAP32[(($71)>>2)])|0);
     $73=$72;
     $74=($73>>>0)<($18>>>0);
     if ($74) {
      _abort();
     }
     $76=(($72+12)|0);
     $77=((HEAP32[(($76)>>2)])|0);
     $78=($77|0)==($61|0);
     if (!($78)) {
      _abort();
     }
     $80=(($67+8)|0);
     $81=((HEAP32[(($80)>>2)])|0);
     $82=($81|0)==($61|0);
     if ($82) {
      HEAP32[(($76)>>2)]=$67;
      HEAP32[(($80)>>2)]=$72;
      $R_1=$67;
      break;
     } else {
      _abort();
     }
    }
   } while(0);
   $107=($64|0)==0;
   if ($107) {
    $_0=$16;$_0277=$17;
    break;
   }
   $_sum30=(((28)-($10))|0);
   $109=(($1+$_sum30)|0);
   $110=$109;
   $111=((HEAP32[(($110)>>2)])|0);
   $112=((56120+($111<<2))|0);
   $113=((HEAP32[(($112)>>2)])|0);
   $114=($61|0)==($113|0);
   do {
    if ($114) {
     HEAP32[(($112)>>2)]=$R_1;
     $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     $116=((HEAP32[(($110)>>2)])|0);
     $117=1<<$116;
     $118=$117^-1;
     $119=((HEAP32[((55820)>>2)])|0);
     $120=$119&$118;
     HEAP32[((55820)>>2)]=$120;
     $_0=$16;$_0277=$17;
     break L2111;
    } else {
     $122=$64;
     $123=((HEAP32[((55832)>>2)])|0);
     $124=($122>>>0)<($123>>>0);
     if ($124) {
      _abort();
     }
     $126=(($64+16)|0);
     $127=((HEAP32[(($126)>>2)])|0);
     $128=($127|0)==($61|0);
     if ($128) {
      HEAP32[(($126)>>2)]=$R_1;
     } else {
      $131=(($64+20)|0);
      HEAP32[(($131)>>2)]=$R_1;
     }
     $134=($R_1|0)==0;
     if ($134) {
      $_0=$16;$_0277=$17;
      break L2111;
     }
    }
   } while(0);
   $136=$R_1;
   $137=((HEAP32[((55832)>>2)])|0);
   $138=($136>>>0)<($137>>>0);
   if ($138) {
    _abort();
   }
   $140=(($R_1+24)|0);
   HEAP32[(($140)>>2)]=$64;
   $_sum31=(((16)-($10))|0);
   $141=(($1+$_sum31)|0);
   $142=$141;
   $143=((HEAP32[(($142)>>2)])|0);
   $144=($143|0)==0;
   do {
    if (!($144)) {
     $146=$143;
     $147=((HEAP32[((55832)>>2)])|0);
     $148=($146>>>0)<($147>>>0);
     if ($148) {
      _abort();
     } else {
      $150=(($R_1+16)|0);
      HEAP32[(($150)>>2)]=$143;
      $151=(($143+24)|0);
      HEAP32[(($151)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   $_sum32=((($_sum31)+(4))|0);
   $154=(($1+$_sum32)|0);
   $155=$154;
   $156=((HEAP32[(($155)>>2)])|0);
   $157=($156|0)==0;
   if ($157) {
    $_0=$16;$_0277=$17;
    break;
   }
   $159=$156;
   $160=((HEAP32[((55832)>>2)])|0);
   $161=($159>>>0)<($160>>>0);
   if ($161) {
    _abort();
   } else {
    $163=(($R_1+20)|0);
    HEAP32[(($163)>>2)]=$156;
    $164=(($156+24)|0);
    HEAP32[(($164)>>2)]=$R_1;
    $_0=$16;$_0277=$17;
    break;
   }
  } else {
   $_0=$p;$_0277=$psize;
  }
 } while(0);
 $181=((HEAP32[((55832)>>2)])|0);
 $182=($2>>>0)<($181>>>0);
 if ($182) {
  _abort();
 }
 $_sum1=((($psize)+(4))|0);
 $184=(($1+$_sum1)|0);
 $185=$184;
 $186=((HEAP32[(($185)>>2)])|0);
 $187=$186&2;
 $188=($187|0)==0;
 do {
  if ($188) {
   $190=((HEAP32[((55840)>>2)])|0);
   $191=($3|0)==($190|0);
   if ($191) {
    $193=((HEAP32[((55828)>>2)])|0);
    $194=((($193)+($_0277))|0);
    HEAP32[((55828)>>2)]=$194;
    HEAP32[((55840)>>2)]=$_0;
    $195=$194|1;
    $196=(($_0+4)|0);
    HEAP32[(($196)>>2)]=$195;
    $197=((HEAP32[((55836)>>2)])|0);
    $198=($_0|0)==($197|0);
    if (!($198)) {
     return;
    }
    HEAP32[((55836)>>2)]=0;
    HEAP32[((55824)>>2)]=0;
    return;
   }
   $201=((HEAP32[((55836)>>2)])|0);
   $202=($3|0)==($201|0);
   if ($202) {
    $204=((HEAP32[((55824)>>2)])|0);
    $205=((($204)+($_0277))|0);
    HEAP32[((55824)>>2)]=$205;
    HEAP32[((55836)>>2)]=$_0;
    $206=$205|1;
    $207=(($_0+4)|0);
    HEAP32[(($207)>>2)]=$206;
    $208=$_0;
    $209=(($208+$205)|0);
    $210=$209;
    HEAP32[(($210)>>2)]=$205;
    return;
   }
   $212=$186&-8;
   $213=((($212)+($_0277))|0);
   $214=$186>>>3;
   $215=($186>>>0)<((256)>>>0);
   L2210: do {
    if ($215) {
     $_sum20=((($psize)+(8))|0);
     $217=(($1+$_sum20)|0);
     $218=$217;
     $219=((HEAP32[(($218)>>2)])|0);
     $_sum21=((($psize)+(12))|0);
     $220=(($1+$_sum21)|0);
     $221=$220;
     $222=((HEAP32[(($221)>>2)])|0);
     $223=$214<<1;
     $224=((55856+($223<<2))|0);
     $225=$224;
     $226=($219|0)==($225|0);
     do {
      if (!($226)) {
       $228=$219;
       $229=($228>>>0)<($181>>>0);
       if ($229) {
        _abort();
       }
       $231=(($219+12)|0);
       $232=((HEAP32[(($231)>>2)])|0);
       $233=($232|0)==($3|0);
       if ($233) {
        break;
       }
       _abort();
      }
     } while(0);
     $234=($222|0)==($219|0);
     if ($234) {
      $236=1<<$214;
      $237=$236^-1;
      $238=((HEAP32[((55816)>>2)])|0);
      $239=$238&$237;
      HEAP32[((55816)>>2)]=$239;
      break;
     }
     $241=($222|0)==($225|0);
     do {
      if ($241) {
       $_pre60=(($222+8)|0);
       $_pre_phi61=$_pre60;
      } else {
       $243=$222;
       $244=($243>>>0)<($181>>>0);
       if ($244) {
        _abort();
       }
       $246=(($222+8)|0);
       $247=((HEAP32[(($246)>>2)])|0);
       $248=($247|0)==($3|0);
       if ($248) {
        $_pre_phi61=$246;
        break;
       }
       _abort();
      }
     } while(0);
     $249=(($219+12)|0);
     HEAP32[(($249)>>2)]=$222;
     HEAP32[(($_pre_phi61)>>2)]=$219;
    } else {
     $251=$2;
     $_sum2=((($psize)+(24))|0);
     $252=(($1+$_sum2)|0);
     $253=$252;
     $254=((HEAP32[(($253)>>2)])|0);
     $_sum3=((($psize)+(12))|0);
     $255=(($1+$_sum3)|0);
     $256=$255;
     $257=((HEAP32[(($256)>>2)])|0);
     $258=($257|0)==($251|0);
     do {
      if ($258) {
       $_sum5=((($psize)+(20))|0);
       $275=(($1+$_sum5)|0);
       $276=$275;
       $277=((HEAP32[(($276)>>2)])|0);
       $278=($277|0)==0;
       if ($278) {
        $_sum4=((($psize)+(16))|0);
        $280=(($1+$_sum4)|0);
        $281=$280;
        $282=((HEAP32[(($281)>>2)])|0);
        $283=($282|0)==0;
        if ($283) {
         $R7_1=0;
         break;
        } else {
         $R7_0=$282;$RP9_0=$281;
        }
       } else {
        $R7_0=$277;$RP9_0=$276;
       }
       while(1) {
        $284=(($R7_0+20)|0);
        $285=((HEAP32[(($284)>>2)])|0);
        $286=($285|0)==0;
        if (!($286)) {
         $R7_0=$285;$RP9_0=$284;
         continue;
        }
        $288=(($R7_0+16)|0);
        $289=((HEAP32[(($288)>>2)])|0);
        $290=($289|0)==0;
        if ($290) {
         break;
        } else {
         $R7_0=$289;$RP9_0=$288;
        }
       }
       $292=$RP9_0;
       $293=($292>>>0)<($181>>>0);
       if ($293) {
        _abort();
       } else {
        HEAP32[(($RP9_0)>>2)]=0;
        $R7_1=$R7_0;
        break;
       }
      } else {
       $_sum18=((($psize)+(8))|0);
       $260=(($1+$_sum18)|0);
       $261=$260;
       $262=((HEAP32[(($261)>>2)])|0);
       $263=$262;
       $264=($263>>>0)<($181>>>0);
       if ($264) {
        _abort();
       }
       $266=(($262+12)|0);
       $267=((HEAP32[(($266)>>2)])|0);
       $268=($267|0)==($251|0);
       if (!($268)) {
        _abort();
       }
       $270=(($257+8)|0);
       $271=((HEAP32[(($270)>>2)])|0);
       $272=($271|0)==($251|0);
       if ($272) {
        HEAP32[(($266)>>2)]=$257;
        HEAP32[(($270)>>2)]=$262;
        $R7_1=$257;
        break;
       } else {
        _abort();
       }
      }
     } while(0);
     $297=($254|0)==0;
     if ($297) {
      break;
     }
     $_sum15=((($psize)+(28))|0);
     $299=(($1+$_sum15)|0);
     $300=$299;
     $301=((HEAP32[(($300)>>2)])|0);
     $302=((56120+($301<<2))|0);
     $303=((HEAP32[(($302)>>2)])|0);
     $304=($251|0)==($303|0);
     do {
      if ($304) {
       HEAP32[(($302)>>2)]=$R7_1;
       $cond53=($R7_1|0)==0;
       if (!($cond53)) {
        break;
       }
       $306=((HEAP32[(($300)>>2)])|0);
       $307=1<<$306;
       $308=$307^-1;
       $309=((HEAP32[((55820)>>2)])|0);
       $310=$309&$308;
       HEAP32[((55820)>>2)]=$310;
       break L2210;
      } else {
       $312=$254;
       $313=((HEAP32[((55832)>>2)])|0);
       $314=($312>>>0)<($313>>>0);
       if ($314) {
        _abort();
       }
       $316=(($254+16)|0);
       $317=((HEAP32[(($316)>>2)])|0);
       $318=($317|0)==($251|0);
       if ($318) {
        HEAP32[(($316)>>2)]=$R7_1;
       } else {
        $321=(($254+20)|0);
        HEAP32[(($321)>>2)]=$R7_1;
       }
       $324=($R7_1|0)==0;
       if ($324) {
        break L2210;
       }
      }
     } while(0);
     $326=$R7_1;
     $327=((HEAP32[((55832)>>2)])|0);
     $328=($326>>>0)<($327>>>0);
     if ($328) {
      _abort();
     }
     $330=(($R7_1+24)|0);
     HEAP32[(($330)>>2)]=$254;
     $_sum16=((($psize)+(16))|0);
     $331=(($1+$_sum16)|0);
     $332=$331;
     $333=((HEAP32[(($332)>>2)])|0);
     $334=($333|0)==0;
     do {
      if (!($334)) {
       $336=$333;
       $337=((HEAP32[((55832)>>2)])|0);
       $338=($336>>>0)<($337>>>0);
       if ($338) {
        _abort();
       } else {
        $340=(($R7_1+16)|0);
        HEAP32[(($340)>>2)]=$333;
        $341=(($333+24)|0);
        HEAP32[(($341)>>2)]=$R7_1;
        break;
       }
      }
     } while(0);
     $_sum17=((($psize)+(20))|0);
     $344=(($1+$_sum17)|0);
     $345=$344;
     $346=((HEAP32[(($345)>>2)])|0);
     $347=($346|0)==0;
     if ($347) {
      break;
     }
     $349=$346;
     $350=((HEAP32[((55832)>>2)])|0);
     $351=($349>>>0)<($350>>>0);
     if ($351) {
      _abort();
     } else {
      $353=(($R7_1+20)|0);
      HEAP32[(($353)>>2)]=$346;
      $354=(($346+24)|0);
      HEAP32[(($354)>>2)]=$R7_1;
      break;
     }
    }
   } while(0);
   $358=$213|1;
   $359=(($_0+4)|0);
   HEAP32[(($359)>>2)]=$358;
   $360=$_0;
   $361=(($360+$213)|0);
   $362=$361;
   HEAP32[(($362)>>2)]=$213;
   $363=((HEAP32[((55836)>>2)])|0);
   $364=($_0|0)==($363|0);
   if (!($364)) {
    $_1=$213;
    break;
   }
   HEAP32[((55824)>>2)]=$213;
   return;
  } else {
   $367=$186&-2;
   HEAP32[(($185)>>2)]=$367;
   $368=$_0277|1;
   $369=(($_0+4)|0);
   HEAP32[(($369)>>2)]=$368;
   $370=$_0;
   $371=(($370+$_0277)|0);
   $372=$371;
   HEAP32[(($372)>>2)]=$_0277;
   $_1=$_0277;
  }
 } while(0);
 $374=$_1>>>3;
 $375=($_1>>>0)<((256)>>>0);
 if ($375) {
  $377=$374<<1;
  $378=((55856+($377<<2))|0);
  $379=$378;
  $380=((HEAP32[((55816)>>2)])|0);
  $381=1<<$374;
  $382=$380&$381;
  $383=($382|0)==0;
  do {
   if ($383) {
    $385=$380|$381;
    HEAP32[((55816)>>2)]=$385;
    $_sum13_pre=((($377)+(2))|0);
    $_pre=((55856+($_sum13_pre<<2))|0);
    $F16_0=$379;$_pre_phi=$_pre;
   } else {
    $_sum14=((($377)+(2))|0);
    $387=((55856+($_sum14<<2))|0);
    $388=((HEAP32[(($387)>>2)])|0);
    $389=$388;
    $390=((HEAP32[((55832)>>2)])|0);
    $391=($389>>>0)<($390>>>0);
    if (!($391)) {
     $F16_0=$388;$_pre_phi=$387;
     break;
    }
    _abort();
   }
  } while(0);
  HEAP32[(($_pre_phi)>>2)]=$_0;
  $394=(($F16_0+12)|0);
  HEAP32[(($394)>>2)]=$_0;
  $395=(($_0+8)|0);
  HEAP32[(($395)>>2)]=$F16_0;
  $396=(($_0+12)|0);
  HEAP32[(($396)>>2)]=$379;
  return;
 }
 $398=$_0;
 $399=$_1>>>8;
 $400=($399|0)==0;
 do {
  if ($400) {
   $I19_0=0;
  } else {
   $402=($_1>>>0)>((16777215)>>>0);
   if ($402) {
    $I19_0=31;
    break;
   }
   $404=((($399)+(1048320))|0);
   $405=$404>>>16;
   $406=$405&8;
   $407=$399<<$406;
   $408=((($407)+(520192))|0);
   $409=$408>>>16;
   $410=$409&4;
   $411=$410|$406;
   $412=$407<<$410;
   $413=((($412)+(245760))|0);
   $414=$413>>>16;
   $415=$414&2;
   $416=$411|$415;
   $417=(((14)-($416))|0);
   $418=$412<<$415;
   $419=$418>>>15;
   $420=((($417)+($419))|0);
   $421=$420<<1;
   $422=((($420)+(7))|0);
   $423=$_1>>>($422>>>0);
   $424=$423&1;
   $425=$424|$421;
   $I19_0=$425;
  }
 } while(0);
 $427=((56120+($I19_0<<2))|0);
 $428=(($_0+28)|0);
 $I19_0_c=$I19_0;
 HEAP32[(($428)>>2)]=$I19_0_c;
 $429=(($_0+20)|0);
 HEAP32[(($429)>>2)]=0;
 $430=(($_0+16)|0);
 HEAP32[(($430)>>2)]=0;
 $431=((HEAP32[((55820)>>2)])|0);
 $432=1<<$I19_0;
 $433=$431&$432;
 $434=($433|0)==0;
 if ($434) {
  $436=$431|$432;
  HEAP32[((55820)>>2)]=$436;
  HEAP32[(($427)>>2)]=$398;
  $437=(($_0+24)|0);
  $_c=$427;
  HEAP32[(($437)>>2)]=$_c;
  $438=(($_0+12)|0);
  HEAP32[(($438)>>2)]=$_0;
  $439=(($_0+8)|0);
  HEAP32[(($439)>>2)]=$_0;
  return;
 }
 $441=((HEAP32[(($427)>>2)])|0);
 $442=($I19_0|0)==31;
 if ($442) {
  $447=0;
 } else {
  $444=$I19_0>>>1;
  $445=(((25)-($444))|0);
  $447=$445;
 }
 $448=$_1<<$447;
 $K20_0=$448;$T_0=$441;
 while(1) {
  $450=(($T_0+4)|0);
  $451=((HEAP32[(($450)>>2)])|0);
  $452=$451&-8;
  $453=($452|0)==($_1|0);
  if ($453) {
   break;
  }
  $455=$K20_0>>>31;
  $456=(($T_0+16+($455<<2))|0);
  $457=((HEAP32[(($456)>>2)])|0);
  $458=($457|0)==0;
  $459=$K20_0<<1;
  if ($458) {
   label = 1776;
   break;
  } else {
   $K20_0=$459;$T_0=$457;
  }
 }
 if ((label|0) == 1776) {
  $461=$456;
  $462=((HEAP32[((55832)>>2)])|0);
  $463=($461>>>0)<($462>>>0);
  if ($463) {
   _abort();
  }
  HEAP32[(($456)>>2)]=$398;
  $465=(($_0+24)|0);
  $T_0_c10=$T_0;
  HEAP32[(($465)>>2)]=$T_0_c10;
  $466=(($_0+12)|0);
  HEAP32[(($466)>>2)]=$_0;
  $467=(($_0+8)|0);
  HEAP32[(($467)>>2)]=$_0;
  return;
 }
 $470=(($T_0+8)|0);
 $471=((HEAP32[(($470)>>2)])|0);
 $472=$T_0;
 $473=((HEAP32[((55832)>>2)])|0);
 $474=($472>>>0)<($473>>>0);
 if ($474) {
  _abort();
 }
 $476=$471;
 $477=($476>>>0)<($473>>>0);
 if ($477) {
  _abort();
 }
 $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$398;
 HEAP32[(($470)>>2)]=$398;
 $480=(($_0+8)|0);
 $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 $481=(($_0+12)|0);
 $T_0_c=$T_0;
 HEAP32[(($481)>>2)]=$T_0_c;
 $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 return;
}
function __Znwj($size){
 $size=($size)|0;
 var $1=0,$_size=0,$3=0,$4=0,$6=0,$7=0,$9=0,$lpad_phi$0=0,$lpad_phi$1=0,$11=0,$12=0,$14=0,$16=0,$17=0,$lpad_loopexit$0=0,$lpad_loopexit$1=0,$lpad_nonloopexit$0=0,$lpad_nonloopexit$1=0,label=0;
 $1=($size|0)==0;
 $_size=($1?1:$size);
 while(1) {
  $3=((_malloc($_size))|0);
  $4=($3|0)==0;
  if (!($4)) {
   label = 1820;
   break;
  }
  $6=(tempValue=((HEAP32[((56288)>>2)])|0),HEAP32[((56288)>>2)]=((tempValue+0)|0),tempValue);
  $7=($6|0)==0;
  if ($7) {
   break;
  }
  $9=$6;
  FUNCTION_TABLE_v[($9)&3]();
 }
 if ((label|0) == 1820) {
  return (($3)|0);
 }
 $16=((___cxa_allocate_exception(((4)|0)))|0);
 $17=$16;
 HEAP32[(($17)>>2)]=12008;
 ___cxa_throw((($16)|0),((15808)|0),(((104))|0));
 return ((0)|0);
}
function __ZdlPv($ptr){
 $ptr=($ptr)|0;
 var $1=0,label=0;
 $1=($ptr|0)==0;
 if ($1) {
  return;
 }
 _free($ptr);
 return;
}
function __ZNSt9bad_allocD0Ev($this){
 $this=($this)|0;
 var $1=0,label=0;
 $1=$this;
 __ZdlPv($1);
 return;
}
function __ZNSt9bad_allocD2Ev($this){
 $this=($this)|0;
 var label=0;
 return;
}
function __ZNKSt9bad_alloc4whatEv($this){
 $this=($this)|0;
 var label=0;
 return ((3256)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memcmp(p1, p2, num) {
    p1 = p1|0; p2 = p2|0; num = num|0;
    var i = 0, v1 = 0, v2 = 0;
    while ((i|0) < (num|0)) {
      v1 = ((HEAPU8[(((p1)+(i))|0)])|0);
      v2 = ((HEAPU8[(((p2)+(i))|0)])|0);
      if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
      i = (i+1)|0;
    }
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
    } else {
      _memcpy(dest, src, num) | 0;
    }
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))|0)])|0);
      HEAP8[(((pdest)+(i))|0)]=curr
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))|0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
// EMSCRIPTEN_END_FUNCS
  function v____cxa_pure_virtual__wrapper() {  ; ___cxa_pure_virtual() }
  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
  }
  function dynCall_vid(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=+a2;
    FUNCTION_TABLE_vid[index&31](a1|0,+a2);
  }
  function dynCall_i(index) {
    index = index|0;
    return FUNCTION_TABLE_i[index&63]()|0;
  }
  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&255](a1|0);
  }
  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
  }
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
  }
  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&31](a1|0)|0;
  }
  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&15](a1|0,a2|0,a3|0);
  }
  function dynCall_v(index) {
    index = index|0;
    FUNCTION_TABLE_v[index&3]();
  }
  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&15](a1|0,a2|0,a3|0,a4|0)|0;
  }
  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }
  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
  }
  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
  }
function b0(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(0);  }
  function b1(p0,p1) { p0 = p0|0;p1 = +p1; abort(1);  }
  function b2() { ; abort(2); return 0 }
  function b3(p0) { p0 = p0|0; abort(3);  }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; abort(4);  }
  function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5); return 0 }
  function b6(p0) { p0 = p0|0; abort(6); return 0 }
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(7);  }
  function b8() { ; abort(8);  }
  function b9(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(9); return 0 }
  function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(10);  }
  function b11(p0,p1) { p0 = p0|0;p1 = p1|0; abort(11); return 0 }
  function b12(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(12);  }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_viiiii = [b0,b0,__ZN6Ay_Emu9set_voiceEiP11Blip_BufferS1_S1_,b0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,__ZN7Hes_Emu9set_voiceEiP11Blip_BufferS1_S1_,b0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,__ZN7Nsf_Emu9set_voiceEiP11Blip_BufferS1_S1_,b0,__ZN7Gbs_Emu9set_voiceEiP11Blip_BufferS1_S1_,b0,__ZN7Kss_Emu9set_voiceEiP11Blip_BufferS1_S1_,b0,__ZN7Sap_Emu9set_voiceEiP11Blip_BufferS1_S1_,b0,__ZN7Vgm_Emu9set_voiceEiP11Blip_BufferS1_S1_,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_vid = [b1,b1,__ZN7Vgm_Emu10set_tempo_Ed,b1,__ZN7Nsf_Emu10set_tempo_Ed,b1,__ZN7Spc_Emu10set_tempo_Ed,b1,__ZN9Gme_Info_10set_tempo_Ed,b1,__ZN7Gym_Emu10set_tempo_Ed,b1,__ZN6Ay_Emu10set_tempo_Ed,b1,__ZN7Hes_Emu10set_tempo_Ed,b1,__ZN7Kss_Emu10set_tempo_Ed,b1,__ZN7Gbs_Emu10set_tempo_Ed,b1,__ZN7Sap_Emu10set_tempo_Ed,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_i = [b2,b2,__ZL12new_gbs_filev,b2,__ZL12new_kss_filev,b2,__ZL11new_gbs_emuv,b2,__ZL10new_ay_emuv,b2,__ZL11new_hes_emuv,b2,__ZL13new_nsfe_filev,b2,__ZL11new_ay_filev,b2,__ZL12new_hes_filev,b2,__ZL12new_nsfe_emuv,b2,__ZL11new_gym_emuv,b2,__ZL11new_sap_emuv,b2,__ZL12new_gym_filev,b2,__ZL11new_vgm_emuv,b2,__ZL12new_vgm_filev
  ,b2,__ZL12new_spc_filev,b2,__ZL11new_spc_emuv,b2,__ZL12new_nsf_filev,b2,__ZL12new_sap_filev,b2,__ZL11new_kss_emuv,b2,__ZL11new_nsf_emuv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,b3,__ZN7Kss_EmuD2Ev,b3,__ZN13Subset_ReaderD0Ev,b3,__ZN8Nsfe_Emu6unloadEv,b3,__ZN8Spc_FileD1Ev,b3,__ZN8Vgm_FileD0Ev,b3,__ZN12Multi_BufferD0Ev,b3,__ZN8Nsfe_EmuD2Ev,b3,__ZN7Gbs_Emu6unloadEv,b3,__ZN7Gbs_EmuD2Ev,b3,__ZN8Sap_FileD1Ev,b3,__ZN7Kss_Emu6unloadEv,b3,__ZN9Gme_Info_8pre_loadEv,b3,__ZN7Nsf_EmuD0Ev,b3,__ZN9Music_EmuD2Ev
  ,b3,__ZN11Classic_EmuD2Ev,b3,__ZN14Effects_Buffer5clearEv,b3,__ZN7Hes_EmuD0Ev,b3,__ZN8Vgm_FileD1Ev,b3,__ZN15Mem_File_ReaderD0Ev,b3,__ZThn272_N7Vgm_EmuD1Ev,b3,__ZN7Nes_ApuC2Ev,b3,__ZThn256_N7Gym_EmuD0Ev,b3,__ZN8Gym_FileD0Ev,b3,__ZN14Effects_BufferD0Ev,b3,__ZN9Music_Emu10post_load_Ev,b3,__ZN11Blip_BufferD2Ev,b3,__ZN7Sms_ApuC2Ev,b3,__ZN8Gme_File15clear_playlist_Ev,b3,__ZN7Ay_FileD0Ev
  ,b3,__ZN7Vgm_EmuD0Ev,b3,__ZN12Vgm_Emu_ImplD0Ev,b3,__ZN7Hes_EmuD2Ev,b3,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,__ZN7Hes_Emu6unloadEv,b3,__ZN7Gbs_EmuD0Ev,b3,__ZN8Gme_FileD2Ev,b3,__ZN7Sap_ApuC2Ev,b3,__ZN9Gme_Info_D0Ev,b3,__ZN8Gym_FileD1Ev,b3,__ZN7Hes_ApuC2Ev,b3,__ZN7Nsf_Emu6unloadEv,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,__ZThn272_N12Vgm_Emu_ImplD0Ev,b3,__ZN8Nsfe_Emu15clear_playlist_Ev
  ,b3,__ZN8Spc_FileD0Ev,b3,__ZN8Hes_FileD1Ev,b3,__ZN13Subset_ReaderD1Ev,b3,__ZN7Sms_ApuD2Ev,b3,__ZN8Gme_FileD0Ev,b3,__ZN11File_ReaderD0Ev,b3,__ZN7Sap_EmuD2Ev,b3,__ZNSt9bad_allocD2Ev,b3,__ZThn272_N7Vgm_EmuD0Ev,b3,__ZN15Std_File_ReaderD2Ev,b3,__ZThn256_N7Gym_EmuD1Ev,b3,__ZN8Gme_File10post_load_Ev,b3,__ZN9Nsfe_FileD1Ev,b3,__ZN13Nes_Namco_ApuC2Ev,b3,__ZN8Nsf_FileD1Ev
  ,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,__ZN8Kss_FileD1Ev,b3,__ZN7Spc_EmuD2Ev,b3,__ZN11Data_ReaderD1Ev,b3,__ZN14Effects_BufferD2Ev,b3,__ZN7Nsf_EmuD2Ev,b3,__ZN7Ay_FileD1Ev,b3,__ZN16Remaining_ReaderD0Ev,b3,__ZN9Gme_Info_D1Ev,b3,__ZThn272_N12Vgm_Emu_ImplD1Ev,b3,__ZN8Nsfe_EmuD0Ev,b3,__ZN11Blip_BufferC2Ev,b3,__ZN9Nsfe_FileD0Ev,b3,__ZN15Mem_File_ReaderD1Ev,b3,__ZN12Nes_Vrc6_ApuC2Ev
  ,b3,__ZN13Stereo_Buffer5clearEv,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,b3,__ZN11Classic_EmuD0Ev,b3,__ZN9Music_EmuD0Ev,b3,__ZN8Nsf_FileD0Ev,b3,__ZN7Gym_EmuD2Ev,b3,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,b3,__ZN11File_ReaderD1Ev,b3,__ZN7Vgm_EmuD2Ev,b3,__ZN13Stereo_BufferD0Ev,b3,__ZN9Music_Emu6unloadEv,b3,__ZN7Sap_EmuD0Ev,b3,__ZN7Kss_EmuD0Ev,b3,__ZN8Kss_FileD0Ev,b3,__ZN6Ay_ApuC2Ev
  ,b3,__ZN14Dual_ResamplerD0Ev,b3,__ZN9Gme_Info_10post_load_Ev,b3,__ZN11Data_ReaderD0Ev,b3,__ZN9Music_Emu8pre_loadEv,b3,__ZN7Spc_EmuD0Ev,b3,__ZN12Sap_Apu_ImplC2Ev,b3,__ZN8Gme_File6unloadEv,b3,__ZN6Gb_ApuC2Ev,b3,__ZN6Ay_EmuD0Ev,b3,__ZN15Std_File_ReaderC2Ev,b3,__ZN8Gbs_FileD1Ev,b3,__ZNSt9bad_allocD0Ev,b3,__ZN16Remaining_ReaderD1Ev,b3,__ZN14Dual_ResamplerD2Ev,b3,__ZN10__cxxabiv117__class_type_infoD0Ev
  ,b3,__ZN10Ym2612_EmuD2Ev,b3,__ZN8Hes_FileD0Ev,b3,__ZN12Multi_BufferD1Ev,b3,__ZN8Snes_SpcC2Ev,b3,__ZN15Std_File_ReaderD0Ev,b3,__ZN7Gym_EmuD0Ev,b3,__ZN13Stereo_BufferC2Ev,b3,__ZN8Gme_File8pre_loadEv,b3,__ZN13Stereo_BufferD2Ev,b3,__ZN6Ay_EmuD2Ev,b3,__ZN8Gbs_FileD0Ev,b3,__ZN8Sap_FileD0Ev,b3,__ZN12Vgm_Emu_ImplD1Ev,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,__ZN9Gme_Info_12mute_voices_Ei,b4,__ZN7Gbs_Emu9update_eqERK9blip_eq_t,b4,__ZN7Vgm_Emu12mute_voices_Ei,b4,__ZN7Nsf_Emu9update_eqERK9blip_eq_t,b4,__ZN7Sap_Emu9update_eqERK9blip_eq_t,b4,__ZN13Stereo_Buffer9end_frameEi,b4,__ZN11Classic_Emu14set_equalizer_ERK15gme_equalizer_t,b4,__ZN13Stereo_Buffer9bass_freqEi,b4,__ZN7Hes_Emu9update_eqERK9blip_eq_t,b4,__ZN13Stereo_Buffer10clock_rateEl,b4,__ZN7Vgm_Emu9update_eqERK9blip_eq_t,b4,__ZN6Ay_Emu9update_eqERK9blip_eq_t,b4,__ZN14Effects_Buffer6configERKNS_8config_tE,b4,__ZN14Effects_Buffer9bass_freqEi
  ,b4,__ZN7Gym_Emu12mute_voices_Ei,b4,__ZN14Effects_Buffer9end_frameEi,b4,__ZN14Effects_Buffer10clock_rateEl,b4,__ZN14Effects_BufferC2Eb,b4,__ZN11Classic_Emu12mute_voices_Ei,b4,__ZN9Music_Emu10set_bufferEP12Multi_Buffer,b4,__ZN7Kss_Emu9update_eqERK9blip_eq_t,b4,__ZN9Music_Emu14set_equalizer_ERK15gme_equalizer_t,b4,__ZN7Spc_DspC2EPh,b4,__ZN9Gme_Info_14set_equalizer_ERK15gme_equalizer_t,b4,__ZN7Spc_Emu12mute_voices_Ei,b4,__ZN11Classic_Emu10set_bufferEP12Multi_Buffer,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiii = [b5,b5,__ZNK8Nsfe_Emu11track_info_EP12track_info_ti,b5,__ZN16Remaining_Reader4readEPvl,b5,__ZNK8Nsf_File11track_info_EP12track_info_ti,b5,__ZN7Hes_Emu10run_clocksERii,b5,__ZN7Spc_Emu9load_mem_EPKhl,b5,__ZNK8Sap_File11track_info_EP12track_info_ti,b5,__ZN7Nsf_Emu10run_clocksERii,b5,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b5,__ZN7Sap_Emu10run_clocksERii,b5,__ZNK7Kss_Emu11track_info_EP12track_info_ti,b5,__ZN6Ay_Emu9load_mem_EPKhl,b5,__ZNK8Vgm_File11track_info_EP12track_info_ti,b5,__ZNK7Gym_Emu11track_info_EP12track_info_ti,b5,__ZNK8Hes_File11track_info_EP12track_info_ti
  ,b5,__ZNK7Gbs_Emu11track_info_EP12track_info_ti,b5,__ZN7Sap_Emu9load_mem_EPKhl,b5,__ZN7Spc_Emu5play_ElPs,b5,__ZN7Vgm_Emu5play_ElPs,b5,__ZN14Effects_Buffer12read_samplesEPsl,b5,__ZN8Gym_File9load_mem_EPKhl,b5,__ZN8Gme_File9load_mem_EPKhl,b5,__ZN11Classic_Emu5play_ElPs,b5,__ZN13Stereo_Buffer12read_samplesEPsl,b5,__ZNK7Vgm_Emu11track_info_EP12track_info_ti,b5,__ZN9Gme_Info_5play_ElPs,b5,__ZNK7Hes_Emu11track_info_EP12track_info_ti,b5,__ZN6Ay_Emu10run_clocksERii,b5,__ZNK8Kss_File11track_info_EP12track_info_ti,b5,__ZN7Gbs_Emu10run_clocksERii
  ,b5,__ZN13Subset_Reader10read_availEPvl,b5,__ZNK7Nsf_Emu11track_info_EP12track_info_ti,b5,__ZNK8Gbs_File11track_info_EP12track_info_ti,b5,__ZN7Ay_File9load_mem_EPKhl,b5,__ZN14Effects_Buffer15set_sample_rateEli,b5,__ZNK6Ay_Emu11track_info_EP12track_info_ti,b5,__ZN15Std_File_Reader4readEPvl,b5,__ZN16Remaining_Reader10read_availEPvl,b5,__ZN7Gym_Emu9load_mem_EPKhl,b5,__ZN7Vgm_Emu10run_clocksERii,b5,__ZNK7Sap_Emu11track_info_EP12track_info_ti,b5,__ZN13Stereo_Buffer15set_sample_rateEli,b5,__ZNK7Ay_File11track_info_EP12track_info_ti,b5,__ZN7Vgm_Emu9load_mem_EPKhl,b5,__ZNK8Spc_File11track_info_EP12track_info_ti
  ,b5,__ZNK8Gym_File11track_info_EP12track_info_ti,b5,__ZN11Data_Reader4readEPvl,b5,__ZN8Sap_File9load_mem_EPKhl,b5,__ZNK7Spc_Emu11track_info_EP12track_info_ti,b5,__ZN15Std_File_Reader10read_availEPvl,b5,__ZN7Kss_Emu10run_clocksERii,b5,__ZN15Mem_File_Reader10read_availEPvl,b5,__ZN7Gym_Emu5play_ElPs,b5,__ZNK9Nsfe_File11track_info_EP12track_info_ti,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_ii = [b6,b6,__ZNK15Mem_File_Reader4tellEv,b6,__ZNK13Stereo_Buffer13samples_availEv,b6,__ZNKSt9bad_alloc4whatEv,b6,__ZNK16Remaining_Reader6remainEv,b6,__ZNK15Std_File_Reader4tellEv,b6,__ZNK14Effects_Buffer13samples_availEv,b6,__ZNK15Mem_File_Reader4sizeEv,b6,__ZNK11File_Reader6remainEv,b6,__ZNK15Std_File_Reader4sizeEv,b6,__ZNK13Subset_Reader6remainEv,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6];
  var FUNCTION_TABLE_viii = [b7,b7,__ZN13Subset_ReaderC2EP11Data_Readerl,b7,__ZN11Blip_Synth_C2EPsi,b7,__ZN15Mem_File_ReaderC2EPKvl,b7,__ZN7Spc_CpuC2EP8Snes_SpcPh,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_v = [b8,b8,v____cxa_pure_virtual__wrapper,b8];
  var FUNCTION_TABLE_iiiii = [b9,b9,__ZThn256_N7Gym_Emu10play_frameEiiPs,b9,__ZN12Vgm_Emu_Impl10play_frameEiiPs,b9,__ZThn272_N12Vgm_Emu_Impl10play_frameEiiPs,b9,__ZN7Gym_Emu10play_frameEiiPs,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiii = [b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10];
  var FUNCTION_TABLE_iii = [b11,b11,__ZN6Ay_Emu12start_track_Ei,b11,__ZN7Kss_Emu5load_ER11Data_Reader,b11,__ZN15Std_File_Reader4seekEl,b11,__ZN8Nsfe_Emu5load_ER11Data_Reader,b11,__ZN8Gme_File5load_ER11Data_Reader,b11,__ZN7Spc_Emu12start_track_Ei,b11,__ZN8Hes_File5load_ER11Data_Reader,b11,__ZN7Vgm_Emu16set_sample_rate_El,b11,__ZN8Spc_File5load_ER11Data_Reader,b11,__ZN8Vgm_File5load_ER11Data_Reader,b11,__ZN7Nsf_Emu5load_ER11Data_Reader,b11,__ZN11Data_Reader4skipEl,b11,__ZN7Gym_Emu12start_track_Ei,b11,__ZN7Vgm_Emu12start_track_Ei
  ,b11,__ZN8Gbs_File5load_ER11Data_Reader,b11,__ZN7Hes_Emu5load_ER11Data_Reader,b11,__ZN7Spc_Emu16set_sample_rate_El,b11,__ZN7Gbs_Emu5load_ER11Data_Reader,b11,__ZN12Multi_Buffer17set_channel_countEi,b11,__ZN8Nsf_File5load_ER11Data_Reader,b11,__ZN9Music_Emu5skip_El,b11,__ZN7Gym_Emu16set_sample_rate_El,b11,__ZN7Sap_Emu12start_track_Ei,b11,__ZN11Classic_Emu16set_sample_rate_El,b11,__ZN7Hes_Emu12start_track_Ei,b11,__ZN8Nsfe_Emu12start_track_Ei,b11,__ZN9Nsfe_File5load_ER11Data_Reader,b11,__ZN9Gme_Info_16set_sample_rate_El,b11,__ZN15Mem_File_Reader4seekEl
  ,b11,__ZN7Spc_Emu5skip_El,b11,__ZN7Gbs_Emu12start_track_Ei,b11,__ZN11File_Reader4skipEl,b11,__ZN7Kss_Emu12start_track_Ei,b11,__ZN7Nsf_Emu12start_track_Ei,b11,__ZN7Nsf_Emu8pcm_readEPvj,b11,__ZN8Kss_File5load_ER11Data_Reader,b11,__ZN9Gme_Info_12start_track_Ei,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_viiii = [b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,__ZN13Stereo_Buffer7channelEii,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,__ZN16Remaining_ReaderC2EPKvlP11Data_Reader,b12,__ZN18ym2612_update_chanILi6EE4funcER8tables_tR9channel_tPsi,b12,__ZN18ym2612_update_chanILi5EE4funcER8tables_tR9channel_tPsi,b12,__ZN14Effects_Buffer7channelEii,b12,__ZN18ym2612_update_chanILi3EE4funcER8tables_tR9channel_tPsi,b12,__ZN18ym2612_update_chanILi1EE4funcER8tables_tR9channel_tPsi,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,__ZN18ym2612_update_chanILi4EE4funcER8tables_tR9channel_tPsi,b12,__ZN18ym2612_update_chanILi0EE4funcER8tables_tR9channel_tPsi,b12,__ZN18ym2612_update_chanILi2EE4funcER8tables_tR9channel_tPsi,b12,__ZN18ym2612_update_chanILi7EE4funcER8tables_tR9channel_tPsi
  ,b12,b12,b12];
  return { _memcmp: _memcmp, _strlen: _strlen, _free: _free, _realloc: _realloc, _strncpy: _strncpy, _memmove: _memmove, _meat_song_info: _meat_song_info, _meat_start_track: _meat_start_track, _memset: _memset, _malloc: _malloc, _meat_generate_sound_data: _meat_generate_sound_data, _memcpy: _memcpy, _meat_open_file: _meat_open_file, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiii: dynCall_iiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiii": invoke_iiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_strncmp": _strncmp, "_lseek": _lseek, "_feof": _feof, "___assert_fail": ___assert_fail, "_fgetc": _fgetc, "___cxa_throw": ___cxa_throw, "_fread": _fread, "_fclose": _fclose, "___cxa_pure_virtual": ___cxa_pure_virtual, "_fprintf": _fprintf, "_llvm_eh_exception": _llvm_eh_exception, "_toupper": _toupper, "_printf": _printf, "_close": _close, "_pread": _pread, "_fflush": _fflush, "_fopen": _fopen, "__reallyNegative": __reallyNegative, "_getchar": _getchar, "_snprintf": _snprintf, "_open": _open, "_floor": _floor, "___setErrNo": ___setErrNo, "_fwrite": _fwrite, "_fseek": _fseek, "_send": _send, "_write": _write, "_ftell": _ftell, "_exit": _exit, "_sprintf": _sprintf, "_strrchr": _strrchr, "_fabs": _fabs, "_sin": _sin, "_sysconf": _sysconf, "_read": _read, "___cxa_is_number_type": ___cxa_is_number_type, "___cxa_allocate_exception": ___cxa_allocate_exception, "__formatString": __formatString, "___cxa_does_inherit": ___cxa_does_inherit, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_recv": _recv, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_cos": _cos, "_pwrite": _pwrite, "_llvm_pow_f64": _llvm_pow_f64, "_fsync": _fsync, "_log10": _log10, "___errno_location": ___errno_location, "___gxx_personality_v0": ___gxx_personality_v0, "___cxa_call_unexpected": ___cxa_call_unexpected, "_abort": _abort, "_sbrk": _sbrk, "_fmod": _fmod, "_time": _time, "__exit": __exit, "___resumeException": ___resumeException, "_strcmp": _strcmp, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "__ZTVN10__cxxabiv117__class_type_infoE": __ZTVN10__cxxabiv117__class_type_infoE, "__ZTVN10__cxxabiv120__si_class_type_infoE": __ZTVN10__cxxabiv120__si_class_type_infoE }, buffer);
var _memcmp = Module["_memcmp"] = asm["_memcmp"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _meat_song_info = Module["_meat_song_info"] = asm["_meat_song_info"];
var _meat_start_track = Module["_meat_start_track"] = asm["_meat_start_track"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _meat_generate_sound_data = Module["_meat_generate_sound_data"] = asm["_meat_generate_sound_data"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _meat_open_file = Module["_meat_open_file"] = asm["_meat_open_file"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
// === Auto-generated postamble setup entry stuff ===
if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}
Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  initialStackTop = STACKTOP;
  try {
    var ret = Module['_main'](argc, argv, 0);
    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}
function run(args) {
  args = args || Module['arguments'];
  if (preloadStartTime === null) preloadStartTime = Date.now();
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }
  preRun();
  if (runDependencies > 0) {
    // a preRun added a dependency, run will be called later
    return;
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    Module['calledRun'] = true;
    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }
    postRun();
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;
function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  // exit the runtime
  exitRuntime();
  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371
  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;
function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }
  ABORT = true;
  EXITSTATUS = 1;
  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
// {{MODULE_ADDITIONS}}
